
test_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049dc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004aec  08004aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  0000603c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b18  08004b18  0000603c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b18  08004b18  0000603c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08004b20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000003c  08004b5c  0000603c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004b5c  00006218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebeb  00000000  00000000  00006065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea4  00000000  00000000  00014c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00016af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf5  00000000  00000000  000179f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cc8  00000000  00000000  000185ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011842  00000000  00000000  000302b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cdb6  00000000  00000000  00041af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce8ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  000ce8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d2bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000003c 	.word	0x2000003c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ad4 	.word	0x08004ad4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000040 	.word	0x20000040
 800014c:	08004ad4 	.word	0x08004ad4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	//------------
	if (htim->Instance==htim2.Instance)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b7c      	ldr	r3, [pc, #496]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d16f      	bne.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0xf4>
	{

		if (HOME == 1){
 8000fe4:	4b7b      	ldr	r3, [pc, #492]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d16b      	bne.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0xf4>
			g+=1;
 8000fec:	4b7a      	ldr	r3, [pc, #488]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fcf7 	bl	80009e8 <__addsf3>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b76      	ldr	r3, [pc, #472]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001000:	601a      	str	r2, [r3, #0]

			if (g > 47000){
 8001002:	4b75      	ldr	r3, [pc, #468]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4975      	ldr	r1, [pc, #468]	@ (80011dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffb1 	bl	8000f70 <__aeabi_fcmpgt>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_TIM_PeriodElapsedCallback+0x4c>
				g = 0;
 8001014:	4b70      	ldr	r3, [pc, #448]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
			}

			if(1){
				target_angle_1 = rx_angle1;
 800101c:	4b70      	ldr	r3, [pc, #448]	@ (80011e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a70      	ldr	r2, [pc, #448]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001022:	6013      	str	r3, [r2, #0]
				target_angle_2 = rx_angle2;
 8001024:	4b70      	ldr	r3, [pc, #448]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a70      	ldr	r2, [pc, #448]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800102a:	6013      	str	r3, [r2, #0]
				target_angle_3 = rx_angle3;
 800102c:	4b70      	ldr	r3, [pc, #448]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a70      	ldr	r2, [pc, #448]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001032:	6013      	str	r3, [r2, #0]
			}

			if ((target_angle_1 != target_angle_1_temp)||(target_angle_2 != target_angle_2_temp)||(target_angle_3 != target_angle_3_temp)){
 8001034:	4b6b      	ldr	r3, [pc, #428]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a6f      	ldr	r2, [pc, #444]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff6e 	bl	8000f20 <__aeabi_fcmpeq>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_TIM_PeriodElapsedCallback+0xa6>
 800104a:	4b68      	ldr	r3, [pc, #416]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a6b      	ldr	r2, [pc, #428]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff63 	bl	8000f20 <__aeabi_fcmpeq>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00a      	beq.n	8001076 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001060:	4b64      	ldr	r3, [pc, #400]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a66      	ldr	r2, [pc, #408]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff58 	bl	8000f20 <__aeabi_fcmpeq>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11d      	bne.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0xe2>

				target_angle_1_temp = target_angle_1;
 8001076:	4b5b      	ldr	r3, [pc, #364]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a5f      	ldr	r2, [pc, #380]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800107c:	6013      	str	r3, [r2, #0]
				target_angle_2_temp = target_angle_2;
 800107e:	4b5b      	ldr	r3, [pc, #364]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a5e      	ldr	r2, [pc, #376]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001084:	6013      	str	r3, [r2, #0]
				target_angle_3_temp = target_angle_3;
 8001086:	4b5b      	ldr	r3, [pc, #364]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a5d      	ldr	r2, [pc, #372]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800108c:	6013      	str	r3, [r2, #0]
				countPulseL1 = 0;
 800108e:	4b5d      	ldr	r3, [pc, #372]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
				countPulseL2 = 0;
 8001094:	4b5c      	ldr	r3, [pc, #368]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
				countPulseL3 = 0;
 800109a:	4b5c      	ldr	r3, [pc, #368]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

				angleControl(target_angle_1,target_angle_2,target_angle_3);
 80010a0:	4b50      	ldr	r3, [pc, #320]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a51      	ldr	r2, [pc, #324]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80010a6:	6811      	ldr	r1, [r2, #0]
 80010a8:	4a52      	ldr	r2, [pc, #328]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f9b7 	bl	8001420 <angleControl>

			}
			//angle3 = - angle2+ angle3;
			angleControl(target_angle_1,target_angle_2,target_angle_3);
 80010b2:	4b4c      	ldr	r3, [pc, #304]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a4d      	ldr	r2, [pc, #308]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80010b8:	6811      	ldr	r1, [r2, #0]
 80010ba:	4a4e      	ldr	r2, [pc, #312]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f9ae 	bl	8001420 <angleControl>

		}
	}

	if (htim->Instance == htim3.Instance)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b51      	ldr	r3, [pc, #324]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d17a      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x1f6>
	{  // Ensure the correct timer is being checked
		// Handle Motor 1
		if (countPulseL1 > 0) {
 80010d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dd1f      	ble.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x148>
			softCounter1++;  // Increment soft counter for motor 1
 80010d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a4d      	ldr	r2, [pc, #308]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010e0:	6013      	str	r3, [r2, #0]
			if (softCounter1 >= periodMotor1) {  // If soft counter reaches the desired period
 80010e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	db19      	blt.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x152>
				HAL_GPIO_TogglePin(GPIOA, PUL1_Pin);  // Toggle Motor 1 pin (generate pulse)
 80010ee:	2120      	movs	r1, #32
 80010f0:	484a      	ldr	r0, [pc, #296]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80010f2:	f001 fcfa 	bl	8002aea <HAL_GPIO_TogglePin>
				softCounter1 = 0;  // Reset the soft counter for motor 1
 80010f6:	4b47      	ldr	r3, [pc, #284]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
				countPulseL1--;    // Decrement the pulse count
 80010fc:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	4a40      	ldr	r2, [pc, #256]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001104:	6013      	str	r3, [r2, #0]
				//e = 360/(44800*2);
				update_current_angle(1,1.0,dir1);
 8001106:	4b46      	ldr	r3, [pc, #280]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001110:	2001      	movs	r0, #1
 8001112:	f000 f895 	bl	8001240 <update_current_angle>
 8001116:	e004      	b.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x152>
			}
		} else {
			HAL_GPIO_WritePin(GPIOA, PUL1_Pin, GPIO_PIN_RESET);  // Stop Motor 1
 8001118:	2200      	movs	r2, #0
 800111a:	2120      	movs	r1, #32
 800111c:	483f      	ldr	r0, [pc, #252]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800111e:	f001 fccc 	bl	8002aba <HAL_GPIO_WritePin>
		}

		// Handle Motor 2
		if (countPulseL2 > 0) {
 8001122:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	dd1f      	ble.n	800116a <HAL_TIM_PeriodElapsedCallback+0x19a>
			softCounter2++;  // Increment soft counter for motor 2
 800112a:	4b3e      	ldr	r3, [pc, #248]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a3c      	ldr	r2, [pc, #240]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001132:	6013      	str	r3, [r2, #0]
			if (softCounter2 >= periodMotor2) {  // If soft counter reaches the desired period
 8001134:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b3b      	ldr	r3, [pc, #236]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	db19      	blt.n	8001174 <HAL_TIM_PeriodElapsedCallback+0x1a4>
				HAL_GPIO_TogglePin(GPIOA, PUL2_Pin);  // Toggle Motor 2 pin (generate pulse)
 8001140:	2108      	movs	r1, #8
 8001142:	4836      	ldr	r0, [pc, #216]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001144:	f001 fcd1 	bl	8002aea <HAL_GPIO_TogglePin>
				softCounter2 = 0;  // Reset the soft counter for motor 2
 8001148:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
				countPulseL2--;    // Decrement the pulse count
 800114e:	4b2e      	ldr	r3, [pc, #184]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3b01      	subs	r3, #1
 8001154:	4a2c      	ldr	r2, [pc, #176]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001156:	6013      	str	r3, [r2, #0]
				update_current_angle(2,1.0,dir2);
 8001158:	4b34      	ldr	r3, [pc, #208]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001162:	2002      	movs	r0, #2
 8001164:	f000 f86c 	bl	8001240 <update_current_angle>
 8001168:	e004      	b.n	8001174 <HAL_TIM_PeriodElapsedCallback+0x1a4>

			}
		} else {
			HAL_GPIO_WritePin(GPIOA, PUL2_Pin, GPIO_PIN_RESET);  // Stop Motor 2
 800116a:	2200      	movs	r2, #0
 800116c:	2108      	movs	r1, #8
 800116e:	482b      	ldr	r0, [pc, #172]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001170:	f001 fca3 	bl	8002aba <HAL_GPIO_WritePin>
		}

		// Handle Motor 3
		if (countPulseL3 > 0) {
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd1f      	ble.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x1ec>
			softCounter3++;  // Increment soft counter for motor 3
 800117c:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a2b      	ldr	r2, [pc, #172]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001184:	6013      	str	r3, [r2, #0]
			if (softCounter3 >= periodMotor3) {  // If soft counter reaches the desired period
 8001186:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	db19      	blt.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x1f6>
				HAL_GPIO_TogglePin(GPIOA, PUL3_Pin);  // Toggle Motor 3 pin (generate pulse)
 8001192:	2102      	movs	r1, #2
 8001194:	4821      	ldr	r0, [pc, #132]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001196:	f001 fca8 	bl	8002aea <HAL_GPIO_TogglePin>
				softCounter3 = 0;  // Reset the soft counter for motor 3
 800119a:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
				countPulseL3--;    // Decrement the pulse count
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011a8:	6013      	str	r3, [r2, #0]
				update_current_angle(3,1.0, dir3);
 80011aa:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f843 	bl	8001240 <update_current_angle>
			}
		} else {
			HAL_GPIO_WritePin(GPIOA, PUL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
		}
	}
}
 80011ba:	e004      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			HAL_GPIO_WritePin(GPIOA, PUL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	4816      	ldr	r0, [pc, #88]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80011c2:	f001 fc7a 	bl	8002aba <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000ac 	.word	0x200000ac
 80011d4:	20000194 	.word	0x20000194
 80011d8:	200001b0 	.word	0x200001b0
 80011dc:	47379800 	.word	0x47379800
 80011e0:	20000204 	.word	0x20000204
 80011e4:	200001e0 	.word	0x200001e0
 80011e8:	20000208 	.word	0x20000208
 80011ec:	200001e4 	.word	0x200001e4
 80011f0:	2000020c 	.word	0x2000020c
 80011f4:	200001e8 	.word	0x200001e8
 80011f8:	20000004 	.word	0x20000004
 80011fc:	20000008 	.word	0x20000008
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000198 	.word	0x20000198
 8001208:	2000019c 	.word	0x2000019c
 800120c:	200001a0 	.word	0x200001a0
 8001210:	200000f4 	.word	0x200000f4
 8001214:	200001c8 	.word	0x200001c8
 8001218:	200001d4 	.word	0x200001d4
 800121c:	40010800 	.word	0x40010800
 8001220:	200001bc 	.word	0x200001bc
 8001224:	200001cc 	.word	0x200001cc
 8001228:	200001d8 	.word	0x200001d8
 800122c:	200001c0 	.word	0x200001c0
 8001230:	200001d0 	.word	0x200001d0
 8001234:	200001dc 	.word	0x200001dc
 8001238:	20000000 	.word	0x20000000
 800123c:	00000000 	.word	0x00000000

08001240 <update_current_angle>:
void Mag_Control(int state)
{
	HAL_GPIO_WritePin(GPIOA, RELAY_Pin, state);
}

void update_current_angle(int motor_index, float steps, int direction) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
    float angle_change = steps * 360.0 / (43840.0 * 2.0); // Calculate the change in angle
 800124c:	68b8      	ldr	r0, [r7, #8]
 800124e:	f7ff f8e3 	bl	8000418 <__aeabi_f2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <update_current_angle+0xd0>)
 8001258:	f7ff f936 	bl	80004c8 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	a328      	add	r3, pc, #160	@ (adr r3, 8001308 <update_current_angle+0xc8>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff fa57 	bl	800071c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fb61 	bl	800093c <__aeabi_d2f>
 800127a:	4603      	mov	r3, r0
 800127c:	617b      	str	r3, [r7, #20]

    // If direction is negative, reverse the angle change
    if (direction < 0) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	da03      	bge.n	800128c <update_current_angle+0x4c>
        angle_change = -angle_change;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800128a:	617b      	str	r3, [r7, #20]
    }

    switch (motor_index){
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d029      	beq.n	80012e6 <update_current_angle+0xa6>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b03      	cmp	r3, #3
 8001296:	dc31      	bgt.n	80012fc <update_current_angle+0xbc>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d003      	beq.n	80012a6 <update_current_angle+0x66>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d00b      	beq.n	80012bc <update_current_angle+0x7c>
            break;
        case 3:
            angle3 += angle_change; // Update current angle for motor 3
            break;
    }
}
 80012a4:	e02a      	b.n	80012fc <update_current_angle+0xbc>
            angle1 += angle_change; // Update current angle for motor 1
 80012a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <update_current_angle+0xd4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6979      	ldr	r1, [r7, #20]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fb9b 	bl	80009e8 <__addsf3>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <update_current_angle+0xd4>)
 80012b8:	601a      	str	r2, [r3, #0]
            break;
 80012ba:	e01f      	b.n	80012fc <update_current_angle+0xbc>
            angle2 += angle_change; // Update current angle for motor 2
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <update_current_angle+0xd8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6979      	ldr	r1, [r7, #20]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb90 	bl	80009e8 <__addsf3>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <update_current_angle+0xd8>)
 80012ce:	601a      	str	r2, [r3, #0]
            angle3 -= angle_change;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <update_current_angle+0xdc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6979      	ldr	r1, [r7, #20]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb84 	bl	80009e4 <__aeabi_fsub>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <update_current_angle+0xdc>)
 80012e2:	601a      	str	r2, [r3, #0]
            break;
 80012e4:	e00a      	b.n	80012fc <update_current_angle+0xbc>
            angle3 += angle_change; // Update current angle for motor 3
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <update_current_angle+0xdc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6979      	ldr	r1, [r7, #20]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fb7b 	bl	80009e8 <__addsf3>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <update_current_angle+0xdc>)
 80012f8:	601a      	str	r2, [r3, #0]
            break;
 80012fa:	bf00      	nop
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	f3af 8000 	nop.w
 8001308:	00000000 	.word	0x00000000
 800130c:	40f56800 	.word	0x40f56800
 8001310:	40768000 	.word	0x40768000
 8001314:	20000184 	.word	0x20000184
 8001318:	20000188 	.word	0x20000188
 800131c:	2000018c 	.word	0x2000018c

08001320 <calculate_steps>:

int calculate_steps(float current_angle, float target_angle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    // Calculate the angular difference

    float angular_difference ;
    float temp;

    temp = target_angle - current_angle;
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff fb59 	bl	80009e4 <__aeabi_fsub>
 8001332:	4603      	mov	r3, r0
 8001334:	613b      	str	r3, [r7, #16]
    if (temp > 0){
 8001336:	f04f 0100 	mov.w	r1, #0
 800133a:	6938      	ldr	r0, [r7, #16]
 800133c:	f7ff fe18 	bl	8000f70 <__aeabi_fcmpgt>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d004      	beq.n	8001350 <calculate_steps+0x30>
    	i = 1;
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <calculate_steps+0xb8>)
 8001348:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e002      	b.n	8001356 <calculate_steps+0x36>
    }else{
    	i = -1;
 8001350:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <calculate_steps+0xb8>)
 8001352:	4a22      	ldr	r2, [pc, #136]	@ (80013dc <calculate_steps+0xbc>)
 8001354:	601a      	str	r2, [r3, #0]
    }
	if (fabs(temp) == 0){
 8001356:	f04f 0100 	mov.w	r1, #0
 800135a:	6938      	ldr	r0, [r7, #16]
 800135c:	f7ff fde0 	bl	8000f20 <__aeabi_fcmpeq>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <calculate_steps+0x4e>
		angular_difference = 0;
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e005      	b.n	800137a <calculate_steps+0x5a>
	}else{
		angular_difference = (target_angle) - current_angle;
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f7ff fb37 	bl	80009e4 <__aeabi_fsub>
 8001376:	4603      	mov	r3, r0
 8001378:	617b      	str	r3, [r7, #20]
	}


    // Convert angular difference to steps
	int steps_needed = (((angular_difference) / 360.0) * 43840.0 * 2.0);
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff f84c 	bl	8000418 <__aeabi_f2d>
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <calculate_steps+0xc0>)
 8001386:	f7ff f9c9 	bl	800071c <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	a30f      	add	r3, pc, #60	@ (adr r3, 80013d0 <calculate_steps+0xb0>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f896 	bl	80004c8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	f7fe fed8 	bl	800015c <__adddf3>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fa9a 	bl	80008ec <__aeabi_d2iz>
 80013b8:	4603      	mov	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]
	d = (int)round((0.98 / 360.0) * 43840 * 2.0);
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <calculate_steps+0xc4>)
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <calculate_steps+0xc8>)
 80013c0:	601a      	str	r2, [r3, #0]
    // Return the absolute number of steps (stepper motors can't move negative steps)
    return steps_needed;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	f3af 8000 	nop.w
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40e56800 	.word	0x40e56800
 80013d8:	200001b8 	.word	0x200001b8
 80013dc:	bf800000 	.word	0xbf800000
 80013e0:	40768000 	.word	0x40768000
 80013e4:	200001a8 	.word	0x200001a8
 80013e8:	436f0000 	.word	0x436f0000

080013ec <maxSteps>:

int maxSteps(int steps_motor_1, int steps_motor_2, int steps_motor_3)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
    int max_value = steps_motor_1;  // Assume motor 1 has the maximum steps
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	617b      	str	r3, [r7, #20]

    if (steps_motor_2 > max_value) {
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	dd01      	ble.n	8001408 <maxSteps+0x1c>
        max_value = steps_motor_2;  // Update if motor 2 has more steps
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	617b      	str	r3, [r7, #20]
    }

    if (steps_motor_3 > max_value) {
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	dd01      	ble.n	8001414 <maxSteps+0x28>
        max_value = steps_motor_3;  // Update if motor 3 has more steps
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	617b      	str	r3, [r7, #20]
    }

    return max_value;  // Return the largest number of steps
 8001414:	697b      	ldr	r3, [r7, #20]
}
 8001416:	4618      	mov	r0, r3
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <angleControl>:


void angleControl(float target_angle_1, float target_angle_2, float target_angle_3) {
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b089      	sub	sp, #36	@ 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	// Read the current angles from the sensors
	//Read_Angles();

	// Calculate the required steps for each motor based on current and target angles
	int steps_motor_1 = calculate_steps(angle1, (target_angle_1));
 800142c:	4b84      	ldr	r3, [pc, #528]	@ (8001640 <angleControl+0x220>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff74 	bl	8001320 <calculate_steps>
 8001438:	61b8      	str	r0, [r7, #24]
	int steps_motor_2 = calculate_steps(angle2, (target_angle_2));
 800143a:	4b82      	ldr	r3, [pc, #520]	@ (8001644 <angleControl+0x224>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68b9      	ldr	r1, [r7, #8]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff6d 	bl	8001320 <calculate_steps>
 8001446:	6178      	str	r0, [r7, #20]
	//f = steps_motor_2;
	int steps_motor_3 = calculate_steps(angle3, target_angle_3);
 8001448:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <angleControl+0x228>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff66 	bl	8001320 <calculate_steps>
 8001454:	61f8      	str	r0, [r7, #28]

	// Set the pulse counts for each motor
	countPulseL1 = abs(steps_motor_1);
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	bfb8      	it	lt
 800145c:	425b      	neglt	r3, r3
 800145e:	4a7b      	ldr	r2, [pc, #492]	@ (800164c <angleControl+0x22c>)
 8001460:	6013      	str	r3, [r2, #0]
	countPulseL2 = abs(steps_motor_2) ;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	bfb8      	it	lt
 8001468:	425b      	neglt	r3, r3
 800146a:	4a79      	ldr	r2, [pc, #484]	@ (8001650 <angleControl+0x230>)
 800146c:	6013      	str	r3, [r2, #0]
	error = angle3 - target_angle_3;
 800146e:	4b76      	ldr	r3, [pc, #472]	@ (8001648 <angleControl+0x228>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fab5 	bl	80009e4 <__aeabi_fsub>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b75      	ldr	r3, [pc, #468]	@ (8001654 <angleControl+0x234>)
 8001480:	601a      	str	r2, [r3, #0]




	// Determine the direction for each motor and set control pins accordingly
	if (target_angle_1 > angle1) {
 8001482:	4b6f      	ldr	r3, [pc, #444]	@ (8001640 <angleControl+0x220>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff fd71 	bl	8000f70 <__aeabi_fcmpgt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <angleControl+0x86>
		// Move motor 1 clockwise
		dir1 = 1;
 8001494:	4b70      	ldr	r3, [pc, #448]	@ (8001658 <angleControl+0x238>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, DIR1_Pin, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2140      	movs	r1, #64	@ 0x40
 800149e:	486f      	ldr	r0, [pc, #444]	@ (800165c <angleControl+0x23c>)
 80014a0:	f001 fb0b 	bl	8002aba <HAL_GPIO_WritePin>
 80014a4:	e008      	b.n	80014b8 <angleControl+0x98>

	} else {
		dir1 = -1;
 80014a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001658 <angleControl+0x238>)
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	601a      	str	r2, [r3, #0]
		// Move motor 1 counterclockwise
		HAL_GPIO_WritePin(GPIOA, DIR1_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2140      	movs	r1, #64	@ 0x40
 80014b2:	486a      	ldr	r0, [pc, #424]	@ (800165c <angleControl+0x23c>)
 80014b4:	f001 fb01 	bl	8002aba <HAL_GPIO_WritePin>
	}

	if (target_angle_2 >= angle2) {
 80014b8:	4b62      	ldr	r3, [pc, #392]	@ (8001644 <angleControl+0x224>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f7ff fd4c 	bl	8000f5c <__aeabi_fcmpge>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d008      	beq.n	80014dc <angleControl+0xbc>
		// Move motor 2 clockwise
		dir2 = 1;
 80014ca:	4b65      	ldr	r3, [pc, #404]	@ (8001660 <angleControl+0x240>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2110      	movs	r1, #16
 80014d4:	4861      	ldr	r0, [pc, #388]	@ (800165c <angleControl+0x23c>)
 80014d6:	f001 faf0 	bl	8002aba <HAL_GPIO_WritePin>
 80014da:	e008      	b.n	80014ee <angleControl+0xce>
	} else {
		// Move motor 2 counterclockwise
		dir2 = -1;
 80014dc:	4b60      	ldr	r3, [pc, #384]	@ (8001660 <angleControl+0x240>)
 80014de:	f04f 32ff 	mov.w	r2, #4294967295
 80014e2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2110      	movs	r1, #16
 80014e8:	485c      	ldr	r0, [pc, #368]	@ (800165c <angleControl+0x23c>)
 80014ea:	f001 fae6 	bl	8002aba <HAL_GPIO_WritePin>
	}

	if (steps_motor_2 == 0){
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d103      	bne.n	80014fc <angleControl+0xdc>
		dir2 =1;
 80014f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001660 <angleControl+0x240>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e006      	b.n	800150a <angleControl+0xea>
	}else if (steps_motor_1 == 0){
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <angleControl+0xea>
		dir3 = -1;
 8001502:	4b58      	ldr	r3, [pc, #352]	@ (8001664 <angleControl+0x244>)
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	601a      	str	r2, [r3, #0]
	}

	if (target_angle_3 > angle3 && dir2 == 1) {
 800150a:	4b4f      	ldr	r3, [pc, #316]	@ (8001648 <angleControl+0x228>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fd2d 	bl	8000f70 <__aeabi_fcmpgt>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01f      	beq.n	800155c <angleControl+0x13c>
 800151c:	4b50      	ldr	r3, [pc, #320]	@ (8001660 <angleControl+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d11b      	bne.n	800155c <angleControl+0x13c>
		// Motor 3 moves clockwise when Motor 2 is moving clockwise
		h = 1;
 8001524:	4b50      	ldr	r3, [pc, #320]	@ (8001668 <angleControl+0x248>)
 8001526:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800152a:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 800152c:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <angleControl+0x244>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 8001532:	69f8      	ldr	r0, [r7, #28]
 8001534:	f7ff fb0c 	bl	8000b50 <__aeabi_i2f>
 8001538:	4603      	mov	r3, r0
 800153a:	4a4c      	ldr	r2, [pc, #304]	@ (800166c <angleControl+0x24c>)
 800153c:	6013      	str	r3, [r2, #0]
		countPulseL3 = abs(steps_motor_3);
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	bfb8      	it	lt
 8001544:	425b      	neglt	r3, r3
 8001546:	4a4a      	ldr	r2, [pc, #296]	@ (8001670 <angleControl+0x250>)
 8001548:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 800154a:	4b49      	ldr	r3, [pc, #292]	@ (8001670 <angleControl+0x250>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2104      	movs	r1, #4
 8001554:	4841      	ldr	r0, [pc, #260]	@ (800165c <angleControl+0x23c>)
 8001556:	f001 fab0 	bl	8002aba <HAL_GPIO_WritePin>
 800155a:	e0a0      	b.n	800169e <angleControl+0x27e>
	}
	else if (target_angle_3 < angle3 && dir2 == 1) {
 800155c:	4b3a      	ldr	r3, [pc, #232]	@ (8001648 <angleControl+0x228>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fce6 	bl	8000f34 <__aeabi_fcmplt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01a      	beq.n	80015a4 <angleControl+0x184>
 800156e:	4b3c      	ldr	r3, [pc, #240]	@ (8001660 <angleControl+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d116      	bne.n	80015a4 <angleControl+0x184>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 2;
 8001576:	4b3c      	ldr	r3, [pc, #240]	@ (8001668 <angleControl+0x248>)
 8001578:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800157c:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 800157e:	4b39      	ldr	r3, [pc, #228]	@ (8001664 <angleControl+0x244>)
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	2b00      	cmp	r3, #0
 800158a:	bfb8      	it	lt
 800158c:	425b      	neglt	r3, r3
 800158e:	4a38      	ldr	r2, [pc, #224]	@ (8001670 <angleControl+0x250>)
 8001590:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8001592:	4b37      	ldr	r3, [pc, #220]	@ (8001670 <angleControl+0x250>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2104      	movs	r1, #4
 800159c:	482f      	ldr	r0, [pc, #188]	@ (800165c <angleControl+0x23c>)
 800159e:	f001 fa8c 	bl	8002aba <HAL_GPIO_WritePin>
 80015a2:	e07c      	b.n	800169e <angleControl+0x27e>
	} else if (target_angle_3 < angle3 && dir2 == -1) {
 80015a4:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <angleControl+0x228>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fcc2 	bl	8000f34 <__aeabi_fcmplt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01a      	beq.n	80015ec <angleControl+0x1cc>
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <angleControl+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015be:	d115      	bne.n	80015ec <angleControl+0x1cc>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 3;
 80015c0:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <angleControl+0x248>)
 80015c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001674 <angleControl+0x254>)
 80015c4:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 80015c6:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <angleControl+0x244>)
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bfb8      	it	lt
 80015d4:	425b      	neglt	r3, r3
 80015d6:	4a26      	ldr	r2, [pc, #152]	@ (8001670 <angleControl+0x250>)
 80015d8:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 80015da:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <angleControl+0x250>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2104      	movs	r1, #4
 80015e4:	481d      	ldr	r0, [pc, #116]	@ (800165c <angleControl+0x23c>)
 80015e6:	f001 fa68 	bl	8002aba <HAL_GPIO_WritePin>
 80015ea:	e058      	b.n	800169e <angleControl+0x27e>
	}
	else if (target_angle_3 > angle3 && dir2 == -1) {
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <angleControl+0x228>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fcbc 	bl	8000f70 <__aeabi_fcmpgt>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03c      	beq.n	8001678 <angleControl+0x258>
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <angleControl+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001606:	d137      	bne.n	8001678 <angleControl+0x258>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 4;
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <angleControl+0x248>)
 800160a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800160e:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <angleControl+0x244>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 8001616:	69f8      	ldr	r0, [r7, #28]
 8001618:	f7ff fa9a 	bl	8000b50 <__aeabi_i2f>
 800161c:	4603      	mov	r3, r0
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <angleControl+0x24c>)
 8001620:	6013      	str	r3, [r2, #0]
		countPulseL3 = abs( steps_motor_3);
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b00      	cmp	r3, #0
 8001626:	bfb8      	it	lt
 8001628:	425b      	neglt	r3, r3
 800162a:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <angleControl+0x250>)
 800162c:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <angleControl+0x250>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2104      	movs	r1, #4
 8001638:	4808      	ldr	r0, [pc, #32]	@ (800165c <angleControl+0x23c>)
 800163a:	f001 fa3e 	bl	8002aba <HAL_GPIO_WritePin>
 800163e:	e02e      	b.n	800169e <angleControl+0x27e>
 8001640:	20000184 	.word	0x20000184
 8001644:	20000188 	.word	0x20000188
 8001648:	2000018c 	.word	0x2000018c
 800164c:	20000198 	.word	0x20000198
 8001650:	2000019c 	.word	0x2000019c
 8001654:	20000190 	.word	0x20000190
 8001658:	200001bc 	.word	0x200001bc
 800165c:	40010800 	.word	0x40010800
 8001660:	200001c0 	.word	0x200001c0
 8001664:	20000000 	.word	0x20000000
 8001668:	200001b4 	.word	0x200001b4
 800166c:	200001ac 	.word	0x200001ac
 8001670:	200001a0 	.word	0x200001a0
 8001674:	40400000 	.word	0x40400000
	} else {
		// Maintain angle3 in sync with angle2’s direction
		h =5;
 8001678:	4b41      	ldr	r3, [pc, #260]	@ (8001780 <angleControl+0x360>)
 800167a:	4a42      	ldr	r2, [pc, #264]	@ (8001784 <angleControl+0x364>)
 800167c:	601a      	str	r2, [r3, #0]
		dir3 = dir2;
 800167e:	4b42      	ldr	r3, [pc, #264]	@ (8001788 <angleControl+0x368>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a42      	ldr	r2, [pc, #264]	@ (800178c <angleControl+0x36c>)
 8001684:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, dir3 == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001686:	4b41      	ldr	r3, [pc, #260]	@ (800178c <angleControl+0x36c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	2104      	movs	r1, #4
 8001698:	483d      	ldr	r0, [pc, #244]	@ (8001790 <angleControl+0x370>)
 800169a:	f001 fa0e 	bl	8002aba <HAL_GPIO_WritePin>
	}


	// Determine the maximum steps needed to synchronize the motors
	int max_steps = maxSteps(abs(steps_motor_1), abs(steps_motor_2), abs(steps_motor_3));
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80016a4:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80016ae:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bfb8      	it	lt
 80016b8:	425b      	neglt	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	f7ff fe96 	bl	80013ec <maxSteps>
 80016c0:	6138      	str	r0, [r7, #16]

	// Calculate the pulse periods for each motor based on the maximum steps
	periodMotor1 = (int)(((float)max_steps / abs(steps_motor_1)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS)) + 2;
 80016c2:	6938      	ldr	r0, [r7, #16]
 80016c4:	f7ff fa44 	bl	8000b50 <__aeabi_i2f>
 80016c8:	4604      	mov	r4, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bfb8      	it	lt
 80016d0:	425b      	neglt	r3, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fa3c 	bl	8000b50 <__aeabi_i2f>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fb3f 	bl	8000d60 <__aeabi_fdiv>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fa85 	bl	8000bf8 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc47 	bl	8000f84 <__aeabi_f2iz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	3302      	adds	r3, #2
 80016fa:	4a26      	ldr	r2, [pc, #152]	@ (8001794 <angleControl+0x374>)
 80016fc:	6013      	str	r3, [r2, #0]
	periodMotor2 = (int)(((float)max_steps / abs(steps_motor_2)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS)) + 2;
 80016fe:	6938      	ldr	r0, [r7, #16]
 8001700:	f7ff fa26 	bl	8000b50 <__aeabi_i2f>
 8001704:	4604      	mov	r4, r0
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	bfb8      	it	lt
 800170c:	425b      	neglt	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fa1e 	bl	8000b50 <__aeabi_i2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4619      	mov	r1, r3
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fb21 	bl	8000d60 <__aeabi_fdiv>
 800171e:	4603      	mov	r3, r0
 8001720:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fa67 	bl	8000bf8 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fc29 	bl	8000f84 <__aeabi_f2iz>
 8001732:	4603      	mov	r3, r0
 8001734:	3302      	adds	r3, #2
 8001736:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <angleControl+0x378>)
 8001738:	6013      	str	r3, [r2, #0]
	periodMotor3 = (int)(((float)max_steps / abs(steps_motor_3)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS)) + 2;
 800173a:	6938      	ldr	r0, [r7, #16]
 800173c:	f7ff fa08 	bl	8000b50 <__aeabi_i2f>
 8001740:	4604      	mov	r4, r0
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	2b00      	cmp	r3, #0
 8001746:	bfb8      	it	lt
 8001748:	425b      	neglt	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fa00 	bl	8000b50 <__aeabi_i2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4619      	mov	r1, r3
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff fb03 	bl	8000d60 <__aeabi_fdiv>
 800175a:	4603      	mov	r3, r0
 800175c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fa49 	bl	8000bf8 <__aeabi_fmul>
 8001766:	4603      	mov	r3, r0
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc0b 	bl	8000f84 <__aeabi_f2iz>
 800176e:	4603      	mov	r3, r0
 8001770:	3302      	adds	r3, #2
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <angleControl+0x37c>)
 8001774:	6013      	str	r3, [r2, #0]

	// Start the timer if it is not already running (ensure the timer has been initialized)
	//HAL_TIM_Base_Start_IT(&htim4);
}
 8001776:	bf00      	nop
 8001778:	3724      	adds	r7, #36	@ 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	bf00      	nop
 8001780:	200001b4 	.word	0x200001b4
 8001784:	40a00000 	.word	0x40a00000
 8001788:	200001c0 	.word	0x200001c0
 800178c:	20000000 	.word	0x20000000
 8001790:	40010800 	.word	0x40010800
 8001794:	200001d4 	.word	0x200001d4
 8001798:	200001d8 	.word	0x200001d8
 800179c:	200001dc 	.word	0x200001dc

080017a0 <autoHomeMotors>:

void autoHomeMotors(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
    // Set initial movement direction for homing (assumes motors move towards the limit switches)
    HAL_GPIO_WritePin(GPIOA, DIR1_Pin, GPIO_PIN_RESET); // Move Motor 1 in the homing direction
 80017a6:	2200      	movs	r2, #0
 80017a8:	2140      	movs	r1, #64	@ 0x40
 80017aa:	4841      	ldr	r0, [pc, #260]	@ (80018b0 <autoHomeMotors+0x110>)
 80017ac:	f001 f985 	bl	8002aba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_SET); // Move Motor 2 in the homing direction
 80017b0:	2201      	movs	r2, #1
 80017b2:	2110      	movs	r1, #16
 80017b4:	483e      	ldr	r0, [pc, #248]	@ (80018b0 <autoHomeMotors+0x110>)
 80017b6:	f001 f980 	bl	8002aba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET); // Move Motor 3 in the homing direction
 80017ba:	2201      	movs	r2, #1
 80017bc:	2104      	movs	r1, #4
 80017be:	483c      	ldr	r0, [pc, #240]	@ (80018b0 <autoHomeMotors+0x110>)
 80017c0:	f001 f97b 	bl	8002aba <HAL_GPIO_WritePin>


    // Start moving the motors
    countPulseL1 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 80017c4:	4b3b      	ldr	r3, [pc, #236]	@ (80018b4 <autoHomeMotors+0x114>)
 80017c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80017ca:	601a      	str	r2, [r3, #0]
    countPulseL2 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 80017cc:	4b3a      	ldr	r3, [pc, #232]	@ (80018b8 <autoHomeMotors+0x118>)
 80017ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80017d2:	601a      	str	r2, [r3, #0]
    countPulseL3 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 80017d4:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <autoHomeMotors+0x11c>)
 80017d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80017da:	601a      	str	r2, [r3, #0]

    periodMotor1 = 8;
 80017dc:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <autoHomeMotors+0x120>)
 80017de:	2208      	movs	r2, #8
 80017e0:	601a      	str	r2, [r3, #0]
	periodMotor2 = 8;
 80017e2:	4b38      	ldr	r3, [pc, #224]	@ (80018c4 <autoHomeMotors+0x124>)
 80017e4:	2208      	movs	r2, #8
 80017e6:	601a      	str	r2, [r3, #0]
	periodMotor3 = 16;
 80017e8:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <autoHomeMotors+0x128>)
 80017ea:	2210      	movs	r2, #16
 80017ec:	601a      	str	r2, [r3, #0]
	int i = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]

    // Wait until all limit switches are triggered
    while (a == 0 || b == 0 || c == 0 || count <1) {
 80017f2:	e001      	b.n	80017f8 <autoHomeMotors+0x58>
        checkLimitSwitches(); // Continuously check the limit switches
 80017f4:	f000 f890 	bl	8001918 <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0 || count <1) {
 80017f8:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <autoHomeMotors+0x12c>)
 80017fa:	f993 3000 	ldrsb.w	r3, [r3]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f8      	beq.n	80017f4 <autoHomeMotors+0x54>
 8001802:	4b33      	ldr	r3, [pc, #204]	@ (80018d0 <autoHomeMotors+0x130>)
 8001804:	f993 3000 	ldrsb.w	r3, [r3]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f3      	beq.n	80017f4 <autoHomeMotors+0x54>
 800180c:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <autoHomeMotors+0x134>)
 800180e:	f993 3000 	ldrsb.w	r3, [r3]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ee      	beq.n	80017f4 <autoHomeMotors+0x54>
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <autoHomeMotors+0x138>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	ddea      	ble.n	80017f4 <autoHomeMotors+0x54>
    }
    while (count == 1){
 800181e:	e028      	b.n	8001872 <autoHomeMotors+0xd2>
    	HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2104      	movs	r1, #4
 8001824:	4822      	ldr	r0, [pc, #136]	@ (80018b0 <autoHomeMotors+0x110>)
 8001826:	f001 f948 	bl	8002aba <HAL_GPIO_WritePin>

    	if (countPulseL3 == 0 && i == 0){
 800182a:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <autoHomeMotors+0x11c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d108      	bne.n	8001844 <autoHomeMotors+0xa4>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <autoHomeMotors+0xa4>
    		countPulseL3 = 10060;
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <autoHomeMotors+0x11c>)
 800183a:	f242 724c 	movw	r2, #10060	@ 0x274c
 800183e:	601a      	str	r2, [r3, #0]
    		i = 1;
 8001840:	2301      	movs	r3, #1
 8001842:	607b      	str	r3, [r7, #4]
    	}

    	if (countPulseL3 == 0 && i == 1){
 8001844:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <autoHomeMotors+0x11c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d112      	bne.n	8001872 <autoHomeMotors+0xd2>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10f      	bne.n	8001872 <autoHomeMotors+0xd2>
			count = 2;
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <autoHomeMotors+0x138>)
 8001854:	2202      	movs	r2, #2
 8001856:	601a      	str	r2, [r3, #0]
			a = 0;
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <autoHomeMotors+0x12c>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
			b=0;
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <autoHomeMotors+0x130>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
			c=0;
 8001864:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <autoHomeMotors+0x134>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
			countPulseL3 = 50000;
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <autoHomeMotors+0x11c>)
 800186c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001870:	601a      	str	r2, [r3, #0]
    while (count == 1){
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <autoHomeMotors+0x138>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d0d2      	beq.n	8001820 <autoHomeMotors+0x80>
		}
    }

    while (a == 0 || b == 0 || c == 0 ) {
 800187a:	e001      	b.n	8001880 <autoHomeMotors+0xe0>
		checkLimitSwitches(); // Continuously check the limit switches
 800187c:	f000 f84c 	bl	8001918 <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0 ) {
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <autoHomeMotors+0x12c>)
 8001882:	f993 3000 	ldrsb.w	r3, [r3]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f8      	beq.n	800187c <autoHomeMotors+0xdc>
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <autoHomeMotors+0x130>)
 800188c:	f993 3000 	ldrsb.w	r3, [r3]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f3      	beq.n	800187c <autoHomeMotors+0xdc>
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <autoHomeMotors+0x134>)
 8001896:	f993 3000 	ldrsb.w	r3, [r3]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0ee      	beq.n	800187c <autoHomeMotors+0xdc>
	}

    // Set the home angle once all limit switches are activated
    HOME = 1;
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <autoHomeMotors+0x13c>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
    setHomeAngles();
 80018a4:	f000 f81c 	bl	80018e0 <setHomeAngles>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40010800 	.word	0x40010800
 80018b4:	20000198 	.word	0x20000198
 80018b8:	2000019c 	.word	0x2000019c
 80018bc:	200001a0 	.word	0x200001a0
 80018c0:	200001d4 	.word	0x200001d4
 80018c4:	200001d8 	.word	0x200001d8
 80018c8:	200001dc 	.word	0x200001dc
 80018cc:	200001a4 	.word	0x200001a4
 80018d0:	200001a5 	.word	0x200001a5
 80018d4:	200001a6 	.word	0x200001a6
 80018d8:	200001c4 	.word	0x200001c4
 80018dc:	20000194 	.word	0x20000194

080018e0 <setHomeAngles>:

void setHomeAngles(void) {
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
    // Set the current angle to zero or a specific home angle as needed
    angle1 = 5.0; // Home position for Motor 1
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <setHomeAngles+0x20>)
 80018e6:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <setHomeAngles+0x24>)
 80018e8:	601a      	str	r2, [r3, #0]
    angle2 = 86.0; // Home position for Motor 2
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <setHomeAngles+0x28>)
 80018ec:	4a07      	ldr	r2, [pc, #28]	@ (800190c <setHomeAngles+0x2c>)
 80018ee:	601a      	str	r2, [r3, #0]
    angle3 = -151.0; // Home position for Motor 3
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <setHomeAngles+0x30>)
 80018f2:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <setHomeAngles+0x34>)
 80018f4:	601a      	str	r2, [r3, #0]

}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000184 	.word	0x20000184
 8001904:	40a00000 	.word	0x40a00000
 8001908:	20000188 	.word	0x20000188
 800190c:	42ac0000 	.word	0x42ac0000
 8001910:	2000018c 	.word	0x2000018c
 8001914:	c3170000 	.word	0xc3170000

08001918 <checkLimitSwitches>:

void checkLimitSwitches(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    // Check and handle limit switch 1
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 800191c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001920:	482d      	ldr	r0, [pc, #180]	@ (80019d8 <checkLimitSwitches+0xc0>)
 8001922:	f001 f8b3 	bl	8002a8c <HAL_GPIO_ReadPin>
 8001926:	4603      	mov	r3, r0
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <checkLimitSwitches+0x22>
        a = 1;
 800192c:	4b2b      	ldr	r3, [pc, #172]	@ (80019dc <checkLimitSwitches+0xc4>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
        countPulseL1 = 0;  // Stop Motor 1 if limit switch 1 is triggered
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <checkLimitSwitches+0xc8>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e002      	b.n	8001940 <checkLimitSwitches+0x28>
    } else {
        a = 0;
 800193a:	4b28      	ldr	r3, [pc, #160]	@ (80019dc <checkLimitSwitches+0xc4>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
    }

    // Check and handle limit switch 2, ensuring that it only works if limit switch 3 is not active
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET) {
 8001940:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001944:	4824      	ldr	r0, [pc, #144]	@ (80019d8 <checkLimitSwitches+0xc0>)
 8001946:	f001 f8a1 	bl	8002a8c <HAL_GPIO_ReadPin>
 800194a:	4603      	mov	r3, r0
 800194c:	2b01      	cmp	r3, #1
 800194e:	d106      	bne.n	800195e <checkLimitSwitches+0x46>
        b = 1;
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <checkLimitSwitches+0xcc>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
        countPulseL2 = 0;  // Stop Motor 2 if limit switch 2 is triggered
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <checkLimitSwitches+0xd0>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e002      	b.n	8001964 <checkLimitSwitches+0x4c>
    } else {
        b = 0;
 800195e:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <checkLimitSwitches+0xcc>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
    }


    if (a == 1 && b == 1 && c == 1 && count != 1){
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <checkLimitSwitches+0xc4>)
 8001966:	f993 3000 	ldrsb.w	r3, [r3]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d110      	bne.n	8001990 <checkLimitSwitches+0x78>
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <checkLimitSwitches+0xcc>)
 8001970:	f993 3000 	ldrsb.w	r3, [r3]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d10b      	bne.n	8001990 <checkLimitSwitches+0x78>
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <checkLimitSwitches+0xd4>)
 800197a:	f993 3000 	ldrsb.w	r3, [r3]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d106      	bne.n	8001990 <checkLimitSwitches+0x78>
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <checkLimitSwitches+0xd8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d002      	beq.n	8001990 <checkLimitSwitches+0x78>
      count = 1;
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <checkLimitSwitches+0xd8>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

	}

    // Check and handle limit switch 3
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4810      	ldr	r0, [pc, #64]	@ (80019d8 <checkLimitSwitches+0xc0>)
 8001996:	f001 f879 	bl	8002a8c <HAL_GPIO_ReadPin>
 800199a:	4603      	mov	r3, r0
 800199c:	2b01      	cmp	r3, #1
 800199e:	d110      	bne.n	80019c2 <checkLimitSwitches+0xaa>
        c = 1;
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <checkLimitSwitches+0xd4>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]

		periodMotor3 = periodMotor2;
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <checkLimitSwitches+0xdc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a13      	ldr	r2, [pc, #76]	@ (80019f8 <checkLimitSwitches+0xe0>)
 80019ac:	6013      	str	r3, [r2, #0]
		countPulseL3 = countPulseL2;  // Stop Motor 3 if limit switch 3 is triggered
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <checkLimitSwitches+0xd0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <checkLimitSwitches+0xe4>)
 80019b4:	6013      	str	r3, [r2, #0]

        HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET);  // Stop motor direction for M3
 80019b6:	2200      	movs	r2, #0
 80019b8:	2104      	movs	r1, #4
 80019ba:	4807      	ldr	r0, [pc, #28]	@ (80019d8 <checkLimitSwitches+0xc0>)
 80019bc:	f001 f87d 	bl	8002aba <HAL_GPIO_WritePin>
    } else {
        c = 0;
        HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);  // Set motor direction for M3
    }

}
 80019c0:	e007      	b.n	80019d2 <checkLimitSwitches+0xba>
        c = 0;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <checkLimitSwitches+0xd4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);  // Set motor direction for M3
 80019c8:	2201      	movs	r2, #1
 80019ca:	2104      	movs	r1, #4
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <checkLimitSwitches+0xc0>)
 80019ce:	f001 f874 	bl	8002aba <HAL_GPIO_WritePin>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010800 	.word	0x40010800
 80019dc:	200001a4 	.word	0x200001a4
 80019e0:	20000198 	.word	0x20000198
 80019e4:	200001a5 	.word	0x200001a5
 80019e8:	2000019c 	.word	0x2000019c
 80019ec:	200001a6 	.word	0x200001a6
 80019f0:	200001c4 	.word	0x200001c4
 80019f4:	200001d8 	.word	0x200001d8
 80019f8:	200001dc 	.word	0x200001dc
 80019fc:	200001a0 	.word	0x200001a0

08001a00 <decode_angles>:
void decode_angles(const char *input, float *angle1, float *angle2, float *angle3) {
 8001a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a04:	b088      	sub	sp, #32
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	603b      	str	r3, [r7, #0]
	// Decode angle1
	    int sign1 = (input[0] == '1') ? 1 : -1;  // Check sign at position 0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b31      	cmp	r3, #49	@ 0x31
 8001a16:	d101      	bne.n	8001a1c <decode_angles+0x1c>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e001      	b.n	8001a20 <decode_angles+0x20>
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	61fb      	str	r3, [r7, #28]
	    *angle1 = sign1 * ((input[1] - '0') * 100 + (input[2] - '0') * 10 + (input[3] - '0')
 8001a22:	69f8      	ldr	r0, [r7, #28]
 8001a24:	f7fe fce6 	bl	80003f4 <__aeabi_i2d>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	460d      	mov	r5, r1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	3b30      	subs	r3, #48	@ 0x30
 8001a34:	2264      	movs	r2, #100	@ 0x64
 8001a36:	fb02 f103 	mul.w	r1, r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	18ca      	adds	r2, r1, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3303      	adds	r3, #3
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3b30      	subs	r3, #48	@ 0x30
 8001a56:	4413      	add	r3, r2
	                      + (input[4] - '0') * 0.1 + (input[5] - '0') * 0.01);
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fccb 	bl	80003f4 <__aeabi_i2d>
 8001a5e:	4680      	mov	r8, r0
 8001a60:	4689      	mov	r9, r1
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3304      	adds	r3, #4
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	3b30      	subs	r3, #48	@ 0x30
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fcc2 	bl	80003f4 <__aeabi_i2d>
 8001a70:	a37b      	add	r3, pc, #492	@ (adr r3, 8001c60 <decode_angles+0x260>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fd27 	bl	80004c8 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4640      	mov	r0, r8
 8001a80:	4649      	mov	r1, r9
 8001a82:	f7fe fb6b 	bl	800015c <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4690      	mov	r8, r2
 8001a8c:	4699      	mov	r9, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3305      	adds	r3, #5
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3b30      	subs	r3, #48	@ 0x30
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fcac 	bl	80003f4 <__aeabi_i2d>
 8001a9c:	a372      	add	r3, pc, #456	@ (adr r3, 8001c68 <decode_angles+0x268>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fd11 	bl	80004c8 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4640      	mov	r0, r8
 8001aac:	4649      	mov	r1, r9
 8001aae:	f7fe fb55 	bl	800015c <__adddf3>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
	    *angle1 = sign1 * ((input[1] - '0') * 100 + (input[2] - '0') * 10 + (input[3] - '0')
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f7fe fd05 	bl	80004c8 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ff39 	bl	800093c <__aeabi_d2f>
 8001aca:	4602      	mov	r2, r0
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	601a      	str	r2, [r3, #0]

	    // Decode angle2
	    int sign2 = (input[7] == '1') ? 1 : -1;  // Check sign at position 7
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3307      	adds	r3, #7
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b31      	cmp	r3, #49	@ 0x31
 8001ad8:	d101      	bne.n	8001ade <decode_angles+0xde>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e001      	b.n	8001ae2 <decode_angles+0xe2>
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	61bb      	str	r3, [r7, #24]
	    *angle2 = sign2 * ((input[8] - '0') * 100 + (input[9] - '0') * 10 + (input[10] - '0')
 8001ae4:	69b8      	ldr	r0, [r7, #24]
 8001ae6:	f7fe fc85 	bl	80003f4 <__aeabi_i2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3308      	adds	r3, #8
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	3b30      	subs	r3, #48	@ 0x30
 8001af6:	2264      	movs	r2, #100	@ 0x64
 8001af8:	fb02 f103 	mul.w	r1, r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3309      	adds	r3, #9
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	18ca      	adds	r2, r1, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	330a      	adds	r3, #10
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	3b30      	subs	r3, #48	@ 0x30
 8001b18:	4413      	add	r3, r2
	                      + (input[11] - '0') * 0.1 + (input[12] - '0') * 0.01);
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fc6a 	bl	80003f4 <__aeabi_i2d>
 8001b20:	4680      	mov	r8, r0
 8001b22:	4689      	mov	r9, r1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	330b      	adds	r3, #11
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3b30      	subs	r3, #48	@ 0x30
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fc61 	bl	80003f4 <__aeabi_i2d>
 8001b32:	a34b      	add	r3, pc, #300	@ (adr r3, 8001c60 <decode_angles+0x260>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fcc6 	bl	80004c8 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4640      	mov	r0, r8
 8001b42:	4649      	mov	r1, r9
 8001b44:	f7fe fb0a 	bl	800015c <__adddf3>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4690      	mov	r8, r2
 8001b4e:	4699      	mov	r9, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	330c      	adds	r3, #12
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	3b30      	subs	r3, #48	@ 0x30
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fc4b 	bl	80003f4 <__aeabi_i2d>
 8001b5e:	a342      	add	r3, pc, #264	@ (adr r3, 8001c68 <decode_angles+0x268>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fcb0 	bl	80004c8 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4640      	mov	r0, r8
 8001b6e:	4649      	mov	r1, r9
 8001b70:	f7fe faf4 	bl	800015c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
	    *angle2 = sign2 * ((input[8] - '0') * 100 + (input[9] - '0') * 10 + (input[10] - '0')
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fca4 	bl	80004c8 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7fe fed8 	bl	800093c <__aeabi_d2f>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]

	    // Decode angle3
	    int sign3 = (input[14] == '1') ? 1 : -1;  // Check sign at position 14
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	330e      	adds	r3, #14
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b31      	cmp	r3, #49	@ 0x31
 8001b9a:	d101      	bne.n	8001ba0 <decode_angles+0x1a0>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e001      	b.n	8001ba4 <decode_angles+0x1a4>
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	617b      	str	r3, [r7, #20]
	    *angle3 = sign3 * ((input[15] - '0') * 100 + (input[16] - '0') * 10 + (input[17] - '0')
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7fe fc24 	bl	80003f4 <__aeabi_i2d>
 8001bac:	4604      	mov	r4, r0
 8001bae:	460d      	mov	r5, r1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	330f      	adds	r3, #15
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	3b30      	subs	r3, #48	@ 0x30
 8001bb8:	2264      	movs	r2, #100	@ 0x64
 8001bba:	fb02 f103 	mul.w	r1, r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3310      	adds	r3, #16
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	18ca      	adds	r2, r1, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3311      	adds	r3, #17
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	3b30      	subs	r3, #48	@ 0x30
 8001bda:	4413      	add	r3, r2
	                      + (input[18] - '0') * 0.1 + (input[19] - '0') * 0.01);
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc09 	bl	80003f4 <__aeabi_i2d>
 8001be2:	4680      	mov	r8, r0
 8001be4:	4689      	mov	r9, r1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3312      	adds	r3, #18
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	3b30      	subs	r3, #48	@ 0x30
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc00 	bl	80003f4 <__aeabi_i2d>
 8001bf4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001c60 <decode_angles+0x260>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fc65 	bl	80004c8 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4640      	mov	r0, r8
 8001c04:	4649      	mov	r1, r9
 8001c06:	f7fe faa9 	bl	800015c <__adddf3>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4690      	mov	r8, r2
 8001c10:	4699      	mov	r9, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3313      	adds	r3, #19
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	3b30      	subs	r3, #48	@ 0x30
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fbea 	bl	80003f4 <__aeabi_i2d>
 8001c20:	a311      	add	r3, pc, #68	@ (adr r3, 8001c68 <decode_angles+0x268>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fc4f 	bl	80004c8 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4640      	mov	r0, r8
 8001c30:	4649      	mov	r1, r9
 8001c32:	f7fe fa93 	bl	800015c <__adddf3>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
	    *angle3 = sign3 * ((input[15] - '0') * 100 + (input[16] - '0') * 10 + (input[17] - '0')
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	f7fe fc43 	bl	80004c8 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe fe77 	bl	800093c <__aeabi_d2f>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	601a      	str	r2, [r3, #0]
}
 8001c54:	bf00      	nop
 8001c56:	3720      	adds	r7, #32
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c5e:	bf00      	nop
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	3fb99999 	.word	0x3fb99999
 8001c68:	47ae147b 	.word	0x47ae147b
 8001c6c:	3f847ae1 	.word	0x3f847ae1

08001c70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  if (huart->Instance == huart3.Instance){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x38>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10d      	bne.n	8001ca0 <HAL_UART_RxCpltCallback+0x30>
	  // Ensure the received data is null-terminated



	  // Set the flag indicating data is ready for use
	  receiveComplete = 1;
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_UART_RxCpltCallback+0x3c>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

	  // Restart reception for the next incoming data
	  HAL_UART_Receive_IT(&huart3, rx_data, 21);
 8001c8a:	2215      	movs	r2, #21
 8001c8c:	4908      	ldr	r1, [pc, #32]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x40>)
 8001c8e:	4806      	ldr	r0, [pc, #24]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x38>)
 8001c90:	f002 f965 	bl	8003f5e <HAL_UART_Receive_IT>
	  decode_angles(rx_data, &rx_angle1, &rx_angle2, &rx_angle3);
 8001c94:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x44>)
 8001c96:	4a08      	ldr	r2, [pc, #32]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x48>)
 8001c98:	4908      	ldr	r1, [pc, #32]	@ (8001cbc <HAL_UART_RxCpltCallback+0x4c>)
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x40>)
 8001c9c:	f7ff feb0 	bl	8001a00 <decode_angles>

  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2000013c 	.word	0x2000013c
 8001cac:	20000210 	.word	0x20000210
 8001cb0:	200001ec 	.word	0x200001ec
 8001cb4:	2000020c 	.word	0x2000020c
 8001cb8:	20000208 	.word	0x20000208
 8001cbc:	20000204 	.word	0x20000204

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc4:	f000 fb3c 	bl	8002340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc8:	f000 f82a 	bl	8001d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ccc:	f000 f960 	bl	8001f90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cd0:	f000 f86c 	bl	8001dac <MX_I2C1_Init>
  MX_TIM2_Init();
 8001cd4:	f000 f898 	bl	8001e08 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cd8:	f000 f8e2 	bl	8001ea0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001cdc:	f000 f92e 	bl	8001f3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001ce0:	480a      	ldr	r0, [pc, #40]	@ (8001d0c <main+0x4c>)
 8001ce2:	f001 fcbf 	bl	8003664 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001ce6:	480a      	ldr	r0, [pc, #40]	@ (8001d10 <main+0x50>)
 8001ce8:	f001 fcbc 	bl	8003664 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart3, (uint8_t *)tx_data, sizeof(tx_data), 10);
 8001cec:	230a      	movs	r3, #10
 8001cee:	221e      	movs	r2, #30
 8001cf0:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <main+0x54>)
 8001cf2:	4809      	ldr	r0, [pc, #36]	@ (8001d18 <main+0x58>)
 8001cf4:	f002 f8a8 	bl	8003e48 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_data, 21);
 8001cf8:	2215      	movs	r2, #21
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <main+0x5c>)
 8001cfc:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <main+0x58>)
 8001cfe:	f002 f92e 	bl	8003f5e <HAL_UART_Receive_IT>
  autoHomeMotors();
 8001d02:	f7ff fd4d 	bl	80017a0 <autoHomeMotors>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <main+0x46>
 8001d0a:	bf00      	nop
 8001d0c:	200000ac 	.word	0x200000ac
 8001d10:	200000f4 	.word	0x200000f4
 8001d14:	20000010 	.word	0x20000010
 8001d18:	2000013c 	.word	0x2000013c
 8001d1c:	200001ec 	.word	0x200001ec

08001d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b090      	sub	sp, #64	@ 0x40
 8001d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d26:	f107 0318 	add.w	r3, r7, #24
 8001d2a:	2228      	movs	r2, #40	@ 0x28
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 fea4 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d50:	2301      	movs	r3, #1
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d54:	2302      	movs	r3, #2
 8001d56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d5e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 f81b 	bl	8002da4 <HAL_RCC_OscConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d74:	f000 f964 	bl	8002040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d78:	230f      	movs	r3, #15
 8001d7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2102      	movs	r1, #2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f001 fa88 	bl	80032a8 <HAL_RCC_ClockConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d9e:	f000 f94f 	bl	8002040 <Error_Handler>
  }
}
 8001da2:	bf00      	nop
 8001da4:	3740      	adds	r7, #64	@ 0x40
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001db2:	4a13      	ldr	r2, [pc, #76]	@ (8001e00 <MX_I2C1_Init+0x54>)
 8001db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <MX_I2C1_Init+0x58>)
 8001dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001dca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <MX_I2C1_Init+0x50>)
 8001dea:	f000 fe97 	bl	8002b1c <HAL_I2C_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001df4:	f000 f924 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000058 	.word	0x20000058
 8001e00:	40005400 	.word	0x40005400
 8001e04:	00061a80 	.word	0x00061a80

08001e08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e2e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8001e3a:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e48:	2280      	movs	r2, #128	@ 0x80
 8001e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e4c:	4813      	ldr	r0, [pc, #76]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e4e:	f001 fbb9 	bl	80035c4 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e58:	f000 f8f2 	bl	8002040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4619      	mov	r1, r3
 8001e68:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e6a:	f001 fd3d 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e74:	f000 f8e4 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e80:	463b      	mov	r3, r7
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_TIM2_Init+0x94>)
 8001e86:	f001 ff1f 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e90:	f000 f8d6 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200000ac 	.word	0x200000ac

08001ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f38 <MX_TIM3_Init+0x98>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001ec4:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001ec8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3;
 8001ed0:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001ede:	2280      	movs	r2, #128	@ 0x80
 8001ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee2:	4814      	ldr	r0, [pc, #80]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001ee4:	f001 fb6e 	bl	80035c4 <HAL_TIM_Base_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001eee:	f000 f8a7 	bl	8002040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	4619      	mov	r1, r3
 8001efe:	480d      	ldr	r0, [pc, #52]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001f00:	f001 fcf2 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001f0a:	f000 f899 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4806      	ldr	r0, [pc, #24]	@ (8001f34 <MX_TIM3_Init+0x94>)
 8001f1c:	f001 fed4 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001f26:	f000 f88b 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200000f4 	.word	0x200000f4
 8001f38:	40000400 	.word	0x40000400

08001f3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <MX_USART3_UART_Init+0x50>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f74:	f001 ff18 	bl	8003da8 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f7e:	f000 f85f 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000013c 	.word	0x2000013c
 8001f8c:	40004800 	.word	0x40004800

08001f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa4:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <MX_GPIO_Init+0xa8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PUL3_Pin|DIR3_Pin|PUL2_Pin|DIR2_Pin
 8001fec:	2200      	movs	r2, #0
 8001fee:	f640 01fe 	movw	r1, #2302	@ 0x8fe
 8001ff2:	4812      	ldr	r0, [pc, #72]	@ (800203c <MX_GPIO_Init+0xac>)
 8001ff4:	f000 fd61 	bl	8002aba <HAL_GPIO_WritePin>
                          |PUL1_Pin|DIR1_Pin|EN_Pin|RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PUL3_Pin DIR3_Pin PUL2_Pin DIR2_Pin
                           PUL1_Pin DIR1_Pin EN_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = PUL3_Pin|DIR3_Pin|PUL2_Pin|DIR2_Pin
 8001ff8:	f640 03fe 	movw	r3, #2302	@ 0x8fe
 8001ffc:	613b      	str	r3, [r7, #16]
                          |PUL1_Pin|DIR1_Pin|EN_Pin|RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2302      	movs	r3, #2
 8002008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4619      	mov	r1, r3
 8002010:	480a      	ldr	r0, [pc, #40]	@ (800203c <MX_GPIO_Init+0xac>)
 8002012:	f000 fbb7 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_LINK3_Pin LIMIT_LINK1_Pin LIMIT_LINK2_Pin */
  GPIO_InitStruct.Pin = LIMIT_LINK3_Pin|LIMIT_LINK1_Pin|LIMIT_LINK2_Pin;
 8002016:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800201a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	4804      	ldr	r0, [pc, #16]	@ (800203c <MX_GPIO_Init+0xac>)
 800202c:	f000 fbaa 	bl	8002784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	40010800 	.word	0x40010800

08002040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <Error_Handler+0x8>

0800204c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_MspInit+0x5c>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <HAL_MspInit+0x5c>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6193      	str	r3, [r2, #24]
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_MspInit+0x5c>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <HAL_MspInit+0x5c>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a0e      	ldr	r2, [pc, #56]	@ (80020a8 <HAL_MspInit+0x5c>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <HAL_MspInit+0x5c>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_MspInit+0x60>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <HAL_MspInit+0x60>)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000

080020b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a15      	ldr	r2, [pc, #84]	@ (8002120 <HAL_I2C_MspInit+0x70>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d123      	bne.n	8002118 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <HAL_I2C_MspInit+0x74>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <HAL_I2C_MspInit+0x74>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <HAL_I2C_MspInit+0x74>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e8:	23c0      	movs	r3, #192	@ 0xc0
 80020ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ec:	2312      	movs	r3, #18
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4619      	mov	r1, r3
 80020fa:	480b      	ldr	r0, [pc, #44]	@ (8002128 <HAL_I2C_MspInit+0x78>)
 80020fc:	f000 fb42 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_I2C_MspInit+0x74>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_I2C_MspInit+0x74>)
 8002106:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800210a:	61d3      	str	r3, [r2, #28]
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_I2C_MspInit+0x74>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40005400 	.word	0x40005400
 8002124:	40021000 	.word	0x40021000
 8002128:	40010c00 	.word	0x40010c00

0800212c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213c:	d114      	bne.n	8002168 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800213e:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <HAL_TIM_Base_MspInit+0x78>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a18      	ldr	r2, [pc, #96]	@ (80021a4 <HAL_TIM_Base_MspInit+0x78>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <HAL_TIM_Base_MspInit+0x78>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2105      	movs	r1, #5
 800215a:	201c      	movs	r0, #28
 800215c:	f000 fa29 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002160:	201c      	movs	r0, #28
 8002162:	f000 fa42 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002166:	e018      	b.n	800219a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0e      	ldr	r2, [pc, #56]	@ (80021a8 <HAL_TIM_Base_MspInit+0x7c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <HAL_TIM_Base_MspInit+0x78>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <HAL_TIM_Base_MspInit+0x78>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_TIM_Base_MspInit+0x78>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2105      	movs	r1, #5
 800218e:	201d      	movs	r0, #29
 8002190:	f000 fa0f 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002194:	201d      	movs	r0, #29
 8002196:	f000 fa28 	bl	80025ea <HAL_NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40000400 	.word	0x40000400

080021ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a20      	ldr	r2, [pc, #128]	@ (8002248 <HAL_UART_MspInit+0x9c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d139      	bne.n	8002240 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021cc:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <HAL_UART_MspInit+0xa0>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <HAL_UART_MspInit+0xa0>)
 80021d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d6:	61d3      	str	r3, [r2, #28]
 80021d8:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <HAL_UART_MspInit+0xa0>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_UART_MspInit+0xa0>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a18      	ldr	r2, [pc, #96]	@ (800224c <HAL_UART_MspInit+0xa0>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_UART_MspInit+0xa0>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002200:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4619      	mov	r1, r3
 8002210:	480f      	ldr	r0, [pc, #60]	@ (8002250 <HAL_UART_MspInit+0xa4>)
 8002212:	f000 fab7 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002216:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800221a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	4619      	mov	r1, r3
 800222a:	4809      	ldr	r0, [pc, #36]	@ (8002250 <HAL_UART_MspInit+0xa4>)
 800222c:	f000 faaa 	bl	8002784 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2103      	movs	r1, #3
 8002234:	2027      	movs	r0, #39	@ 0x27
 8002236:	f000 f9bc 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800223a:	2027      	movs	r0, #39	@ 0x27
 800223c:	f000 f9d5 	bl	80025ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002240:	bf00      	nop
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40004800 	.word	0x40004800
 800224c:	40021000 	.word	0x40021000
 8002250:	40010c00 	.word	0x40010c00

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <NMI_Handler+0x4>

0800225c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <HardFault_Handler+0x4>

08002264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <MemManage_Handler+0x4>

0800226c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <BusFault_Handler+0x4>

08002274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <UsageFault_Handler+0x4>

0800227c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a4:	f000 f892 	bl	80023cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}

080022ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <TIM2_IRQHandler+0x10>)
 80022b2:	f001 fa29 	bl	8003708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200000ac 	.word	0x200000ac

080022c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <TIM3_IRQHandler+0x10>)
 80022c6:	f001 fa1f 	bl	8003708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200000f4 	.word	0x200000f4

080022d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <USART3_IRQHandler+0x10>)
 80022da:	f001 fe65 	bl	8003fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000013c 	.word	0x2000013c

080022e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022f4:	f7ff fff8 	bl	80022e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f8:	480b      	ldr	r0, [pc, #44]	@ (8002328 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022fa:	490c      	ldr	r1, [pc, #48]	@ (800232c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002300:	e002      	b.n	8002308 <LoopCopyDataInit>

08002302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002306:	3304      	adds	r3, #4

08002308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800230c:	d3f9      	bcc.n	8002302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230e:	4a09      	ldr	r2, [pc, #36]	@ (8002334 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002310:	4c09      	ldr	r4, [pc, #36]	@ (8002338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002314:	e001      	b.n	800231a <LoopFillZerobss>

08002316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002318:	3204      	adds	r2, #4

0800231a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800231c:	d3fb      	bcc.n	8002316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800231e:	f002 fbb5 	bl	8004a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002322:	f7ff fccd 	bl	8001cc0 <main>
  bx lr
 8002326:	4770      	bx	lr
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002330:	08004b20 	.word	0x08004b20
  ldr r2, =_sbss
 8002334:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002338:	20000218 	.word	0x20000218

0800233c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC1_2_IRQHandler>
	...

08002340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002344:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <HAL_Init+0x28>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a07      	ldr	r2, [pc, #28]	@ (8002368 <HAL_Init+0x28>)
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002350:	2003      	movs	r0, #3
 8002352:	f000 f923 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002356:	200f      	movs	r0, #15
 8002358:	f000 f808 	bl	800236c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800235c:	f7ff fe76 	bl	800204c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40022000 	.word	0x40022000

0800236c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002374:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_InitTick+0x54>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_InitTick+0x58>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002382:	fbb3 f3f1 	udiv	r3, r3, r1
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f93b 	bl	8002606 <HAL_SYSTICK_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00e      	b.n	80023b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b0f      	cmp	r3, #15
 800239e:	d80a      	bhi.n	80023b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a0:	2200      	movs	r2, #0
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f000 f903 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ac:	4a06      	ldr	r2, [pc, #24]	@ (80023c8 <HAL_InitTick+0x5c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000030 	.word	0x20000030
 80023c4:	20000038 	.word	0x20000038
 80023c8:	20000034 	.word	0x20000034

080023cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_IncTick+0x1c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_IncTick+0x20>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a03      	ldr	r2, [pc, #12]	@ (80023ec <HAL_IncTick+0x20>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000038 	.word	0x20000038
 80023ec:	20000214 	.word	0x20000214

080023f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b02      	ldr	r3, [pc, #8]	@ (8002400 <HAL_GetTick+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20000214 	.word	0x20000214

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4906      	ldr	r1, [pc, #24]	@ (800249c <__NVIC_EnableIRQ+0x34>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff90 	bl	80024a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff2d 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff42 	bl	800244c <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff90 	bl	80024f4 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5f 	bl	80024a0 <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff35 	bl	8002468 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d008      	beq.n	8002648 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2204      	movs	r2, #4
 800263a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e020      	b.n	800268a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 020e 	bic.w	r2, r2, #14
 8002656:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d005      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2204      	movs	r2, #4
 80026b0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e051      	b.n	800275c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 020e 	bic.w	r2, r2, #14
 80026c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a22      	ldr	r2, [pc, #136]	@ (8002768 <HAL_DMA_Abort_IT+0xd4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d029      	beq.n	8002736 <HAL_DMA_Abort_IT+0xa2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a21      	ldr	r2, [pc, #132]	@ (800276c <HAL_DMA_Abort_IT+0xd8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_Abort_IT+0x9e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_DMA_Abort_IT+0xdc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01a      	beq.n	800272c <HAL_DMA_Abort_IT+0x98>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_DMA_Abort_IT+0xe0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d012      	beq.n	8002726 <HAL_DMA_Abort_IT+0x92>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <HAL_DMA_Abort_IT+0xe4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00a      	beq.n	8002720 <HAL_DMA_Abort_IT+0x8c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <HAL_DMA_Abort_IT+0xe8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d102      	bne.n	800271a <HAL_DMA_Abort_IT+0x86>
 8002714:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002718:	e00e      	b.n	8002738 <HAL_DMA_Abort_IT+0xa4>
 800271a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800271e:	e00b      	b.n	8002738 <HAL_DMA_Abort_IT+0xa4>
 8002720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002724:	e008      	b.n	8002738 <HAL_DMA_Abort_IT+0xa4>
 8002726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800272a:	e005      	b.n	8002738 <HAL_DMA_Abort_IT+0xa4>
 800272c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002730:	e002      	b.n	8002738 <HAL_DMA_Abort_IT+0xa4>
 8002732:	2310      	movs	r3, #16
 8002734:	e000      	b.n	8002738 <HAL_DMA_Abort_IT+0xa4>
 8002736:	2301      	movs	r3, #1
 8002738:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <HAL_DMA_Abort_IT+0xec>)
 800273a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
    } 
  }
  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020008 	.word	0x40020008
 800276c:	4002001c 	.word	0x4002001c
 8002770:	40020030 	.word	0x40020030
 8002774:	40020044 	.word	0x40020044
 8002778:	40020058 	.word	0x40020058
 800277c:	4002006c 	.word	0x4002006c
 8002780:	40020000 	.word	0x40020000

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b08b      	sub	sp, #44	@ 0x2c
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002796:	e169      	b.n	8002a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002798:	2201      	movs	r2, #1
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 8158 	bne.w	8002a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a9a      	ldr	r2, [pc, #616]	@ (8002a24 <HAL_GPIO_Init+0x2a0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d05e      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027c0:	4a98      	ldr	r2, [pc, #608]	@ (8002a24 <HAL_GPIO_Init+0x2a0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d875      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027c6:	4a98      	ldr	r2, [pc, #608]	@ (8002a28 <HAL_GPIO_Init+0x2a4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d058      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027cc:	4a96      	ldr	r2, [pc, #600]	@ (8002a28 <HAL_GPIO_Init+0x2a4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d86f      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027d2:	4a96      	ldr	r2, [pc, #600]	@ (8002a2c <HAL_GPIO_Init+0x2a8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d052      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027d8:	4a94      	ldr	r2, [pc, #592]	@ (8002a2c <HAL_GPIO_Init+0x2a8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d869      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027de:	4a94      	ldr	r2, [pc, #592]	@ (8002a30 <HAL_GPIO_Init+0x2ac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d04c      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027e4:	4a92      	ldr	r2, [pc, #584]	@ (8002a30 <HAL_GPIO_Init+0x2ac>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d863      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027ea:	4a92      	ldr	r2, [pc, #584]	@ (8002a34 <HAL_GPIO_Init+0x2b0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d046      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027f0:	4a90      	ldr	r2, [pc, #576]	@ (8002a34 <HAL_GPIO_Init+0x2b0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d85d      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027f6:	2b12      	cmp	r3, #18
 80027f8:	d82a      	bhi.n	8002850 <HAL_GPIO_Init+0xcc>
 80027fa:	2b12      	cmp	r3, #18
 80027fc:	d859      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002804 <HAL_GPIO_Init+0x80>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	0800287f 	.word	0x0800287f
 8002808:	08002859 	.word	0x08002859
 800280c:	0800286b 	.word	0x0800286b
 8002810:	080028ad 	.word	0x080028ad
 8002814:	080028b3 	.word	0x080028b3
 8002818:	080028b3 	.word	0x080028b3
 800281c:	080028b3 	.word	0x080028b3
 8002820:	080028b3 	.word	0x080028b3
 8002824:	080028b3 	.word	0x080028b3
 8002828:	080028b3 	.word	0x080028b3
 800282c:	080028b3 	.word	0x080028b3
 8002830:	080028b3 	.word	0x080028b3
 8002834:	080028b3 	.word	0x080028b3
 8002838:	080028b3 	.word	0x080028b3
 800283c:	080028b3 	.word	0x080028b3
 8002840:	080028b3 	.word	0x080028b3
 8002844:	080028b3 	.word	0x080028b3
 8002848:	08002861 	.word	0x08002861
 800284c:	08002875 	.word	0x08002875
 8002850:	4a79      	ldr	r2, [pc, #484]	@ (8002a38 <HAL_GPIO_Init+0x2b4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002856:	e02c      	b.n	80028b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	623b      	str	r3, [r7, #32]
          break;
 800285e:	e029      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	3304      	adds	r3, #4
 8002866:	623b      	str	r3, [r7, #32]
          break;
 8002868:	e024      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	3308      	adds	r3, #8
 8002870:	623b      	str	r3, [r7, #32]
          break;
 8002872:	e01f      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	330c      	adds	r3, #12
 800287a:	623b      	str	r3, [r7, #32]
          break;
 800287c:	e01a      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002886:	2304      	movs	r3, #4
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e013      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002894:	2308      	movs	r3, #8
 8002896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	611a      	str	r2, [r3, #16]
          break;
 800289e:	e009      	b.n	80028b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a0:	2308      	movs	r3, #8
 80028a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	615a      	str	r2, [r3, #20]
          break;
 80028aa:	e003      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
          break;
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          break;
 80028b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2bff      	cmp	r3, #255	@ 0xff
 80028b8:	d801      	bhi.n	80028be <HAL_GPIO_Init+0x13a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_Init+0x13e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2bff      	cmp	r3, #255	@ 0xff
 80028c8:	d802      	bhi.n	80028d0 <HAL_GPIO_Init+0x14c>
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0x152>
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	3b08      	subs	r3, #8
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	210f      	movs	r1, #15
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	6a39      	ldr	r1, [r7, #32]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	431a      	orrs	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80b1 	beq.w	8002a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002904:	4b4d      	ldr	r3, [pc, #308]	@ (8002a3c <HAL_GPIO_Init+0x2b8>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a4c      	ldr	r2, [pc, #304]	@ (8002a3c <HAL_GPIO_Init+0x2b8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_GPIO_Init+0x2b8>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800291c:	4a48      	ldr	r2, [pc, #288]	@ (8002a40 <HAL_GPIO_Init+0x2bc>)
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a40      	ldr	r2, [pc, #256]	@ (8002a44 <HAL_GPIO_Init+0x2c0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d013      	beq.n	8002970 <HAL_GPIO_Init+0x1ec>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a48 <HAL_GPIO_Init+0x2c4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00d      	beq.n	800296c <HAL_GPIO_Init+0x1e8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3e      	ldr	r2, [pc, #248]	@ (8002a4c <HAL_GPIO_Init+0x2c8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <HAL_GPIO_Init+0x1e4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a50 <HAL_GPIO_Init+0x2cc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_GPIO_Init+0x1e0>
 8002960:	2303      	movs	r3, #3
 8002962:	e006      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002964:	2304      	movs	r3, #4
 8002966:	e004      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002968:	2302      	movs	r3, #2
 800296a:	e002      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002970:	2300      	movs	r3, #0
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	f002 0203 	and.w	r2, r2, #3
 8002978:	0092      	lsls	r2, r2, #2
 800297a:	4093      	lsls	r3, r2
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002982:	492f      	ldr	r1, [pc, #188]	@ (8002a40 <HAL_GPIO_Init+0x2bc>)
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3302      	adds	r3, #2
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800299c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	492c      	ldr	r1, [pc, #176]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4928      	ldr	r1, [pc, #160]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029c4:	4b23      	ldr	r3, [pc, #140]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	4922      	ldr	r1, [pc, #136]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029d2:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	491e      	ldr	r1, [pc, #120]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029ec:	4b19      	ldr	r3, [pc, #100]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	4918      	ldr	r1, [pc, #96]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029fa:	4b16      	ldr	r3, [pc, #88]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4914      	ldr	r1, [pc, #80]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d021      	beq.n	8002a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	490e      	ldr	r1, [pc, #56]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
 8002a20:	e021      	b.n	8002a66 <HAL_GPIO_Init+0x2e2>
 8002a22:	bf00      	nop
 8002a24:	10320000 	.word	0x10320000
 8002a28:	10310000 	.word	0x10310000
 8002a2c:	10220000 	.word	0x10220000
 8002a30:	10210000 	.word	0x10210000
 8002a34:	10120000 	.word	0x10120000
 8002a38:	10110000 	.word	0x10110000
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40010800 	.word	0x40010800
 8002a48:	40010c00 	.word	0x40010c00
 8002a4c:	40011000 	.word	0x40011000
 8002a50:	40011400 	.word	0x40011400
 8002a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4909      	ldr	r1, [pc, #36]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	3301      	adds	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f47f ae8e 	bne.w	8002798 <HAL_GPIO_Init+0x14>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	372c      	adds	r7, #44	@ 0x2c
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40010400 	.word	0x40010400

08002a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	807b      	strh	r3, [r7, #2]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aca:	787b      	ldrb	r3, [r7, #1]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ad6:	e003      	b.n	8002ae0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	041a      	lsls	r2, r3, #16
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	611a      	str	r2, [r3, #16]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	041a      	lsls	r2, r3, #16
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	611a      	str	r2, [r3, #16]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e12b      	b.n	8002d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff fab4 	bl	80020b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	@ 0x24
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b80:	f000 fcda 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8002b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4a81      	ldr	r2, [pc, #516]	@ (8002d90 <HAL_I2C_Init+0x274>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d807      	bhi.n	8002ba0 <HAL_I2C_Init+0x84>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a80      	ldr	r2, [pc, #512]	@ (8002d94 <HAL_I2C_Init+0x278>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	bf94      	ite	ls
 8002b98:	2301      	movls	r3, #1
 8002b9a:	2300      	movhi	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e006      	b.n	8002bae <HAL_I2C_Init+0x92>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a7d      	ldr	r2, [pc, #500]	@ (8002d98 <HAL_I2C_Init+0x27c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	bf94      	ite	ls
 8002ba8:	2301      	movls	r3, #1
 8002baa:	2300      	movhi	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0e7      	b.n	8002d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a78      	ldr	r2, [pc, #480]	@ (8002d9c <HAL_I2C_Init+0x280>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0c9b      	lsrs	r3, r3, #18
 8002bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a6a      	ldr	r2, [pc, #424]	@ (8002d90 <HAL_I2C_Init+0x274>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d802      	bhi.n	8002bf0 <HAL_I2C_Init+0xd4>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3301      	adds	r3, #1
 8002bee:	e009      	b.n	8002c04 <HAL_I2C_Init+0xe8>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	4a69      	ldr	r2, [pc, #420]	@ (8002da0 <HAL_I2C_Init+0x284>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	3301      	adds	r3, #1
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	495c      	ldr	r1, [pc, #368]	@ (8002d90 <HAL_I2C_Init+0x274>)
 8002c20:	428b      	cmp	r3, r1
 8002c22:	d819      	bhi.n	8002c58 <HAL_I2C_Init+0x13c>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e59      	subs	r1, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c32:	1c59      	adds	r1, r3, #1
 8002c34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c38:	400b      	ands	r3, r1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_I2C_Init+0x138>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1e59      	subs	r1, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c52:	e051      	b.n	8002cf8 <HAL_I2C_Init+0x1dc>
 8002c54:	2304      	movs	r3, #4
 8002c56:	e04f      	b.n	8002cf8 <HAL_I2C_Init+0x1dc>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d111      	bne.n	8002c84 <HAL_I2C_Init+0x168>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1e58      	subs	r0, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	440b      	add	r3, r1
 8002c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e012      	b.n	8002caa <HAL_I2C_Init+0x18e>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	0099      	lsls	r1, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Init+0x196>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e022      	b.n	8002cf8 <HAL_I2C_Init+0x1dc>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_I2C_Init+0x1bc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1e58      	subs	r0, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6859      	ldr	r1, [r3, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	440b      	add	r3, r1
 8002cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cd6:	e00f      	b.n	8002cf8 <HAL_I2C_Init+0x1dc>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	0099      	lsls	r1, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	6809      	ldr	r1, [r1, #0]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6911      	ldr	r1, [r2, #16]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68d2      	ldr	r2, [r2, #12]
 8002d32:	4311      	orrs	r1, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	000186a0 	.word	0x000186a0
 8002d94:	001e847f 	.word	0x001e847f
 8002d98:	003d08ff 	.word	0x003d08ff
 8002d9c:	431bde83 	.word	0x431bde83
 8002da0:	10624dd3 	.word	0x10624dd3

08002da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e272      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8087 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dc4:	4b92      	ldr	r3, [pc, #584]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d00c      	beq.n	8002dea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d112      	bne.n	8002e02 <HAL_RCC_OscConfig+0x5e>
 8002ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de8:	d10b      	bne.n	8002e02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dea:	4b89      	ldr	r3, [pc, #548]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d06c      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x12c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d168      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e24c      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x76>
 8002e0c:	4b80      	ldr	r3, [pc, #512]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a7f      	ldr	r2, [pc, #508]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	e02e      	b.n	8002e78 <HAL_RCC_OscConfig+0xd4>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x98>
 8002e22:	4b7b      	ldr	r3, [pc, #492]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7a      	ldr	r2, [pc, #488]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b78      	ldr	r3, [pc, #480]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a77      	ldr	r2, [pc, #476]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e01d      	b.n	8002e78 <HAL_RCC_OscConfig+0xd4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0xbc>
 8002e46:	4b72      	ldr	r3, [pc, #456]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a71      	ldr	r2, [pc, #452]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b6f      	ldr	r3, [pc, #444]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6e      	ldr	r2, [pc, #440]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0xd4>
 8002e60:	4b6b      	ldr	r3, [pc, #428]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6a      	ldr	r2, [pc, #424]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b68      	ldr	r3, [pc, #416]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a67      	ldr	r2, [pc, #412]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7ff fab6 	bl	80023f0 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7ff fab2 	bl	80023f0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	@ 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e200      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0xe4>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff faa2 	bl	80023f0 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7ff fa9e 	bl	80023f0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	@ 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1ec      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	4b53      	ldr	r3, [pc, #332]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x10c>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d063      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ede:	4b4c      	ldr	r3, [pc, #304]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eea:	4b49      	ldr	r3, [pc, #292]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d11c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x18c>
 8002ef6:	4b46      	ldr	r3, [pc, #280]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d116      	bne.n	8002f30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	4b43      	ldr	r3, [pc, #268]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_RCC_OscConfig+0x176>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e1c0      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4939      	ldr	r1, [pc, #228]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	e03a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f38:	4b36      	ldr	r3, [pc, #216]	@ (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7ff fa57 	bl	80023f0 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f46:	f7ff fa53 	bl	80023f0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e1a1      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	4b2d      	ldr	r3, [pc, #180]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b2a      	ldr	r3, [pc, #168]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4927      	ldr	r1, [pc, #156]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
 8002f78:	e015      	b.n	8002fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b26      	ldr	r3, [pc, #152]	@ (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff fa36 	bl	80023f0 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f88:	f7ff fa32 	bl	80023f0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e180      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03a      	beq.n	8003028 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d019      	beq.n	8002fee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fba:	4b17      	ldr	r3, [pc, #92]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7ff fa16 	bl	80023f0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7ff fa12 	bl	80023f0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e160      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f000 face 	bl	8003588 <RCC_Delay>
 8002fec:	e01c      	b.n	8003028 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7ff f9fc 	bl	80023f0 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffa:	e00f      	b.n	800301c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffc:	f7ff f9f8 	bl	80023f0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d908      	bls.n	800301c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e146      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	42420000 	.word	0x42420000
 8003018:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	4b92      	ldr	r3, [pc, #584]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e9      	bne.n	8002ffc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80a6 	beq.w	8003182 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b8b      	ldr	r3, [pc, #556]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10d      	bne.n	8003062 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b88      	ldr	r3, [pc, #544]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4a87      	ldr	r2, [pc, #540]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003050:	61d3      	str	r3, [r2, #28]
 8003052:	4b85      	ldr	r3, [pc, #532]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	4b82      	ldr	r3, [pc, #520]	@ (800326c <HAL_RCC_OscConfig+0x4c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d118      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306e:	4b7f      	ldr	r3, [pc, #508]	@ (800326c <HAL_RCC_OscConfig+0x4c8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a7e      	ldr	r2, [pc, #504]	@ (800326c <HAL_RCC_OscConfig+0x4c8>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307a:	f7ff f9b9 	bl	80023f0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003082:	f7ff f9b5 	bl	80023f0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	@ 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e103      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b75      	ldr	r3, [pc, #468]	@ (800326c <HAL_RCC_OscConfig+0x4c8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x312>
 80030a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6213      	str	r3, [r2, #32]
 80030b4:	e02d      	b.n	8003112 <HAL_RCC_OscConfig+0x36e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x334>
 80030be:	4b6a      	ldr	r3, [pc, #424]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4a69      	ldr	r2, [pc, #420]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	6213      	str	r3, [r2, #32]
 80030ca:	4b67      	ldr	r3, [pc, #412]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4a66      	ldr	r2, [pc, #408]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	6213      	str	r3, [r2, #32]
 80030d6:	e01c      	b.n	8003112 <HAL_RCC_OscConfig+0x36e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d10c      	bne.n	80030fa <HAL_RCC_OscConfig+0x356>
 80030e0:	4b61      	ldr	r3, [pc, #388]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4a60      	ldr	r2, [pc, #384]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6213      	str	r3, [r2, #32]
 80030ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6213      	str	r3, [r2, #32]
 80030f8:	e00b      	b.n	8003112 <HAL_RCC_OscConfig+0x36e>
 80030fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4a5a      	ldr	r2, [pc, #360]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6213      	str	r3, [r2, #32]
 8003106:	4b58      	ldr	r3, [pc, #352]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4a57      	ldr	r2, [pc, #348]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	f023 0304 	bic.w	r3, r3, #4
 8003110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d015      	beq.n	8003146 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311a:	f7ff f969 	bl	80023f0 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7ff f965 	bl	80023f0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0b1      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003138:	4b4b      	ldr	r3, [pc, #300]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ee      	beq.n	8003122 <HAL_RCC_OscConfig+0x37e>
 8003144:	e014      	b.n	8003170 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7ff f953 	bl	80023f0 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7ff f94f 	bl	80023f0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e09b      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003164:	4b40      	ldr	r3, [pc, #256]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ee      	bne.n	800314e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d105      	bne.n	8003182 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003176:	4b3c      	ldr	r3, [pc, #240]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4a3b      	ldr	r2, [pc, #236]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003180:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8087 	beq.w	800329a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800318c:	4b36      	ldr	r3, [pc, #216]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d061      	beq.n	800325c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d146      	bne.n	800322e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a0:	4b33      	ldr	r3, [pc, #204]	@ (8003270 <HAL_RCC_OscConfig+0x4cc>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7ff f923 	bl	80023f0 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7ff f91f 	bl	80023f0 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e06d      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c0:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d4:	d108      	bne.n	80031e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031d6:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4921      	ldr	r1, [pc, #132]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a19      	ldr	r1, [r3, #32]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	430b      	orrs	r3, r1
 80031fa:	491b      	ldr	r1, [pc, #108]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003200:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <HAL_RCC_OscConfig+0x4cc>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7ff f8f3 	bl	80023f0 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320e:	f7ff f8ef 	bl	80023f0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e03d      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x46a>
 800322c:	e035      	b.n	800329a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <HAL_RCC_OscConfig+0x4cc>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7ff f8dc 	bl	80023f0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7ff f8d8 	bl	80023f0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e026      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x498>
 800325a:	e01e      	b.n	800329a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d107      	bne.n	8003274 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e019      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
 8003268:	40021000 	.word	0x40021000
 800326c:	40007000 	.word	0x40007000
 8003270:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <HAL_RCC_OscConfig+0x500>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	429a      	cmp	r2, r3
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000

080032a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0d0      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d910      	bls.n	80032ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b67      	ldr	r3, [pc, #412]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 0207 	bic.w	r2, r3, #7
 80032d2:	4965      	ldr	r1, [pc, #404]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b63      	ldr	r3, [pc, #396]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0b8      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003304:	4b59      	ldr	r3, [pc, #356]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a58      	ldr	r2, [pc, #352]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800330e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800331c:	4b53      	ldr	r3, [pc, #332]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a52      	ldr	r2, [pc, #328]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003326:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003328:	4b50      	ldr	r3, [pc, #320]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	494d      	ldr	r1, [pc, #308]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d040      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	4b47      	ldr	r3, [pc, #284]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d115      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07f      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e073      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b3d      	ldr	r3, [pc, #244]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e06b      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4936      	ldr	r1, [pc, #216]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7ff f82a 	bl	80023f0 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7ff f826 	bl	80023f0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e053      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d210      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4922      	ldr	r1, [pc, #136]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e032      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4916      	ldr	r1, [pc, #88]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003422:	4b12      	ldr	r3, [pc, #72]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	490e      	ldr	r1, [pc, #56]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003436:	f000 f821 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	490a      	ldr	r1, [pc, #40]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <HAL_RCC_ClockConfig+0x1cc>)
 8003450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003452:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x1d0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe ff88 	bl	800236c <HAL_InitTick>

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40022000 	.word	0x40022000
 800346c:	40021000 	.word	0x40021000
 8003470:	08004aec 	.word	0x08004aec
 8003474:	20000030 	.word	0x20000030
 8003478:	20000034 	.word	0x20000034

0800347c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003496:	4b1e      	ldr	r3, [pc, #120]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x94>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x30>
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x36>
 80034aa:	e027      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ac:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ae:	613b      	str	r3, [r7, #16]
      break;
 80034b0:	e027      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	0c9b      	lsrs	r3, r3, #18
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	4a17      	ldr	r2, [pc, #92]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034bc:	5cd3      	ldrb	r3, [r2, r3]
 80034be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x94>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0c5b      	lsrs	r3, r3, #17
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	4a11      	ldr	r2, [pc, #68]	@ (800351c <HAL_RCC_GetSysClockFreq+0xa0>)
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x98>)
 80034de:	fb03 f202 	mul.w	r2, r3, r2
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e004      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003520 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	613b      	str	r3, [r7, #16]
      break;
 80034fa:	e002      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fe:	613b      	str	r3, [r7, #16]
      break;
 8003500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003502:	693b      	ldr	r3, [r7, #16]
}
 8003504:	4618      	mov	r0, r3
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	007a1200 	.word	0x007a1200
 8003518:	08004b04 	.word	0x08004b04
 800351c:	08004b14 	.word	0x08004b14
 8003520:	003d0900 	.word	0x003d0900

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b02      	ldr	r3, [pc, #8]	@ (8003534 <HAL_RCC_GetHCLKFreq+0x10>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	20000030 	.word	0x20000030

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800353c:	f7ff fff2 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	@ (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	08004afc 	.word	0x08004afc

08003560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003564:	f7ff ffde 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	0adb      	lsrs	r3, r3, #11
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	08004afc 	.word	0x08004afc

08003588 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003590:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <RCC_Delay+0x34>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <RCC_Delay+0x38>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0a5b      	lsrs	r3, r3, #9
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035a4:	bf00      	nop
  }
  while (Delay --);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1e5a      	subs	r2, r3, #1
 80035aa:	60fa      	str	r2, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f9      	bne.n	80035a4 <RCC_Delay+0x1c>
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr
 80035bc:	20000030 	.word	0x20000030
 80035c0:	10624dd3 	.word	0x10624dd3

080035c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e041      	b.n	800365a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe fd9e 	bl	800212c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f000 fa5c 	bl	8003ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d001      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e03a      	b.n	80036f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <HAL_TIM_Base_Start_IT+0x98>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x58>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a6:	d009      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x58>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <HAL_TIM_Base_Start_IT+0x9c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x58>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a13      	ldr	r2, [pc, #76]	@ (8003704 <HAL_TIM_Base_Start_IT+0xa0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d111      	bne.n	80036e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d010      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	e007      	b.n	80036f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800

08003708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d020      	beq.n	800376c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01b      	beq.n	800376c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0202 	mvn.w	r2, #2
 800373c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f998 	bl	8003a88 <HAL_TIM_IC_CaptureCallback>
 8003758:	e005      	b.n	8003766 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f98b 	bl	8003a76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f99a 	bl	8003a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d020      	beq.n	80037b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01b      	beq.n	80037b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0204 	mvn.w	r2, #4
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f972 	bl	8003a88 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f965 	bl	8003a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f974 	bl	8003a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d020      	beq.n	8003804 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0208 	mvn.w	r2, #8
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f94c 	bl	8003a88 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f93f 	bl	8003a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f94e 	bl	8003a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d020      	beq.n	8003850 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01b      	beq.n	8003850 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0210 	mvn.w	r2, #16
 8003820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2208      	movs	r2, #8
 8003826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f926 	bl	8003a88 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f919 	bl	8003a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f928 	bl	8003a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0201 	mvn.w	r2, #1
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fbae 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00c      	beq.n	8003898 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa7f 	bl	8003d96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8f8 	bl	8003aac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0220 	mvn.w	r2, #32
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fa52 	bl	8003d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIM_ConfigClockSource+0x1c>
 8003900:	2302      	movs	r3, #2
 8003902:	e0b4      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x186>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800392a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393c:	d03e      	beq.n	80039bc <HAL_TIM_ConfigClockSource+0xd4>
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003942:	f200 8087 	bhi.w	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	f000 8086 	beq.w	8003a5a <HAL_TIM_ConfigClockSource+0x172>
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003952:	d87f      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b70      	cmp	r3, #112	@ 0x70
 8003956:	d01a      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xa6>
 8003958:	2b70      	cmp	r3, #112	@ 0x70
 800395a:	d87b      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b60      	cmp	r3, #96	@ 0x60
 800395e:	d050      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x11a>
 8003960:	2b60      	cmp	r3, #96	@ 0x60
 8003962:	d877      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b50      	cmp	r3, #80	@ 0x50
 8003966:	d03c      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003968:	2b50      	cmp	r3, #80	@ 0x50
 800396a:	d873      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b40      	cmp	r3, #64	@ 0x40
 800396e:	d058      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x13a>
 8003970:	2b40      	cmp	r3, #64	@ 0x40
 8003972:	d86f      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b30      	cmp	r3, #48	@ 0x30
 8003976:	d064      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15a>
 8003978:	2b30      	cmp	r3, #48	@ 0x30
 800397a:	d86b      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b20      	cmp	r3, #32
 800397e:	d060      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15a>
 8003980:	2b20      	cmp	r3, #32
 8003982:	d867      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d05c      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b10      	cmp	r3, #16
 800398a:	d05a      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15a>
 800398c:	e062      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800399e:	f000 f974 	bl	8003c8a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	609a      	str	r2, [r3, #8]
      break;
 80039ba:	e04f      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039cc:	f000 f95d 	bl	8003c8a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039de:	609a      	str	r2, [r3, #8]
      break;
 80039e0:	e03c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 f8d4 	bl	8003b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2150      	movs	r1, #80	@ 0x50
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f92b 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 8003a00:	e02c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 f8f2 	bl	8003bf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2160      	movs	r1, #96	@ 0x60
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f91b 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 8003a20:	e01c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f000 f8b4 	bl	8003b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2140      	movs	r1, #64	@ 0x40
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f90b 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 8003a40:	e00c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f000 f902 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 8003a52:	e003      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	e000      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
	...

08003ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b90 <TIM_Base_SetConfig+0xd0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_Base_SetConfig+0x30>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ade:	d007      	beq.n	8003af0 <TIM_Base_SetConfig+0x30>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <TIM_Base_SetConfig+0xd4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0x30>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a2b      	ldr	r2, [pc, #172]	@ (8003b98 <TIM_Base_SetConfig+0xd8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d108      	bne.n	8003b02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a22      	ldr	r2, [pc, #136]	@ (8003b90 <TIM_Base_SetConfig+0xd0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <TIM_Base_SetConfig+0x62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b10:	d007      	beq.n	8003b22 <TIM_Base_SetConfig+0x62>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	@ (8003b94 <TIM_Base_SetConfig+0xd4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_Base_SetConfig+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b98 <TIM_Base_SetConfig+0xd8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b90 <TIM_Base_SetConfig+0xd0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f023 0201 	bic.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	611a      	str	r2, [r3, #16]
  }
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800

08003b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f023 0201 	bic.w	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 030a 	bic.w	r3, r3, #10
 8003bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f023 0210 	bic.w	r2, r3, #16
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	031b      	lsls	r3, r3, #12
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	621a      	str	r2, [r3, #32]
}
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f043 0307 	orr.w	r3, r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	609a      	str	r2, [r3, #8]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b087      	sub	sp, #28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	021a      	lsls	r2, r3, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	609a      	str	r2, [r3, #8]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e046      	b.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2c:	d009      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a12      	ldr	r2, [pc, #72]	@ (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a10      	ldr	r2, [pc, #64]	@ (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10c      	bne.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800

08003d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e042      	b.n	8003e40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fe f9ec 	bl	80021ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	@ 0x24
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fdb7 	bl	8004960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d175      	bne.n	8003f54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Transmit+0x2c>
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e06e      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2221      	movs	r2, #33	@ 0x21
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e86:	f7fe fab3 	bl	80023f0 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea0:	d108      	bne.n	8003eb4 <HAL_UART_Transmit+0x6c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e003      	b.n	8003ebc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ebc:	e02e      	b.n	8003f1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2180      	movs	r1, #128	@ 0x80
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fb1c 	bl	8004506 <UART_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e03a      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10b      	bne.n	8003efe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	e007      	b.n	8003f0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1cb      	bne.n	8003ebe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2140      	movs	r1, #64	@ 0x40
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fae8 	bl	8004506 <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e006      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d112      	bne.n	8003f9e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_UART_Receive_IT+0x26>
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e00b      	b.n	8003fa0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	461a      	mov	r2, r3
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fb0f 	bl	80045b8 <UART_Start_Receive_IT>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	e000      	b.n	8003fa0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b0ba      	sub	sp, #232	@ 0xe8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10f      	bne.n	800400e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_UART_IRQHandler+0x66>
 8003ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fbec 	bl	80047e4 <UART_Receive_IT>
      return;
 800400c:	e25b      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800400e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80de 	beq.w	80041d4 <HAL_UART_IRQHandler+0x22c>
 8004018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d106      	bne.n	8004032 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004028:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80d1 	beq.w	80041d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_UART_IRQHandler+0xae>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_UART_IRQHandler+0xd2>
 8004062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f043 0202 	orr.w	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_UART_IRQHandler+0xf6>
 8004086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f043 0204 	orr.w	r2, r3, #4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d011      	beq.n	80040ce <HAL_UART_IRQHandler+0x126>
 80040aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d105      	bne.n	80040c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f043 0208 	orr.w	r2, r3, #8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 81f2 	beq.w	80044bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_UART_IRQHandler+0x14e>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fb77 	bl	80047e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_UART_IRQHandler+0x17a>
 800411a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04f      	beq.n	80041c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa81 	bl	800462a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d041      	beq.n	80041ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800414c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004162:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800416e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800417a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1d9      	bne.n	8004136 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d013      	beq.n	80041b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	4a7e      	ldr	r2, [pc, #504]	@ (8004388 <HAL_UART_IRQHandler+0x3e0>)
 8004190:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fa7c 	bl	8002694 <HAL_DMA_Abort_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041ac:	4610      	mov	r0, r2
 80041ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	e00e      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f993 	bl	80044de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	e00a      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f98f 	bl	80044de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	e006      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f98b 	bl	80044de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041ce:	e175      	b.n	80044bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	bf00      	nop
    return;
 80041d2:	e173      	b.n	80044bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	f040 814f 	bne.w	800447c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8148 	beq.w	800447c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8141 	beq.w	800447c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80b6 	beq.w	800438c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800422c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8145 	beq.w	80044c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800423a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800423e:	429a      	cmp	r2, r3
 8004240:	f080 813e 	bcs.w	80044c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800424a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b20      	cmp	r3, #32
 8004254:	f000 8088 	beq.w	8004368 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800426e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004272:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004276:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004284:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004290:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800429c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1d9      	bne.n	8004258 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3314      	adds	r3, #20
 80042c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042c8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e1      	bne.n	80042a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004304:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004306:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800430a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e3      	bne.n	80042e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800434a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800434c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004350:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e3      	bne.n	8004326 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe f95b 	bl	800261e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004376:	b29b      	uxth	r3, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	b29b      	uxth	r3, r3
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8b6 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004384:	e09c      	b.n	80044c0 <HAL_UART_IRQHandler+0x518>
 8004386:	bf00      	nop
 8004388:	080046ef 	.word	0x080046ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004394:	b29b      	uxth	r3, r3
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 808e 	beq.w	80044c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8089 	beq.w	80044c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e3      	bne.n	80043b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3314      	adds	r3, #20
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	623b      	str	r3, [r7, #32]
   return(result);
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800440e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e3      	bne.n	80043ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004454:	61fa      	str	r2, [r7, #28]
 8004456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	617b      	str	r3, [r7, #20]
   return(result);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e3      	bne.n	8004430 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800446e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f83b 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800447a:	e023      	b.n	80044c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_UART_IRQHandler+0x4f4>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f93e 	bl	8004716 <UART_Transmit_IT>
    return;
 800449a:	e014      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <HAL_UART_IRQHandler+0x51e>
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f97d 	bl	80047b4 <UART_EndTransmit_IT>
    return;
 80044ba:	e004      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80044bc:	bf00      	nop
 80044be:	e002      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044c4:	bf00      	nop
  }
}
 80044c6:	37e8      	adds	r7, #232	@ 0xe8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	4613      	mov	r3, r2
 8004514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004516:	e03b      	b.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d037      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004520:	f7fd ff66 	bl	80023f0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <UART_WaitOnFlagUntilTimeout+0x30>
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e03a      	b.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d023      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b80      	cmp	r3, #128	@ 0x80
 800454c:	d020      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d01d      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b08      	cmp	r3, #8
 8004560:	d116      	bne.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f856 	bl	800462a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2208      	movs	r2, #8
 8004582:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e00f      	b.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d0b4      	beq.n	8004518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2222      	movs	r2, #34	@ 0x22
 80045e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0220 	orr.w	r2, r2, #32
 800461c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462a:	b480      	push	{r7}
 800462c:	b095      	sub	sp, #84	@ 0x54
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004652:	643a      	str	r2, [r7, #64]	@ 0x40
 8004654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004658:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e5      	bne.n	8004632 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3314      	adds	r3, #20
 800466c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	61fb      	str	r3, [r7, #28]
   return(result);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800468c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d119      	bne.n	80046d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0310 	bic.w	r3, r3, #16
 80046b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	330c      	adds	r3, #12
 80046c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046c2:	61ba      	str	r2, [r7, #24]
 80046c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6979      	ldr	r1, [r7, #20]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	613b      	str	r3, [r7, #16]
   return(result);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e5      	bne.n	80046a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046e4:	bf00      	nop
 80046e6:	3754      	adds	r7, #84	@ 0x54
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff fee8 	bl	80044de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b21      	cmp	r3, #33	@ 0x21
 8004728:	d13e      	bne.n	80047a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004732:	d114      	bne.n	800475e <UART_Transmit_IT+0x48>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d110      	bne.n	800475e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	1c9a      	adds	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	621a      	str	r2, [r3, #32]
 800475c:	e008      	b.n	8004770 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6211      	str	r1, [r2, #32]
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29b      	uxth	r3, r3
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4619      	mov	r1, r3
 800477e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10f      	bne.n	80047a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff fe79 	bl	80044cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08c      	sub	sp, #48	@ 0x30
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b22      	cmp	r3, #34	@ 0x22
 80047f6:	f040 80ae 	bne.w	8004956 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004802:	d117      	bne.n	8004834 <UART_Receive_IT+0x50>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d113      	bne.n	8004834 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	b29a      	uxth	r2, r3
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482c:	1c9a      	adds	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	629a      	str	r2, [r3, #40]	@ 0x28
 8004832:	e026      	b.n	8004882 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004846:	d007      	beq.n	8004858 <UART_Receive_IT+0x74>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <UART_Receive_IT+0x82>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	b2da      	uxtb	r2, r3
 8004860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e008      	b.n	8004878 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004872:	b2da      	uxtb	r2, r3
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29b      	uxth	r3, r3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4619      	mov	r1, r3
 8004890:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004892:	2b00      	cmp	r3, #0
 8004894:	d15d      	bne.n	8004952 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0220 	bic.w	r2, r2, #32
 80048a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d135      	bne.n	8004948 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	613b      	str	r3, [r7, #16]
   return(result);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f023 0310 	bic.w	r3, r3, #16
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004902:	623a      	str	r2, [r7, #32]
 8004904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	6a3a      	ldr	r2, [r7, #32]
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b10      	cmp	r3, #16
 8004922:	d10a      	bne.n	800493a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff fdd5 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
 8004946:	e002      	b.n	800494e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fd f991 	bl	8001c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e002      	b.n	8004958 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3730      	adds	r7, #48	@ 0x30
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800499a:	f023 030c 	bic.w	r3, r3, #12
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	430b      	orrs	r3, r1
 80049a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a74 <UART_SetConfig+0x114>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d103      	bne.n	80049d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049c8:	f7fe fdca 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	e002      	b.n	80049d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7fe fdb2 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80049d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	4a22      	ldr	r2, [pc, #136]	@ (8004a78 <UART_SetConfig+0x118>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	0119      	lsls	r1, r3, #4
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009a      	lsls	r2, r3, #2
 8004a00:	441a      	add	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a78 <UART_SetConfig+0x118>)
 8004a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2064      	movs	r0, #100	@ 0x64
 8004a16:	fb00 f303 	mul.w	r3, r0, r3
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	3332      	adds	r3, #50	@ 0x32
 8004a20:	4a15      	ldr	r2, [pc, #84]	@ (8004a78 <UART_SetConfig+0x118>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a2c:	4419      	add	r1, r3
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009a      	lsls	r2, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a44:	4b0c      	ldr	r3, [pc, #48]	@ (8004a78 <UART_SetConfig+0x118>)
 8004a46:	fba3 0302 	umull	r0, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2064      	movs	r0, #100	@ 0x64
 8004a4e:	fb00 f303 	mul.w	r3, r0, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	3332      	adds	r3, #50	@ 0x32
 8004a58:	4a07      	ldr	r2, [pc, #28]	@ (8004a78 <UART_SetConfig+0x118>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	440a      	add	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40013800 	.word	0x40013800
 8004a78:	51eb851f 	.word	0x51eb851f

08004a7c <memset>:
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4402      	add	r2, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <__libc_init_array>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	2600      	movs	r6, #0
 8004a90:	4d0c      	ldr	r5, [pc, #48]	@ (8004ac4 <__libc_init_array+0x38>)
 8004a92:	4c0d      	ldr	r4, [pc, #52]	@ (8004ac8 <__libc_init_array+0x3c>)
 8004a94:	1b64      	subs	r4, r4, r5
 8004a96:	10a4      	asrs	r4, r4, #2
 8004a98:	42a6      	cmp	r6, r4
 8004a9a:	d109      	bne.n	8004ab0 <__libc_init_array+0x24>
 8004a9c:	f000 f81a 	bl	8004ad4 <_init>
 8004aa0:	2600      	movs	r6, #0
 8004aa2:	4d0a      	ldr	r5, [pc, #40]	@ (8004acc <__libc_init_array+0x40>)
 8004aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8004ad0 <__libc_init_array+0x44>)
 8004aa6:	1b64      	subs	r4, r4, r5
 8004aa8:	10a4      	asrs	r4, r4, #2
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d105      	bne.n	8004aba <__libc_init_array+0x2e>
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab4:	4798      	blx	r3
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7ee      	b.n	8004a98 <__libc_init_array+0xc>
 8004aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abe:	4798      	blx	r3
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	e7f2      	b.n	8004aaa <__libc_init_array+0x1e>
 8004ac4:	08004b18 	.word	0x08004b18
 8004ac8:	08004b18 	.word	0x08004b18
 8004acc:	08004b18 	.word	0x08004b18
 8004ad0:	08004b1c 	.word	0x08004b1c

08004ad4 <_init>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr

08004ae0 <_fini>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr
