
TestUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba4c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800bd20  0800bd20  0000cd20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c17c  0800c17c  0000d17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c184  0800c184  0000d184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c188  0800c188  0000d188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  0800c18c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000324  240001d8  0800c364  0000e1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240004fc  0800c364  0000e4fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010c2c  00000000  00000000  0000e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002231  00000000  00000000  0001ee32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bb8  00000000  00000000  00021068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008fb  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032439  00000000  00000000  0002251b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000115f8  00000000  00000000  00054954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141903  00000000  00000000  00065f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a784f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000401c  00000000  00000000  001a7894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  001ab8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bd04 	.word	0x0800bd04

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800bd04 	.word	0x0800bd04

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a2 	b.w	8000a84 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	460c      	mov	r4, r1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d14e      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d4:	4694      	mov	ip, r2
 80007d6:	458c      	cmp	ip, r1
 80007d8:	4686      	mov	lr, r0
 80007da:	fab2 f282 	clz	r2, r2
 80007de:	d962      	bls.n	80008a6 <__udivmoddi4+0xde>
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	4091      	lsls	r1, r2
 80007e8:	fa20 f303 	lsr.w	r3, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	4319      	orrs	r1, r3
 80007f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fa:	fa1f f68c 	uxth.w	r6, ip
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000806:	fb07 1114 	mls	r1, r7, r4, r1
 800080a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080e:	fb04 f106 	mul.w	r1, r4, r6
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f104 30ff 	add.w	r0, r4, #4294967295
 800081e:	f080 8112 	bcs.w	8000a46 <__udivmoddi4+0x27e>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 810f 	bls.w	8000a46 <__udivmoddi4+0x27e>
 8000828:	3c02      	subs	r4, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	fa1f f38e 	uxth.w	r3, lr
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb00 f606 	mul.w	r6, r0, r6
 8000842:	429e      	cmp	r6, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f100 31ff 	add.w	r1, r0, #4294967295
 800084e:	f080 80fc 	bcs.w	8000a4a <__udivmoddi4+0x282>
 8000852:	429e      	cmp	r6, r3
 8000854:	f240 80f9 	bls.w	8000a4a <__udivmoddi4+0x282>
 8000858:	4463      	add	r3, ip
 800085a:	3802      	subs	r0, #2
 800085c:	1b9b      	subs	r3, r3, r6
 800085e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000862:	2100      	movs	r1, #0
 8000864:	b11d      	cbz	r5, 800086e <__udivmoddi4+0xa6>
 8000866:	40d3      	lsrs	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	e9c5 3200 	strd	r3, r2, [r5]
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d905      	bls.n	8000882 <__udivmoddi4+0xba>
 8000876:	b10d      	cbz	r5, 800087c <__udivmoddi4+0xb4>
 8000878:	e9c5 0100 	strd	r0, r1, [r5]
 800087c:	2100      	movs	r1, #0
 800087e:	4608      	mov	r0, r1
 8000880:	e7f5      	b.n	800086e <__udivmoddi4+0xa6>
 8000882:	fab3 f183 	clz	r1, r3
 8000886:	2900      	cmp	r1, #0
 8000888:	d146      	bne.n	8000918 <__udivmoddi4+0x150>
 800088a:	42a3      	cmp	r3, r4
 800088c:	d302      	bcc.n	8000894 <__udivmoddi4+0xcc>
 800088e:	4290      	cmp	r0, r2
 8000890:	f0c0 80f0 	bcc.w	8000a74 <__udivmoddi4+0x2ac>
 8000894:	1a86      	subs	r6, r0, r2
 8000896:	eb64 0303 	sbc.w	r3, r4, r3
 800089a:	2001      	movs	r0, #1
 800089c:	2d00      	cmp	r5, #0
 800089e:	d0e6      	beq.n	800086e <__udivmoddi4+0xa6>
 80008a0:	e9c5 6300 	strd	r6, r3, [r5]
 80008a4:	e7e3      	b.n	800086e <__udivmoddi4+0xa6>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	f040 8090 	bne.w	80009cc <__udivmoddi4+0x204>
 80008ac:	eba1 040c 	sub.w	r4, r1, ip
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa1f f78c 	uxth.w	r7, ip
 80008b8:	2101      	movs	r1, #1
 80008ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80008be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ca:	fb07 f006 	mul.w	r0, r7, r6
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x11c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x11a>
 80008dc:	4298      	cmp	r0, r3
 80008de:	f200 80cd 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008e2:	4626      	mov	r6, r4
 80008e4:	1a1c      	subs	r4, r3, r0
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008f6:	fb00 f707 	mul.w	r7, r0, r7
 80008fa:	429f      	cmp	r7, r3
 80008fc:	d908      	bls.n	8000910 <__udivmoddi4+0x148>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f100 34ff 	add.w	r4, r0, #4294967295
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x146>
 8000908:	429f      	cmp	r7, r3
 800090a:	f200 80b0 	bhi.w	8000a6e <__udivmoddi4+0x2a6>
 800090e:	4620      	mov	r0, r4
 8000910:	1bdb      	subs	r3, r3, r7
 8000912:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000916:	e7a5      	b.n	8000864 <__udivmoddi4+0x9c>
 8000918:	f1c1 0620 	rsb	r6, r1, #32
 800091c:	408b      	lsls	r3, r1
 800091e:	fa22 f706 	lsr.w	r7, r2, r6
 8000922:	431f      	orrs	r7, r3
 8000924:	fa20 fc06 	lsr.w	ip, r0, r6
 8000928:	fa04 f301 	lsl.w	r3, r4, r1
 800092c:	ea43 030c 	orr.w	r3, r3, ip
 8000930:	40f4      	lsrs	r4, r6
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	0c38      	lsrs	r0, r7, #16
 8000938:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800093c:	fbb4 fef0 	udiv	lr, r4, r0
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fb00 441e 	mls	r4, r0, lr, r4
 8000948:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800094c:	fb0e f90c 	mul.w	r9, lr, ip
 8000950:	45a1      	cmp	r9, r4
 8000952:	fa02 f201 	lsl.w	r2, r2, r1
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x1a6>
 8000958:	193c      	adds	r4, r7, r4
 800095a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800095e:	f080 8084 	bcs.w	8000a6a <__udivmoddi4+0x2a2>
 8000962:	45a1      	cmp	r9, r4
 8000964:	f240 8081 	bls.w	8000a6a <__udivmoddi4+0x2a2>
 8000968:	f1ae 0e02 	sub.w	lr, lr, #2
 800096c:	443c      	add	r4, r7
 800096e:	eba4 0409 	sub.w	r4, r4, r9
 8000972:	fa1f f983 	uxth.w	r9, r3
 8000976:	fbb4 f3f0 	udiv	r3, r4, r0
 800097a:	fb00 4413 	mls	r4, r0, r3, r4
 800097e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000982:	fb03 fc0c 	mul.w	ip, r3, ip
 8000986:	45a4      	cmp	ip, r4
 8000988:	d907      	bls.n	800099a <__udivmoddi4+0x1d2>
 800098a:	193c      	adds	r4, r7, r4
 800098c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000990:	d267      	bcs.n	8000a62 <__udivmoddi4+0x29a>
 8000992:	45a4      	cmp	ip, r4
 8000994:	d965      	bls.n	8000a62 <__udivmoddi4+0x29a>
 8000996:	3b02      	subs	r3, #2
 8000998:	443c      	add	r4, r7
 800099a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800099e:	fba0 9302 	umull	r9, r3, r0, r2
 80009a2:	eba4 040c 	sub.w	r4, r4, ip
 80009a6:	429c      	cmp	r4, r3
 80009a8:	46ce      	mov	lr, r9
 80009aa:	469c      	mov	ip, r3
 80009ac:	d351      	bcc.n	8000a52 <__udivmoddi4+0x28a>
 80009ae:	d04e      	beq.n	8000a4e <__udivmoddi4+0x286>
 80009b0:	b155      	cbz	r5, 80009c8 <__udivmoddi4+0x200>
 80009b2:	ebb8 030e 	subs.w	r3, r8, lr
 80009b6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ba:	fa04 f606 	lsl.w	r6, r4, r6
 80009be:	40cb      	lsrs	r3, r1
 80009c0:	431e      	orrs	r6, r3
 80009c2:	40cc      	lsrs	r4, r1
 80009c4:	e9c5 6400 	strd	r6, r4, [r5]
 80009c8:	2100      	movs	r1, #0
 80009ca:	e750      	b.n	800086e <__udivmoddi4+0xa6>
 80009cc:	f1c2 0320 	rsb	r3, r2, #32
 80009d0:	fa20 f103 	lsr.w	r1, r0, r3
 80009d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d8:	fa24 f303 	lsr.w	r3, r4, r3
 80009dc:	4094      	lsls	r4, r2
 80009de:	430c      	orrs	r4, r1
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3110 	mls	r1, r8, r0, r3
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x24c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29e>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29e>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x276>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x296>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x296>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e739      	b.n	80008ba <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f0      	b.n	800082c <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e706      	b.n	800085c <__udivmoddi4+0x94>
 8000a4e:	45c8      	cmp	r8, r9
 8000a50:	d2ae      	bcs.n	80009b0 <__udivmoddi4+0x1e8>
 8000a52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a8      	b.n	80009b0 <__udivmoddi4+0x1e8>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x276>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e799      	b.n	800099a <__udivmoddi4+0x1d2>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x24c>
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	e77f      	b.n	800096e <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74d      	b.n	8000910 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e70f      	b.n	800089c <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e730      	b.n	80008e4 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <HAL_UART_RxCpltCallback+0xa4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d143      	bne.n	8000b24 <HAL_UART_RxCpltCallback+0x9c>
	    {
	        // Ensure received data is null-terminated
	        rx_data[29] = '\0';
 8000a9c:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <HAL_UART_RxCpltCallback+0xa8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	775a      	strb	r2, [r3, #29]

	        // Parse the received string using strtok
	        char *token = strtok(rx_data, ",");  // Split by comma
 8000aa2:	4924      	ldr	r1, [pc, #144]	@ (8000b34 <HAL_UART_RxCpltCallback+0xac>)
 8000aa4:	4822      	ldr	r0, [pc, #136]	@ (8000b30 <HAL_UART_RxCpltCallback+0xa8>)
 8000aa6:	f009 fa0d 	bl	8009ec4 <strtok>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	60fb      	str	r3, [r7, #12]
	        if (token != NULL) rx_angle1 = atof(token);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <HAL_UART_RxCpltCallback+0x40>
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f008 fb25 	bl	8009104 <atof>
 8000aba:	ee07 0a90 	vmov	s15, r0
 8000abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <HAL_UART_RxCpltCallback+0xb0>)
 8000ac4:	edc3 7a00 	vstr	s15, [r3]

	        token = strtok(NULL, ",");
 8000ac8:	491a      	ldr	r1, [pc, #104]	@ (8000b34 <HAL_UART_RxCpltCallback+0xac>)
 8000aca:	2000      	movs	r0, #0
 8000acc:	f009 f9fa 	bl	8009ec4 <strtok>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60fb      	str	r3, [r7, #12]
	        if (token != NULL) rx_angle2 = atof(token);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d009      	beq.n	8000aee <HAL_UART_RxCpltCallback+0x66>
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f008 fb12 	bl	8009104 <atof>
 8000ae0:	ee07 0a90 	vmov	s15, r0
 8000ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <HAL_UART_RxCpltCallback+0xb4>)
 8000aea:	edc3 7a00 	vstr	s15, [r3]

	        token = strtok(NULL, ",");
 8000aee:	4911      	ldr	r1, [pc, #68]	@ (8000b34 <HAL_UART_RxCpltCallback+0xac>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f009 f9e7 	bl	8009ec4 <strtok>
 8000af6:	4603      	mov	r3, r0
 8000af8:	60fb      	str	r3, [r7, #12]
	        if (token != NULL) rx_angle3 = atof(token);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d009      	beq.n	8000b14 <HAL_UART_RxCpltCallback+0x8c>
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f008 faff 	bl	8009104 <atof>
 8000b06:	ee07 0a90 	vmov	s15, r0
 8000b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <HAL_UART_RxCpltCallback+0xb8>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]

	        // Restart reception
	        HAL_UART_Receive_DMA(&huart1, (uint8_t *)rx_data, 29);  // Adjust size based on expected length
 8000b14:	221d      	movs	r2, #29
 8000b16:	4906      	ldr	r1, [pc, #24]	@ (8000b30 <HAL_UART_RxCpltCallback+0xa8>)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <HAL_UART_RxCpltCallback+0xa4>)
 8000b1a:	f006 faf9 	bl	8007110 <HAL_UART_Receive_DMA>
	        receiveComplete = 1;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_UART_RxCpltCallback+0xbc>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
	    }
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	24000224 	.word	0x24000224
 8000b30:	240001f4 	.word	0x240001f4
 8000b34:	0800bd20 	.word	0x0800bd20
 8000b38:	24000214 	.word	0x24000214
 8000b3c:	24000218 	.word	0x24000218
 8000b40:	2400021c 	.word	0x2400021c
 8000b44:	24000220 	.word	0x24000220

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fbac 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f812 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f8e2 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b58:	f000 f8b8 	bl	8000ccc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b5c:	f000 f86a 	bl	8000c34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)rx_data, 29);
 8000b60:	221d      	movs	r2, #29
 8000b62:	4903      	ldr	r1, [pc, #12]	@ (8000b70 <main+0x28>)
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <main+0x2c>)
 8000b66:	f006 fad3 	bl	8007110 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6a:	bf00      	nop
 8000b6c:	e7fd      	b.n	8000b6a <main+0x22>
 8000b6e:	bf00      	nop
 8000b70:	240001f4 	.word	0x240001f4
 8000b74:	24000224 	.word	0x24000224

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b09c      	sub	sp, #112	@ 0x70
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b82:	224c      	movs	r2, #76	@ 0x4c
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f009 f981 	bl	8009e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2220      	movs	r2, #32
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f009 f97b 	bl	8009e8e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f003 fd07 	bl	80045ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <SystemClock_Config+0xb8>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000baa:	4a21      	ldr	r2, [pc, #132]	@ (8000c30 <SystemClock_Config+0xb8>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <SystemClock_Config+0xb8>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bbe:	bf00      	nop
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <SystemClock_Config+0xb8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bcc:	d1f8      	bne.n	8000bc0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000bd6:	2340      	movs	r3, #64	@ 0x40
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 fd1c 	bl	8004620 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bee:	f000 f8af 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	233f      	movs	r3, #63	@ 0x3f
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c02:	2340      	movs	r3, #64	@ 0x40
 8000c04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c06:	2340      	movs	r3, #64	@ 0x40
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c10:	2340      	movs	r3, #64	@ 0x40
 8000c12:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2101      	movs	r1, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 f8db 	bl	8004dd4 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c24:	f000 f894 	bl	8000d50 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3770      	adds	r7, #112	@ 0x70
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024800 	.word	0x58024800

08000c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c38:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c3a:	4a23      	ldr	r2, [pc, #140]	@ (8000cc8 <MX_USART1_UART_Init+0x94>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c76:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7c:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c7e:	f006 f9f7 	bl	8007070 <HAL_UART_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c88:	f000 f862 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000c90:	f008 f96d 	bl	8008f6e <HAL_UARTEx_SetTxFifoThreshold>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c9a:	f000 f859 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000ca2:	f008 f9a2 	bl	8008fea <HAL_UARTEx_SetRxFifoThreshold>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cac:	f000 f850 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_USART1_UART_Init+0x90>)
 8000cb2:	f008 f923 	bl	8008efc <HAL_UARTEx_DisableFifoMode>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cbc:	f000 f848 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	24000224 	.word	0x24000224
 8000cc8:	40011000 	.word	0x40011000

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_DMA_Init+0x4c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <MX_DMA_Init+0x4c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <MX_DMA_Init+0x4c>)
 8000ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f000 fc44 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f000 fc5b 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	200c      	movs	r0, #12
 8000d06:	f000 fc3c 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f000 fc53 	bl	80015b6 <HAL_NVIC_EnableIRQ>

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	58024400 	.word	0x58024400

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_GPIO_Init+0x30>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <MX_GPIO_Init+0x30>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_GPIO_Init+0x30>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	58024400 	.word	0x58024400

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_MspInit+0x30>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d68:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_MspInit+0x30>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_MspInit+0x30>)
 8000d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	58024400 	.word	0x58024400

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0b8      	sub	sp, #224	@ 0xe0
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	22b8      	movs	r2, #184	@ 0xb8
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f009 f86c 	bl	8009e8e <memset>
  if(huart->Instance==USART1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a59      	ldr	r2, [pc, #356]	@ (8000f20 <HAL_UART_MspInit+0x190>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	f040 80aa 	bne.w	8000f16 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dc2:	f04f 0201 	mov.w	r2, #1
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 fb87 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000de4:	f7ff ffb4 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f24 <HAL_UART_MspInit+0x194>)
 8000dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dee:	4a4d      	ldr	r2, [pc, #308]	@ (8000f24 <HAL_UART_MspInit+0x194>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000df8:	4b4a      	ldr	r3, [pc, #296]	@ (8000f24 <HAL_UART_MspInit+0x194>)
 8000dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b47      	ldr	r3, [pc, #284]	@ (8000f24 <HAL_UART_MspInit+0x194>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a45      	ldr	r2, [pc, #276]	@ (8000f24 <HAL_UART_MspInit+0x194>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <HAL_UART_MspInit+0x194>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e24:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4837      	ldr	r0, [pc, #220]	@ (8000f28 <HAL_UART_MspInit+0x198>)
 8000e4c:	f003 fa06 	bl	800425c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000e50:	4b36      	ldr	r3, [pc, #216]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e52:	4a37      	ldr	r2, [pc, #220]	@ (8000f30 <HAL_UART_MspInit+0x1a0>)
 8000e54:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000e56:	4b35      	ldr	r3, [pc, #212]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e58:	2229      	movs	r2, #41	@ 0x29
 8000e5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5c:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e62:	4b32      	ldr	r3, [pc, #200]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e68:	4b30      	ldr	r3, [pc, #192]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e70:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e76:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e88:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e8e:	4827      	ldr	r0, [pc, #156]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000e90:	f000 fbac 	bl	80015ec <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000e9a:	f7ff ff59 	bl	8000d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a22      	ldr	r2, [pc, #136]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000ea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ea6:	4a21      	ldr	r2, [pc, #132]	@ (8000f2c <HAL_UART_MspInit+0x19c>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8000eac:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000eae:	4a22      	ldr	r2, [pc, #136]	@ (8000f38 <HAL_UART_MspInit+0x1a8>)
 8000eb0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000eb4:	222a      	movs	r2, #42	@ 0x2a
 8000eb6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000eba:	2240      	movs	r2, #64	@ 0x40
 8000ebc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000ec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000eea:	4812      	ldr	r0, [pc, #72]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000eec:	f000 fb7e 	bl	80015ec <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000ef6:	f7ff ff2b 	bl	8000d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000efe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_UART_MspInit+0x1a4>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2025      	movs	r0, #37	@ 0x25
 8000f0c:	f000 fb39 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f10:	2025      	movs	r0, #37	@ 0x25
 8000f12:	f000 fb50 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	37e0      	adds	r7, #224	@ 0xe0
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40011000 	.word	0x40011000
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58020400 	.word	0x58020400
 8000f2c:	240002b8 	.word	0x240002b8
 8000f30:	40020010 	.word	0x40020010
 8000f34:	24000330 	.word	0x24000330
 8000f38:	40020028 	.word	0x40020028

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 f9fb 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <DMA1_Stream0_IRQHandler+0x10>)
 8000fa2:	f001 fe49 	bl	8002c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	240002b8 	.word	0x240002b8

08000fb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <DMA1_Stream1_IRQHandler+0x10>)
 8000fb6:	f001 fe3f 	bl	8002c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	24000330 	.word	0x24000330

08000fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <USART1_IRQHandler+0x10>)
 8000fca:	f006 f8ed 	bl	80071a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	24000224 	.word	0x24000224

08000fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return 1;
 8000fdc:	2301      	movs	r3, #1
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_kill>:

int _kill(int pid, int sig)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ff2:	f009 f809 	bl	800a008 <__errno>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2216      	movs	r2, #22
 8000ffa:	601a      	str	r2, [r3, #0]
  return -1;
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_exit>:

void _exit (int status)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffe7 	bl	8000fe8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800101a:	bf00      	nop
 800101c:	e7fd      	b.n	800101a <_exit+0x12>

0800101e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e00a      	b.n	8001046 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001030:	f3af 8000 	nop.w
 8001034:	4601      	mov	r1, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	60ba      	str	r2, [r7, #8]
 800103c:	b2ca      	uxtb	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	dbf0      	blt.n	8001030 <_read+0x12>
  }

  return len;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e009      	b.n	800107e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	60ba      	str	r2, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	dbf1      	blt.n	800106a <_write+0x12>
  }
  return len;
 8001086:	687b      	ldr	r3, [r7, #4]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_close>:

int _close(int file)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b8:	605a      	str	r2, [r3, #4]
  return 0;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_isatty>:

int _isatty(int file)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f008 ff6e 	bl	800a008 <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24050000 	.word	0x24050000
 8001158:	00000400 	.word	0x00000400
 800115c:	240003a8 	.word	0x240003a8
 8001160:	24000500 	.word	0x24000500

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001168:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <SystemInit+0xd0>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116e:	4a31      	ldr	r2, [pc, #196]	@ (8001234 <SystemInit+0xd0>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001178:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <SystemInit+0xd4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	2b06      	cmp	r3, #6
 8001182:	d807      	bhi.n	8001194 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001184:	4b2c      	ldr	r3, [pc, #176]	@ (8001238 <SystemInit+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 030f 	bic.w	r3, r3, #15
 800118c:	4a2a      	ldr	r2, [pc, #168]	@ (8001238 <SystemInit+0xd4>)
 800118e:	f043 0307 	orr.w	r3, r3, #7
 8001192:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <SystemInit+0xd8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a28      	ldr	r2, [pc, #160]	@ (800123c <SystemInit+0xd8>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <SystemInit+0xd8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <SystemInit+0xd8>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4924      	ldr	r1, [pc, #144]	@ (800123c <SystemInit+0xd8>)
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <SystemInit+0xdc>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <SystemInit+0xd4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <SystemInit+0xd4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 030f 	bic.w	r3, r3, #15
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <SystemInit+0xd4>)
 80011c8:	f043 0307 	orr.w	r3, r3, #7
 80011cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <SystemInit+0xd8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <SystemInit+0xd8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <SystemInit+0xd8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <SystemInit+0xd8>)
 80011e2:	4a18      	ldr	r2, [pc, #96]	@ (8001244 <SystemInit+0xe0>)
 80011e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <SystemInit+0xd8>)
 80011e8:	4a17      	ldr	r2, [pc, #92]	@ (8001248 <SystemInit+0xe4>)
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011ec:	4b13      	ldr	r3, [pc, #76]	@ (800123c <SystemInit+0xd8>)
 80011ee:	4a17      	ldr	r2, [pc, #92]	@ (800124c <SystemInit+0xe8>)
 80011f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <SystemInit+0xd8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011f8:	4b10      	ldr	r3, [pc, #64]	@ (800123c <SystemInit+0xd8>)
 80011fa:	4a14      	ldr	r2, [pc, #80]	@ (800124c <SystemInit+0xe8>)
 80011fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <SystemInit+0xd8>)
 8001200:	2200      	movs	r2, #0
 8001202:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001204:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <SystemInit+0xd8>)
 8001206:	4a11      	ldr	r2, [pc, #68]	@ (800124c <SystemInit+0xe8>)
 8001208:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <SystemInit+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <SystemInit+0xd8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a09      	ldr	r2, [pc, #36]	@ (800123c <SystemInit+0xd8>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800121a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <SystemInit+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <SystemInit+0xec>)
 8001224:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001228:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	52002000 	.word	0x52002000
 800123c:	58024400 	.word	0x58024400
 8001240:	eaf6ed7f 	.word	0xeaf6ed7f
 8001244:	02020200 	.word	0x02020200
 8001248:	01ff0000 	.word	0x01ff0000
 800124c:	01010280 	.word	0x01010280
 8001250:	52004000 	.word	0x52004000

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800128c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001258:	f7ff ff84 	bl	8001164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	@ (8001294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	@ (80012a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f008 fec7 	bl	800a014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff fc5f 	bl	8000b48 <main>
  bx  lr
 800128a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001290:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001294:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001298:	0800c18c 	.word	0x0800c18c
  ldr r2, =_sbss
 800129c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80012a0:	240004fc 	.word	0x240004fc

080012a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC3_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f95c 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012b4:	f003 ff44 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_Init+0x68>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	4913      	ldr	r1, [pc, #76]	@ (8001314 <HAL_Init+0x6c>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_Init+0x68>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <HAL_Init+0x6c>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <HAL_Init+0x70>)
 80012ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012ec:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <HAL_Init+0x74>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f2:	200f      	movs	r0, #15
 80012f4:	f000 f814 	bl	8001320 <HAL_InitTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e002      	b.n	8001308 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001302:	f7ff fd2b 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58024400 	.word	0x58024400
 8001314:	0800bd24 	.word	0x0800bd24
 8001318:	24000004 	.word	0x24000004
 800131c:	24000000 	.word	0x24000000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_InitTick+0x60>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e021      	b.n	8001378 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <HAL_InitTick+0x64>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_InitTick+0x60>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f941 	bl	80015d2 <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 f90b 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	@ (8001388 <HAL_InitTick+0x68>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2400000c 	.word	0x2400000c
 8001384:	24000000 	.word	0x24000000
 8001388:	24000008 	.word	0x24000008

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2400000c 	.word	0x2400000c
 80013b0:	240003ac 	.word	0x240003ac

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	240003ac 	.word	0x240003ac

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <__NVIC_SetPriorityGrouping+0x40>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	@ (800140c <__NVIC_SetPriorityGrouping+0x40>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	05fa0000 	.word	0x05fa0000

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	@ (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	@ (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	@ (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	@ (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff40 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff90 	bl	80014c0 <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5f 	bl	800146c <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff33 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa4 	bl	8001528 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff fede 	bl	80013b4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e312      	b.n	8001c2a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a66      	ldr	r2, [pc, #408]	@ (80017a4 <HAL_DMA_Init+0x1b8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d04a      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a65      	ldr	r2, [pc, #404]	@ (80017a8 <HAL_DMA_Init+0x1bc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d045      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a63      	ldr	r2, [pc, #396]	@ (80017ac <HAL_DMA_Init+0x1c0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d040      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a62      	ldr	r2, [pc, #392]	@ (80017b0 <HAL_DMA_Init+0x1c4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d03b      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a60      	ldr	r2, [pc, #384]	@ (80017b4 <HAL_DMA_Init+0x1c8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d036      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a5f      	ldr	r2, [pc, #380]	@ (80017b8 <HAL_DMA_Init+0x1cc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d031      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a5d      	ldr	r2, [pc, #372]	@ (80017bc <HAL_DMA_Init+0x1d0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d02c      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a5c      	ldr	r2, [pc, #368]	@ (80017c0 <HAL_DMA_Init+0x1d4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d027      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a5a      	ldr	r2, [pc, #360]	@ (80017c4 <HAL_DMA_Init+0x1d8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d022      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a59      	ldr	r2, [pc, #356]	@ (80017c8 <HAL_DMA_Init+0x1dc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d01d      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a57      	ldr	r2, [pc, #348]	@ (80017cc <HAL_DMA_Init+0x1e0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d018      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a56      	ldr	r2, [pc, #344]	@ (80017d0 <HAL_DMA_Init+0x1e4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a54      	ldr	r2, [pc, #336]	@ (80017d4 <HAL_DMA_Init+0x1e8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00e      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a53      	ldr	r2, [pc, #332]	@ (80017d8 <HAL_DMA_Init+0x1ec>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d009      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a51      	ldr	r2, [pc, #324]	@ (80017dc <HAL_DMA_Init+0x1f0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d004      	beq.n	80016a4 <HAL_DMA_Init+0xb8>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a50      	ldr	r2, [pc, #320]	@ (80017e0 <HAL_DMA_Init+0x1f4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_DMA_Init+0xbc>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_DMA_Init+0xbe>
 80016a8:	2300      	movs	r3, #0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 813c 	beq.w	8001928 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a37      	ldr	r2, [pc, #220]	@ (80017a4 <HAL_DMA_Init+0x1b8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d04a      	beq.n	8001760 <HAL_DMA_Init+0x174>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a36      	ldr	r2, [pc, #216]	@ (80017a8 <HAL_DMA_Init+0x1bc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d045      	beq.n	8001760 <HAL_DMA_Init+0x174>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a34      	ldr	r2, [pc, #208]	@ (80017ac <HAL_DMA_Init+0x1c0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d040      	beq.n	8001760 <HAL_DMA_Init+0x174>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a33      	ldr	r2, [pc, #204]	@ (80017b0 <HAL_DMA_Init+0x1c4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d03b      	beq.n	8001760 <HAL_DMA_Init+0x174>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a31      	ldr	r2, [pc, #196]	@ (80017b4 <HAL_DMA_Init+0x1c8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d036      	beq.n	8001760 <HAL_DMA_Init+0x174>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a30      	ldr	r2, [pc, #192]	@ (80017b8 <HAL_DMA_Init+0x1cc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d031      	beq.n	8001760 <HAL_DMA_Init+0x174>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2e      	ldr	r2, [pc, #184]	@ (80017bc <HAL_DMA_Init+0x1d0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d02c      	beq.n	8001760 <HAL_DMA_Init+0x174>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2d      	ldr	r2, [pc, #180]	@ (80017c0 <HAL_DMA_Init+0x1d4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d027      	beq.n	8001760 <HAL_DMA_Init+0x174>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a2b      	ldr	r2, [pc, #172]	@ (80017c4 <HAL_DMA_Init+0x1d8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d022      	beq.n	8001760 <HAL_DMA_Init+0x174>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2a      	ldr	r2, [pc, #168]	@ (80017c8 <HAL_DMA_Init+0x1dc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d01d      	beq.n	8001760 <HAL_DMA_Init+0x174>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a28      	ldr	r2, [pc, #160]	@ (80017cc <HAL_DMA_Init+0x1e0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d018      	beq.n	8001760 <HAL_DMA_Init+0x174>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a27      	ldr	r2, [pc, #156]	@ (80017d0 <HAL_DMA_Init+0x1e4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d013      	beq.n	8001760 <HAL_DMA_Init+0x174>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a25      	ldr	r2, [pc, #148]	@ (80017d4 <HAL_DMA_Init+0x1e8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00e      	beq.n	8001760 <HAL_DMA_Init+0x174>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a24      	ldr	r2, [pc, #144]	@ (80017d8 <HAL_DMA_Init+0x1ec>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d009      	beq.n	8001760 <HAL_DMA_Init+0x174>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a22      	ldr	r2, [pc, #136]	@ (80017dc <HAL_DMA_Init+0x1f0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d004      	beq.n	8001760 <HAL_DMA_Init+0x174>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <HAL_DMA_Init+0x1f4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d108      	bne.n	8001772 <HAL_DMA_Init+0x186>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e007      	b.n	8001782 <HAL_DMA_Init+0x196>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001782:	e02f      	b.n	80017e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001784:	f7ff fe16 	bl	80013b4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b05      	cmp	r3, #5
 8001790:	d928      	bls.n	80017e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2220      	movs	r2, #32
 8001796:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2203      	movs	r2, #3
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e242      	b.n	8001c2a <HAL_DMA_Init+0x63e>
 80017a4:	40020010 	.word	0x40020010
 80017a8:	40020028 	.word	0x40020028
 80017ac:	40020040 	.word	0x40020040
 80017b0:	40020058 	.word	0x40020058
 80017b4:	40020070 	.word	0x40020070
 80017b8:	40020088 	.word	0x40020088
 80017bc:	400200a0 	.word	0x400200a0
 80017c0:	400200b8 	.word	0x400200b8
 80017c4:	40020410 	.word	0x40020410
 80017c8:	40020428 	.word	0x40020428
 80017cc:	40020440 	.word	0x40020440
 80017d0:	40020458 	.word	0x40020458
 80017d4:	40020470 	.word	0x40020470
 80017d8:	40020488 	.word	0x40020488
 80017dc:	400204a0 	.word	0x400204a0
 80017e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1c8      	bne.n	8001784 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4b83      	ldr	r3, [pc, #524]	@ (8001a0c <HAL_DMA_Init+0x420>)
 80017fe:	4013      	ands	r3, r2
 8001800:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800180a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001816:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001822:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	2b04      	cmp	r3, #4
 8001836:	d107      	bne.n	8001848 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001840:	4313      	orrs	r3, r2
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b28      	cmp	r3, #40	@ 0x28
 800184e:	d903      	bls.n	8001858 <HAL_DMA_Init+0x26c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b2e      	cmp	r3, #46	@ 0x2e
 8001856:	d91f      	bls.n	8001898 <HAL_DMA_Init+0x2ac>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b3e      	cmp	r3, #62	@ 0x3e
 800185e:	d903      	bls.n	8001868 <HAL_DMA_Init+0x27c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b42      	cmp	r3, #66	@ 0x42
 8001866:	d917      	bls.n	8001898 <HAL_DMA_Init+0x2ac>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b46      	cmp	r3, #70	@ 0x46
 800186e:	d903      	bls.n	8001878 <HAL_DMA_Init+0x28c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b48      	cmp	r3, #72	@ 0x48
 8001876:	d90f      	bls.n	8001898 <HAL_DMA_Init+0x2ac>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b4e      	cmp	r3, #78	@ 0x4e
 800187e:	d903      	bls.n	8001888 <HAL_DMA_Init+0x29c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b52      	cmp	r3, #82	@ 0x52
 8001886:	d907      	bls.n	8001898 <HAL_DMA_Init+0x2ac>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b73      	cmp	r3, #115	@ 0x73
 800188e:	d905      	bls.n	800189c <HAL_DMA_Init+0x2b0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b77      	cmp	r3, #119	@ 0x77
 8001896:	d801      	bhi.n	800189c <HAL_DMA_Init+0x2b0>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_DMA_Init+0x2b2>
 800189c:	2300      	movs	r3, #0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f023 0307 	bic.w	r3, r3, #7
 80018c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d117      	bne.n	8001904 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00e      	beq.n	8001904 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f002 fb2e 	bl	8003f48 <DMA_CheckFifoParam>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2240      	movs	r2, #64	@ 0x40
 80018f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e192      	b.n	8001c2a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f002 fa69 	bl	8003de4 <DMA_CalcBaseAndBitshift>
 8001912:	4603      	mov	r3, r0
 8001914:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	223f      	movs	r2, #63	@ 0x3f
 8001920:	409a      	lsls	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	e0c8      	b.n	8001aba <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a38      	ldr	r2, [pc, #224]	@ (8001a10 <HAL_DMA_Init+0x424>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d022      	beq.n	8001978 <HAL_DMA_Init+0x38c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a37      	ldr	r2, [pc, #220]	@ (8001a14 <HAL_DMA_Init+0x428>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d01d      	beq.n	8001978 <HAL_DMA_Init+0x38c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a35      	ldr	r2, [pc, #212]	@ (8001a18 <HAL_DMA_Init+0x42c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d018      	beq.n	8001978 <HAL_DMA_Init+0x38c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a34      	ldr	r2, [pc, #208]	@ (8001a1c <HAL_DMA_Init+0x430>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_DMA_Init+0x38c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a32      	ldr	r2, [pc, #200]	@ (8001a20 <HAL_DMA_Init+0x434>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00e      	beq.n	8001978 <HAL_DMA_Init+0x38c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a31      	ldr	r2, [pc, #196]	@ (8001a24 <HAL_DMA_Init+0x438>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_DMA_Init+0x38c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2f      	ldr	r2, [pc, #188]	@ (8001a28 <HAL_DMA_Init+0x43c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Init+0x38c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a2e      	ldr	r2, [pc, #184]	@ (8001a2c <HAL_DMA_Init+0x440>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_DMA_Init+0x390>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_DMA_Init+0x392>
 800197c:	2300      	movs	r3, #0
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8092 	beq.w	8001aa8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a21      	ldr	r2, [pc, #132]	@ (8001a10 <HAL_DMA_Init+0x424>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d021      	beq.n	80019d2 <HAL_DMA_Init+0x3e6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a20      	ldr	r2, [pc, #128]	@ (8001a14 <HAL_DMA_Init+0x428>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d01c      	beq.n	80019d2 <HAL_DMA_Init+0x3e6>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1e      	ldr	r2, [pc, #120]	@ (8001a18 <HAL_DMA_Init+0x42c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d017      	beq.n	80019d2 <HAL_DMA_Init+0x3e6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a1c <HAL_DMA_Init+0x430>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d012      	beq.n	80019d2 <HAL_DMA_Init+0x3e6>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <HAL_DMA_Init+0x434>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_DMA_Init+0x3e6>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001a24 <HAL_DMA_Init+0x438>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d008      	beq.n	80019d2 <HAL_DMA_Init+0x3e6>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <HAL_DMA_Init+0x43c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d003      	beq.n	80019d2 <HAL_DMA_Init+0x3e6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_DMA_Init+0x440>)
 80019d0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <HAL_DMA_Init+0x444>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b40      	cmp	r3, #64	@ 0x40
 80019f8:	d01c      	beq.n	8001a34 <HAL_DMA_Init+0x448>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b80      	cmp	r3, #128	@ 0x80
 8001a00:	d102      	bne.n	8001a08 <HAL_DMA_Init+0x41c>
 8001a02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a06:	e016      	b.n	8001a36 <HAL_DMA_Init+0x44a>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e014      	b.n	8001a36 <HAL_DMA_Init+0x44a>
 8001a0c:	fe10803f 	.word	0xfe10803f
 8001a10:	58025408 	.word	0x58025408
 8001a14:	5802541c 	.word	0x5802541c
 8001a18:	58025430 	.word	0x58025430
 8001a1c:	58025444 	.word	0x58025444
 8001a20:	58025458 	.word	0x58025458
 8001a24:	5802546c 	.word	0x5802546c
 8001a28:	58025480 	.word	0x58025480
 8001a2c:	58025494 	.word	0x58025494
 8001a30:	fffe000f 	.word	0xfffe000f
 8001a34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68d2      	ldr	r2, [r2, #12]
 8001a3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c34 <HAL_DMA_Init+0x648>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c38 <HAL_DMA_Init+0x64c>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	009a      	lsls	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f002 f9a9 	bl	8003de4 <DMA_CalcBaseAndBitshift>
 8001a92:	4603      	mov	r3, r0
 8001a94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	e008      	b.n	8001aba <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2240      	movs	r2, #64	@ 0x40
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0b7      	b.n	8001c2a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5f      	ldr	r2, [pc, #380]	@ (8001c3c <HAL_DMA_Init+0x650>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d072      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c40 <HAL_DMA_Init+0x654>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d06d      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c44 <HAL_DMA_Init+0x658>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d068      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5a      	ldr	r2, [pc, #360]	@ (8001c48 <HAL_DMA_Init+0x65c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d063      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a59      	ldr	r2, [pc, #356]	@ (8001c4c <HAL_DMA_Init+0x660>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d05e      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a57      	ldr	r2, [pc, #348]	@ (8001c50 <HAL_DMA_Init+0x664>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d059      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a56      	ldr	r2, [pc, #344]	@ (8001c54 <HAL_DMA_Init+0x668>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d054      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a54      	ldr	r2, [pc, #336]	@ (8001c58 <HAL_DMA_Init+0x66c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d04f      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a53      	ldr	r2, [pc, #332]	@ (8001c5c <HAL_DMA_Init+0x670>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04a      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a51      	ldr	r2, [pc, #324]	@ (8001c60 <HAL_DMA_Init+0x674>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d045      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a50      	ldr	r2, [pc, #320]	@ (8001c64 <HAL_DMA_Init+0x678>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d040      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c68 <HAL_DMA_Init+0x67c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d03b      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a4d      	ldr	r2, [pc, #308]	@ (8001c6c <HAL_DMA_Init+0x680>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d036      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a4b      	ldr	r2, [pc, #300]	@ (8001c70 <HAL_DMA_Init+0x684>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c74 <HAL_DMA_Init+0x688>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d02c      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a48      	ldr	r2, [pc, #288]	@ (8001c78 <HAL_DMA_Init+0x68c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a47      	ldr	r2, [pc, #284]	@ (8001c7c <HAL_DMA_Init+0x690>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a45      	ldr	r2, [pc, #276]	@ (8001c80 <HAL_DMA_Init+0x694>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01d      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a44      	ldr	r2, [pc, #272]	@ (8001c84 <HAL_DMA_Init+0x698>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d018      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a42      	ldr	r2, [pc, #264]	@ (8001c88 <HAL_DMA_Init+0x69c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a41      	ldr	r2, [pc, #260]	@ (8001c8c <HAL_DMA_Init+0x6a0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00e      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a3f      	ldr	r2, [pc, #252]	@ (8001c90 <HAL_DMA_Init+0x6a4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c94 <HAL_DMA_Init+0x6a8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Init+0x5be>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a3c      	ldr	r2, [pc, #240]	@ (8001c98 <HAL_DMA_Init+0x6ac>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_DMA_Init+0x5c2>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_DMA_Init+0x5c4>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d032      	beq.n	8001c1a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f002 fa43 	bl	8004040 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b80      	cmp	r3, #128	@ 0x80
 8001bc0:	d102      	bne.n	8001bc8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <HAL_DMA_Init+0x61c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d80c      	bhi.n	8001c08 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f002 fac0 	bl	8004174 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	e008      	b.n	8001c1a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	a7fdabf8 	.word	0xa7fdabf8
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	40020010 	.word	0x40020010
 8001c40:	40020028 	.word	0x40020028
 8001c44:	40020040 	.word	0x40020040
 8001c48:	40020058 	.word	0x40020058
 8001c4c:	40020070 	.word	0x40020070
 8001c50:	40020088 	.word	0x40020088
 8001c54:	400200a0 	.word	0x400200a0
 8001c58:	400200b8 	.word	0x400200b8
 8001c5c:	40020410 	.word	0x40020410
 8001c60:	40020428 	.word	0x40020428
 8001c64:	40020440 	.word	0x40020440
 8001c68:	40020458 	.word	0x40020458
 8001c6c:	40020470 	.word	0x40020470
 8001c70:	40020488 	.word	0x40020488
 8001c74:	400204a0 	.word	0x400204a0
 8001c78:	400204b8 	.word	0x400204b8
 8001c7c:	58025408 	.word	0x58025408
 8001c80:	5802541c 	.word	0x5802541c
 8001c84:	58025430 	.word	0x58025430
 8001c88:	58025444 	.word	0x58025444
 8001c8c:	58025458 	.word	0x58025458
 8001c90:	5802546c 	.word	0x5802546c
 8001c94:	58025480 	.word	0x58025480
 8001c98:	58025494 	.word	0x58025494

08001c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e226      	b.n	8002106 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_DMA_Start_IT+0x2a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e21f      	b.n	8002106 <HAL_DMA_Start_IT+0x46a>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	f040 820a 	bne.w	80020f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a68      	ldr	r2, [pc, #416]	@ (8001e90 <HAL_DMA_Start_IT+0x1f4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d04a      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a66      	ldr	r2, [pc, #408]	@ (8001e94 <HAL_DMA_Start_IT+0x1f8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d045      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a65      	ldr	r2, [pc, #404]	@ (8001e98 <HAL_DMA_Start_IT+0x1fc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d040      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a63      	ldr	r2, [pc, #396]	@ (8001e9c <HAL_DMA_Start_IT+0x200>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d03b      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a62      	ldr	r2, [pc, #392]	@ (8001ea0 <HAL_DMA_Start_IT+0x204>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d036      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a60      	ldr	r2, [pc, #384]	@ (8001ea4 <HAL_DMA_Start_IT+0x208>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d031      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea8 <HAL_DMA_Start_IT+0x20c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d02c      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a5d      	ldr	r2, [pc, #372]	@ (8001eac <HAL_DMA_Start_IT+0x210>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d027      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001eb0 <HAL_DMA_Start_IT+0x214>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d022      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a5a      	ldr	r2, [pc, #360]	@ (8001eb4 <HAL_DMA_Start_IT+0x218>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01d      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a59      	ldr	r2, [pc, #356]	@ (8001eb8 <HAL_DMA_Start_IT+0x21c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d018      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a57      	ldr	r2, [pc, #348]	@ (8001ebc <HAL_DMA_Start_IT+0x220>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a56      	ldr	r2, [pc, #344]	@ (8001ec0 <HAL_DMA_Start_IT+0x224>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00e      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a54      	ldr	r2, [pc, #336]	@ (8001ec4 <HAL_DMA_Start_IT+0x228>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d009      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a53      	ldr	r2, [pc, #332]	@ (8001ec8 <HAL_DMA_Start_IT+0x22c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d004      	beq.n	8001d8a <HAL_DMA_Start_IT+0xee>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a51      	ldr	r2, [pc, #324]	@ (8001ecc <HAL_DMA_Start_IT+0x230>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d108      	bne.n	8001d9c <HAL_DMA_Start_IT+0x100>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e007      	b.n	8001dac <HAL_DMA_Start_IT+0x110>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f001 fe6a 	bl	8003a8c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a34      	ldr	r2, [pc, #208]	@ (8001e90 <HAL_DMA_Start_IT+0x1f4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d04a      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a33      	ldr	r2, [pc, #204]	@ (8001e94 <HAL_DMA_Start_IT+0x1f8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d045      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a31      	ldr	r2, [pc, #196]	@ (8001e98 <HAL_DMA_Start_IT+0x1fc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d040      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a30      	ldr	r2, [pc, #192]	@ (8001e9c <HAL_DMA_Start_IT+0x200>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d03b      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea0 <HAL_DMA_Start_IT+0x204>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d036      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea4 <HAL_DMA_Start_IT+0x208>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d031      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea8 <HAL_DMA_Start_IT+0x20c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02c      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2a      	ldr	r2, [pc, #168]	@ (8001eac <HAL_DMA_Start_IT+0x210>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d027      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a28      	ldr	r2, [pc, #160]	@ (8001eb0 <HAL_DMA_Start_IT+0x214>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d022      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <HAL_DMA_Start_IT+0x218>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01d      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a25      	ldr	r2, [pc, #148]	@ (8001eb8 <HAL_DMA_Start_IT+0x21c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d018      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a24      	ldr	r2, [pc, #144]	@ (8001ebc <HAL_DMA_Start_IT+0x220>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a22      	ldr	r2, [pc, #136]	@ (8001ec0 <HAL_DMA_Start_IT+0x224>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00e      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <HAL_DMA_Start_IT+0x228>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec8 <HAL_DMA_Start_IT+0x22c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_DMA_Start_IT+0x1bc>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1e      	ldr	r2, [pc, #120]	@ (8001ecc <HAL_DMA_Start_IT+0x230>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_DMA_Start_IT+0x1c0>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_DMA_Start_IT+0x1c2>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d036      	beq.n	8001ed0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 021e 	bic.w	r2, r3, #30
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0216 	orr.w	r2, r2, #22
 8001e74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d03e      	beq.n	8001efc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0208 	orr.w	r2, r2, #8
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e035      	b.n	8001efc <HAL_DMA_Start_IT+0x260>
 8001e90:	40020010 	.word	0x40020010
 8001e94:	40020028 	.word	0x40020028
 8001e98:	40020040 	.word	0x40020040
 8001e9c:	40020058 	.word	0x40020058
 8001ea0:	40020070 	.word	0x40020070
 8001ea4:	40020088 	.word	0x40020088
 8001ea8:	400200a0 	.word	0x400200a0
 8001eac:	400200b8 	.word	0x400200b8
 8001eb0:	40020410 	.word	0x40020410
 8001eb4:	40020428 	.word	0x40020428
 8001eb8:	40020440 	.word	0x40020440
 8001ebc:	40020458 	.word	0x40020458
 8001ec0:	40020470 	.word	0x40020470
 8001ec4:	40020488 	.word	0x40020488
 8001ec8:	400204a0 	.word	0x400204a0
 8001ecc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 020e 	bic.w	r2, r3, #14
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 020a 	orr.w	r2, r2, #10
 8001ee2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0204 	orr.w	r2, r2, #4
 8001efa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a83      	ldr	r2, [pc, #524]	@ (8002110 <HAL_DMA_Start_IT+0x474>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d072      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a82      	ldr	r2, [pc, #520]	@ (8002114 <HAL_DMA_Start_IT+0x478>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d06d      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a80      	ldr	r2, [pc, #512]	@ (8002118 <HAL_DMA_Start_IT+0x47c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d068      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7f      	ldr	r2, [pc, #508]	@ (800211c <HAL_DMA_Start_IT+0x480>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d063      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a7d      	ldr	r2, [pc, #500]	@ (8002120 <HAL_DMA_Start_IT+0x484>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d05e      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a7c      	ldr	r2, [pc, #496]	@ (8002124 <HAL_DMA_Start_IT+0x488>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d059      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a7a      	ldr	r2, [pc, #488]	@ (8002128 <HAL_DMA_Start_IT+0x48c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d054      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a79      	ldr	r2, [pc, #484]	@ (800212c <HAL_DMA_Start_IT+0x490>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d04f      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a77      	ldr	r2, [pc, #476]	@ (8002130 <HAL_DMA_Start_IT+0x494>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d04a      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a76      	ldr	r2, [pc, #472]	@ (8002134 <HAL_DMA_Start_IT+0x498>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d045      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a74      	ldr	r2, [pc, #464]	@ (8002138 <HAL_DMA_Start_IT+0x49c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d040      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a73      	ldr	r2, [pc, #460]	@ (800213c <HAL_DMA_Start_IT+0x4a0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d03b      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a71      	ldr	r2, [pc, #452]	@ (8002140 <HAL_DMA_Start_IT+0x4a4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d036      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a70      	ldr	r2, [pc, #448]	@ (8002144 <HAL_DMA_Start_IT+0x4a8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d031      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_DMA_Start_IT+0x4ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02c      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6d      	ldr	r2, [pc, #436]	@ (800214c <HAL_DMA_Start_IT+0x4b0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d027      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8002150 <HAL_DMA_Start_IT+0x4b4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d022      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6a      	ldr	r2, [pc, #424]	@ (8002154 <HAL_DMA_Start_IT+0x4b8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d01d      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a68      	ldr	r2, [pc, #416]	@ (8002158 <HAL_DMA_Start_IT+0x4bc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d018      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a67      	ldr	r2, [pc, #412]	@ (800215c <HAL_DMA_Start_IT+0x4c0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a65      	ldr	r2, [pc, #404]	@ (8002160 <HAL_DMA_Start_IT+0x4c4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00e      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a64      	ldr	r2, [pc, #400]	@ (8002164 <HAL_DMA_Start_IT+0x4c8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a62      	ldr	r2, [pc, #392]	@ (8002168 <HAL_DMA_Start_IT+0x4cc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_DMA_Start_IT+0x350>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a61      	ldr	r2, [pc, #388]	@ (800216c <HAL_DMA_Start_IT+0x4d0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_DMA_Start_IT+0x354>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_DMA_Start_IT+0x356>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01a      	beq.n	800202c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002012:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800202a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a37      	ldr	r2, [pc, #220]	@ (8002110 <HAL_DMA_Start_IT+0x474>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d04a      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a36      	ldr	r2, [pc, #216]	@ (8002114 <HAL_DMA_Start_IT+0x478>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d045      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a34      	ldr	r2, [pc, #208]	@ (8002118 <HAL_DMA_Start_IT+0x47c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d040      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a33      	ldr	r2, [pc, #204]	@ (800211c <HAL_DMA_Start_IT+0x480>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d03b      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a31      	ldr	r2, [pc, #196]	@ (8002120 <HAL_DMA_Start_IT+0x484>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d036      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a30      	ldr	r2, [pc, #192]	@ (8002124 <HAL_DMA_Start_IT+0x488>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d031      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <HAL_DMA_Start_IT+0x48c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02c      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <HAL_DMA_Start_IT+0x490>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d027      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <HAL_DMA_Start_IT+0x494>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d022      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2a      	ldr	r2, [pc, #168]	@ (8002134 <HAL_DMA_Start_IT+0x498>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d01d      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a28      	ldr	r2, [pc, #160]	@ (8002138 <HAL_DMA_Start_IT+0x49c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d018      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a27      	ldr	r2, [pc, #156]	@ (800213c <HAL_DMA_Start_IT+0x4a0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d013      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	@ (8002140 <HAL_DMA_Start_IT+0x4a4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00e      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a24      	ldr	r2, [pc, #144]	@ (8002144 <HAL_DMA_Start_IT+0x4a8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d009      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a22      	ldr	r2, [pc, #136]	@ (8002148 <HAL_DMA_Start_IT+0x4ac>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <HAL_DMA_Start_IT+0x430>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a21      	ldr	r2, [pc, #132]	@ (800214c <HAL_DMA_Start_IT+0x4b0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d108      	bne.n	80020de <HAL_DMA_Start_IT+0x442>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e012      	b.n	8002104 <HAL_DMA_Start_IT+0x468>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e009      	b.n	8002104 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002104:	7dfb      	ldrb	r3, [r7, #23]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40020010 	.word	0x40020010
 8002114:	40020028 	.word	0x40020028
 8002118:	40020040 	.word	0x40020040
 800211c:	40020058 	.word	0x40020058
 8002120:	40020070 	.word	0x40020070
 8002124:	40020088 	.word	0x40020088
 8002128:	400200a0 	.word	0x400200a0
 800212c:	400200b8 	.word	0x400200b8
 8002130:	40020410 	.word	0x40020410
 8002134:	40020428 	.word	0x40020428
 8002138:	40020440 	.word	0x40020440
 800213c:	40020458 	.word	0x40020458
 8002140:	40020470 	.word	0x40020470
 8002144:	40020488 	.word	0x40020488
 8002148:	400204a0 	.word	0x400204a0
 800214c:	400204b8 	.word	0x400204b8
 8002150:	58025408 	.word	0x58025408
 8002154:	5802541c 	.word	0x5802541c
 8002158:	58025430 	.word	0x58025430
 800215c:	58025444 	.word	0x58025444
 8002160:	58025458 	.word	0x58025458
 8002164:	5802546c 	.word	0x5802546c
 8002168:	58025480 	.word	0x58025480
 800216c:	58025494 	.word	0x58025494

08002170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff f91c 	bl	80013b4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e2dc      	b.n	8002742 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e2cd      	b.n	8002742 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a76      	ldr	r2, [pc, #472]	@ (8002384 <HAL_DMA_Abort+0x214>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04a      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a74      	ldr	r2, [pc, #464]	@ (8002388 <HAL_DMA_Abort+0x218>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d045      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a73      	ldr	r2, [pc, #460]	@ (800238c <HAL_DMA_Abort+0x21c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a71      	ldr	r2, [pc, #452]	@ (8002390 <HAL_DMA_Abort+0x220>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d03b      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a70      	ldr	r2, [pc, #448]	@ (8002394 <HAL_DMA_Abort+0x224>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d036      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002398 <HAL_DMA_Abort+0x228>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a6d      	ldr	r2, [pc, #436]	@ (800239c <HAL_DMA_Abort+0x22c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6b      	ldr	r2, [pc, #428]	@ (80023a0 <HAL_DMA_Abort+0x230>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6a      	ldr	r2, [pc, #424]	@ (80023a4 <HAL_DMA_Abort+0x234>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a68      	ldr	r2, [pc, #416]	@ (80023a8 <HAL_DMA_Abort+0x238>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a67      	ldr	r2, [pc, #412]	@ (80023ac <HAL_DMA_Abort+0x23c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a65      	ldr	r2, [pc, #404]	@ (80023b0 <HAL_DMA_Abort+0x240>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a64      	ldr	r2, [pc, #400]	@ (80023b4 <HAL_DMA_Abort+0x244>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a62      	ldr	r2, [pc, #392]	@ (80023b8 <HAL_DMA_Abort+0x248>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a61      	ldr	r2, [pc, #388]	@ (80023bc <HAL_DMA_Abort+0x24c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_Abort+0xd6>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a5f      	ldr	r2, [pc, #380]	@ (80023c0 <HAL_DMA_Abort+0x250>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_DMA_Abort+0xda>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_DMA_Abort+0xdc>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 021e 	bic.w	r2, r2, #30
 800225e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800226e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e00a      	b.n	800228e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 020e 	bic.w	r2, r2, #14
 8002286:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a3c      	ldr	r2, [pc, #240]	@ (8002384 <HAL_DMA_Abort+0x214>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d072      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3a      	ldr	r2, [pc, #232]	@ (8002388 <HAL_DMA_Abort+0x218>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d06d      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a39      	ldr	r2, [pc, #228]	@ (800238c <HAL_DMA_Abort+0x21c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d068      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a37      	ldr	r2, [pc, #220]	@ (8002390 <HAL_DMA_Abort+0x220>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d063      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a36      	ldr	r2, [pc, #216]	@ (8002394 <HAL_DMA_Abort+0x224>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d05e      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a34      	ldr	r2, [pc, #208]	@ (8002398 <HAL_DMA_Abort+0x228>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d059      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a33      	ldr	r2, [pc, #204]	@ (800239c <HAL_DMA_Abort+0x22c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d054      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a31      	ldr	r2, [pc, #196]	@ (80023a0 <HAL_DMA_Abort+0x230>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d04f      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a30      	ldr	r2, [pc, #192]	@ (80023a4 <HAL_DMA_Abort+0x234>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04a      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a2e      	ldr	r2, [pc, #184]	@ (80023a8 <HAL_DMA_Abort+0x238>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d045      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2d      	ldr	r2, [pc, #180]	@ (80023ac <HAL_DMA_Abort+0x23c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d040      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2b      	ldr	r2, [pc, #172]	@ (80023b0 <HAL_DMA_Abort+0x240>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d03b      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a2a      	ldr	r2, [pc, #168]	@ (80023b4 <HAL_DMA_Abort+0x244>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d036      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a28      	ldr	r2, [pc, #160]	@ (80023b8 <HAL_DMA_Abort+0x248>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d031      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a27      	ldr	r2, [pc, #156]	@ (80023bc <HAL_DMA_Abort+0x24c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d02c      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a25      	ldr	r2, [pc, #148]	@ (80023c0 <HAL_DMA_Abort+0x250>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d027      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a24      	ldr	r2, [pc, #144]	@ (80023c4 <HAL_DMA_Abort+0x254>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a22      	ldr	r2, [pc, #136]	@ (80023c8 <HAL_DMA_Abort+0x258>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01d      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <HAL_DMA_Abort+0x25c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d018      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1f      	ldr	r2, [pc, #124]	@ (80023d0 <HAL_DMA_Abort+0x260>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1e      	ldr	r2, [pc, #120]	@ (80023d4 <HAL_DMA_Abort+0x264>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <HAL_DMA_Abort+0x268>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1b      	ldr	r2, [pc, #108]	@ (80023dc <HAL_DMA_Abort+0x26c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_DMA_Abort+0x20e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a19      	ldr	r2, [pc, #100]	@ (80023e0 <HAL_DMA_Abort+0x270>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d132      	bne.n	80023e4 <HAL_DMA_Abort+0x274>
 800237e:	2301      	movs	r3, #1
 8002380:	e031      	b.n	80023e6 <HAL_DMA_Abort+0x276>
 8002382:	bf00      	nop
 8002384:	40020010 	.word	0x40020010
 8002388:	40020028 	.word	0x40020028
 800238c:	40020040 	.word	0x40020040
 8002390:	40020058 	.word	0x40020058
 8002394:	40020070 	.word	0x40020070
 8002398:	40020088 	.word	0x40020088
 800239c:	400200a0 	.word	0x400200a0
 80023a0:	400200b8 	.word	0x400200b8
 80023a4:	40020410 	.word	0x40020410
 80023a8:	40020428 	.word	0x40020428
 80023ac:	40020440 	.word	0x40020440
 80023b0:	40020458 	.word	0x40020458
 80023b4:	40020470 	.word	0x40020470
 80023b8:	40020488 	.word	0x40020488
 80023bc:	400204a0 	.word	0x400204a0
 80023c0:	400204b8 	.word	0x400204b8
 80023c4:	58025408 	.word	0x58025408
 80023c8:	5802541c 	.word	0x5802541c
 80023cc:	58025430 	.word	0x58025430
 80023d0:	58025444 	.word	0x58025444
 80023d4:	58025458 	.word	0x58025458
 80023d8:	5802546c 	.word	0x5802546c
 80023dc:	58025480 	.word	0x58025480
 80023e0:	58025494 	.word	0x58025494
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6d      	ldr	r2, [pc, #436]	@ (80025b4 <HAL_DMA_Abort+0x444>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04a      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6b      	ldr	r2, [pc, #428]	@ (80025b8 <HAL_DMA_Abort+0x448>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d045      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6a      	ldr	r2, [pc, #424]	@ (80025bc <HAL_DMA_Abort+0x44c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d040      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a68      	ldr	r2, [pc, #416]	@ (80025c0 <HAL_DMA_Abort+0x450>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d03b      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a67      	ldr	r2, [pc, #412]	@ (80025c4 <HAL_DMA_Abort+0x454>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d036      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a65      	ldr	r2, [pc, #404]	@ (80025c8 <HAL_DMA_Abort+0x458>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a64      	ldr	r2, [pc, #400]	@ (80025cc <HAL_DMA_Abort+0x45c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d02c      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a62      	ldr	r2, [pc, #392]	@ (80025d0 <HAL_DMA_Abort+0x460>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d027      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a61      	ldr	r2, [pc, #388]	@ (80025d4 <HAL_DMA_Abort+0x464>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d022      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a5f      	ldr	r2, [pc, #380]	@ (80025d8 <HAL_DMA_Abort+0x468>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01d      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a5e      	ldr	r2, [pc, #376]	@ (80025dc <HAL_DMA_Abort+0x46c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d018      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a5c      	ldr	r2, [pc, #368]	@ (80025e0 <HAL_DMA_Abort+0x470>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5b      	ldr	r2, [pc, #364]	@ (80025e4 <HAL_DMA_Abort+0x474>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a59      	ldr	r2, [pc, #356]	@ (80025e8 <HAL_DMA_Abort+0x478>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a58      	ldr	r2, [pc, #352]	@ (80025ec <HAL_DMA_Abort+0x47c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_DMA_Abort+0x32a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a56      	ldr	r2, [pc, #344]	@ (80025f0 <HAL_DMA_Abort+0x480>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d108      	bne.n	80024ac <HAL_DMA_Abort+0x33c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e007      	b.n	80024bc <HAL_DMA_Abort+0x34c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80024bc:	e013      	b.n	80024e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024be:	f7fe ff79 	bl	80013b4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d90c      	bls.n	80024e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2203      	movs	r2, #3
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e12d      	b.n	8002742 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e5      	bne.n	80024be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2f      	ldr	r2, [pc, #188]	@ (80025b4 <HAL_DMA_Abort+0x444>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d04a      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2d      	ldr	r2, [pc, #180]	@ (80025b8 <HAL_DMA_Abort+0x448>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d045      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2c      	ldr	r2, [pc, #176]	@ (80025bc <HAL_DMA_Abort+0x44c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d040      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2a      	ldr	r2, [pc, #168]	@ (80025c0 <HAL_DMA_Abort+0x450>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d03b      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a29      	ldr	r2, [pc, #164]	@ (80025c4 <HAL_DMA_Abort+0x454>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d036      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a27      	ldr	r2, [pc, #156]	@ (80025c8 <HAL_DMA_Abort+0x458>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d031      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a26      	ldr	r2, [pc, #152]	@ (80025cc <HAL_DMA_Abort+0x45c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d02c      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a24      	ldr	r2, [pc, #144]	@ (80025d0 <HAL_DMA_Abort+0x460>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d027      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a23      	ldr	r2, [pc, #140]	@ (80025d4 <HAL_DMA_Abort+0x464>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a21      	ldr	r2, [pc, #132]	@ (80025d8 <HAL_DMA_Abort+0x468>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01d      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a20      	ldr	r2, [pc, #128]	@ (80025dc <HAL_DMA_Abort+0x46c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d018      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <HAL_DMA_Abort+0x470>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <HAL_DMA_Abort+0x474>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00e      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1b      	ldr	r2, [pc, #108]	@ (80025e8 <HAL_DMA_Abort+0x478>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d009      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1a      	ldr	r2, [pc, #104]	@ (80025ec <HAL_DMA_Abort+0x47c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_DMA_Abort+0x422>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a18      	ldr	r2, [pc, #96]	@ (80025f0 <HAL_DMA_Abort+0x480>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_DMA_Abort+0x426>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_DMA_Abort+0x428>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d02b      	beq.n	80025f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	223f      	movs	r2, #63	@ 0x3f
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	e02a      	b.n	800260a <HAL_DMA_Abort+0x49a>
 80025b4:	40020010 	.word	0x40020010
 80025b8:	40020028 	.word	0x40020028
 80025bc:	40020040 	.word	0x40020040
 80025c0:	40020058 	.word	0x40020058
 80025c4:	40020070 	.word	0x40020070
 80025c8:	40020088 	.word	0x40020088
 80025cc:	400200a0 	.word	0x400200a0
 80025d0:	400200b8 	.word	0x400200b8
 80025d4:	40020410 	.word	0x40020410
 80025d8:	40020428 	.word	0x40020428
 80025dc:	40020440 	.word	0x40020440
 80025e0:	40020458 	.word	0x40020458
 80025e4:	40020470 	.word	0x40020470
 80025e8:	40020488 	.word	0x40020488
 80025ec:	400204a0 	.word	0x400204a0
 80025f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2201      	movs	r2, #1
 8002604:	409a      	lsls	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a4f      	ldr	r2, [pc, #316]	@ (800274c <HAL_DMA_Abort+0x5dc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d072      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a4d      	ldr	r2, [pc, #308]	@ (8002750 <HAL_DMA_Abort+0x5e0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d06d      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a4c      	ldr	r2, [pc, #304]	@ (8002754 <HAL_DMA_Abort+0x5e4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d068      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a4a      	ldr	r2, [pc, #296]	@ (8002758 <HAL_DMA_Abort+0x5e8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d063      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a49      	ldr	r2, [pc, #292]	@ (800275c <HAL_DMA_Abort+0x5ec>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d05e      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a47      	ldr	r2, [pc, #284]	@ (8002760 <HAL_DMA_Abort+0x5f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d059      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a46      	ldr	r2, [pc, #280]	@ (8002764 <HAL_DMA_Abort+0x5f4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d054      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a44      	ldr	r2, [pc, #272]	@ (8002768 <HAL_DMA_Abort+0x5f8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d04f      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a43      	ldr	r2, [pc, #268]	@ (800276c <HAL_DMA_Abort+0x5fc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d04a      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a41      	ldr	r2, [pc, #260]	@ (8002770 <HAL_DMA_Abort+0x600>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d045      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a40      	ldr	r2, [pc, #256]	@ (8002774 <HAL_DMA_Abort+0x604>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d040      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a3e      	ldr	r2, [pc, #248]	@ (8002778 <HAL_DMA_Abort+0x608>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d03b      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3d      	ldr	r2, [pc, #244]	@ (800277c <HAL_DMA_Abort+0x60c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d036      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3b      	ldr	r2, [pc, #236]	@ (8002780 <HAL_DMA_Abort+0x610>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d031      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a3a      	ldr	r2, [pc, #232]	@ (8002784 <HAL_DMA_Abort+0x614>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d02c      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a38      	ldr	r2, [pc, #224]	@ (8002788 <HAL_DMA_Abort+0x618>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d027      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a37      	ldr	r2, [pc, #220]	@ (800278c <HAL_DMA_Abort+0x61c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d022      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a35      	ldr	r2, [pc, #212]	@ (8002790 <HAL_DMA_Abort+0x620>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01d      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a34      	ldr	r2, [pc, #208]	@ (8002794 <HAL_DMA_Abort+0x624>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d018      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a32      	ldr	r2, [pc, #200]	@ (8002798 <HAL_DMA_Abort+0x628>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a31      	ldr	r2, [pc, #196]	@ (800279c <HAL_DMA_Abort+0x62c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d00e      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2f      	ldr	r2, [pc, #188]	@ (80027a0 <HAL_DMA_Abort+0x630>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d009      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2e      	ldr	r2, [pc, #184]	@ (80027a4 <HAL_DMA_Abort+0x634>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d004      	beq.n	80026fa <HAL_DMA_Abort+0x58a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2c      	ldr	r2, [pc, #176]	@ (80027a8 <HAL_DMA_Abort+0x638>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_DMA_Abort+0x58e>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_DMA_Abort+0x590>
 80026fe:	2300      	movs	r3, #0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800270c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002724:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800272e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40020010 	.word	0x40020010
 8002750:	40020028 	.word	0x40020028
 8002754:	40020040 	.word	0x40020040
 8002758:	40020058 	.word	0x40020058
 800275c:	40020070 	.word	0x40020070
 8002760:	40020088 	.word	0x40020088
 8002764:	400200a0 	.word	0x400200a0
 8002768:	400200b8 	.word	0x400200b8
 800276c:	40020410 	.word	0x40020410
 8002770:	40020428 	.word	0x40020428
 8002774:	40020440 	.word	0x40020440
 8002778:	40020458 	.word	0x40020458
 800277c:	40020470 	.word	0x40020470
 8002780:	40020488 	.word	0x40020488
 8002784:	400204a0 	.word	0x400204a0
 8002788:	400204b8 	.word	0x400204b8
 800278c:	58025408 	.word	0x58025408
 8002790:	5802541c 	.word	0x5802541c
 8002794:	58025430 	.word	0x58025430
 8002798:	58025444 	.word	0x58025444
 800279c:	58025458 	.word	0x58025458
 80027a0:	5802546c 	.word	0x5802546c
 80027a4:	58025480 	.word	0x58025480
 80027a8:	58025494 	.word	0x58025494

080027ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e237      	b.n	8002c2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2280      	movs	r2, #128	@ 0x80
 80027ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e22c      	b.n	8002c2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a5c      	ldr	r2, [pc, #368]	@ (800294c <HAL_DMA_Abort_IT+0x1a0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d04a      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002950 <HAL_DMA_Abort_IT+0x1a4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d045      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a59      	ldr	r2, [pc, #356]	@ (8002954 <HAL_DMA_Abort_IT+0x1a8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d040      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_DMA_Abort_IT+0x1ac>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d03b      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a56      	ldr	r2, [pc, #344]	@ (800295c <HAL_DMA_Abort_IT+0x1b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d036      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a55      	ldr	r2, [pc, #340]	@ (8002960 <HAL_DMA_Abort_IT+0x1b4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d031      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a53      	ldr	r2, [pc, #332]	@ (8002964 <HAL_DMA_Abort_IT+0x1b8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d02c      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a52      	ldr	r2, [pc, #328]	@ (8002968 <HAL_DMA_Abort_IT+0x1bc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d027      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a50      	ldr	r2, [pc, #320]	@ (800296c <HAL_DMA_Abort_IT+0x1c0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d022      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a4f      	ldr	r2, [pc, #316]	@ (8002970 <HAL_DMA_Abort_IT+0x1c4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d01d      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a4d      	ldr	r2, [pc, #308]	@ (8002974 <HAL_DMA_Abort_IT+0x1c8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d018      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a4c      	ldr	r2, [pc, #304]	@ (8002978 <HAL_DMA_Abort_IT+0x1cc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a4a      	ldr	r2, [pc, #296]	@ (800297c <HAL_DMA_Abort_IT+0x1d0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a49      	ldr	r2, [pc, #292]	@ (8002980 <HAL_DMA_Abort_IT+0x1d4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a47      	ldr	r2, [pc, #284]	@ (8002984 <HAL_DMA_Abort_IT+0x1d8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a46      	ldr	r2, [pc, #280]	@ (8002988 <HAL_DMA_Abort_IT+0x1dc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d101      	bne.n	8002878 <HAL_DMA_Abort_IT+0xcc>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_DMA_Abort_IT+0xce>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8086 	beq.w	800298c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2204      	movs	r2, #4
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a2f      	ldr	r2, [pc, #188]	@ (800294c <HAL_DMA_Abort_IT+0x1a0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04a      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2e      	ldr	r2, [pc, #184]	@ (8002950 <HAL_DMA_Abort_IT+0x1a4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d045      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002954 <HAL_DMA_Abort_IT+0x1a8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d040      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002958 <HAL_DMA_Abort_IT+0x1ac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d03b      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a29      	ldr	r2, [pc, #164]	@ (800295c <HAL_DMA_Abort_IT+0x1b0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d036      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a28      	ldr	r2, [pc, #160]	@ (8002960 <HAL_DMA_Abort_IT+0x1b4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d031      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a26      	ldr	r2, [pc, #152]	@ (8002964 <HAL_DMA_Abort_IT+0x1b8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02c      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a25      	ldr	r2, [pc, #148]	@ (8002968 <HAL_DMA_Abort_IT+0x1bc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d027      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a23      	ldr	r2, [pc, #140]	@ (800296c <HAL_DMA_Abort_IT+0x1c0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d022      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a22      	ldr	r2, [pc, #136]	@ (8002970 <HAL_DMA_Abort_IT+0x1c4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01d      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a20      	ldr	r2, [pc, #128]	@ (8002974 <HAL_DMA_Abort_IT+0x1c8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d018      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002978 <HAL_DMA_Abort_IT+0x1cc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1d      	ldr	r2, [pc, #116]	@ (800297c <HAL_DMA_Abort_IT+0x1d0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <HAL_DMA_Abort_IT+0x1d4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1a      	ldr	r2, [pc, #104]	@ (8002984 <HAL_DMA_Abort_IT+0x1d8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_DMA_Abort_IT+0x17c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a19      	ldr	r2, [pc, #100]	@ (8002988 <HAL_DMA_Abort_IT+0x1dc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <HAL_DMA_Abort_IT+0x18e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e178      	b.n	8002c2c <HAL_DMA_Abort_IT+0x480>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e16f      	b.n	8002c2c <HAL_DMA_Abort_IT+0x480>
 800294c:	40020010 	.word	0x40020010
 8002950:	40020028 	.word	0x40020028
 8002954:	40020040 	.word	0x40020040
 8002958:	40020058 	.word	0x40020058
 800295c:	40020070 	.word	0x40020070
 8002960:	40020088 	.word	0x40020088
 8002964:	400200a0 	.word	0x400200a0
 8002968:	400200b8 	.word	0x400200b8
 800296c:	40020410 	.word	0x40020410
 8002970:	40020428 	.word	0x40020428
 8002974:	40020440 	.word	0x40020440
 8002978:	40020458 	.word	0x40020458
 800297c:	40020470 	.word	0x40020470
 8002980:	40020488 	.word	0x40020488
 8002984:	400204a0 	.word	0x400204a0
 8002988:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020e 	bic.w	r2, r2, #14
 800299a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6c      	ldr	r2, [pc, #432]	@ (8002b54 <HAL_DMA_Abort_IT+0x3a8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d04a      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6b      	ldr	r2, [pc, #428]	@ (8002b58 <HAL_DMA_Abort_IT+0x3ac>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d045      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a69      	ldr	r2, [pc, #420]	@ (8002b5c <HAL_DMA_Abort_IT+0x3b0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d040      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a68      	ldr	r2, [pc, #416]	@ (8002b60 <HAL_DMA_Abort_IT+0x3b4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d03b      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a66      	ldr	r2, [pc, #408]	@ (8002b64 <HAL_DMA_Abort_IT+0x3b8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d036      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a65      	ldr	r2, [pc, #404]	@ (8002b68 <HAL_DMA_Abort_IT+0x3bc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d031      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a63      	ldr	r2, [pc, #396]	@ (8002b6c <HAL_DMA_Abort_IT+0x3c0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02c      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a62      	ldr	r2, [pc, #392]	@ (8002b70 <HAL_DMA_Abort_IT+0x3c4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d027      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a60      	ldr	r2, [pc, #384]	@ (8002b74 <HAL_DMA_Abort_IT+0x3c8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d022      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002b78 <HAL_DMA_Abort_IT+0x3cc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d01d      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5d      	ldr	r2, [pc, #372]	@ (8002b7c <HAL_DMA_Abort_IT+0x3d0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d018      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b80 <HAL_DMA_Abort_IT+0x3d4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5a      	ldr	r2, [pc, #360]	@ (8002b84 <HAL_DMA_Abort_IT+0x3d8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00e      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a59      	ldr	r2, [pc, #356]	@ (8002b88 <HAL_DMA_Abort_IT+0x3dc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a57      	ldr	r2, [pc, #348]	@ (8002b8c <HAL_DMA_Abort_IT+0x3e0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x290>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a56      	ldr	r2, [pc, #344]	@ (8002b90 <HAL_DMA_Abort_IT+0x3e4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d108      	bne.n	8002a4e <HAL_DMA_Abort_IT+0x2a2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e007      	b.n	8002a5e <HAL_DMA_Abort_IT+0x2b2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a3c      	ldr	r2, [pc, #240]	@ (8002b54 <HAL_DMA_Abort_IT+0x3a8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d072      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b58 <HAL_DMA_Abort_IT+0x3ac>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d06d      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a39      	ldr	r2, [pc, #228]	@ (8002b5c <HAL_DMA_Abort_IT+0x3b0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d068      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a37      	ldr	r2, [pc, #220]	@ (8002b60 <HAL_DMA_Abort_IT+0x3b4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d063      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a36      	ldr	r2, [pc, #216]	@ (8002b64 <HAL_DMA_Abort_IT+0x3b8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d05e      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a34      	ldr	r2, [pc, #208]	@ (8002b68 <HAL_DMA_Abort_IT+0x3bc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d059      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a33      	ldr	r2, [pc, #204]	@ (8002b6c <HAL_DMA_Abort_IT+0x3c0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d054      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a31      	ldr	r2, [pc, #196]	@ (8002b70 <HAL_DMA_Abort_IT+0x3c4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d04f      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a30      	ldr	r2, [pc, #192]	@ (8002b74 <HAL_DMA_Abort_IT+0x3c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d04a      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2e      	ldr	r2, [pc, #184]	@ (8002b78 <HAL_DMA_Abort_IT+0x3cc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d045      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8002b7c <HAL_DMA_Abort_IT+0x3d0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d040      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b80 <HAL_DMA_Abort_IT+0x3d4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d03b      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2a      	ldr	r2, [pc, #168]	@ (8002b84 <HAL_DMA_Abort_IT+0x3d8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d036      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a28      	ldr	r2, [pc, #160]	@ (8002b88 <HAL_DMA_Abort_IT+0x3dc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d031      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a27      	ldr	r2, [pc, #156]	@ (8002b8c <HAL_DMA_Abort_IT+0x3e0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d02c      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a25      	ldr	r2, [pc, #148]	@ (8002b90 <HAL_DMA_Abort_IT+0x3e4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d027      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a24      	ldr	r2, [pc, #144]	@ (8002b94 <HAL_DMA_Abort_IT+0x3e8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a22      	ldr	r2, [pc, #136]	@ (8002b98 <HAL_DMA_Abort_IT+0x3ec>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a21      	ldr	r2, [pc, #132]	@ (8002b9c <HAL_DMA_Abort_IT+0x3f0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba0 <HAL_DMA_Abort_IT+0x3f4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba4 <HAL_DMA_Abort_IT+0x3f8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba8 <HAL_DMA_Abort_IT+0x3fc>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bac <HAL_DMA_Abort_IT+0x400>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x3a2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <HAL_DMA_Abort_IT+0x404>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d132      	bne.n	8002bb4 <HAL_DMA_Abort_IT+0x408>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e031      	b.n	8002bb6 <HAL_DMA_Abort_IT+0x40a>
 8002b52:	bf00      	nop
 8002b54:	40020010 	.word	0x40020010
 8002b58:	40020028 	.word	0x40020028
 8002b5c:	40020040 	.word	0x40020040
 8002b60:	40020058 	.word	0x40020058
 8002b64:	40020070 	.word	0x40020070
 8002b68:	40020088 	.word	0x40020088
 8002b6c:	400200a0 	.word	0x400200a0
 8002b70:	400200b8 	.word	0x400200b8
 8002b74:	40020410 	.word	0x40020410
 8002b78:	40020428 	.word	0x40020428
 8002b7c:	40020440 	.word	0x40020440
 8002b80:	40020458 	.word	0x40020458
 8002b84:	40020470 	.word	0x40020470
 8002b88:	40020488 	.word	0x40020488
 8002b8c:	400204a0 	.word	0x400204a0
 8002b90:	400204b8 	.word	0x400204b8
 8002b94:	58025408 	.word	0x58025408
 8002b98:	5802541c 	.word	0x5802541c
 8002b9c:	58025430 	.word	0x58025430
 8002ba0:	58025444 	.word	0x58025444
 8002ba4:	58025458 	.word	0x58025458
 8002ba8:	5802546c 	.word	0x5802546c
 8002bac:	58025480 	.word	0x58025480
 8002bb0:	58025494 	.word	0x58025494
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2201      	movs	r2, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002be8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop

08002c38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c44:	4b67      	ldr	r3, [pc, #412]	@ (8002de4 <HAL_DMA_IRQHandler+0x1ac>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a67      	ldr	r2, [pc, #412]	@ (8002de8 <HAL_DMA_IRQHandler+0x1b0>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002dec <HAL_DMA_IRQHandler+0x1b4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d04a      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	@ (8002df0 <HAL_DMA_IRQHandler+0x1b8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d045      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5c      	ldr	r2, [pc, #368]	@ (8002df4 <HAL_DMA_IRQHandler+0x1bc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d040      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8002df8 <HAL_DMA_IRQHandler+0x1c0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d03b      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a59      	ldr	r2, [pc, #356]	@ (8002dfc <HAL_DMA_IRQHandler+0x1c4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d036      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a57      	ldr	r2, [pc, #348]	@ (8002e00 <HAL_DMA_IRQHandler+0x1c8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d031      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a56      	ldr	r2, [pc, #344]	@ (8002e04 <HAL_DMA_IRQHandler+0x1cc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d02c      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a54      	ldr	r2, [pc, #336]	@ (8002e08 <HAL_DMA_IRQHandler+0x1d0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d027      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a53      	ldr	r2, [pc, #332]	@ (8002e0c <HAL_DMA_IRQHandler+0x1d4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d022      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a51      	ldr	r2, [pc, #324]	@ (8002e10 <HAL_DMA_IRQHandler+0x1d8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01d      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a50      	ldr	r2, [pc, #320]	@ (8002e14 <HAL_DMA_IRQHandler+0x1dc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d018      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8002e18 <HAL_DMA_IRQHandler+0x1e0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8002e1c <HAL_DMA_IRQHandler+0x1e4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00e      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8002e20 <HAL_DMA_IRQHandler+0x1e8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d009      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8002e24 <HAL_DMA_IRQHandler+0x1ec>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xd2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a48      	ldr	r2, [pc, #288]	@ (8002e28 <HAL_DMA_IRQHandler+0x1f0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d101      	bne.n	8002d0e <HAL_DMA_IRQHandler+0xd6>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_DMA_IRQHandler+0xd8>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 842b 	beq.w	800356c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2208      	movs	r2, #8
 8002d20:	409a      	lsls	r2, r3
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80a2 	beq.w	8002e70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <HAL_DMA_IRQHandler+0x1b4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d04a      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002df0 <HAL_DMA_IRQHandler+0x1b8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d045      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <HAL_DMA_IRQHandler+0x1bc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d040      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002df8 <HAL_DMA_IRQHandler+0x1c0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d03b      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a28      	ldr	r2, [pc, #160]	@ (8002dfc <HAL_DMA_IRQHandler+0x1c4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d036      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a27      	ldr	r2, [pc, #156]	@ (8002e00 <HAL_DMA_IRQHandler+0x1c8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d031      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	@ (8002e04 <HAL_DMA_IRQHandler+0x1cc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02c      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <HAL_DMA_IRQHandler+0x1d0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d027      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a22      	ldr	r2, [pc, #136]	@ (8002e0c <HAL_DMA_IRQHandler+0x1d4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d022      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <HAL_DMA_IRQHandler+0x1d8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01d      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1f      	ldr	r2, [pc, #124]	@ (8002e14 <HAL_DMA_IRQHandler+0x1dc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d018      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e18 <HAL_DMA_IRQHandler+0x1e0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e1c <HAL_DMA_IRQHandler+0x1e4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e20 <HAL_DMA_IRQHandler+0x1e8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <HAL_DMA_IRQHandler+0x1ec>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x194>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a18      	ldr	r2, [pc, #96]	@ (8002e28 <HAL_DMA_IRQHandler+0x1f0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d12f      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x1f4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e02e      	b.n	8002e40 <HAL_DMA_IRQHandler+0x208>
 8002de2:	bf00      	nop
 8002de4:	24000000 	.word	0x24000000
 8002de8:	1b4e81b5 	.word	0x1b4e81b5
 8002dec:	40020010 	.word	0x40020010
 8002df0:	40020028 	.word	0x40020028
 8002df4:	40020040 	.word	0x40020040
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	40020070 	.word	0x40020070
 8002e00:	40020088 	.word	0x40020088
 8002e04:	400200a0 	.word	0x400200a0
 8002e08:	400200b8 	.word	0x400200b8
 8002e0c:	40020410 	.word	0x40020410
 8002e10:	40020428 	.word	0x40020428
 8002e14:	40020440 	.word	0x40020440
 8002e18:	40020458 	.word	0x40020458
 8002e1c:	40020470 	.word	0x40020470
 8002e20:	40020488 	.word	0x40020488
 8002e24:	400204a0 	.word	0x400204a0
 8002e28:	400204b8 	.word	0x400204b8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d06e      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a69      	ldr	r2, [pc, #420]	@ (8003030 <HAL_DMA_IRQHandler+0x3f8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d04a      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a67      	ldr	r2, [pc, #412]	@ (8003034 <HAL_DMA_IRQHandler+0x3fc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d045      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a66      	ldr	r2, [pc, #408]	@ (8003038 <HAL_DMA_IRQHandler+0x400>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d040      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a64      	ldr	r2, [pc, #400]	@ (800303c <HAL_DMA_IRQHandler+0x404>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d03b      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a63      	ldr	r2, [pc, #396]	@ (8003040 <HAL_DMA_IRQHandler+0x408>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d036      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a61      	ldr	r2, [pc, #388]	@ (8003044 <HAL_DMA_IRQHandler+0x40c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d031      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a60      	ldr	r2, [pc, #384]	@ (8003048 <HAL_DMA_IRQHandler+0x410>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d02c      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800304c <HAL_DMA_IRQHandler+0x414>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d027      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a5d      	ldr	r2, [pc, #372]	@ (8003050 <HAL_DMA_IRQHandler+0x418>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d022      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5b      	ldr	r2, [pc, #364]	@ (8003054 <HAL_DMA_IRQHandler+0x41c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01d      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5a      	ldr	r2, [pc, #360]	@ (8003058 <HAL_DMA_IRQHandler+0x420>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d018      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a58      	ldr	r2, [pc, #352]	@ (800305c <HAL_DMA_IRQHandler+0x424>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a57      	ldr	r2, [pc, #348]	@ (8003060 <HAL_DMA_IRQHandler+0x428>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a55      	ldr	r2, [pc, #340]	@ (8003064 <HAL_DMA_IRQHandler+0x42c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a54      	ldr	r2, [pc, #336]	@ (8003068 <HAL_DMA_IRQHandler+0x430>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x2ee>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a52      	ldr	r2, [pc, #328]	@ (800306c <HAL_DMA_IRQHandler+0x434>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10a      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x304>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e003      	b.n	8002f44 <HAL_DMA_IRQHandler+0x30c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2201      	movs	r2, #1
 8002f52:	409a      	lsls	r2, r3
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f043 0202 	orr.w	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 808f 	beq.w	8003098 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003030 <HAL_DMA_IRQHandler+0x3f8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d04a      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2a      	ldr	r2, [pc, #168]	@ (8003034 <HAL_DMA_IRQHandler+0x3fc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d045      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a29      	ldr	r2, [pc, #164]	@ (8003038 <HAL_DMA_IRQHandler+0x400>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d040      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a27      	ldr	r2, [pc, #156]	@ (800303c <HAL_DMA_IRQHandler+0x404>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d03b      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a26      	ldr	r2, [pc, #152]	@ (8003040 <HAL_DMA_IRQHandler+0x408>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d036      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a24      	ldr	r2, [pc, #144]	@ (8003044 <HAL_DMA_IRQHandler+0x40c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d031      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a23      	ldr	r2, [pc, #140]	@ (8003048 <HAL_DMA_IRQHandler+0x410>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02c      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a21      	ldr	r2, [pc, #132]	@ (800304c <HAL_DMA_IRQHandler+0x414>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d027      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a20      	ldr	r2, [pc, #128]	@ (8003050 <HAL_DMA_IRQHandler+0x418>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003054 <HAL_DMA_IRQHandler+0x41c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8003058 <HAL_DMA_IRQHandler+0x420>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d018      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <HAL_DMA_IRQHandler+0x424>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8003060 <HAL_DMA_IRQHandler+0x428>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a18      	ldr	r2, [pc, #96]	@ (8003064 <HAL_DMA_IRQHandler+0x42c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a17      	ldr	r2, [pc, #92]	@ (8003068 <HAL_DMA_IRQHandler+0x430>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_DMA_IRQHandler+0x3e2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a15      	ldr	r2, [pc, #84]	@ (800306c <HAL_DMA_IRQHandler+0x434>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d12a      	bne.n	8003070 <HAL_DMA_IRQHandler+0x438>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e023      	b.n	8003078 <HAL_DMA_IRQHandler+0x440>
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00d      	beq.n	8003098 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2204      	movs	r2, #4
 8003086:	409a      	lsls	r2, r3
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	f043 0204 	orr.w	r2, r3, #4
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2210      	movs	r2, #16
 80030a2:	409a      	lsls	r2, r3
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a6 	beq.w	80031fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a85      	ldr	r2, [pc, #532]	@ (80032c8 <HAL_DMA_IRQHandler+0x690>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d04a      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a83      	ldr	r2, [pc, #524]	@ (80032cc <HAL_DMA_IRQHandler+0x694>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d045      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a82      	ldr	r2, [pc, #520]	@ (80032d0 <HAL_DMA_IRQHandler+0x698>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d040      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a80      	ldr	r2, [pc, #512]	@ (80032d4 <HAL_DMA_IRQHandler+0x69c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d03b      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a7f      	ldr	r2, [pc, #508]	@ (80032d8 <HAL_DMA_IRQHandler+0x6a0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d036      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a7d      	ldr	r2, [pc, #500]	@ (80032dc <HAL_DMA_IRQHandler+0x6a4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d031      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a7c      	ldr	r2, [pc, #496]	@ (80032e0 <HAL_DMA_IRQHandler+0x6a8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d02c      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a7a      	ldr	r2, [pc, #488]	@ (80032e4 <HAL_DMA_IRQHandler+0x6ac>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d027      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a79      	ldr	r2, [pc, #484]	@ (80032e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a77      	ldr	r2, [pc, #476]	@ (80032ec <HAL_DMA_IRQHandler+0x6b4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01d      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a76      	ldr	r2, [pc, #472]	@ (80032f0 <HAL_DMA_IRQHandler+0x6b8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d018      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a74      	ldr	r2, [pc, #464]	@ (80032f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a73      	ldr	r2, [pc, #460]	@ (80032f8 <HAL_DMA_IRQHandler+0x6c0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a71      	ldr	r2, [pc, #452]	@ (80032fc <HAL_DMA_IRQHandler+0x6c4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a70      	ldr	r2, [pc, #448]	@ (8003300 <HAL_DMA_IRQHandler+0x6c8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_DMA_IRQHandler+0x516>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6e      	ldr	r2, [pc, #440]	@ (8003304 <HAL_DMA_IRQHandler+0x6cc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10a      	bne.n	8003164 <HAL_DMA_IRQHandler+0x52c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e009      	b.n	8003178 <HAL_DMA_IRQHandler+0x540>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03e      	beq.n	80031fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2210      	movs	r2, #16
 8003186:	409a      	lsls	r2, r3
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d018      	beq.n	80031cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d108      	bne.n	80031ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d024      	beq.n	80031fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
 80031b8:	e01f      	b.n	80031fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01b      	beq.n	80031fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
 80031ca:	e016      	b.n	80031fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d107      	bne.n	80031ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0208 	bic.w	r2, r2, #8
 80031e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2220      	movs	r2, #32
 8003204:	409a      	lsls	r2, r3
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8110 	beq.w	8003430 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2c      	ldr	r2, [pc, #176]	@ (80032c8 <HAL_DMA_IRQHandler+0x690>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d04a      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2b      	ldr	r2, [pc, #172]	@ (80032cc <HAL_DMA_IRQHandler+0x694>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d045      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a29      	ldr	r2, [pc, #164]	@ (80032d0 <HAL_DMA_IRQHandler+0x698>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d040      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a28      	ldr	r2, [pc, #160]	@ (80032d4 <HAL_DMA_IRQHandler+0x69c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d03b      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a26      	ldr	r2, [pc, #152]	@ (80032d8 <HAL_DMA_IRQHandler+0x6a0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d036      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a25      	ldr	r2, [pc, #148]	@ (80032dc <HAL_DMA_IRQHandler+0x6a4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d031      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a23      	ldr	r2, [pc, #140]	@ (80032e0 <HAL_DMA_IRQHandler+0x6a8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02c      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a22      	ldr	r2, [pc, #136]	@ (80032e4 <HAL_DMA_IRQHandler+0x6ac>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d027      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a20      	ldr	r2, [pc, #128]	@ (80032e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ec <HAL_DMA_IRQHandler+0x6b4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d01d      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <HAL_DMA_IRQHandler+0x6b8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1c      	ldr	r2, [pc, #112]	@ (80032f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1a      	ldr	r2, [pc, #104]	@ (80032f8 <HAL_DMA_IRQHandler+0x6c0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a19      	ldr	r2, [pc, #100]	@ (80032fc <HAL_DMA_IRQHandler+0x6c4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a17      	ldr	r2, [pc, #92]	@ (8003300 <HAL_DMA_IRQHandler+0x6c8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x678>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a16      	ldr	r2, [pc, #88]	@ (8003304 <HAL_DMA_IRQHandler+0x6cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d12b      	bne.n	8003308 <HAL_DMA_IRQHandler+0x6d0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e02a      	b.n	800331c <HAL_DMA_IRQHandler+0x6e4>
 80032c6:	bf00      	nop
 80032c8:	40020010 	.word	0x40020010
 80032cc:	40020028 	.word	0x40020028
 80032d0:	40020040 	.word	0x40020040
 80032d4:	40020058 	.word	0x40020058
 80032d8:	40020070 	.word	0x40020070
 80032dc:	40020088 	.word	0x40020088
 80032e0:	400200a0 	.word	0x400200a0
 80032e4:	400200b8 	.word	0x400200b8
 80032e8:	40020410 	.word	0x40020410
 80032ec:	40020428 	.word	0x40020428
 80032f0:	40020440 	.word	0x40020440
 80032f4:	40020458 	.word	0x40020458
 80032f8:	40020470 	.word	0x40020470
 80032fc:	40020488 	.word	0x40020488
 8003300:	400204a0 	.word	0x400204a0
 8003304:	400204b8 	.word	0x400204b8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8087 	beq.w	8003430 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2220      	movs	r2, #32
 800332c:	409a      	lsls	r2, r3
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b04      	cmp	r3, #4
 800333c:	d139      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0216 	bic.w	r2, r2, #22
 800334c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800335c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <HAL_DMA_IRQHandler+0x736>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0208 	bic.w	r2, r2, #8
 800337c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	223f      	movs	r2, #63	@ 0x3f
 8003388:	409a      	lsls	r2, r3
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 834a 	beq.w	8003a3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
          }
          return;
 80033b0:	e344      	b.n	8003a3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d018      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02c      	beq.n	8003430 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
 80033de:	e027      	b.n	8003430 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
 80033f0:	e01e      	b.n	8003430 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10f      	bne.n	8003420 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0210 	bic.w	r2, r2, #16
 800340e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8306 	beq.w	8003a46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8088 	beq.w	8003558 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2204      	movs	r2, #4
 800344c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a7a      	ldr	r2, [pc, #488]	@ (8003640 <HAL_DMA_IRQHandler+0xa08>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d04a      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a79      	ldr	r2, [pc, #484]	@ (8003644 <HAL_DMA_IRQHandler+0xa0c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d045      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a77      	ldr	r2, [pc, #476]	@ (8003648 <HAL_DMA_IRQHandler+0xa10>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d040      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a76      	ldr	r2, [pc, #472]	@ (800364c <HAL_DMA_IRQHandler+0xa14>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d03b      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a74      	ldr	r2, [pc, #464]	@ (8003650 <HAL_DMA_IRQHandler+0xa18>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d036      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a73      	ldr	r2, [pc, #460]	@ (8003654 <HAL_DMA_IRQHandler+0xa1c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d031      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a71      	ldr	r2, [pc, #452]	@ (8003658 <HAL_DMA_IRQHandler+0xa20>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d02c      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a70      	ldr	r2, [pc, #448]	@ (800365c <HAL_DMA_IRQHandler+0xa24>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d027      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003660 <HAL_DMA_IRQHandler+0xa28>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d022      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a6d      	ldr	r2, [pc, #436]	@ (8003664 <HAL_DMA_IRQHandler+0xa2c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d01d      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003668 <HAL_DMA_IRQHandler+0xa30>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d018      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6a      	ldr	r2, [pc, #424]	@ (800366c <HAL_DMA_IRQHandler+0xa34>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a68      	ldr	r2, [pc, #416]	@ (8003670 <HAL_DMA_IRQHandler+0xa38>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00e      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a67      	ldr	r2, [pc, #412]	@ (8003674 <HAL_DMA_IRQHandler+0xa3c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a65      	ldr	r2, [pc, #404]	@ (8003678 <HAL_DMA_IRQHandler+0xa40>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x8b8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a64      	ldr	r2, [pc, #400]	@ (800367c <HAL_DMA_IRQHandler+0xa44>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d108      	bne.n	8003502 <HAL_DMA_IRQHandler+0x8ca>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e007      	b.n	8003512 <HAL_DMA_IRQHandler+0x8da>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3301      	adds	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351a:	429a      	cmp	r2, r3
 800351c:	d307      	bcc.n	800352e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f2      	bne.n	8003512 <HAL_DMA_IRQHandler+0x8da>
 800352c:	e000      	b.n	8003530 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800352e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2203      	movs	r2, #3
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003546:	e003      	b.n	8003550 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8272 	beq.w	8003a46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
 800356a:	e26c      	b.n	8003a46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a43      	ldr	r2, [pc, #268]	@ (8003680 <HAL_DMA_IRQHandler+0xa48>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d022      	beq.n	80035bc <HAL_DMA_IRQHandler+0x984>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a42      	ldr	r2, [pc, #264]	@ (8003684 <HAL_DMA_IRQHandler+0xa4c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d01d      	beq.n	80035bc <HAL_DMA_IRQHandler+0x984>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a40      	ldr	r2, [pc, #256]	@ (8003688 <HAL_DMA_IRQHandler+0xa50>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <HAL_DMA_IRQHandler+0x984>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a3f      	ldr	r2, [pc, #252]	@ (800368c <HAL_DMA_IRQHandler+0xa54>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_DMA_IRQHandler+0x984>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a3d      	ldr	r2, [pc, #244]	@ (8003690 <HAL_DMA_IRQHandler+0xa58>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <HAL_DMA_IRQHandler+0x984>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003694 <HAL_DMA_IRQHandler+0xa5c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_DMA_IRQHandler+0x984>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003698 <HAL_DMA_IRQHandler+0xa60>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_DMA_IRQHandler+0x984>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a39      	ldr	r2, [pc, #228]	@ (800369c <HAL_DMA_IRQHandler+0xa64>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x988>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_DMA_IRQHandler+0x98a>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 823f 	beq.w	8003a46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2204      	movs	r2, #4
 80035da:	409a      	lsls	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80cd 	beq.w	8003780 <HAL_DMA_IRQHandler+0xb48>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80c7 	beq.w	8003780 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2204      	movs	r2, #4
 80035fc:	409a      	lsls	r2, r3
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d049      	beq.n	80036a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8210 	beq.w	8003a40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003628:	e20a      	b.n	8003a40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8206 	beq.w	8003a40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800363c:	e200      	b.n	8003a40 <HAL_DMA_IRQHandler+0xe08>
 800363e:	bf00      	nop
 8003640:	40020010 	.word	0x40020010
 8003644:	40020028 	.word	0x40020028
 8003648:	40020040 	.word	0x40020040
 800364c:	40020058 	.word	0x40020058
 8003650:	40020070 	.word	0x40020070
 8003654:	40020088 	.word	0x40020088
 8003658:	400200a0 	.word	0x400200a0
 800365c:	400200b8 	.word	0x400200b8
 8003660:	40020410 	.word	0x40020410
 8003664:	40020428 	.word	0x40020428
 8003668:	40020440 	.word	0x40020440
 800366c:	40020458 	.word	0x40020458
 8003670:	40020470 	.word	0x40020470
 8003674:	40020488 	.word	0x40020488
 8003678:	400204a0 	.word	0x400204a0
 800367c:	400204b8 	.word	0x400204b8
 8003680:	58025408 	.word	0x58025408
 8003684:	5802541c 	.word	0x5802541c
 8003688:	58025430 	.word	0x58025430
 800368c:	58025444 	.word	0x58025444
 8003690:	58025458 	.word	0x58025458
 8003694:	5802546c 	.word	0x5802546c
 8003698:	58025480 	.word	0x58025480
 800369c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d160      	bne.n	800376c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7f      	ldr	r2, [pc, #508]	@ (80038ac <HAL_DMA_IRQHandler+0xc74>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04a      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7d      	ldr	r2, [pc, #500]	@ (80038b0 <HAL_DMA_IRQHandler+0xc78>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d045      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7c      	ldr	r2, [pc, #496]	@ (80038b4 <HAL_DMA_IRQHandler+0xc7c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a7a      	ldr	r2, [pc, #488]	@ (80038b8 <HAL_DMA_IRQHandler+0xc80>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d03b      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a79      	ldr	r2, [pc, #484]	@ (80038bc <HAL_DMA_IRQHandler+0xc84>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d036      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a77      	ldr	r2, [pc, #476]	@ (80038c0 <HAL_DMA_IRQHandler+0xc88>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a76      	ldr	r2, [pc, #472]	@ (80038c4 <HAL_DMA_IRQHandler+0xc8c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d02c      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a74      	ldr	r2, [pc, #464]	@ (80038c8 <HAL_DMA_IRQHandler+0xc90>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d027      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a73      	ldr	r2, [pc, #460]	@ (80038cc <HAL_DMA_IRQHandler+0xc94>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a71      	ldr	r2, [pc, #452]	@ (80038d0 <HAL_DMA_IRQHandler+0xc98>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01d      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a70      	ldr	r2, [pc, #448]	@ (80038d4 <HAL_DMA_IRQHandler+0xc9c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6e      	ldr	r2, [pc, #440]	@ (80038d8 <HAL_DMA_IRQHandler+0xca0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6d      	ldr	r2, [pc, #436]	@ (80038dc <HAL_DMA_IRQHandler+0xca4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a6b      	ldr	r2, [pc, #428]	@ (80038e0 <HAL_DMA_IRQHandler+0xca8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6a      	ldr	r2, [pc, #424]	@ (80038e4 <HAL_DMA_IRQHandler+0xcac>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_DMA_IRQHandler+0xb12>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a68      	ldr	r2, [pc, #416]	@ (80038e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d108      	bne.n	800375c <HAL_DMA_IRQHandler+0xb24>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0208 	bic.w	r2, r2, #8
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e007      	b.n	800376c <HAL_DMA_IRQHandler+0xb34>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0204 	bic.w	r2, r2, #4
 800376a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8165 	beq.w	8003a40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800377e:	e15f      	b.n	8003a40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	2202      	movs	r2, #2
 800378a:	409a      	lsls	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80c5 	beq.w	8003920 <HAL_DMA_IRQHandler+0xce8>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80bf 	beq.w	8003920 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2202      	movs	r2, #2
 80037ac:	409a      	lsls	r2, r3
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d018      	beq.n	80037ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 813a 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d8:	e134      	b.n	8003a44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8130 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ec:	e12a      	b.n	8003a44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f040 8089 	bne.w	800390c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2b      	ldr	r2, [pc, #172]	@ (80038ac <HAL_DMA_IRQHandler+0xc74>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d04a      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a29      	ldr	r2, [pc, #164]	@ (80038b0 <HAL_DMA_IRQHandler+0xc78>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d045      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a28      	ldr	r2, [pc, #160]	@ (80038b4 <HAL_DMA_IRQHandler+0xc7c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d040      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a26      	ldr	r2, [pc, #152]	@ (80038b8 <HAL_DMA_IRQHandler+0xc80>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d03b      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a25      	ldr	r2, [pc, #148]	@ (80038bc <HAL_DMA_IRQHandler+0xc84>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d036      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a23      	ldr	r2, [pc, #140]	@ (80038c0 <HAL_DMA_IRQHandler+0xc88>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d031      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a22      	ldr	r2, [pc, #136]	@ (80038c4 <HAL_DMA_IRQHandler+0xc8c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d02c      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a20      	ldr	r2, [pc, #128]	@ (80038c8 <HAL_DMA_IRQHandler+0xc90>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d027      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1f      	ldr	r2, [pc, #124]	@ (80038cc <HAL_DMA_IRQHandler+0xc94>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <HAL_DMA_IRQHandler+0xc98>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01d      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1c      	ldr	r2, [pc, #112]	@ (80038d4 <HAL_DMA_IRQHandler+0xc9c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d018      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1a      	ldr	r2, [pc, #104]	@ (80038d8 <HAL_DMA_IRQHandler+0xca0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <HAL_DMA_IRQHandler+0xca4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00e      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <HAL_DMA_IRQHandler+0xca8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a16      	ldr	r2, [pc, #88]	@ (80038e4 <HAL_DMA_IRQHandler+0xcac>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_DMA_IRQHandler+0xc62>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a14      	ldr	r2, [pc, #80]	@ (80038e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d128      	bne.n	80038ec <HAL_DMA_IRQHandler+0xcb4>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0214 	bic.w	r2, r2, #20
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e027      	b.n	80038fc <HAL_DMA_IRQHandler+0xcc4>
 80038ac:	40020010 	.word	0x40020010
 80038b0:	40020028 	.word	0x40020028
 80038b4:	40020040 	.word	0x40020040
 80038b8:	40020058 	.word	0x40020058
 80038bc:	40020070 	.word	0x40020070
 80038c0:	40020088 	.word	0x40020088
 80038c4:	400200a0 	.word	0x400200a0
 80038c8:	400200b8 	.word	0x400200b8
 80038cc:	40020410 	.word	0x40020410
 80038d0:	40020428 	.word	0x40020428
 80038d4:	40020440 	.word	0x40020440
 80038d8:	40020458 	.word	0x40020458
 80038dc:	40020470 	.word	0x40020470
 80038e0:	40020488 	.word	0x40020488
 80038e4:	400204a0 	.word	0x400204a0
 80038e8:	400204b8 	.word	0x400204b8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 020a 	bic.w	r2, r2, #10
 80038fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8097 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800391e:	e091      	b.n	8003a44 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	2208      	movs	r2, #8
 800392a:	409a      	lsls	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8088 	beq.w	8003a46 <HAL_DMA_IRQHandler+0xe0e>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8082 	beq.w	8003a46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <HAL_DMA_IRQHandler+0xe14>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d04a      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3f      	ldr	r2, [pc, #252]	@ (8003a50 <HAL_DMA_IRQHandler+0xe18>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d045      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a54 <HAL_DMA_IRQHandler+0xe1c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d040      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a3c      	ldr	r2, [pc, #240]	@ (8003a58 <HAL_DMA_IRQHandler+0xe20>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d03b      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a5c <HAL_DMA_IRQHandler+0xe24>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d036      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a39      	ldr	r2, [pc, #228]	@ (8003a60 <HAL_DMA_IRQHandler+0xe28>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d031      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a38      	ldr	r2, [pc, #224]	@ (8003a64 <HAL_DMA_IRQHandler+0xe2c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d02c      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a36      	ldr	r2, [pc, #216]	@ (8003a68 <HAL_DMA_IRQHandler+0xe30>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d027      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a35      	ldr	r2, [pc, #212]	@ (8003a6c <HAL_DMA_IRQHandler+0xe34>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a33      	ldr	r2, [pc, #204]	@ (8003a70 <HAL_DMA_IRQHandler+0xe38>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01d      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a32      	ldr	r2, [pc, #200]	@ (8003a74 <HAL_DMA_IRQHandler+0xe3c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d018      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a30      	ldr	r2, [pc, #192]	@ (8003a78 <HAL_DMA_IRQHandler+0xe40>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2f      	ldr	r2, [pc, #188]	@ (8003a7c <HAL_DMA_IRQHandler+0xe44>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a80 <HAL_DMA_IRQHandler+0xe48>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a84 <HAL_DMA_IRQHandler+0xe4c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xdaa>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003a88 <HAL_DMA_IRQHandler+0xe50>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d108      	bne.n	80039f4 <HAL_DMA_IRQHandler+0xdbc>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 021c 	bic.w	r2, r2, #28
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e007      	b.n	8003a04 <HAL_DMA_IRQHandler+0xdcc>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020e 	bic.w	r2, r2, #14
 8003a02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
 8003a3a:	e004      	b.n	8003a46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003a3c:	bf00      	nop
 8003a3e:	e002      	b.n	8003a46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a46:	3728      	adds	r7, #40	@ 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40020010 	.word	0x40020010
 8003a50:	40020028 	.word	0x40020028
 8003a54:	40020040 	.word	0x40020040
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	40020070 	.word	0x40020070
 8003a60:	40020088 	.word	0x40020088
 8003a64:	400200a0 	.word	0x400200a0
 8003a68:	400200b8 	.word	0x400200b8
 8003a6c:	40020410 	.word	0x40020410
 8003a70:	40020428 	.word	0x40020428
 8003a74:	40020440 	.word	0x40020440
 8003a78:	40020458 	.word	0x40020458
 8003a7c:	40020470 	.word	0x40020470
 8003a80:	40020488 	.word	0x40020488
 8003a84:	400204a0 	.word	0x400204a0
 8003a88:	400204b8 	.word	0x400204b8

08003a8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca8 <DMA_SetConfig+0x21c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d072      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a7d      	ldr	r2, [pc, #500]	@ (8003cac <DMA_SetConfig+0x220>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d06d      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb0 <DMA_SetConfig+0x224>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d068      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7a      	ldr	r2, [pc, #488]	@ (8003cb4 <DMA_SetConfig+0x228>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d063      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a79      	ldr	r2, [pc, #484]	@ (8003cb8 <DMA_SetConfig+0x22c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d05e      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a77      	ldr	r2, [pc, #476]	@ (8003cbc <DMA_SetConfig+0x230>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d059      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a76      	ldr	r2, [pc, #472]	@ (8003cc0 <DMA_SetConfig+0x234>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d054      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a74      	ldr	r2, [pc, #464]	@ (8003cc4 <DMA_SetConfig+0x238>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04f      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a73      	ldr	r2, [pc, #460]	@ (8003cc8 <DMA_SetConfig+0x23c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d04a      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a71      	ldr	r2, [pc, #452]	@ (8003ccc <DMA_SetConfig+0x240>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d045      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a70      	ldr	r2, [pc, #448]	@ (8003cd0 <DMA_SetConfig+0x244>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d040      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd4 <DMA_SetConfig+0x248>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d03b      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd8 <DMA_SetConfig+0x24c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d036      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cdc <DMA_SetConfig+0x250>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d031      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce0 <DMA_SetConfig+0x254>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d02c      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a68      	ldr	r2, [pc, #416]	@ (8003ce4 <DMA_SetConfig+0x258>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d027      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a67      	ldr	r2, [pc, #412]	@ (8003ce8 <DMA_SetConfig+0x25c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d022      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a65      	ldr	r2, [pc, #404]	@ (8003cec <DMA_SetConfig+0x260>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01d      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a64      	ldr	r2, [pc, #400]	@ (8003cf0 <DMA_SetConfig+0x264>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d018      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a62      	ldr	r2, [pc, #392]	@ (8003cf4 <DMA_SetConfig+0x268>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a61      	ldr	r2, [pc, #388]	@ (8003cf8 <DMA_SetConfig+0x26c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5f      	ldr	r2, [pc, #380]	@ (8003cfc <DMA_SetConfig+0x270>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5e      	ldr	r2, [pc, #376]	@ (8003d00 <DMA_SetConfig+0x274>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <DMA_SetConfig+0x10a>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5c      	ldr	r2, [pc, #368]	@ (8003d04 <DMA_SetConfig+0x278>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <DMA_SetConfig+0x10e>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <DMA_SetConfig+0x110>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ba8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a39      	ldr	r2, [pc, #228]	@ (8003ca8 <DMA_SetConfig+0x21c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04a      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a38      	ldr	r2, [pc, #224]	@ (8003cac <DMA_SetConfig+0x220>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d045      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a36      	ldr	r2, [pc, #216]	@ (8003cb0 <DMA_SetConfig+0x224>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d040      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a35      	ldr	r2, [pc, #212]	@ (8003cb4 <DMA_SetConfig+0x228>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d03b      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a33      	ldr	r2, [pc, #204]	@ (8003cb8 <DMA_SetConfig+0x22c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d036      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a32      	ldr	r2, [pc, #200]	@ (8003cbc <DMA_SetConfig+0x230>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d031      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a30      	ldr	r2, [pc, #192]	@ (8003cc0 <DMA_SetConfig+0x234>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02c      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc4 <DMA_SetConfig+0x238>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d027      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc8 <DMA_SetConfig+0x23c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d022      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ccc <DMA_SetConfig+0x240>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01d      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd0 <DMA_SetConfig+0x244>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a29      	ldr	r2, [pc, #164]	@ (8003cd4 <DMA_SetConfig+0x248>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a27      	ldr	r2, [pc, #156]	@ (8003cd8 <DMA_SetConfig+0x24c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a26      	ldr	r2, [pc, #152]	@ (8003cdc <DMA_SetConfig+0x250>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ce0 <DMA_SetConfig+0x254>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <DMA_SetConfig+0x1d0>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a23      	ldr	r2, [pc, #140]	@ (8003ce4 <DMA_SetConfig+0x258>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <DMA_SetConfig+0x1d4>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <DMA_SetConfig+0x1d6>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d059      	beq.n	8003d1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	223f      	movs	r2, #63	@ 0x3f
 8003c70:	409a      	lsls	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b40      	cmp	r3, #64	@ 0x40
 8003c94:	d138      	bne.n	8003d08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ca6:	e086      	b.n	8003db6 <DMA_SetConfig+0x32a>
 8003ca8:	40020010 	.word	0x40020010
 8003cac:	40020028 	.word	0x40020028
 8003cb0:	40020040 	.word	0x40020040
 8003cb4:	40020058 	.word	0x40020058
 8003cb8:	40020070 	.word	0x40020070
 8003cbc:	40020088 	.word	0x40020088
 8003cc0:	400200a0 	.word	0x400200a0
 8003cc4:	400200b8 	.word	0x400200b8
 8003cc8:	40020410 	.word	0x40020410
 8003ccc:	40020428 	.word	0x40020428
 8003cd0:	40020440 	.word	0x40020440
 8003cd4:	40020458 	.word	0x40020458
 8003cd8:	40020470 	.word	0x40020470
 8003cdc:	40020488 	.word	0x40020488
 8003ce0:	400204a0 	.word	0x400204a0
 8003ce4:	400204b8 	.word	0x400204b8
 8003ce8:	58025408 	.word	0x58025408
 8003cec:	5802541c 	.word	0x5802541c
 8003cf0:	58025430 	.word	0x58025430
 8003cf4:	58025444 	.word	0x58025444
 8003cf8:	58025458 	.word	0x58025458
 8003cfc:	5802546c 	.word	0x5802546c
 8003d00:	58025480 	.word	0x58025480
 8003d04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
}
 8003d18:	e04d      	b.n	8003db6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a29      	ldr	r2, [pc, #164]	@ (8003dc4 <DMA_SetConfig+0x338>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <DMA_SetConfig+0x2de>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a27      	ldr	r2, [pc, #156]	@ (8003dc8 <DMA_SetConfig+0x33c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01d      	beq.n	8003d6a <DMA_SetConfig+0x2de>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a26      	ldr	r2, [pc, #152]	@ (8003dcc <DMA_SetConfig+0x340>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <DMA_SetConfig+0x2de>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a24      	ldr	r2, [pc, #144]	@ (8003dd0 <DMA_SetConfig+0x344>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <DMA_SetConfig+0x2de>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a23      	ldr	r2, [pc, #140]	@ (8003dd4 <DMA_SetConfig+0x348>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <DMA_SetConfig+0x2de>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a21      	ldr	r2, [pc, #132]	@ (8003dd8 <DMA_SetConfig+0x34c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <DMA_SetConfig+0x2de>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a20      	ldr	r2, [pc, #128]	@ (8003ddc <DMA_SetConfig+0x350>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <DMA_SetConfig+0x2de>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1e      	ldr	r2, [pc, #120]	@ (8003de0 <DMA_SetConfig+0x354>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <DMA_SetConfig+0x2e2>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <DMA_SetConfig+0x2e4>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b40      	cmp	r3, #64	@ 0x40
 8003d92:	d108      	bne.n	8003da6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	60da      	str	r2, [r3, #12]
}
 8003da4:	e007      	b.n	8003db6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	60da      	str	r2, [r3, #12]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	58025408 	.word	0x58025408
 8003dc8:	5802541c 	.word	0x5802541c
 8003dcc:	58025430 	.word	0x58025430
 8003dd0:	58025444 	.word	0x58025444
 8003dd4:	58025458 	.word	0x58025458
 8003dd8:	5802546c 	.word	0x5802546c
 8003ddc:	58025480 	.word	0x58025480
 8003de0:	58025494 	.word	0x58025494

08003de4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a42      	ldr	r2, [pc, #264]	@ (8003efc <DMA_CalcBaseAndBitshift+0x118>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d04a      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a41      	ldr	r2, [pc, #260]	@ (8003f00 <DMA_CalcBaseAndBitshift+0x11c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d045      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3f      	ldr	r2, [pc, #252]	@ (8003f04 <DMA_CalcBaseAndBitshift+0x120>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d040      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f08 <DMA_CalcBaseAndBitshift+0x124>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d03b      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a3c      	ldr	r2, [pc, #240]	@ (8003f0c <DMA_CalcBaseAndBitshift+0x128>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d036      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a3b      	ldr	r2, [pc, #236]	@ (8003f10 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d031      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a39      	ldr	r2, [pc, #228]	@ (8003f14 <DMA_CalcBaseAndBitshift+0x130>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02c      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a38      	ldr	r2, [pc, #224]	@ (8003f18 <DMA_CalcBaseAndBitshift+0x134>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d027      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a36      	ldr	r2, [pc, #216]	@ (8003f1c <DMA_CalcBaseAndBitshift+0x138>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a35      	ldr	r2, [pc, #212]	@ (8003f20 <DMA_CalcBaseAndBitshift+0x13c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d01d      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a33      	ldr	r2, [pc, #204]	@ (8003f24 <DMA_CalcBaseAndBitshift+0x140>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a32      	ldr	r2, [pc, #200]	@ (8003f28 <DMA_CalcBaseAndBitshift+0x144>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a30      	ldr	r2, [pc, #192]	@ (8003f2c <DMA_CalcBaseAndBitshift+0x148>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2f      	ldr	r2, [pc, #188]	@ (8003f30 <DMA_CalcBaseAndBitshift+0x14c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f34 <DMA_CalcBaseAndBitshift+0x150>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xa8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2c      	ldr	r2, [pc, #176]	@ (8003f38 <DMA_CalcBaseAndBitshift+0x154>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <DMA_CalcBaseAndBitshift+0xac>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <DMA_CalcBaseAndBitshift+0xae>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d024      	beq.n	8003ee0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3b10      	subs	r3, #16
 8003e9e:	4a27      	ldr	r2, [pc, #156]	@ (8003f3c <DMA_CalcBaseAndBitshift+0x158>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <DMA_CalcBaseAndBitshift+0x15c>)
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d908      	bls.n	8003ed0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f44 <DMA_CalcBaseAndBitshift+0x160>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ece:	e00d      	b.n	8003eec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <DMA_CalcBaseAndBitshift+0x160>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ede:	e005      	b.n	8003eec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40020010 	.word	0x40020010
 8003f00:	40020028 	.word	0x40020028
 8003f04:	40020040 	.word	0x40020040
 8003f08:	40020058 	.word	0x40020058
 8003f0c:	40020070 	.word	0x40020070
 8003f10:	40020088 	.word	0x40020088
 8003f14:	400200a0 	.word	0x400200a0
 8003f18:	400200b8 	.word	0x400200b8
 8003f1c:	40020410 	.word	0x40020410
 8003f20:	40020428 	.word	0x40020428
 8003f24:	40020440 	.word	0x40020440
 8003f28:	40020458 	.word	0x40020458
 8003f2c:	40020470 	.word	0x40020470
 8003f30:	40020488 	.word	0x40020488
 8003f34:	400204a0 	.word	0x400204a0
 8003f38:	400204b8 	.word	0x400204b8
 8003f3c:	aaaaaaab 	.word	0xaaaaaaab
 8003f40:	0800bd34 	.word	0x0800bd34
 8003f44:	fffffc00 	.word	0xfffffc00

08003f48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d120      	bne.n	8003f9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d858      	bhi.n	8004016 <DMA_CheckFifoParam+0xce>
 8003f64:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <DMA_CheckFifoParam+0x24>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f8f 	.word	0x08003f8f
 8003f74:	08003f7d 	.word	0x08003f7d
 8003f78:	08004017 	.word	0x08004017
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d048      	beq.n	800401a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f8c:	e045      	b.n	800401a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f96:	d142      	bne.n	800401e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f9c:	e03f      	b.n	800401e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa6:	d123      	bne.n	8003ff0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d838      	bhi.n	8004022 <DMA_CheckFifoParam+0xda>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <DMA_CheckFifoParam+0x70>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fcf 	.word	0x08003fcf
 8003fc0:	08003fc9 	.word	0x08003fc9
 8003fc4:	08003fe1 	.word	0x08003fe1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
        break;
 8003fcc:	e030      	b.n	8004030 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d025      	beq.n	8004026 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fde:	e022      	b.n	8004026 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fe8:	d11f      	bne.n	800402a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fee:	e01c      	b.n	800402a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d902      	bls.n	8003ffe <DMA_CheckFifoParam+0xb6>
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d003      	beq.n	8004004 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ffc:	e018      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
        break;
 8004002:	e015      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
    break;
 8004014:	e00b      	b.n	800402e <DMA_CheckFifoParam+0xe6>
        break;
 8004016:	bf00      	nop
 8004018:	e00a      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
        break;
 800401a:	bf00      	nop
 800401c:	e008      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
        break;
 800401e:	bf00      	nop
 8004020:	e006      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
        break;
 8004022:	bf00      	nop
 8004024:	e004      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
        break;
 8004026:	bf00      	nop
 8004028:	e002      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
        break;
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
    break;
 800402e:	bf00      	nop
    }
  }

  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop

08004040 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a38      	ldr	r2, [pc, #224]	@ (8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a36      	ldr	r2, [pc, #216]	@ (8004138 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01d      	beq.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a35      	ldr	r2, [pc, #212]	@ (800413c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a33      	ldr	r2, [pc, #204]	@ (8004140 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a32      	ldr	r2, [pc, #200]	@ (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a30      	ldr	r2, [pc, #192]	@ (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2f      	ldr	r2, [pc, #188]	@ (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2d      	ldr	r2, [pc, #180]	@ (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01a      	beq.n	80040de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	3b08      	subs	r3, #8
 80040b0:	4a28      	ldr	r2, [pc, #160]	@ (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4b26      	ldr	r3, [pc, #152]	@ (8004158 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a24      	ldr	r2, [pc, #144]	@ (800415c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80040cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2201      	movs	r2, #1
 80040d6:	409a      	lsls	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040dc:	e024      	b.n	8004128 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	3b10      	subs	r3, #16
 80040e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004160 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004164 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d806      	bhi.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d902      	bls.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3308      	adds	r3, #8
 8004104:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4b18      	ldr	r3, [pc, #96]	@ (800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a16      	ldr	r2, [pc, #88]	@ (8004170 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004118:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2201      	movs	r2, #1
 8004122:	409a      	lsls	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	58025408 	.word	0x58025408
 8004138:	5802541c 	.word	0x5802541c
 800413c:	58025430 	.word	0x58025430
 8004140:	58025444 	.word	0x58025444
 8004144:	58025458 	.word	0x58025458
 8004148:	5802546c 	.word	0x5802546c
 800414c:	58025480 	.word	0x58025480
 8004150:	58025494 	.word	0x58025494
 8004154:	cccccccd 	.word	0xcccccccd
 8004158:	16009600 	.word	0x16009600
 800415c:	58025880 	.word	0x58025880
 8004160:	aaaaaaab 	.word	0xaaaaaaab
 8004164:	400204b8 	.word	0x400204b8
 8004168:	4002040f 	.word	0x4002040f
 800416c:	10008200 	.word	0x10008200
 8004170:	40020880 	.word	0x40020880

08004174 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d04a      	beq.n	8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d847      	bhi.n	8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a25      	ldr	r2, [pc, #148]	@ (800422c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d022      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a24      	ldr	r2, [pc, #144]	@ (8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01d      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a22      	ldr	r2, [pc, #136]	@ (8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d018      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1f      	ldr	r2, [pc, #124]	@ (800423c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00e      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d009      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1b      	ldr	r2, [pc, #108]	@ (8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80041e4:	2300      	movs	r3, #0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4b17      	ldr	r3, [pc, #92]	@ (800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	461a      	mov	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a15      	ldr	r2, [pc, #84]	@ (8004250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80041fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80041fe:	e009      	b.n	8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4b14      	ldr	r3, [pc, #80]	@ (8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a11      	ldr	r2, [pc, #68]	@ (8004258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004212:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	2201      	movs	r2, #1
 800421a:	409a      	lsls	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	58025408 	.word	0x58025408
 8004230:	5802541c 	.word	0x5802541c
 8004234:	58025430 	.word	0x58025430
 8004238:	58025444 	.word	0x58025444
 800423c:	58025458 	.word	0x58025458
 8004240:	5802546c 	.word	0x5802546c
 8004244:	58025480 	.word	0x58025480
 8004248:	58025494 	.word	0x58025494
 800424c:	1600963f 	.word	0x1600963f
 8004250:	58025940 	.word	0x58025940
 8004254:	1000823f 	.word	0x1000823f
 8004258:	40020940 	.word	0x40020940

0800425c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	@ 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800426a:	4b86      	ldr	r3, [pc, #536]	@ (8004484 <HAL_GPIO_Init+0x228>)
 800426c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800426e:	e18c      	b.n	800458a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 817e 	beq.w	8004584 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d005      	beq.n	80042a0 <HAL_GPIO_Init+0x44>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d130      	bne.n	8004302 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042d6:	2201      	movs	r2, #1
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 0201 	and.w	r2, r3, #1
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b03      	cmp	r3, #3
 800430c:	d017      	beq.n	800433e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	2203      	movs	r2, #3
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d123      	bne.n	8004392 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	220f      	movs	r2, #15
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	08da      	lsrs	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3208      	adds	r2, #8
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	2203      	movs	r2, #3
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0203 	and.w	r2, r3, #3
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80d8 	beq.w	8004584 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004488 <HAL_GPIO_Init+0x22c>)
 80043d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043da:	4a2b      	ldr	r2, [pc, #172]	@ (8004488 <HAL_GPIO_Init+0x22c>)
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_GPIO_Init+0x22c>)
 80043e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043f2:	4a26      	ldr	r2, [pc, #152]	@ (800448c <HAL_GPIO_Init+0x230>)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	089b      	lsrs	r3, r3, #2
 80043f8:	3302      	adds	r3, #2
 80043fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	220f      	movs	r2, #15
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <HAL_GPIO_Init+0x234>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d04a      	beq.n	80044b4 <HAL_GPIO_Init+0x258>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1c      	ldr	r2, [pc, #112]	@ (8004494 <HAL_GPIO_Init+0x238>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d02b      	beq.n	800447e <HAL_GPIO_Init+0x222>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <HAL_GPIO_Init+0x23c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d025      	beq.n	800447a <HAL_GPIO_Init+0x21e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <HAL_GPIO_Init+0x240>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01f      	beq.n	8004476 <HAL_GPIO_Init+0x21a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a19      	ldr	r2, [pc, #100]	@ (80044a0 <HAL_GPIO_Init+0x244>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d019      	beq.n	8004472 <HAL_GPIO_Init+0x216>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a18      	ldr	r2, [pc, #96]	@ (80044a4 <HAL_GPIO_Init+0x248>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_GPIO_Init+0x212>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a17      	ldr	r2, [pc, #92]	@ (80044a8 <HAL_GPIO_Init+0x24c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00d      	beq.n	800446a <HAL_GPIO_Init+0x20e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a16      	ldr	r2, [pc, #88]	@ (80044ac <HAL_GPIO_Init+0x250>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d007      	beq.n	8004466 <HAL_GPIO_Init+0x20a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a15      	ldr	r2, [pc, #84]	@ (80044b0 <HAL_GPIO_Init+0x254>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_GPIO_Init+0x206>
 800445e:	2309      	movs	r3, #9
 8004460:	e029      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 8004462:	230a      	movs	r3, #10
 8004464:	e027      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 8004466:	2307      	movs	r3, #7
 8004468:	e025      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 800446a:	2306      	movs	r3, #6
 800446c:	e023      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 800446e:	2305      	movs	r3, #5
 8004470:	e021      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 8004472:	2304      	movs	r3, #4
 8004474:	e01f      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 8004476:	2303      	movs	r3, #3
 8004478:	e01d      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 800447a:	2302      	movs	r3, #2
 800447c:	e01b      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 800447e:	2301      	movs	r3, #1
 8004480:	e019      	b.n	80044b6 <HAL_GPIO_Init+0x25a>
 8004482:	bf00      	nop
 8004484:	58000080 	.word	0x58000080
 8004488:	58024400 	.word	0x58024400
 800448c:	58000400 	.word	0x58000400
 8004490:	58020000 	.word	0x58020000
 8004494:	58020400 	.word	0x58020400
 8004498:	58020800 	.word	0x58020800
 800449c:	58020c00 	.word	0x58020c00
 80044a0:	58021000 	.word	0x58021000
 80044a4:	58021400 	.word	0x58021400
 80044a8:	58021800 	.word	0x58021800
 80044ac:	58021c00 	.word	0x58021c00
 80044b0:	58022400 	.word	0x58022400
 80044b4:	2300      	movs	r3, #0
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	f002 0203 	and.w	r2, r2, #3
 80044bc:	0092      	lsls	r2, r2, #2
 80044be:	4093      	lsls	r3, r2
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044c6:	4938      	ldr	r1, [pc, #224]	@ (80045a8 <HAL_GPIO_Init+0x34c>)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	3302      	adds	r3, #2
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80044fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	f47f ae6b 	bne.w	8004270 <HAL_GPIO_Init+0x14>
  }
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	3724      	adds	r7, #36	@ 0x24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	58000400 	.word	0x58000400

080045ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045b4:	4b19      	ldr	r3, [pc, #100]	@ (800461c <HAL_PWREx_ConfigSupply+0x70>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d00a      	beq.n	80045d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045c0:	4b16      	ldr	r3, [pc, #88]	@ (800461c <HAL_PWREx_ConfigSupply+0x70>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d001      	beq.n	80045d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e01f      	b.n	8004612 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e01d      	b.n	8004612 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045d6:	4b11      	ldr	r3, [pc, #68]	@ (800461c <HAL_PWREx_ConfigSupply+0x70>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f023 0207 	bic.w	r2, r3, #7
 80045de:	490f      	ldr	r1, [pc, #60]	@ (800461c <HAL_PWREx_ConfigSupply+0x70>)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045e6:	f7fc fee5 	bl	80013b4 <HAL_GetTick>
 80045ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045ec:	e009      	b.n	8004602 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045ee:	f7fc fee1 	bl	80013b4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045fc:	d901      	bls.n	8004602 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e007      	b.n	8004612 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004602:	4b06      	ldr	r3, [pc, #24]	@ (800461c <HAL_PWREx_ConfigSupply+0x70>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800460a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800460e:	d1ee      	bne.n	80045ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	58024800 	.word	0x58024800

08004620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	@ 0x30
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e3c8      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8087 	beq.w	800474e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004640:	4b88      	ldr	r3, [pc, #544]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800464a:	4b86      	ldr	r3, [pc, #536]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004652:	2b10      	cmp	r3, #16
 8004654:	d007      	beq.n	8004666 <HAL_RCC_OscConfig+0x46>
 8004656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004658:	2b18      	cmp	r3, #24
 800465a:	d110      	bne.n	800467e <HAL_RCC_OscConfig+0x5e>
 800465c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d10b      	bne.n	800467e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004666:	4b7f      	ldr	r3, [pc, #508]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d06c      	beq.n	800474c <HAL_RCC_OscConfig+0x12c>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d168      	bne.n	800474c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e3a2      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004686:	d106      	bne.n	8004696 <HAL_RCC_OscConfig+0x76>
 8004688:	4b76      	ldr	r3, [pc, #472]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a75      	ldr	r2, [pc, #468]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 800468e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e02e      	b.n	80046f4 <HAL_RCC_OscConfig+0xd4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x98>
 800469e:	4b71      	ldr	r3, [pc, #452]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a70      	ldr	r2, [pc, #448]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e01d      	b.n	80046f4 <HAL_RCC_OscConfig+0xd4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0xbc>
 80046c2:	4b68      	ldr	r3, [pc, #416]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a67      	ldr	r2, [pc, #412]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b65      	ldr	r3, [pc, #404]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a64      	ldr	r2, [pc, #400]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0xd4>
 80046dc:	4b61      	ldr	r3, [pc, #388]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a60      	ldr	r2, [pc, #384]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fc fe5a 	bl	80013b4 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fc fe56 	bl	80013b4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e356      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004716:	4b53      	ldr	r3, [pc, #332]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0xe4>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fc fe46 	bl	80013b4 <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fc fe42 	bl	80013b4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e342      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800473e:	4b49      	ldr	r3, [pc, #292]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x10c>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 808c 	beq.w	8004874 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475c:	4b41      	ldr	r3, [pc, #260]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004764:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004766:	4b3f      	ldr	r3, [pc, #252]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_RCC_OscConfig+0x162>
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	2b18      	cmp	r3, #24
 8004776:	d137      	bne.n	80047e8 <HAL_RCC_OscConfig+0x1c8>
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d132      	bne.n	80047e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004782:	4b38      	ldr	r3, [pc, #224]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_RCC_OscConfig+0x17a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e314      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800479a:	4b32      	ldr	r3, [pc, #200]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 0219 	bic.w	r2, r3, #25
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	492f      	ldr	r1, [pc, #188]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fc fe02 	bl	80013b4 <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b4:	f7fc fdfe 	bl	80013b4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e2fe      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047c6:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	061b      	lsls	r3, r3, #24
 80047e0:	4920      	ldr	r1, [pc, #128]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e6:	e045      	b.n	8004874 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d026      	beq.n	800483e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f023 0219 	bic.w	r2, r3, #25
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4919      	ldr	r1, [pc, #100]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fc fdd7 	bl	80013b4 <HAL_GetTick>
 8004806:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480a:	f7fc fdd3 	bl	80013b4 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e2d3      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800481c:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b0e      	ldr	r3, [pc, #56]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	490b      	ldr	r1, [pc, #44]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
 800483c:	e01a      	b.n	8004874 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a08      	ldr	r2, [pc, #32]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fc fdb3 	bl	80013b4 <HAL_GetTick>
 800484e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fc fdaf 	bl	80013b4 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d903      	bls.n	8004868 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e2af      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
 8004864:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004868:	4b96      	ldr	r3, [pc, #600]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ee      	bne.n	8004852 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d06a      	beq.n	8004956 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004880:	4b90      	ldr	r3, [pc, #576]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004888:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800488a:	4b8e      	ldr	r3, [pc, #568]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b08      	cmp	r3, #8
 8004894:	d007      	beq.n	80048a6 <HAL_RCC_OscConfig+0x286>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b18      	cmp	r3, #24
 800489a:	d11b      	bne.n	80048d4 <HAL_RCC_OscConfig+0x2b4>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d116      	bne.n	80048d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048a6:	4b87      	ldr	r3, [pc, #540]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_RCC_OscConfig+0x29e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	2b80      	cmp	r3, #128	@ 0x80
 80048b8:	d001      	beq.n	80048be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e282      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048be:	4b81      	ldr	r3, [pc, #516]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	497d      	ldr	r1, [pc, #500]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048d2:	e040      	b.n	8004956 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d023      	beq.n	8004924 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048dc:	4b79      	ldr	r3, [pc, #484]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a78      	ldr	r2, [pc, #480]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80048e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fc fd64 	bl	80013b4 <HAL_GetTick>
 80048ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048f0:	f7fc fd60 	bl	80013b4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e260      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004902:	4b70      	ldr	r3, [pc, #448]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800490e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	4969      	ldr	r1, [pc, #420]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	60cb      	str	r3, [r1, #12]
 8004922:	e018      	b.n	8004956 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004924:	4b67      	ldr	r3, [pc, #412]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a66      	ldr	r2, [pc, #408]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 800492a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800492e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fc fd40 	bl	80013b4 <HAL_GetTick>
 8004934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004938:	f7fc fd3c 	bl	80013b4 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e23c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800494a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d036      	beq.n	80049d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d019      	beq.n	800499e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4b56      	ldr	r3, [pc, #344]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496e:	4a55      	ldr	r2, [pc, #340]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fc fd1d 	bl	80013b4 <HAL_GetTick>
 800497a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497e:	f7fc fd19 	bl	80013b4 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e219      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004990:	4b4c      	ldr	r3, [pc, #304]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x35e>
 800499c:	e018      	b.n	80049d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499e:	4b49      	ldr	r3, [pc, #292]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80049a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a2:	4a48      	ldr	r2, [pc, #288]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fc fd03 	bl	80013b4 <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b2:	f7fc fcff 	bl	80013b4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e1ff      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049c4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80049c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d036      	beq.n	8004a4a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d019      	beq.n	8004a18 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049e4:	4b37      	ldr	r3, [pc, #220]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a36      	ldr	r2, [pc, #216]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 80049ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049f0:	f7fc fce0 	bl	80013b4 <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f8:	f7fc fcdc 	bl	80013b4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e1dc      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x3d8>
 8004a16:	e018      	b.n	8004a4a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a18:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004a1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a24:	f7fc fcc6 	bl	80013b4 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a2c:	f7fc fcc2 	bl	80013b4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e1c2      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a3e:	4b21      	ldr	r3, [pc, #132]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8086 	beq.w	8004b64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac8 <HAL_RCC_OscConfig+0x4a8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ac8 <HAL_RCC_OscConfig+0x4a8>)
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a64:	f7fc fca6 	bl	80013b4 <HAL_GetTick>
 8004a68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6c:	f7fc fca2 	bl	80013b4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1a2      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ac8 <HAL_RCC_OscConfig+0x4a8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d106      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x480>
 8004a92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	4a0b      	ldr	r2, [pc, #44]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d111      	bne.n	8004acc <HAL_RCC_OscConfig+0x4ac>
 8004aa8:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aac:	4a05      	ldr	r2, [pc, #20]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab4:	4b03      	ldr	r3, [pc, #12]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab8:	4a02      	ldr	r2, [pc, #8]	@ (8004ac4 <HAL_RCC_OscConfig+0x4a4>)
 8004aba:	f023 0304 	bic.w	r3, r3, #4
 8004abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac0:	e021      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e6>
 8004ac2:	bf00      	nop
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	58024800 	.word	0x58024800
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	d10c      	bne.n	8004aee <HAL_RCC_OscConfig+0x4ce>
 8004ad4:	4b83      	ldr	r3, [pc, #524]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad8:	4a82      	ldr	r2, [pc, #520]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae0:	4b80      	ldr	r3, [pc, #512]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae4:	4a7f      	ldr	r2, [pc, #508]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aec:	e00b      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e6>
 8004aee:	4b7d      	ldr	r3, [pc, #500]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af2:	4a7c      	ldr	r2, [pc, #496]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004afa:	4b7a      	ldr	r3, [pc, #488]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afe:	4a79      	ldr	r2, [pc, #484]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d015      	beq.n	8004b3a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fc fc51 	bl	80013b4 <HAL_GetTick>
 8004b12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b16:	f7fc fc4d 	bl	80013b4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e14b      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b2c:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0ee      	beq.n	8004b16 <HAL_RCC_OscConfig+0x4f6>
 8004b38:	e014      	b.n	8004b64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3a:	f7fc fc3b 	bl	80013b4 <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b40:	e00a      	b.n	8004b58 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fc fc37 	bl	80013b4 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e135      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b58:	4b62      	ldr	r3, [pc, #392]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ee      	bne.n	8004b42 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 812a 	beq.w	8004dc2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b76:	2b18      	cmp	r3, #24
 8004b78:	f000 80ba 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	f040 8095 	bne.w	8004cb0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b86:	4b57      	ldr	r3, [pc, #348]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a56      	ldr	r2, [pc, #344]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fc fc0f 	bl	80013b4 <HAL_GetTick>
 8004b96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fc fc0b 	bl	80013b4 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e10b      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bac:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f0      	bne.n	8004b9a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004bba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004ce8 <HAL_RCC_OscConfig+0x6c8>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bc8:	0112      	lsls	r2, r2, #4
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	4945      	ldr	r1, [pc, #276]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be0:	3b01      	subs	r3, #1
 8004be2:	025b      	lsls	r3, r3, #9
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bec:	3b01      	subs	r3, #1
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	061b      	lsls	r3, r3, #24
 8004bfe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c02:	4938      	ldr	r1, [pc, #224]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c08:	4b36      	ldr	r3, [pc, #216]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0c:	4a35      	ldr	r2, [pc, #212]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c14:	4b33      	ldr	r3, [pc, #204]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c18:	4b34      	ldr	r3, [pc, #208]	@ (8004cec <HAL_RCC_OscConfig+0x6cc>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c20:	00d2      	lsls	r2, r2, #3
 8004c22:	4930      	ldr	r1, [pc, #192]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c28:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	f023 020c 	bic.w	r2, r3, #12
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	492b      	ldr	r1, [pc, #172]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f023 0202 	bic.w	r2, r3, #2
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c46:	4927      	ldr	r1, [pc, #156]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4a24      	ldr	r2, [pc, #144]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c58:	4b22      	ldr	r3, [pc, #136]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	4a21      	ldr	r2, [pc, #132]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c64:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fc fb94 	bl	80013b4 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fc fb90 	bl	80013b4 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e090      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ca2:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x670>
 8004cae:	e088      	b.n	8004dc2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fc fb7a 	bl	80013b4 <HAL_GetTick>
 8004cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fc fb76 	bl	80013b4 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e076      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cd6:	4b03      	ldr	r3, [pc, #12]	@ (8004ce4 <HAL_RCC_OscConfig+0x6c4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x6a4>
 8004ce2:	e06e      	b.n	8004dc2 <HAL_RCC_OscConfig+0x7a2>
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	fffffc0c 	.word	0xfffffc0c
 8004cec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cf0:	4b36      	ldr	r3, [pc, #216]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cf6:	4b35      	ldr	r3, [pc, #212]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d031      	beq.n	8004d68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f003 0203 	and.w	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d12a      	bne.n	8004d68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d122      	bne.n	8004d68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d11a      	bne.n	8004d68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	0a5b      	lsrs	r3, r3, #9
 8004d36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d111      	bne.n	8004d68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d108      	bne.n	8004d68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	0e1b      	lsrs	r3, r3, #24
 8004d5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e02b      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d6c:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d70:	08db      	lsrs	r3, r3, #3
 8004d72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d01f      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d82:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a11      	ldr	r2, [pc, #68]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d8e:	f7fc fb11 	bl	80013b4 <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d94:	bf00      	nop
 8004d96:	f7fc fb0d 	bl	80013b4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d0f9      	beq.n	8004d96 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004da2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da6:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <HAL_RCC_OscConfig+0x7b0>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dae:	00d2      	lsls	r2, r2, #3
 8004db0:	4906      	ldr	r1, [pc, #24]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004db6:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	4a04      	ldr	r2, [pc, #16]	@ (8004dcc <HAL_RCC_OscConfig+0x7ac>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3730      	adds	r7, #48	@ 0x30
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	ffff0007 	.word	0xffff0007

08004dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e19c      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de8:	4b8a      	ldr	r3, [pc, #552]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d910      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b87      	ldr	r3, [pc, #540]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 020f 	bic.w	r2, r3, #15
 8004dfe:	4985      	ldr	r1, [pc, #532]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b83      	ldr	r3, [pc, #524]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e184      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d010      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	4b7b      	ldr	r3, [pc, #492]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d908      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e34:	4b78      	ldr	r3, [pc, #480]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	4975      	ldr	r1, [pc, #468]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d010      	beq.n	8004e74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	4b70      	ldr	r3, [pc, #448]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d908      	bls.n	8004e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e62:	4b6d      	ldr	r3, [pc, #436]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	496a      	ldr	r1, [pc, #424]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	4b64      	ldr	r3, [pc, #400]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d908      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e90:	4b61      	ldr	r3, [pc, #388]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	495e      	ldr	r1, [pc, #376]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	4b59      	ldr	r3, [pc, #356]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d908      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ebe:	4b56      	ldr	r3, [pc, #344]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4953      	ldr	r1, [pc, #332]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d908      	bls.n	8004efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eec:	4b4a      	ldr	r3, [pc, #296]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f023 020f 	bic.w	r2, r3, #15
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4947      	ldr	r1, [pc, #284]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d055      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f0a:	4b43      	ldr	r3, [pc, #268]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4940      	ldr	r1, [pc, #256]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f24:	4b3c      	ldr	r3, [pc, #240]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d121      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0f6      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f3c:	4b36      	ldr	r3, [pc, #216]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0ea      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f54:	4b30      	ldr	r3, [pc, #192]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0de      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f64:	4b2c      	ldr	r3, [pc, #176]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0d6      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f74:	4b28      	ldr	r3, [pc, #160]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f023 0207 	bic.w	r2, r3, #7
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4925      	ldr	r1, [pc, #148]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fc fa15 	bl	80013b4 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8e:	f7fc fa11 	bl	80013b4 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0be      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d1eb      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	4b14      	ldr	r3, [pc, #80]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d208      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd2:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f023 020f 	bic.w	r2, r3, #15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	490e      	ldr	r1, [pc, #56]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d214      	bcs.n	800501c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b08      	ldr	r3, [pc, #32]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f023 020f 	bic.w	r2, r3, #15
 8004ffa:	4906      	ldr	r1, [pc, #24]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e086      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
 8005014:	52002000 	.word	0x52002000
 8005018:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	4b3f      	ldr	r3, [pc, #252]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005034:	429a      	cmp	r2, r3
 8005036:	d208      	bcs.n	800504a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005038:	4b3c      	ldr	r3, [pc, #240]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4939      	ldr	r1, [pc, #228]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 8005046:	4313      	orrs	r3, r2
 8005048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d010      	beq.n	8005078 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	4b34      	ldr	r3, [pc, #208]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005062:	429a      	cmp	r2, r3
 8005064:	d208      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005066:	4b31      	ldr	r3, [pc, #196]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	492e      	ldr	r1, [pc, #184]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 8005074:	4313      	orrs	r3, r2
 8005076:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	4b28      	ldr	r3, [pc, #160]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005090:	429a      	cmp	r2, r3
 8005092:	d208      	bcs.n	80050a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005094:	4b25      	ldr	r3, [pc, #148]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	4922      	ldr	r1, [pc, #136]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d010      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69da      	ldr	r2, [r3, #28]
 80050b6:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050be:	429a      	cmp	r2, r3
 80050c0:	d208      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050c2:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4917      	ldr	r1, [pc, #92]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050d4:	f000 f834 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b14      	ldr	r3, [pc, #80]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	4912      	ldr	r1, [pc, #72]	@ (8005130 <HAL_RCC_ClockConfig+0x35c>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050f2:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005130 <HAL_RCC_ClockConfig+0x35c>)
 80050fc:	5cd3      	ldrb	r3, [r2, r3]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	4a0a      	ldr	r2, [pc, #40]	@ (8005134 <HAL_RCC_ClockConfig+0x360>)
 800510a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800510c:	4a0a      	ldr	r2, [pc, #40]	@ (8005138 <HAL_RCC_ClockConfig+0x364>)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005112:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <HAL_RCC_ClockConfig+0x368>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fc f902 	bl	8001320 <HAL_InitTick>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
 8005130:	0800bd24 	.word	0x0800bd24
 8005134:	24000004 	.word	0x24000004
 8005138:	24000000 	.word	0x24000000
 800513c:	24000008 	.word	0x24000008

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	@ 0x24
 8005144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005146:	4bb3      	ldr	r3, [pc, #716]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800514e:	2b18      	cmp	r3, #24
 8005150:	f200 8155 	bhi.w	80053fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005154:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	080051c1 	.word	0x080051c1
 8005160:	080053ff 	.word	0x080053ff
 8005164:	080053ff 	.word	0x080053ff
 8005168:	080053ff 	.word	0x080053ff
 800516c:	080053ff 	.word	0x080053ff
 8005170:	080053ff 	.word	0x080053ff
 8005174:	080053ff 	.word	0x080053ff
 8005178:	080053ff 	.word	0x080053ff
 800517c:	080051e7 	.word	0x080051e7
 8005180:	080053ff 	.word	0x080053ff
 8005184:	080053ff 	.word	0x080053ff
 8005188:	080053ff 	.word	0x080053ff
 800518c:	080053ff 	.word	0x080053ff
 8005190:	080053ff 	.word	0x080053ff
 8005194:	080053ff 	.word	0x080053ff
 8005198:	080053ff 	.word	0x080053ff
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	080053ff 	.word	0x080053ff
 80051a4:	080053ff 	.word	0x080053ff
 80051a8:	080053ff 	.word	0x080053ff
 80051ac:	080053ff 	.word	0x080053ff
 80051b0:	080053ff 	.word	0x080053ff
 80051b4:	080053ff 	.word	0x080053ff
 80051b8:	080053ff 	.word	0x080053ff
 80051bc:	080051f3 	.word	0x080051f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c0:	4b94      	ldr	r3, [pc, #592]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051cc:	4b91      	ldr	r3, [pc, #580]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	4a90      	ldr	r2, [pc, #576]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051de:	e111      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051e2:	61bb      	str	r3, [r7, #24]
      break;
 80051e4:	e10e      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051e6:	4b8d      	ldr	r3, [pc, #564]	@ (800541c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051e8:	61bb      	str	r3, [r7, #24]
      break;
 80051ea:	e10b      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051ee:	61bb      	str	r3, [r7, #24]
      break;
 80051f0:	e108      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051f2:	4b88      	ldr	r3, [pc, #544]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051fc:	4b85      	ldr	r3, [pc, #532]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005206:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005208:	4b82      	ldr	r3, [pc, #520]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005212:	4b80      	ldr	r3, [pc, #512]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005216:	08db      	lsrs	r3, r3, #3
 8005218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80e1 	beq.w	80053f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b02      	cmp	r3, #2
 800523a:	f000 8083 	beq.w	8005344 <HAL_RCC_GetSysClockFreq+0x204>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b02      	cmp	r3, #2
 8005242:	f200 80a1 	bhi.w	8005388 <HAL_RCC_GetSysClockFreq+0x248>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x114>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d056      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005252:	e099      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005254:	4b6f      	ldr	r3, [pc, #444]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02d      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005260:	4b6c      	ldr	r3, [pc, #432]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	08db      	lsrs	r3, r3, #3
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	4a6b      	ldr	r2, [pc, #428]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	4b62      	ldr	r3, [pc, #392]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529a:	ed97 6a02 	vldr	s12, [r7, #8]
 800529e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052ba:	e087      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005428 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b51      	ldr	r3, [pc, #324]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a02 	vldr	s12, [r7, #8]
 80052e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052fe:	e065      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800542c <HAL_RCC_GetSysClockFreq+0x2ec>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b40      	ldr	r3, [pc, #256]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a02 	vldr	s12, [r7, #8]
 8005326:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005342:	e043      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005430 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005356:	4b2f      	ldr	r3, [pc, #188]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005366:	ed97 6a02 	vldr	s12, [r7, #8]
 800536a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005386:	e021      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800542c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b1e      	ldr	r3, [pc, #120]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053cc:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	0a5b      	lsrs	r3, r3, #9
 80053d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d6:	3301      	adds	r3, #1
 80053d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f0:	ee17 3a90 	vmov	r3, s15
 80053f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053f6:	e005      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
      break;
 80053fc:	e002      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053fe:	4b07      	ldr	r3, [pc, #28]	@ (800541c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005400:	61bb      	str	r3, [r7, #24]
      break;
 8005402:	bf00      	nop
  }

  return sysclockfreq;
 8005404:	69bb      	ldr	r3, [r7, #24]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	@ 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	03d09000 	.word	0x03d09000
 800541c:	003d0900 	.word	0x003d0900
 8005420:	017d7840 	.word	0x017d7840
 8005424:	46000000 	.word	0x46000000
 8005428:	4c742400 	.word	0x4c742400
 800542c:	4a742400 	.word	0x4a742400
 8005430:	4bbebc20 	.word	0x4bbebc20

08005434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800543a:	f7ff fe81 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800543e:	4602      	mov	r2, r0
 8005440:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x50>)
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	490f      	ldr	r1, [pc, #60]	@ (8005488 <HAL_RCC_GetHCLKFreq+0x54>)
 800544c:	5ccb      	ldrb	r3, [r1, r3]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005458:	4b0a      	ldr	r3, [pc, #40]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x50>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <HAL_RCC_GetHCLKFreq+0x54>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	4a07      	ldr	r2, [pc, #28]	@ (800548c <HAL_RCC_GetHCLKFreq+0x58>)
 8005470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005472:	4a07      	ldr	r2, [pc, #28]	@ (8005490 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005478:	4b04      	ldr	r3, [pc, #16]	@ (800548c <HAL_RCC_GetHCLKFreq+0x58>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	58024400 	.word	0x58024400
 8005488:	0800bd24 	.word	0x0800bd24
 800548c:	24000004 	.word	0x24000004
 8005490:	24000000 	.word	0x24000000

08005494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005498:	f7ff ffcc 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4904      	ldr	r1, [pc, #16]	@ (80054bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	58024400 	.word	0x58024400
 80054bc:	0800bd24 	.word	0x0800bd24

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054c4:	f7ff ffb6 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	0a1b      	lsrs	r3, r3, #8
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4904      	ldr	r1, [pc, #16]	@ (80054e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58024400 	.word	0x58024400
 80054e8:	0800bd24 	.word	0x0800bd24

080054ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f0:	b0c6      	sub	sp, #280	@ 0x118
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005510:	2500      	movs	r5, #0
 8005512:	ea54 0305 	orrs.w	r3, r4, r5
 8005516:	d049      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800551e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005522:	d02f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005528:	d828      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800552a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800552e:	d01a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005534:	d822      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800553a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800553e:	d007      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005540:	e01c      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005542:	4bab      	ldr	r3, [pc, #684]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	4aaa      	ldr	r2, [pc, #680]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800554c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800554e:	e01a      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005554:	3308      	adds	r3, #8
 8005556:	2102      	movs	r1, #2
 8005558:	4618      	mov	r0, r3
 800555a:	f001 fc25 	bl	8006da8 <RCCEx_PLL2_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005564:	e00f      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556a:	3328      	adds	r3, #40	@ 0x28
 800556c:	2102      	movs	r1, #2
 800556e:	4618      	mov	r0, r3
 8005570:	f001 fccc 	bl	8006f0c <RCCEx_PLL3_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800557a:	e004      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005582:	e000      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005586:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800558e:	4b98      	ldr	r3, [pc, #608]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005592:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800559c:	4a94      	ldr	r2, [pc, #592]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800559e:	430b      	orrs	r3, r1
 80055a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80055a2:	e003      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80055b8:	f04f 0900 	mov.w	r9, #0
 80055bc:	ea58 0309 	orrs.w	r3, r8, r9
 80055c0:	d047      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d82a      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80055cc:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e9 	.word	0x080055e9
 80055d8:	080055f7 	.word	0x080055f7
 80055dc:	0800560d 	.word	0x0800560d
 80055e0:	0800562b 	.word	0x0800562b
 80055e4:	0800562b 	.word	0x0800562b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e8:	4b81      	ldr	r3, [pc, #516]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	4a80      	ldr	r2, [pc, #512]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055f4:	e01a      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fa:	3308      	adds	r3, #8
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fbd2 	bl	8006da8 <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800560a:	e00f      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005610:	3328      	adds	r3, #40	@ 0x28
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f001 fc79 	bl	8006f0c <RCCEx_PLL3_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005620:	e004      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800562a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005634:	4b6e      	ldr	r3, [pc, #440]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005638:	f023 0107 	bic.w	r1, r3, #7
 800563c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005642:	4a6b      	ldr	r2, [pc, #428]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005644:	430b      	orrs	r3, r1
 8005646:	6513      	str	r3, [r2, #80]	@ 0x50
 8005648:	e003      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800564e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800565e:	f04f 0b00 	mov.w	fp, #0
 8005662:	ea5a 030b 	orrs.w	r3, sl, fp
 8005666:	d05b      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005670:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005674:	d03b      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005676:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800567a:	d834      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800567c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005680:	d037      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005682:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005686:	d82e      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005688:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800568c:	d033      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800568e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005692:	d828      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005698:	d01a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800569a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800569e:	d822      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80056a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a8:	d007      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80056aa:	e01c      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ac:	4b50      	ldr	r3, [pc, #320]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	4a4f      	ldr	r2, [pc, #316]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056b8:	e01e      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056be:	3308      	adds	r3, #8
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fb70 	bl	8006da8 <RCCEx_PLL2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056ce:	e013      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d4:	3328      	adds	r3, #40	@ 0x28
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 fc17 	bl	8006f0c <RCCEx_PLL3_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056e4:	e008      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056ec:	e004      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80056f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005700:	4b3b      	ldr	r3, [pc, #236]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005704:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005710:	4a37      	ldr	r2, [pc, #220]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005712:	430b      	orrs	r3, r1
 8005714:	6593      	str	r3, [r2, #88]	@ 0x58
 8005716:	e003      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800571c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800572c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005730:	2300      	movs	r3, #0
 8005732:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005736:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800573a:	460b      	mov	r3, r1
 800573c:	4313      	orrs	r3, r2
 800573e:	d05d      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005744:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005748:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800574c:	d03b      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800574e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005752:	d834      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005754:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005758:	d037      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800575a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800575e:	d82e      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005760:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005764:	d033      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005766:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800576a:	d828      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800576c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005770:	d01a      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005772:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005776:	d822      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800577c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005780:	d007      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005782:	e01c      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005784:	4b1a      	ldr	r3, [pc, #104]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	4a19      	ldr	r2, [pc, #100]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800578a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800578e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005790:	e01e      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005796:	3308      	adds	r3, #8
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fb04 	bl	8006da8 <RCCEx_PLL2_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057a6:	e013      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ac:	3328      	adds	r3, #40	@ 0x28
 80057ae:	2100      	movs	r1, #0
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 fbab 	bl	8006f0c <RCCEx_PLL3_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057bc:	e008      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057c4:	e004      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80057c6:	bf00      	nop
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80057ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10d      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057d8:	4b05      	ldr	r3, [pc, #20]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80057e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057e8:	4a01      	ldr	r2, [pc, #4]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ee:	e005      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80057f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005808:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800580c:	2300      	movs	r3, #0
 800580e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005812:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d03a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005822:	2b30      	cmp	r3, #48	@ 0x30
 8005824:	d01f      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005826:	2b30      	cmp	r3, #48	@ 0x30
 8005828:	d819      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800582a:	2b20      	cmp	r3, #32
 800582c:	d00c      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800582e:	2b20      	cmp	r3, #32
 8005830:	d815      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d019      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005836:	2b10      	cmp	r3, #16
 8005838:	d111      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583a:	4baa      	ldr	r3, [pc, #680]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583e:	4aa9      	ldr	r2, [pc, #676]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005844:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005846:	e011      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	3308      	adds	r3, #8
 800584e:	2102      	movs	r1, #2
 8005850:	4618      	mov	r0, r3
 8005852:	f001 faa9 	bl	8006da8 <RCCEx_PLL2_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800585c:	e006      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005864:	e002      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005866:	bf00      	nop
 8005868:	e000      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800586a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005874:	4b9b      	ldr	r3, [pc, #620]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005878:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005882:	4a98      	ldr	r2, [pc, #608]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005884:	430b      	orrs	r3, r1
 8005886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005888:	e003      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800588e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800589e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058a2:	2300      	movs	r3, #0
 80058a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80058ac:	460b      	mov	r3, r1
 80058ae:	4313      	orrs	r3, r2
 80058b0:	d051      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80058b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058bc:	d035      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80058be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058c2:	d82e      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80058c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058c8:	d031      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80058ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058ce:	d828      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80058d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d4:	d01a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80058d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058da:	d822      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80058e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e4:	d007      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80058e6:	e01c      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	4a7d      	ldr	r2, [pc, #500]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058f4:	e01c      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fa:	3308      	adds	r3, #8
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 fa52 	bl	8006da8 <RCCEx_PLL2_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800590a:	e011      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005910:	3328      	adds	r3, #40	@ 0x28
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f001 faf9 	bl	8006f0c <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005928:	e002      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800592e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005938:	4b6a      	ldr	r3, [pc, #424]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800593a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800593c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005946:	4a67      	ldr	r2, [pc, #412]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005948:	430b      	orrs	r3, r1
 800594a:	6513      	str	r3, [r2, #80]	@ 0x50
 800594c:	e003      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005952:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005962:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005966:	2300      	movs	r3, #0
 8005968:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800596c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005970:	460b      	mov	r3, r1
 8005972:	4313      	orrs	r3, r2
 8005974:	d053      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800597c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005980:	d033      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005982:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005986:	d82c      	bhi.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005988:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800598c:	d02f      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x502>
 800598e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005992:	d826      	bhi.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005994:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005998:	d02b      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800599a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800599e:	d820      	bhi.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a4:	d012      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80059a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059aa:	d81a      	bhi.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d022      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b4:	d115      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ba:	3308      	adds	r3, #8
 80059bc:	2101      	movs	r1, #1
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 f9f2 	bl	8006da8 <RCCEx_PLL2_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059ca:	e015      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d0:	3328      	adds	r3, #40	@ 0x28
 80059d2:	2101      	movs	r1, #1
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fa99 	bl	8006f0c <RCCEx_PLL3_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059e0:	e00a      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059e8:	e006      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80059ea:	bf00      	nop
 80059ec:	e004      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80059ee:	bf00      	nop
 80059f0:	e002      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80059f2:	bf00      	nop
 80059f4:	e000      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80059f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a00:	4b38      	ldr	r3, [pc, #224]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a0e:	4a35      	ldr	r2, [pc, #212]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a14:	e003      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a34:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d058      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a4a:	d033      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a50:	d82c      	bhi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a56:	d02f      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5c:	d826      	bhi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005a5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a62:	d02b      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005a64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a68:	d820      	bhi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a6e:	d012      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a74:	d81a      	bhi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d022      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a7e:	d115      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a84:	3308      	adds	r3, #8
 8005a86:	2101      	movs	r1, #1
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 f98d 	bl	8006da8 <RCCEx_PLL2_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a94:	e015      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	3328      	adds	r3, #40	@ 0x28
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 fa34 	bl	8006f0c <RCCEx_PLL3_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ab2:	e006      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ab4:	bf00      	nop
 8005ab6:	e004      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ab8:	bf00      	nop
 8005aba:	e002      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005abc:	bf00      	nop
 8005abe:	e000      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ace:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ada:	4a02      	ldr	r2, [pc, #8]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ae0:	e006      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005ae2:	bf00      	nop
 8005ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b00:	2300      	movs	r3, #0
 8005b02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	d037      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b1a:	d00e      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b20:	d816      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b2a:	d111      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2c:	4bc4      	ldr	r3, [pc, #784]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	4ac3      	ldr	r2, [pc, #780]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b38:	e00f      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b3e:	3308      	adds	r3, #8
 8005b40:	2101      	movs	r1, #1
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 f930 	bl	8006da8 <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b4e:	e004      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b56:	e000      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b62:	4bb7      	ldr	r3, [pc, #732]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b70:	4ab3      	ldr	r2, [pc, #716]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b72:	430b      	orrs	r3, r1
 8005b74:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b76:	e003      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	d039      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d81c      	bhi.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005baa:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb0:	08005bed 	.word	0x08005bed
 8005bb4:	08005bc1 	.word	0x08005bc1
 8005bb8:	08005bcf 	.word	0x08005bcf
 8005bbc:	08005bed 	.word	0x08005bed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc0:	4b9f      	ldr	r3, [pc, #636]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	4a9e      	ldr	r2, [pc, #632]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bcc:	e00f      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	2102      	movs	r1, #2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 f8e6 	bl	8006da8 <RCCEx_PLL2_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005be2:	e004      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bea:	e000      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bf6:	4b92      	ldr	r3, [pc, #584]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfa:	f023 0103 	bic.w	r1, r3, #3
 8005bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c04:	4a8e      	ldr	r2, [pc, #568]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c06:	430b      	orrs	r3, r1
 8005c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c0a:	e003      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c24:	2300      	movs	r3, #0
 8005c26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f000 8099 	beq.w	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c36:	4b83      	ldr	r3, [pc, #524]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a82      	ldr	r2, [pc, #520]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c42:	f7fb fbb7 	bl	80013b4 <HAL_GetTick>
 8005c46:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c4a:	e00b      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4c:	f7fb fbb2 	bl	80013b4 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b64      	cmp	r3, #100	@ 0x64
 8005c5a:	d903      	bls.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c62:	e005      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c64:	4b77      	ldr	r3, [pc, #476]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0ed      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005c70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d173      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c78:	4b71      	ldr	r3, [pc, #452]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c84:	4053      	eors	r3, r2
 8005c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d015      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c96:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c9a:	4b69      	ldr	r3, [pc, #420]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9e:	4a68      	ldr	r2, [pc, #416]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca6:	4b66      	ldr	r3, [pc, #408]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005caa:	4a65      	ldr	r2, [pc, #404]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cb2:	4a63      	ldr	r2, [pc, #396]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cb8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc6:	d118      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fb fb74 	bl	80013b4 <HAL_GetTick>
 8005ccc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cd0:	e00d      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fb fb6f 	bl	80013b4 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005cdc:	1ad2      	subs	r2, r2, r3
 8005cde:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d903      	bls.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005cec:	e005      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cee:	4b54      	ldr	r3, [pc, #336]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0eb      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d129      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d12:	d10e      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005d14:	4b4a      	ldr	r3, [pc, #296]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d24:	091a      	lsrs	r2, r3, #4
 8005d26:	4b48      	ldr	r3, [pc, #288]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	4a45      	ldr	r2, [pc, #276]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	6113      	str	r3, [r2, #16]
 8005d30:	e005      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005d32:	4b43      	ldr	r3, [pc, #268]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	4a42      	ldr	r2, [pc, #264]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d3c:	6113      	str	r3, [r2, #16]
 8005d3e:	4b40      	ldr	r3, [pc, #256]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d54:	e008      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005d5e:	e003      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f002 0301 	and.w	r3, r2, #1
 8005d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d7e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d82:	460b      	mov	r3, r1
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f000 808f 	beq.w	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d90:	2b28      	cmp	r3, #40	@ 0x28
 8005d92:	d871      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005d94:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005e81 	.word	0x08005e81
 8005da0:	08005e79 	.word	0x08005e79
 8005da4:	08005e79 	.word	0x08005e79
 8005da8:	08005e79 	.word	0x08005e79
 8005dac:	08005e79 	.word	0x08005e79
 8005db0:	08005e79 	.word	0x08005e79
 8005db4:	08005e79 	.word	0x08005e79
 8005db8:	08005e79 	.word	0x08005e79
 8005dbc:	08005e4d 	.word	0x08005e4d
 8005dc0:	08005e79 	.word	0x08005e79
 8005dc4:	08005e79 	.word	0x08005e79
 8005dc8:	08005e79 	.word	0x08005e79
 8005dcc:	08005e79 	.word	0x08005e79
 8005dd0:	08005e79 	.word	0x08005e79
 8005dd4:	08005e79 	.word	0x08005e79
 8005dd8:	08005e79 	.word	0x08005e79
 8005ddc:	08005e63 	.word	0x08005e63
 8005de0:	08005e79 	.word	0x08005e79
 8005de4:	08005e79 	.word	0x08005e79
 8005de8:	08005e79 	.word	0x08005e79
 8005dec:	08005e79 	.word	0x08005e79
 8005df0:	08005e79 	.word	0x08005e79
 8005df4:	08005e79 	.word	0x08005e79
 8005df8:	08005e79 	.word	0x08005e79
 8005dfc:	08005e81 	.word	0x08005e81
 8005e00:	08005e79 	.word	0x08005e79
 8005e04:	08005e79 	.word	0x08005e79
 8005e08:	08005e79 	.word	0x08005e79
 8005e0c:	08005e79 	.word	0x08005e79
 8005e10:	08005e79 	.word	0x08005e79
 8005e14:	08005e79 	.word	0x08005e79
 8005e18:	08005e79 	.word	0x08005e79
 8005e1c:	08005e81 	.word	0x08005e81
 8005e20:	08005e79 	.word	0x08005e79
 8005e24:	08005e79 	.word	0x08005e79
 8005e28:	08005e79 	.word	0x08005e79
 8005e2c:	08005e79 	.word	0x08005e79
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005e79 	.word	0x08005e79
 8005e38:	08005e79 	.word	0x08005e79
 8005e3c:	08005e81 	.word	0x08005e81
 8005e40:	58024400 	.word	0x58024400
 8005e44:	58024800 	.word	0x58024800
 8005e48:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e50:	3308      	adds	r3, #8
 8005e52:	2101      	movs	r1, #1
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 ffa7 	bl	8006da8 <RCCEx_PLL2_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e60:	e00f      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e66:	3328      	adds	r3, #40	@ 0x28
 8005e68:	2101      	movs	r1, #1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 f84e 	bl	8006f0c <RCCEx_PLL3_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e76:	e004      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e7e:	e000      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e8a:	4bbf      	ldr	r3, [pc, #764]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e98:	4abb      	ldr	r2, [pc, #748]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e9a:	430b      	orrs	r3, r1
 8005e9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e9e:	e003      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f002 0302 	and.w	r3, r2, #2
 8005eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ebe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d041      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d824      	bhi.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f25 	.word	0x08005f25
 8005edc:	08005ef1 	.word	0x08005ef1
 8005ee0:	08005f07 	.word	0x08005f07
 8005ee4:	08005f25 	.word	0x08005f25
 8005ee8:	08005f25 	.word	0x08005f25
 8005eec:	08005f25 	.word	0x08005f25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 ff55 	bl	8006da8 <RCCEx_PLL2_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f04:	e00f      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0a:	3328      	adds	r3, #40	@ 0x28
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fffc 	bl	8006f0c <RCCEx_PLL3_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f1a:	e004      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f22:	e000      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f2e:	4b96      	ldr	r3, [pc, #600]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f32:	f023 0107 	bic.w	r1, r3, #7
 8005f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f3c:	4a92      	ldr	r2, [pc, #584]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f42:	e003      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f002 0304 	and.w	r3, r2, #4
 8005f58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f62:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f66:	460b      	mov	r3, r1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	d044      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	d825      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005f78:	a201      	add	r2, pc, #4	@ (adr r2, 8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005f99 	.word	0x08005f99
 8005f88:	08005faf 	.word	0x08005faf
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fcd 	.word	0x08005fcd
 8005f94:	08005fcd 	.word	0x08005fcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 ff01 	bl	8006da8 <RCCEx_PLL2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fac:	e00f      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	3328      	adds	r3, #40	@ 0x28
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 ffa8 	bl	8006f0c <RCCEx_PLL3_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fc2:	e004      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fca:	e000      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fda:	f023 0107 	bic.w	r1, r3, #7
 8005fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe6:	4a68      	ldr	r2, [pc, #416]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fec:	e003      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f002 0320 	and.w	r3, r2, #32
 8006002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006006:	2300      	movs	r3, #0
 8006008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800600c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006010:	460b      	mov	r3, r1
 8006012:	4313      	orrs	r3, r2
 8006014:	d055      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800601e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006022:	d033      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006028:	d82c      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602e:	d02f      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006034:	d826      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800603a:	d02b      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800603c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006040:	d820      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006046:	d012      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604c:	d81a      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d022      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006056:	d115      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	3308      	adds	r3, #8
 800605e:	2100      	movs	r1, #0
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fea1 	bl	8006da8 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800606c:	e015      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006072:	3328      	adds	r3, #40	@ 0x28
 8006074:	2102      	movs	r1, #2
 8006076:	4618      	mov	r0, r3
 8006078:	f000 ff48 	bl	8006f0c <RCCEx_PLL3_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006082:	e00a      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800608a:	e006      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800608c:	bf00      	nop
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006090:	bf00      	nop
 8006092:	e002      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006094:	bf00      	nop
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10b      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060a2:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060b2:	4a35      	ldr	r2, [pc, #212]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060b4:	430b      	orrs	r3, r1
 80060b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80060b8:	e003      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80060ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060d2:	2300      	movs	r3, #0
 80060d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d058      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060ee:	d033      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80060f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060f4:	d82c      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fa:	d02f      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006100:	d826      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006102:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006106:	d02b      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006108:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800610c:	d820      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006112:	d012      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006118:	d81a      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d022      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800611e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006122:	d115      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006128:	3308      	adds	r3, #8
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fe3b 	bl	8006da8 <RCCEx_PLL2_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006138:	e015      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613e:	3328      	adds	r3, #40	@ 0x28
 8006140:	2102      	movs	r1, #2
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fee2 	bl	8006f0c <RCCEx_PLL3_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800614e:	e00a      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006156:	e006      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006158:	bf00      	nop
 800615a:	e004      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800615c:	bf00      	nop
 800615e:	e002      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006160:	bf00      	nop
 8006162:	e000      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10e      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800616e:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006172:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800617e:	4a02      	ldr	r2, [pc, #8]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006180:	430b      	orrs	r3, r1
 8006182:	6593      	str	r3, [r2, #88]	@ 0x58
 8006184:	e006      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006186:	bf00      	nop
 8006188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006190:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80061ae:	460b      	mov	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	d055      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061c0:	d033      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80061c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061c6:	d82c      	bhi.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80061c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061cc:	d02f      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80061ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d2:	d826      	bhi.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80061d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061d8:	d02b      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80061da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061de:	d820      	bhi.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80061e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e4:	d012      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80061e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ea:	d81a      	bhi.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d022      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80061f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f4:	d115      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fa:	3308      	adds	r3, #8
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fdd2 	bl	8006da8 <RCCEx_PLL2_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800620a:	e015      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006210:	3328      	adds	r3, #40	@ 0x28
 8006212:	2102      	movs	r1, #2
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fe79 	bl	8006f0c <RCCEx_PLL3_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006220:	e00a      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006228:	e006      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800622a:	bf00      	nop
 800622c:	e004      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800622e:	bf00      	nop
 8006230:	e002      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006240:	4ba0      	ldr	r3, [pc, #640]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006244:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006250:	4a9c      	ldr	r2, [pc, #624]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006252:	430b      	orrs	r3, r1
 8006254:	6593      	str	r3, [r2, #88]	@ 0x58
 8006256:	e003      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800625c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f002 0308 	and.w	r3, r2, #8
 800626c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006270:	2300      	movs	r3, #0
 8006272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006276:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800627a:	460b      	mov	r3, r1
 800627c:	4313      	orrs	r3, r2
 800627e:	d01e      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628c:	d10c      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800628e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006292:	3328      	adds	r3, #40	@ 0x28
 8006294:	2102      	movs	r1, #2
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fe38 	bl	8006f0c <RCCEx_PLL3_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80062a8:	4b86      	ldr	r3, [pc, #536]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b8:	4a82      	ldr	r2, [pc, #520]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062ba:	430b      	orrs	r3, r1
 80062bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f002 0310 	and.w	r3, r2, #16
 80062ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80062d8:	460b      	mov	r3, r1
 80062da:	4313      	orrs	r3, r2
 80062dc:	d01e      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ea:	d10c      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f0:	3328      	adds	r3, #40	@ 0x28
 80062f2:	2102      	movs	r1, #2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fe09 	bl	8006f0c <RCCEx_PLL3_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006306:	4b6f      	ldr	r3, [pc, #444]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800630e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006316:	4a6b      	ldr	r2, [pc, #428]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006318:	430b      	orrs	r3, r1
 800631a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800632a:	2300      	movs	r3, #0
 800632c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800632e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d03e      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006344:	d022      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800634a:	d81b      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006354:	d00b      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006356:	e015      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635c:	3308      	adds	r3, #8
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fd21 	bl	8006da8 <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800636c:	e00f      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006372:	3328      	adds	r3, #40	@ 0x28
 8006374:	2102      	movs	r1, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fdc8 	bl	8006f0c <RCCEx_PLL3_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006382:	e004      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800638a:	e000      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800638c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006396:	4b4b      	ldr	r3, [pc, #300]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063a6:	4a47      	ldr	r2, [pc, #284]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80063c4:	2300      	movs	r3, #0
 80063c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80063c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80063cc:	460b      	mov	r3, r1
 80063ce:	4313      	orrs	r3, r2
 80063d0:	d03b      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063de:	d01f      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80063e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063e4:	d818      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80063e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ea:	d003      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80063ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063f0:	d007      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80063f2:	e011      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f4:	4b33      	ldr	r3, [pc, #204]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	4a32      	ldr	r2, [pc, #200]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006400:	e00f      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006406:	3328      	adds	r3, #40	@ 0x28
 8006408:	2101      	movs	r1, #1
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fd7e 	bl	8006f0c <RCCEx_PLL3_Config>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006416:	e004      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800641e:	e000      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800642a:	4b26      	ldr	r3, [pc, #152]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800642c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800643a:	4a22      	ldr	r2, [pc, #136]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800643c:	430b      	orrs	r3, r1
 800643e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006440:	e003      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006446:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006456:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006458:	2300      	movs	r3, #0
 800645a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800645c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006460:	460b      	mov	r3, r1
 8006462:	4313      	orrs	r3, r2
 8006464:	d034      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006474:	d007      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006476:	e011      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006478:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	4a11      	ldr	r2, [pc, #68]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800647e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006484:	e00e      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	3308      	adds	r3, #8
 800648c:	2102      	movs	r1, #2
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fc8a 	bl	8006da8 <RCCEx_PLL2_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800649a:	e003      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10d      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ba:	4a02      	ldr	r2, [pc, #8]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064bc:	430b      	orrs	r3, r1
 80064be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064c0:	e006      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80064de:	2300      	movs	r3, #0
 80064e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80064e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d00c      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f0:	3328      	adds	r3, #40	@ 0x28
 80064f2:	2102      	movs	r1, #2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fd09 	bl	8006f0c <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006512:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006514:	2300      	movs	r3, #0
 8006516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006518:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800651c:	460b      	mov	r3, r1
 800651e:	4313      	orrs	r3, r2
 8006520:	d036      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800652c:	d018      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800652e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006532:	d811      	bhi.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006538:	d014      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800653a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800653e:	d80b      	bhi.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d011      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006548:	d106      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654a:	4bb7      	ldr	r3, [pc, #732]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800654c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654e:	4ab6      	ldr	r2, [pc, #728]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006556:	e008      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800655e:	e004      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006560:	bf00      	nop
 8006562:	e002      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006572:	4bad      	ldr	r3, [pc, #692]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800657a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006580:	4aa9      	ldr	r2, [pc, #676]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006582:	430b      	orrs	r3, r1
 8006584:	6553      	str	r3, [r2, #84]	@ 0x54
 8006586:	e003      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800658c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800659c:	653b      	str	r3, [r7, #80]	@ 0x50
 800659e:	2300      	movs	r3, #0
 80065a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80065a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d009      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065ac:	4b9e      	ldr	r3, [pc, #632]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ba:	4a9b      	ldr	r2, [pc, #620]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80065cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ce:	2300      	movs	r3, #0
 80065d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065dc:	4b92      	ldr	r3, [pc, #584]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065ea:	4a8f      	ldr	r2, [pc, #572]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80065fe:	2300      	movs	r3, #0
 8006600:	647b      	str	r3, [r7, #68]	@ 0x44
 8006602:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006606:	460b      	mov	r3, r1
 8006608:	4313      	orrs	r3, r2
 800660a:	d00e      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800660c:	4b86      	ldr	r3, [pc, #536]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	4a85      	ldr	r2, [pc, #532]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006612:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006616:	6113      	str	r3, [r2, #16]
 8006618:	4b83      	ldr	r3, [pc, #524]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800661a:	6919      	ldr	r1, [r3, #16]
 800661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006624:	4a80      	ldr	r2, [pc, #512]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006626:	430b      	orrs	r3, r1
 8006628:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006636:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006638:	2300      	movs	r3, #0
 800663a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800663c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006640:	460b      	mov	r3, r1
 8006642:	4313      	orrs	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006646:	4b78      	ldr	r3, [pc, #480]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800664a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006654:	4a74      	ldr	r2, [pc, #464]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006656:	430b      	orrs	r3, r1
 8006658:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006666:	633b      	str	r3, [r7, #48]	@ 0x30
 8006668:	2300      	movs	r3, #0
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34
 800666c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006670:	460b      	mov	r3, r1
 8006672:	4313      	orrs	r3, r2
 8006674:	d00a      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006676:	4b6c      	ldr	r3, [pc, #432]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800667a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006686:	4a68      	ldr	r2, [pc, #416]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	2100      	movs	r1, #0
 8006696:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800669e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d011      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ac:	3308      	adds	r3, #8
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fb79 	bl	8006da8 <RCCEx_PLL2_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80066bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	2100      	movs	r1, #0
 80066d6:	6239      	str	r1, [r7, #32]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80066de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066e2:	460b      	mov	r3, r1
 80066e4:	4313      	orrs	r3, r2
 80066e6:	d011      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	3308      	adds	r3, #8
 80066ee:	2101      	movs	r1, #1
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fb59 	bl	8006da8 <RCCEx_PLL2_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80066fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006708:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	2100      	movs	r1, #0
 8006716:	61b9      	str	r1, [r7, #24]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006722:	460b      	mov	r3, r1
 8006724:	4313      	orrs	r3, r2
 8006726:	d011      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672c:	3308      	adds	r3, #8
 800672e:	2102      	movs	r1, #2
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fb39 	bl	8006da8 <RCCEx_PLL2_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800673c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006748:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	2100      	movs	r1, #0
 8006756:	6139      	str	r1, [r7, #16]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006762:	460b      	mov	r3, r1
 8006764:	4313      	orrs	r3, r2
 8006766:	d011      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676c:	3328      	adds	r3, #40	@ 0x28
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fbcb 	bl	8006f0c <RCCEx_PLL3_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800677c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006788:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	2100      	movs	r1, #0
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067a2:	460b      	mov	r3, r1
 80067a4:	4313      	orrs	r3, r2
 80067a6:	d011      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	3328      	adds	r3, #40	@ 0x28
 80067ae:	2101      	movs	r1, #1
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fbab 	bl	8006f0c <RCCEx_PLL3_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80067bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	2100      	movs	r1, #0
 80067d6:	6039      	str	r1, [r7, #0]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067e2:	460b      	mov	r3, r1
 80067e4:	4313      	orrs	r3, r2
 80067e6:	d011      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	3328      	adds	r3, #40	@ 0x28
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fb8b 	bl	8006f0c <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80067fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800680c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
}
 800681a:	4618      	mov	r0, r3
 800681c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006820:	46bd      	mov	sp, r7
 8006822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006826:	bf00      	nop
 8006828:	58024400 	.word	0x58024400

0800682c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006830:	f7fe fe00 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8006834:	4602      	mov	r2, r0
 8006836:	4b06      	ldr	r3, [pc, #24]	@ (8006850 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	4904      	ldr	r1, [pc, #16]	@ (8006854 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006842:	5ccb      	ldrb	r3, [r1, r3]
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800684c:	4618      	mov	r0, r3
 800684e:	bd80      	pop	{r7, pc}
 8006850:	58024400 	.word	0x58024400
 8006854:	0800bd24 	.word	0x0800bd24

08006858 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006858:	b480      	push	{r7}
 800685a:	b089      	sub	sp, #36	@ 0x24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006860:	4ba1      	ldr	r3, [pc, #644]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800686a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800686c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686e:	0b1b      	lsrs	r3, r3, #12
 8006870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006874:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006876:	4b9c      	ldr	r3, [pc, #624]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006882:	4b99      	ldr	r3, [pc, #612]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006886:	08db      	lsrs	r3, r3, #3
 8006888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8111 	beq.w	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	f000 8083 	beq.w	80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	f200 80a1 	bhi.w	80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d056      	beq.n	8006970 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068c2:	e099      	b.n	80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068c4:	4b88      	ldr	r3, [pc, #544]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d02d      	beq.n	800692c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068d0:	4b85      	ldr	r3, [pc, #532]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	08db      	lsrs	r3, r3, #3
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	4a84      	ldr	r2, [pc, #528]	@ (8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
 80068e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fa:	4b7b      	ldr	r3, [pc, #492]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690a:	ed97 6a03 	vldr	s12, [r7, #12]
 800690e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800691e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006926:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800692a:	e087      	b.n	8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800693a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800694e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006952:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800696e:	e065      	b.n	8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800697e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006982:	4b59      	ldr	r3, [pc, #356]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006992:	ed97 6a03 	vldr	s12, [r7, #12]
 8006996:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800699a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069b2:	e043      	b.n	8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006afc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c6:	4b48      	ldr	r3, [pc, #288]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f6:	e021      	b.n	8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0a:	4b37      	ldr	r3, [pc, #220]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a40:	0a5b      	lsrs	r3, r3, #9
 8006a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a62:	ee17 2a90 	vmov	r2, s15
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6e:	0c1b      	lsrs	r3, r3, #16
 8006a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a90:	ee17 2a90 	vmov	r2, s15
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006a98:	4b13      	ldr	r3, [pc, #76]	@ (8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	0e1b      	lsrs	r3, r3, #24
 8006a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006abe:	ee17 2a90 	vmov	r2, s15
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ac6:	e008      	b.n	8006ada <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	609a      	str	r2, [r3, #8]
}
 8006ada:	bf00      	nop
 8006adc:	3724      	adds	r7, #36	@ 0x24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400
 8006aec:	03d09000 	.word	0x03d09000
 8006af0:	46000000 	.word	0x46000000
 8006af4:	4c742400 	.word	0x4c742400
 8006af8:	4a742400 	.word	0x4a742400
 8006afc:	4bbebc20 	.word	0x4bbebc20

08006b00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b089      	sub	sp, #36	@ 0x24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b08:	4ba1      	ldr	r3, [pc, #644]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b12:	4b9f      	ldr	r3, [pc, #636]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b16:	0d1b      	lsrs	r3, r3, #20
 8006b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b1e:	4b9c      	ldr	r3, [pc, #624]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006b2a:	4b99      	ldr	r3, [pc, #612]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2e:	08db      	lsrs	r3, r3, #3
 8006b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	fb02 f303 	mul.w	r3, r2, r3
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8111 	beq.w	8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	f000 8083 	beq.w	8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	f200 80a1 	bhi.w	8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d056      	beq.n	8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b6a:	e099      	b.n	8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b6c:	4b88      	ldr	r3, [pc, #544]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d02d      	beq.n	8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b78:	4b85      	ldr	r3, [pc, #532]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	08db      	lsrs	r3, r3, #3
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	4a84      	ldr	r2, [pc, #528]	@ (8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
 8006b88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	ee07 3a90 	vmov	s15, r3
 8006b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bd2:	e087      	b.n	8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be6:	4b6a      	ldr	r3, [pc, #424]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c16:	e065      	b.n	8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006da0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2a:	4b59      	ldr	r3, [pc, #356]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c5a:	e043      	b.n	8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6e:	4b48      	ldr	r3, [pc, #288]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9e:	e021      	b.n	8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006da0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb2:	4b37      	ldr	r3, [pc, #220]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce8:	0a5b      	lsrs	r3, r3, #9
 8006cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d0a:	ee17 2a90 	vmov	r2, s15
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d12:	4b1f      	ldr	r3, [pc, #124]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d1c:	ee07 3a90 	vmov	s15, r3
 8006d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d38:	ee17 2a90 	vmov	r2, s15
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d40:	4b13      	ldr	r3, [pc, #76]	@ (8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d44:	0e1b      	lsrs	r3, r3, #24
 8006d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d66:	ee17 2a90 	vmov	r2, s15
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d6e:	e008      	b.n	8006d82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
}
 8006d82:	bf00      	nop
 8006d84:	3724      	adds	r7, #36	@ 0x24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	03d09000 	.word	0x03d09000
 8006d98:	46000000 	.word	0x46000000
 8006d9c:	4c742400 	.word	0x4c742400
 8006da0:	4a742400 	.word	0x4a742400
 8006da4:	4bbebc20 	.word	0x4bbebc20

08006da8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006db6:	4b53      	ldr	r3, [pc, #332]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d101      	bne.n	8006dc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e099      	b.n	8006efa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a4e      	ldr	r2, [pc, #312]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006dcc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd2:	f7fa faef 	bl	80013b4 <HAL_GetTick>
 8006dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dd8:	e008      	b.n	8006dec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dda:	f7fa faeb 	bl	80013b4 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e086      	b.n	8006efa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dec:	4b45      	ldr	r3, [pc, #276]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f0      	bne.n	8006dda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006df8:	4b42      	ldr	r3, [pc, #264]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	031b      	lsls	r3, r3, #12
 8006e06:	493f      	ldr	r1, [pc, #252]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	025b      	lsls	r3, r3, #9
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	061b      	lsls	r3, r3, #24
 8006e38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e3c:	4931      	ldr	r1, [pc, #196]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e42:	4b30      	ldr	r3, [pc, #192]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	492d      	ldr	r1, [pc, #180]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e54:	4b2b      	ldr	r3, [pc, #172]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	f023 0220 	bic.w	r2, r3, #32
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	4928      	ldr	r1, [pc, #160]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e66:	4b27      	ldr	r3, [pc, #156]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6a:	4a26      	ldr	r2, [pc, #152]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e6c:	f023 0310 	bic.w	r3, r3, #16
 8006e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e72:	4b24      	ldr	r3, [pc, #144]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e76:	4b24      	ldr	r3, [pc, #144]	@ (8006f08 <RCCEx_PLL2_Config+0x160>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	69d2      	ldr	r2, [r2, #28]
 8006e7e:	00d2      	lsls	r2, r2, #3
 8006e80:	4920      	ldr	r1, [pc, #128]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e86:	4b1f      	ldr	r3, [pc, #124]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	f043 0310 	orr.w	r3, r3, #16
 8006e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e98:	4b1a      	ldr	r3, [pc, #104]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4a19      	ldr	r2, [pc, #100]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ea4:	e00f      	b.n	8006ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d106      	bne.n	8006eba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006eac:	4b15      	ldr	r3, [pc, #84]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	4a14      	ldr	r2, [pc, #80]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006eb8:	e005      	b.n	8006ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006eba:	4b12      	ldr	r3, [pc, #72]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4a11      	ldr	r2, [pc, #68]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006ec0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a0e      	ldr	r2, [pc, #56]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed2:	f7fa fa6f 	bl	80013b4 <HAL_GetTick>
 8006ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ed8:	e008      	b.n	8006eec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006eda:	f7fa fa6b 	bl	80013b4 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e006      	b.n	8006efa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eec:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0f0      	beq.n	8006eda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	58024400 	.word	0x58024400
 8006f08:	ffff0007 	.word	0xffff0007

08006f0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f1a:	4b53      	ldr	r3, [pc, #332]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d101      	bne.n	8006f2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e099      	b.n	800705e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f36:	f7fa fa3d 	bl	80013b4 <HAL_GetTick>
 8006f3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f3c:	e008      	b.n	8006f50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f3e:	f7fa fa39 	bl	80013b4 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e086      	b.n	800705e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f50:	4b45      	ldr	r3, [pc, #276]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f0      	bne.n	8006f3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f5c:	4b42      	ldr	r3, [pc, #264]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f60:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	051b      	lsls	r3, r3, #20
 8006f6a:	493f      	ldr	r1, [pc, #252]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	025b      	lsls	r3, r3, #9
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	041b      	lsls	r3, r3, #16
 8006f8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fa0:	4931      	ldr	r1, [pc, #196]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fa6:	4b30      	ldr	r3, [pc, #192]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	492d      	ldr	r1, [pc, #180]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	4928      	ldr	r1, [pc, #160]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006fca:	4b27      	ldr	r3, [pc, #156]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	4a26      	ldr	r2, [pc, #152]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fd6:	4b24      	ldr	r3, [pc, #144]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fda:	4b24      	ldr	r3, [pc, #144]	@ (800706c <RCCEx_PLL3_Config+0x160>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	69d2      	ldr	r2, [r2, #28]
 8006fe2:	00d2      	lsls	r2, r2, #3
 8006fe4:	4920      	ldr	r1, [pc, #128]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fea:	4b1f      	ldr	r3, [pc, #124]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a19      	ldr	r2, [pc, #100]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007002:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007006:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007008:	e00f      	b.n	800702a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d106      	bne.n	800701e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007010:	4b15      	ldr	r3, [pc, #84]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	4a14      	ldr	r2, [pc, #80]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007016:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800701a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800701c:	e005      	b.n	800702a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800701e:	4b12      	ldr	r3, [pc, #72]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	4a11      	ldr	r2, [pc, #68]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007024:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007028:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800702a:	4b0f      	ldr	r3, [pc, #60]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a0e      	ldr	r2, [pc, #56]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007036:	f7fa f9bd 	bl	80013b4 <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800703c:	e008      	b.n	8007050 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800703e:	f7fa f9b9 	bl	80013b4 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e006      	b.n	800705e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007050:	4b05      	ldr	r3, [pc, #20]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	58024400 	.word	0x58024400
 800706c:	ffff0007 	.word	0xffff0007

08007070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e042      	b.n	8007108 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7f9 fe7b 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2224      	movs	r2, #36	@ 0x24
 800709e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 fac4 	bl	8008648 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fc55 	bl	8007970 <UART_SetConfig>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e01b      	b.n	8007108 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0201 	orr.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 fb43 	bl	800878c <UART_CheckIdleState>
 8007106:	4603      	mov	r3, r0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	@ 0x28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007124:	2b20      	cmp	r3, #32
 8007126:	d137      	bne.n	8007198 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_UART_Receive_DMA+0x24>
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e030      	b.n	800719a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a18      	ldr	r2, [pc, #96]	@ (80071a4 <HAL_UART_Receive_DMA+0x94>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d01f      	beq.n	8007188 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d018      	beq.n	8007188 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	613b      	str	r3, [r7, #16]
   return(result);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800716a:	627b      	str	r3, [r7, #36]	@ 0x24
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	623b      	str	r3, [r7, #32]
 8007176:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	69f9      	ldr	r1, [r7, #28]
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	61bb      	str	r3, [r7, #24]
   return(result);
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e6      	bne.n	8007156 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	461a      	mov	r2, r3
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 fc14 	bl	80089bc <UART_Start_Receive_DMA>
 8007194:	4603      	mov	r3, r0
 8007196:	e000      	b.n	800719a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
  }
}
 800719a:	4618      	mov	r0, r3
 800719c:	3728      	adds	r7, #40	@ 0x28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	58000c00 	.word	0x58000c00

080071a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b0ba      	sub	sp, #232	@ 0xe8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80071d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80071d6:	4013      	ands	r3, r2
 80071d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80071dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11b      	bne.n	800721c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d015      	beq.n	800721c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d105      	bne.n	8007208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d009      	beq.n	800721c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8377 	beq.w	8007900 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
      }
      return;
 800721a:	e371      	b.n	8007900 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800721c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8123 	beq.w	800746c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800722a:	4b8d      	ldr	r3, [pc, #564]	@ (8007460 <HAL_UART_IRQHandler+0x2b8>)
 800722c:	4013      	ands	r3, r2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007236:	4b8b      	ldr	r3, [pc, #556]	@ (8007464 <HAL_UART_IRQHandler+0x2bc>)
 8007238:	4013      	ands	r3, r2
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8116 	beq.w	800746c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d011      	beq.n	8007270 <HAL_UART_IRQHandler+0xc8>
 800724c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007266:	f043 0201 	orr.w	r2, r3, #1
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d011      	beq.n	80072a0 <HAL_UART_IRQHandler+0xf8>
 800727c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2202      	movs	r2, #2
 800728e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007296:	f043 0204 	orr.w	r2, r3, #4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d011      	beq.n	80072d0 <HAL_UART_IRQHandler+0x128>
 80072ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2204      	movs	r2, #4
 80072be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c6:	f043 0202 	orr.w	r2, r3, #2
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d017      	beq.n	800730c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d105      	bne.n	80072f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80072ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007460 <HAL_UART_IRQHandler+0x2b8>)
 80072ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2208      	movs	r2, #8
 80072fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007302:	f043 0208 	orr.w	r2, r3, #8
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800730c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007314:	2b00      	cmp	r3, #0
 8007316:	d012      	beq.n	800733e <HAL_UART_IRQHandler+0x196>
 8007318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800731c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00c      	beq.n	800733e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800732c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007334:	f043 0220 	orr.w	r2, r3, #32
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 82dd 	beq.w	8007904 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800734a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d013      	beq.n	800737e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d105      	bne.n	800736e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007392:	2b40      	cmp	r3, #64	@ 0x40
 8007394:	d005      	beq.n	80073a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800739a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d054      	beq.n	800744c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fbf2 	bl	8008b8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d146      	bne.n	8007444 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3308      	adds	r3, #8
 80073bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80073e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80073e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80073ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80073fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1d9      	bne.n	80073b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007408:	2b00      	cmp	r3, #0
 800740a:	d017      	beq.n	800743c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007412:	4a15      	ldr	r2, [pc, #84]	@ (8007468 <HAL_UART_IRQHandler+0x2c0>)
 8007414:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800741c:	4618      	mov	r0, r3
 800741e:	f7fb f9c5 	bl	80027ac <HAL_DMA_Abort_IT>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d019      	beq.n	800745c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800742e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007436:	4610      	mov	r0, r2
 8007438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743a:	e00f      	b.n	800745c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fa81 	bl	8007944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007442:	e00b      	b.n	800745c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa7d 	bl	8007944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744a:	e007      	b.n	800745c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fa79 	bl	8007944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800745a:	e253      	b.n	8007904 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745c:	bf00      	nop
    return;
 800745e:	e251      	b.n	8007904 <HAL_UART_IRQHandler+0x75c>
 8007460:	10000001 	.word	0x10000001
 8007464:	04000120 	.word	0x04000120
 8007468:	08008e3f 	.word	0x08008e3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007470:	2b01      	cmp	r3, #1
 8007472:	f040 81e7 	bne.w	8007844 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 81e0 	beq.w	8007844 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007488:	f003 0310 	and.w	r3, r3, #16
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 81d9 	beq.w	8007844 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2210      	movs	r2, #16
 8007498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a4:	2b40      	cmp	r3, #64	@ 0x40
 80074a6:	f040 8151 	bne.w	800774c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a96      	ldr	r2, [pc, #600]	@ (800770c <HAL_UART_IRQHandler+0x564>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d068      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a93      	ldr	r2, [pc, #588]	@ (8007710 <HAL_UART_IRQHandler+0x568>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d061      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a91      	ldr	r2, [pc, #580]	@ (8007714 <HAL_UART_IRQHandler+0x56c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d05a      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a8e      	ldr	r2, [pc, #568]	@ (8007718 <HAL_UART_IRQHandler+0x570>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d053      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a8c      	ldr	r2, [pc, #560]	@ (800771c <HAL_UART_IRQHandler+0x574>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d04c      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a89      	ldr	r2, [pc, #548]	@ (8007720 <HAL_UART_IRQHandler+0x578>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d045      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a87      	ldr	r2, [pc, #540]	@ (8007724 <HAL_UART_IRQHandler+0x57c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d03e      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a84      	ldr	r2, [pc, #528]	@ (8007728 <HAL_UART_IRQHandler+0x580>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d037      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a82      	ldr	r2, [pc, #520]	@ (800772c <HAL_UART_IRQHandler+0x584>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d030      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7f      	ldr	r2, [pc, #508]	@ (8007730 <HAL_UART_IRQHandler+0x588>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d029      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a7d      	ldr	r2, [pc, #500]	@ (8007734 <HAL_UART_IRQHandler+0x58c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d022      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a7a      	ldr	r2, [pc, #488]	@ (8007738 <HAL_UART_IRQHandler+0x590>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d01b      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a78      	ldr	r2, [pc, #480]	@ (800773c <HAL_UART_IRQHandler+0x594>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d014      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a75      	ldr	r2, [pc, #468]	@ (8007740 <HAL_UART_IRQHandler+0x598>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00d      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a73      	ldr	r2, [pc, #460]	@ (8007744 <HAL_UART_IRQHandler+0x59c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d006      	beq.n	800758a <HAL_UART_IRQHandler+0x3e2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a70      	ldr	r2, [pc, #448]	@ (8007748 <HAL_UART_IRQHandler+0x5a0>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d106      	bne.n	8007598 <HAL_UART_IRQHandler+0x3f0>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	b29b      	uxth	r3, r3
 8007596:	e005      	b.n	80075a4 <HAL_UART_IRQHandler+0x3fc>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 81ab 	beq.w	8007908 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075bc:	429a      	cmp	r2, r3
 80075be:	f080 81a3 	bcs.w	8007908 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075d8:	f000 8087 	beq.w	80076ea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007606:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800760a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007612:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800761e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1da      	bne.n	80075dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007636:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3308      	adds	r3, #8
 8007646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800764a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800764e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007652:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800765c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e1      	bne.n	8007626 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3308      	adds	r3, #8
 8007668:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007686:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007688:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800768c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e3      	bne.n	8007662 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076b8:	f023 0310 	bic.w	r3, r3, #16
 80076bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e4      	bne.n	80076a8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fa fd43 	bl	8002170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	b29b      	uxth	r3, r3
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f927 	bl	8007958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800770a:	e0fd      	b.n	8007908 <HAL_UART_IRQHandler+0x760>
 800770c:	40020010 	.word	0x40020010
 8007710:	40020028 	.word	0x40020028
 8007714:	40020040 	.word	0x40020040
 8007718:	40020058 	.word	0x40020058
 800771c:	40020070 	.word	0x40020070
 8007720:	40020088 	.word	0x40020088
 8007724:	400200a0 	.word	0x400200a0
 8007728:	400200b8 	.word	0x400200b8
 800772c:	40020410 	.word	0x40020410
 8007730:	40020428 	.word	0x40020428
 8007734:	40020440 	.word	0x40020440
 8007738:	40020458 	.word	0x40020458
 800773c:	40020470 	.word	0x40020470
 8007740:	40020488 	.word	0x40020488
 8007744:	400204a0 	.word	0x400204a0
 8007748:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007758:	b29b      	uxth	r3, r3
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80cf 	beq.w	800790c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800776e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 80ca 	beq.w	800790c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800779a:	647b      	str	r3, [r7, #68]	@ 0x44
 800779c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e4      	bne.n	8007778 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	623b      	str	r3, [r7, #32]
   return(result);
 80077be:	6a3a      	ldr	r2, [r7, #32]
 80077c0:	4b55      	ldr	r3, [pc, #340]	@ (8007918 <HAL_UART_IRQHandler+0x770>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3308      	adds	r3, #8
 80077ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80077d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e3      	bne.n	80077ae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	60fb      	str	r3, [r7, #12]
   return(result);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0310 	bic.w	r3, r3, #16
 800780e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	69b9      	ldr	r1, [r7, #24]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	617b      	str	r3, [r7, #20]
   return(result);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e4      	bne.n	80077fa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007836:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f88b 	bl	8007958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007842:	e063      	b.n	800790c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00e      	beq.n	800786e <HAL_UART_IRQHandler+0x6c6>
 8007850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 fb2a 	bl	8008ec0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800786c:	e051      	b.n	8007912 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007876:	2b00      	cmp	r3, #0
 8007878:	d014      	beq.n	80078a4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800787a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800787e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d008      	beq.n	80078a4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007896:	2b00      	cmp	r3, #0
 8007898:	d03a      	beq.n	8007910 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
    }
    return;
 80078a2:	e035      	b.n	8007910 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <HAL_UART_IRQHandler+0x71c>
 80078b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fad4 	bl	8008e6a <UART_EndTransmit_IT>
    return;
 80078c2:	e026      	b.n	8007912 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80078c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <HAL_UART_IRQHandler+0x73c>
 80078d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fb03 	bl	8008ee8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078e2:	e016      	b.n	8007912 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80078e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d010      	beq.n	8007912 <HAL_UART_IRQHandler+0x76a>
 80078f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da0c      	bge.n	8007912 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 faeb 	bl	8008ed4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078fe:	e008      	b.n	8007912 <HAL_UART_IRQHandler+0x76a>
      return;
 8007900:	bf00      	nop
 8007902:	e006      	b.n	8007912 <HAL_UART_IRQHandler+0x76a>
    return;
 8007904:	bf00      	nop
 8007906:	e004      	b.n	8007912 <HAL_UART_IRQHandler+0x76a>
      return;
 8007908:	bf00      	nop
 800790a:	e002      	b.n	8007912 <HAL_UART_IRQHandler+0x76a>
      return;
 800790c:	bf00      	nop
 800790e:	e000      	b.n	8007912 <HAL_UART_IRQHandler+0x76a>
    return;
 8007910:	bf00      	nop
  }
}
 8007912:	37e8      	adds	r7, #232	@ 0xe8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	effffffe 	.word	0xeffffffe

0800791c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007974:	b092      	sub	sp, #72	@ 0x48
 8007976:	af00      	add	r7, sp, #0
 8007978:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	431a      	orrs	r2, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	431a      	orrs	r2, r3
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	4313      	orrs	r3, r2
 8007996:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4bbe      	ldr	r3, [pc, #760]	@ (8007c98 <UART_SetConfig+0x328>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4ab3      	ldr	r2, [pc, #716]	@ (8007c9c <UART_SetConfig+0x32c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d004      	beq.n	80079dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079d8:	4313      	orrs	r3, r2
 80079da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	4baf      	ldr	r3, [pc, #700]	@ (8007ca0 <UART_SetConfig+0x330>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	6812      	ldr	r2, [r2, #0]
 80079ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079ec:	430b      	orrs	r3, r1
 80079ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	f023 010f 	bic.w	r1, r3, #15
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4aa6      	ldr	r2, [pc, #664]	@ (8007ca4 <UART_SetConfig+0x334>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d177      	bne.n	8007b00 <UART_SetConfig+0x190>
 8007a10:	4ba5      	ldr	r3, [pc, #660]	@ (8007ca8 <UART_SetConfig+0x338>)
 8007a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a18:	2b28      	cmp	r3, #40	@ 0x28
 8007a1a:	d86d      	bhi.n	8007af8 <UART_SetConfig+0x188>
 8007a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <UART_SetConfig+0xb4>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007ac9 	.word	0x08007ac9
 8007a28:	08007af9 	.word	0x08007af9
 8007a2c:	08007af9 	.word	0x08007af9
 8007a30:	08007af9 	.word	0x08007af9
 8007a34:	08007af9 	.word	0x08007af9
 8007a38:	08007af9 	.word	0x08007af9
 8007a3c:	08007af9 	.word	0x08007af9
 8007a40:	08007af9 	.word	0x08007af9
 8007a44:	08007ad1 	.word	0x08007ad1
 8007a48:	08007af9 	.word	0x08007af9
 8007a4c:	08007af9 	.word	0x08007af9
 8007a50:	08007af9 	.word	0x08007af9
 8007a54:	08007af9 	.word	0x08007af9
 8007a58:	08007af9 	.word	0x08007af9
 8007a5c:	08007af9 	.word	0x08007af9
 8007a60:	08007af9 	.word	0x08007af9
 8007a64:	08007ad9 	.word	0x08007ad9
 8007a68:	08007af9 	.word	0x08007af9
 8007a6c:	08007af9 	.word	0x08007af9
 8007a70:	08007af9 	.word	0x08007af9
 8007a74:	08007af9 	.word	0x08007af9
 8007a78:	08007af9 	.word	0x08007af9
 8007a7c:	08007af9 	.word	0x08007af9
 8007a80:	08007af9 	.word	0x08007af9
 8007a84:	08007ae1 	.word	0x08007ae1
 8007a88:	08007af9 	.word	0x08007af9
 8007a8c:	08007af9 	.word	0x08007af9
 8007a90:	08007af9 	.word	0x08007af9
 8007a94:	08007af9 	.word	0x08007af9
 8007a98:	08007af9 	.word	0x08007af9
 8007a9c:	08007af9 	.word	0x08007af9
 8007aa0:	08007af9 	.word	0x08007af9
 8007aa4:	08007ae9 	.word	0x08007ae9
 8007aa8:	08007af9 	.word	0x08007af9
 8007aac:	08007af9 	.word	0x08007af9
 8007ab0:	08007af9 	.word	0x08007af9
 8007ab4:	08007af9 	.word	0x08007af9
 8007ab8:	08007af9 	.word	0x08007af9
 8007abc:	08007af9 	.word	0x08007af9
 8007ac0:	08007af9 	.word	0x08007af9
 8007ac4:	08007af1 	.word	0x08007af1
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e326      	b.n	800811e <UART_SetConfig+0x7ae>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e322      	b.n	800811e <UART_SetConfig+0x7ae>
 8007ad8:	2308      	movs	r3, #8
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e31e      	b.n	800811e <UART_SetConfig+0x7ae>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e31a      	b.n	800811e <UART_SetConfig+0x7ae>
 8007ae8:	2320      	movs	r3, #32
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e316      	b.n	800811e <UART_SetConfig+0x7ae>
 8007af0:	2340      	movs	r3, #64	@ 0x40
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e312      	b.n	800811e <UART_SetConfig+0x7ae>
 8007af8:	2380      	movs	r3, #128	@ 0x80
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e30e      	b.n	800811e <UART_SetConfig+0x7ae>
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a69      	ldr	r2, [pc, #420]	@ (8007cac <UART_SetConfig+0x33c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d130      	bne.n	8007b6c <UART_SetConfig+0x1fc>
 8007b0a:	4b67      	ldr	r3, [pc, #412]	@ (8007ca8 <UART_SetConfig+0x338>)
 8007b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	2b05      	cmp	r3, #5
 8007b14:	d826      	bhi.n	8007b64 <UART_SetConfig+0x1f4>
 8007b16:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <UART_SetConfig+0x1ac>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b35 	.word	0x08007b35
 8007b20:	08007b3d 	.word	0x08007b3d
 8007b24:	08007b45 	.word	0x08007b45
 8007b28:	08007b4d 	.word	0x08007b4d
 8007b2c:	08007b55 	.word	0x08007b55
 8007b30:	08007b5d 	.word	0x08007b5d
 8007b34:	2300      	movs	r3, #0
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e2f0      	b.n	800811e <UART_SetConfig+0x7ae>
 8007b3c:	2304      	movs	r3, #4
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b42:	e2ec      	b.n	800811e <UART_SetConfig+0x7ae>
 8007b44:	2308      	movs	r3, #8
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e2e8      	b.n	800811e <UART_SetConfig+0x7ae>
 8007b4c:	2310      	movs	r3, #16
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e2e4      	b.n	800811e <UART_SetConfig+0x7ae>
 8007b54:	2320      	movs	r3, #32
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e2e0      	b.n	800811e <UART_SetConfig+0x7ae>
 8007b5c:	2340      	movs	r3, #64	@ 0x40
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e2dc      	b.n	800811e <UART_SetConfig+0x7ae>
 8007b64:	2380      	movs	r3, #128	@ 0x80
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6a:	e2d8      	b.n	800811e <UART_SetConfig+0x7ae>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a4f      	ldr	r2, [pc, #316]	@ (8007cb0 <UART_SetConfig+0x340>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d130      	bne.n	8007bd8 <UART_SetConfig+0x268>
 8007b76:	4b4c      	ldr	r3, [pc, #304]	@ (8007ca8 <UART_SetConfig+0x338>)
 8007b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	2b05      	cmp	r3, #5
 8007b80:	d826      	bhi.n	8007bd0 <UART_SetConfig+0x260>
 8007b82:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <UART_SetConfig+0x218>)
 8007b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b88:	08007ba1 	.word	0x08007ba1
 8007b8c:	08007ba9 	.word	0x08007ba9
 8007b90:	08007bb1 	.word	0x08007bb1
 8007b94:	08007bb9 	.word	0x08007bb9
 8007b98:	08007bc1 	.word	0x08007bc1
 8007b9c:	08007bc9 	.word	0x08007bc9
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e2ba      	b.n	800811e <UART_SetConfig+0x7ae>
 8007ba8:	2304      	movs	r3, #4
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e2b6      	b.n	800811e <UART_SetConfig+0x7ae>
 8007bb0:	2308      	movs	r3, #8
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e2b2      	b.n	800811e <UART_SetConfig+0x7ae>
 8007bb8:	2310      	movs	r3, #16
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e2ae      	b.n	800811e <UART_SetConfig+0x7ae>
 8007bc0:	2320      	movs	r3, #32
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e2aa      	b.n	800811e <UART_SetConfig+0x7ae>
 8007bc8:	2340      	movs	r3, #64	@ 0x40
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e2a6      	b.n	800811e <UART_SetConfig+0x7ae>
 8007bd0:	2380      	movs	r3, #128	@ 0x80
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e2a2      	b.n	800811e <UART_SetConfig+0x7ae>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a35      	ldr	r2, [pc, #212]	@ (8007cb4 <UART_SetConfig+0x344>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d130      	bne.n	8007c44 <UART_SetConfig+0x2d4>
 8007be2:	4b31      	ldr	r3, [pc, #196]	@ (8007ca8 <UART_SetConfig+0x338>)
 8007be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	2b05      	cmp	r3, #5
 8007bec:	d826      	bhi.n	8007c3c <UART_SetConfig+0x2cc>
 8007bee:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <UART_SetConfig+0x284>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c0d 	.word	0x08007c0d
 8007bf8:	08007c15 	.word	0x08007c15
 8007bfc:	08007c1d 	.word	0x08007c1d
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c2d 	.word	0x08007c2d
 8007c08:	08007c35 	.word	0x08007c35
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e284      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c14:	2304      	movs	r3, #4
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1a:	e280      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e27c      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c24:	2310      	movs	r3, #16
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2a:	e278      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c2c:	2320      	movs	r3, #32
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c32:	e274      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c34:	2340      	movs	r3, #64	@ 0x40
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3a:	e270      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c3c:	2380      	movs	r3, #128	@ 0x80
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c42:	e26c      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb8 <UART_SetConfig+0x348>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d142      	bne.n	8007cd4 <UART_SetConfig+0x364>
 8007c4e:	4b16      	ldr	r3, [pc, #88]	@ (8007ca8 <UART_SetConfig+0x338>)
 8007c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	2b05      	cmp	r3, #5
 8007c58:	d838      	bhi.n	8007ccc <UART_SetConfig+0x35c>
 8007c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c60 <UART_SetConfig+0x2f0>)
 8007c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c60:	08007c79 	.word	0x08007c79
 8007c64:	08007c81 	.word	0x08007c81
 8007c68:	08007c89 	.word	0x08007c89
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007cbd 	.word	0x08007cbd
 8007c74:	08007cc5 	.word	0x08007cc5
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e24e      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c80:	2304      	movs	r3, #4
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e24a      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c88:	2308      	movs	r3, #8
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e246      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c90:	2310      	movs	r3, #16
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e242      	b.n	800811e <UART_SetConfig+0x7ae>
 8007c98:	cfff69f3 	.word	0xcfff69f3
 8007c9c:	58000c00 	.word	0x58000c00
 8007ca0:	11fff4ff 	.word	0x11fff4ff
 8007ca4:	40011000 	.word	0x40011000
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	40004400 	.word	0x40004400
 8007cb0:	40004800 	.word	0x40004800
 8007cb4:	40004c00 	.word	0x40004c00
 8007cb8:	40005000 	.word	0x40005000
 8007cbc:	2320      	movs	r3, #32
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e22c      	b.n	800811e <UART_SetConfig+0x7ae>
 8007cc4:	2340      	movs	r3, #64	@ 0x40
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e228      	b.n	800811e <UART_SetConfig+0x7ae>
 8007ccc:	2380      	movs	r3, #128	@ 0x80
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e224      	b.n	800811e <UART_SetConfig+0x7ae>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4ab1      	ldr	r2, [pc, #708]	@ (8007fa0 <UART_SetConfig+0x630>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d176      	bne.n	8007dcc <UART_SetConfig+0x45c>
 8007cde:	4bb1      	ldr	r3, [pc, #708]	@ (8007fa4 <UART_SetConfig+0x634>)
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ce6:	2b28      	cmp	r3, #40	@ 0x28
 8007ce8:	d86c      	bhi.n	8007dc4 <UART_SetConfig+0x454>
 8007cea:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf0 <UART_SetConfig+0x380>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d95 	.word	0x08007d95
 8007cf4:	08007dc5 	.word	0x08007dc5
 8007cf8:	08007dc5 	.word	0x08007dc5
 8007cfc:	08007dc5 	.word	0x08007dc5
 8007d00:	08007dc5 	.word	0x08007dc5
 8007d04:	08007dc5 	.word	0x08007dc5
 8007d08:	08007dc5 	.word	0x08007dc5
 8007d0c:	08007dc5 	.word	0x08007dc5
 8007d10:	08007d9d 	.word	0x08007d9d
 8007d14:	08007dc5 	.word	0x08007dc5
 8007d18:	08007dc5 	.word	0x08007dc5
 8007d1c:	08007dc5 	.word	0x08007dc5
 8007d20:	08007dc5 	.word	0x08007dc5
 8007d24:	08007dc5 	.word	0x08007dc5
 8007d28:	08007dc5 	.word	0x08007dc5
 8007d2c:	08007dc5 	.word	0x08007dc5
 8007d30:	08007da5 	.word	0x08007da5
 8007d34:	08007dc5 	.word	0x08007dc5
 8007d38:	08007dc5 	.word	0x08007dc5
 8007d3c:	08007dc5 	.word	0x08007dc5
 8007d40:	08007dc5 	.word	0x08007dc5
 8007d44:	08007dc5 	.word	0x08007dc5
 8007d48:	08007dc5 	.word	0x08007dc5
 8007d4c:	08007dc5 	.word	0x08007dc5
 8007d50:	08007dad 	.word	0x08007dad
 8007d54:	08007dc5 	.word	0x08007dc5
 8007d58:	08007dc5 	.word	0x08007dc5
 8007d5c:	08007dc5 	.word	0x08007dc5
 8007d60:	08007dc5 	.word	0x08007dc5
 8007d64:	08007dc5 	.word	0x08007dc5
 8007d68:	08007dc5 	.word	0x08007dc5
 8007d6c:	08007dc5 	.word	0x08007dc5
 8007d70:	08007db5 	.word	0x08007db5
 8007d74:	08007dc5 	.word	0x08007dc5
 8007d78:	08007dc5 	.word	0x08007dc5
 8007d7c:	08007dc5 	.word	0x08007dc5
 8007d80:	08007dc5 	.word	0x08007dc5
 8007d84:	08007dc5 	.word	0x08007dc5
 8007d88:	08007dc5 	.word	0x08007dc5
 8007d8c:	08007dc5 	.word	0x08007dc5
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e1c0      	b.n	800811e <UART_SetConfig+0x7ae>
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e1bc      	b.n	800811e <UART_SetConfig+0x7ae>
 8007da4:	2308      	movs	r3, #8
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e1b8      	b.n	800811e <UART_SetConfig+0x7ae>
 8007dac:	2310      	movs	r3, #16
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e1b4      	b.n	800811e <UART_SetConfig+0x7ae>
 8007db4:	2320      	movs	r3, #32
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e1b0      	b.n	800811e <UART_SetConfig+0x7ae>
 8007dbc:	2340      	movs	r3, #64	@ 0x40
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e1ac      	b.n	800811e <UART_SetConfig+0x7ae>
 8007dc4:	2380      	movs	r3, #128	@ 0x80
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dca:	e1a8      	b.n	800811e <UART_SetConfig+0x7ae>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a75      	ldr	r2, [pc, #468]	@ (8007fa8 <UART_SetConfig+0x638>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d130      	bne.n	8007e38 <UART_SetConfig+0x4c8>
 8007dd6:	4b73      	ldr	r3, [pc, #460]	@ (8007fa4 <UART_SetConfig+0x634>)
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	2b05      	cmp	r3, #5
 8007de0:	d826      	bhi.n	8007e30 <UART_SetConfig+0x4c0>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <UART_SetConfig+0x478>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e01 	.word	0x08007e01
 8007dec:	08007e09 	.word	0x08007e09
 8007df0:	08007e11 	.word	0x08007e11
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e21 	.word	0x08007e21
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	2300      	movs	r3, #0
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e18a      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e186      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e16:	e182      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1e:	e17e      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e20:	2320      	movs	r3, #32
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e26:	e17a      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e28:	2340      	movs	r3, #64	@ 0x40
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2e:	e176      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e30:	2380      	movs	r3, #128	@ 0x80
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e36:	e172      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a5b      	ldr	r2, [pc, #364]	@ (8007fac <UART_SetConfig+0x63c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d130      	bne.n	8007ea4 <UART_SetConfig+0x534>
 8007e42:	4b58      	ldr	r3, [pc, #352]	@ (8007fa4 <UART_SetConfig+0x634>)
 8007e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d826      	bhi.n	8007e9c <UART_SetConfig+0x52c>
 8007e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <UART_SetConfig+0x4e4>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e6d 	.word	0x08007e6d
 8007e58:	08007e75 	.word	0x08007e75
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007e8d 	.word	0x08007e8d
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e154      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e74:	2304      	movs	r3, #4
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7a:	e150      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e14c      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e8a:	e148      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e8c:	2320      	movs	r3, #32
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e92:	e144      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e94:	2340      	movs	r3, #64	@ 0x40
 8007e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9a:	e140      	b.n	800811e <UART_SetConfig+0x7ae>
 8007e9c:	2380      	movs	r3, #128	@ 0x80
 8007e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea2:	e13c      	b.n	800811e <UART_SetConfig+0x7ae>
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a41      	ldr	r2, [pc, #260]	@ (8007fb0 <UART_SetConfig+0x640>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	f040 8082 	bne.w	8007fb4 <UART_SetConfig+0x644>
 8007eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8007fa4 <UART_SetConfig+0x634>)
 8007eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eb8:	2b28      	cmp	r3, #40	@ 0x28
 8007eba:	d86d      	bhi.n	8007f98 <UART_SetConfig+0x628>
 8007ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec4 <UART_SetConfig+0x554>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007f69 	.word	0x08007f69
 8007ec8:	08007f99 	.word	0x08007f99
 8007ecc:	08007f99 	.word	0x08007f99
 8007ed0:	08007f99 	.word	0x08007f99
 8007ed4:	08007f99 	.word	0x08007f99
 8007ed8:	08007f99 	.word	0x08007f99
 8007edc:	08007f99 	.word	0x08007f99
 8007ee0:	08007f99 	.word	0x08007f99
 8007ee4:	08007f71 	.word	0x08007f71
 8007ee8:	08007f99 	.word	0x08007f99
 8007eec:	08007f99 	.word	0x08007f99
 8007ef0:	08007f99 	.word	0x08007f99
 8007ef4:	08007f99 	.word	0x08007f99
 8007ef8:	08007f99 	.word	0x08007f99
 8007efc:	08007f99 	.word	0x08007f99
 8007f00:	08007f99 	.word	0x08007f99
 8007f04:	08007f79 	.word	0x08007f79
 8007f08:	08007f99 	.word	0x08007f99
 8007f0c:	08007f99 	.word	0x08007f99
 8007f10:	08007f99 	.word	0x08007f99
 8007f14:	08007f99 	.word	0x08007f99
 8007f18:	08007f99 	.word	0x08007f99
 8007f1c:	08007f99 	.word	0x08007f99
 8007f20:	08007f99 	.word	0x08007f99
 8007f24:	08007f81 	.word	0x08007f81
 8007f28:	08007f99 	.word	0x08007f99
 8007f2c:	08007f99 	.word	0x08007f99
 8007f30:	08007f99 	.word	0x08007f99
 8007f34:	08007f99 	.word	0x08007f99
 8007f38:	08007f99 	.word	0x08007f99
 8007f3c:	08007f99 	.word	0x08007f99
 8007f40:	08007f99 	.word	0x08007f99
 8007f44:	08007f89 	.word	0x08007f89
 8007f48:	08007f99 	.word	0x08007f99
 8007f4c:	08007f99 	.word	0x08007f99
 8007f50:	08007f99 	.word	0x08007f99
 8007f54:	08007f99 	.word	0x08007f99
 8007f58:	08007f99 	.word	0x08007f99
 8007f5c:	08007f99 	.word	0x08007f99
 8007f60:	08007f99 	.word	0x08007f99
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6e:	e0d6      	b.n	800811e <UART_SetConfig+0x7ae>
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f76:	e0d2      	b.n	800811e <UART_SetConfig+0x7ae>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7e:	e0ce      	b.n	800811e <UART_SetConfig+0x7ae>
 8007f80:	2310      	movs	r3, #16
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f86:	e0ca      	b.n	800811e <UART_SetConfig+0x7ae>
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8e:	e0c6      	b.n	800811e <UART_SetConfig+0x7ae>
 8007f90:	2340      	movs	r3, #64	@ 0x40
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e0c2      	b.n	800811e <UART_SetConfig+0x7ae>
 8007f98:	2380      	movs	r3, #128	@ 0x80
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e0be      	b.n	800811e <UART_SetConfig+0x7ae>
 8007fa0:	40011400 	.word	0x40011400
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	40007800 	.word	0x40007800
 8007fac:	40007c00 	.word	0x40007c00
 8007fb0:	40011800 	.word	0x40011800
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4aad      	ldr	r2, [pc, #692]	@ (8008270 <UART_SetConfig+0x900>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d176      	bne.n	80080ac <UART_SetConfig+0x73c>
 8007fbe:	4bad      	ldr	r3, [pc, #692]	@ (8008274 <UART_SetConfig+0x904>)
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fc6:	2b28      	cmp	r3, #40	@ 0x28
 8007fc8:	d86c      	bhi.n	80080a4 <UART_SetConfig+0x734>
 8007fca:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd0 <UART_SetConfig+0x660>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08008075 	.word	0x08008075
 8007fd4:	080080a5 	.word	0x080080a5
 8007fd8:	080080a5 	.word	0x080080a5
 8007fdc:	080080a5 	.word	0x080080a5
 8007fe0:	080080a5 	.word	0x080080a5
 8007fe4:	080080a5 	.word	0x080080a5
 8007fe8:	080080a5 	.word	0x080080a5
 8007fec:	080080a5 	.word	0x080080a5
 8007ff0:	0800807d 	.word	0x0800807d
 8007ff4:	080080a5 	.word	0x080080a5
 8007ff8:	080080a5 	.word	0x080080a5
 8007ffc:	080080a5 	.word	0x080080a5
 8008000:	080080a5 	.word	0x080080a5
 8008004:	080080a5 	.word	0x080080a5
 8008008:	080080a5 	.word	0x080080a5
 800800c:	080080a5 	.word	0x080080a5
 8008010:	08008085 	.word	0x08008085
 8008014:	080080a5 	.word	0x080080a5
 8008018:	080080a5 	.word	0x080080a5
 800801c:	080080a5 	.word	0x080080a5
 8008020:	080080a5 	.word	0x080080a5
 8008024:	080080a5 	.word	0x080080a5
 8008028:	080080a5 	.word	0x080080a5
 800802c:	080080a5 	.word	0x080080a5
 8008030:	0800808d 	.word	0x0800808d
 8008034:	080080a5 	.word	0x080080a5
 8008038:	080080a5 	.word	0x080080a5
 800803c:	080080a5 	.word	0x080080a5
 8008040:	080080a5 	.word	0x080080a5
 8008044:	080080a5 	.word	0x080080a5
 8008048:	080080a5 	.word	0x080080a5
 800804c:	080080a5 	.word	0x080080a5
 8008050:	08008095 	.word	0x08008095
 8008054:	080080a5 	.word	0x080080a5
 8008058:	080080a5 	.word	0x080080a5
 800805c:	080080a5 	.word	0x080080a5
 8008060:	080080a5 	.word	0x080080a5
 8008064:	080080a5 	.word	0x080080a5
 8008068:	080080a5 	.word	0x080080a5
 800806c:	080080a5 	.word	0x080080a5
 8008070:	0800809d 	.word	0x0800809d
 8008074:	2301      	movs	r3, #1
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e050      	b.n	800811e <UART_SetConfig+0x7ae>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008082:	e04c      	b.n	800811e <UART_SetConfig+0x7ae>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808a:	e048      	b.n	800811e <UART_SetConfig+0x7ae>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008092:	e044      	b.n	800811e <UART_SetConfig+0x7ae>
 8008094:	2320      	movs	r3, #32
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e040      	b.n	800811e <UART_SetConfig+0x7ae>
 800809c:	2340      	movs	r3, #64	@ 0x40
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e03c      	b.n	800811e <UART_SetConfig+0x7ae>
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080aa:	e038      	b.n	800811e <UART_SetConfig+0x7ae>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a71      	ldr	r2, [pc, #452]	@ (8008278 <UART_SetConfig+0x908>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d130      	bne.n	8008118 <UART_SetConfig+0x7a8>
 80080b6:	4b6f      	ldr	r3, [pc, #444]	@ (8008274 <UART_SetConfig+0x904>)
 80080b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d826      	bhi.n	8008110 <UART_SetConfig+0x7a0>
 80080c2:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <UART_SetConfig+0x758>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e1 	.word	0x080080e1
 80080cc:	080080e9 	.word	0x080080e9
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008109 	.word	0x08008109
 80080e0:	2302      	movs	r3, #2
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e01a      	b.n	800811e <UART_SetConfig+0x7ae>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ee:	e016      	b.n	800811e <UART_SetConfig+0x7ae>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e012      	b.n	800811e <UART_SetConfig+0x7ae>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fe:	e00e      	b.n	800811e <UART_SetConfig+0x7ae>
 8008100:	2320      	movs	r3, #32
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008106:	e00a      	b.n	800811e <UART_SetConfig+0x7ae>
 8008108:	2340      	movs	r3, #64	@ 0x40
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810e:	e006      	b.n	800811e <UART_SetConfig+0x7ae>
 8008110:	2380      	movs	r3, #128	@ 0x80
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008116:	e002      	b.n	800811e <UART_SetConfig+0x7ae>
 8008118:	2380      	movs	r3, #128	@ 0x80
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a55      	ldr	r2, [pc, #340]	@ (8008278 <UART_SetConfig+0x908>)
 8008124:	4293      	cmp	r3, r2
 8008126:	f040 80f8 	bne.w	800831a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800812a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800812e:	2b20      	cmp	r3, #32
 8008130:	dc46      	bgt.n	80081c0 <UART_SetConfig+0x850>
 8008132:	2b02      	cmp	r3, #2
 8008134:	db75      	blt.n	8008222 <UART_SetConfig+0x8b2>
 8008136:	3b02      	subs	r3, #2
 8008138:	2b1e      	cmp	r3, #30
 800813a:	d872      	bhi.n	8008222 <UART_SetConfig+0x8b2>
 800813c:	a201      	add	r2, pc, #4	@ (adr r2, 8008144 <UART_SetConfig+0x7d4>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	080081c7 	.word	0x080081c7
 8008148:	08008223 	.word	0x08008223
 800814c:	080081cf 	.word	0x080081cf
 8008150:	08008223 	.word	0x08008223
 8008154:	08008223 	.word	0x08008223
 8008158:	08008223 	.word	0x08008223
 800815c:	080081df 	.word	0x080081df
 8008160:	08008223 	.word	0x08008223
 8008164:	08008223 	.word	0x08008223
 8008168:	08008223 	.word	0x08008223
 800816c:	08008223 	.word	0x08008223
 8008170:	08008223 	.word	0x08008223
 8008174:	08008223 	.word	0x08008223
 8008178:	08008223 	.word	0x08008223
 800817c:	080081ef 	.word	0x080081ef
 8008180:	08008223 	.word	0x08008223
 8008184:	08008223 	.word	0x08008223
 8008188:	08008223 	.word	0x08008223
 800818c:	08008223 	.word	0x08008223
 8008190:	08008223 	.word	0x08008223
 8008194:	08008223 	.word	0x08008223
 8008198:	08008223 	.word	0x08008223
 800819c:	08008223 	.word	0x08008223
 80081a0:	08008223 	.word	0x08008223
 80081a4:	08008223 	.word	0x08008223
 80081a8:	08008223 	.word	0x08008223
 80081ac:	08008223 	.word	0x08008223
 80081b0:	08008223 	.word	0x08008223
 80081b4:	08008223 	.word	0x08008223
 80081b8:	08008223 	.word	0x08008223
 80081bc:	08008215 	.word	0x08008215
 80081c0:	2b40      	cmp	r3, #64	@ 0x40
 80081c2:	d02a      	beq.n	800821a <UART_SetConfig+0x8aa>
 80081c4:	e02d      	b.n	8008222 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081c6:	f7fe fb31 	bl	800682c <HAL_RCCEx_GetD3PCLK1Freq>
 80081ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081cc:	e02f      	b.n	800822e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fb40 	bl	8006858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081dc:	e027      	b.n	800822e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081de:	f107 0318 	add.w	r3, r7, #24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fc8c 	bl	8006b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ec:	e01f      	b.n	800822e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081ee:	4b21      	ldr	r3, [pc, #132]	@ (8008274 <UART_SetConfig+0x904>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d009      	beq.n	800820e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008274 <UART_SetConfig+0x904>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	08db      	lsrs	r3, r3, #3
 8008200:	f003 0303 	and.w	r3, r3, #3
 8008204:	4a1d      	ldr	r2, [pc, #116]	@ (800827c <UART_SetConfig+0x90c>)
 8008206:	fa22 f303 	lsr.w	r3, r2, r3
 800820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800820c:	e00f      	b.n	800822e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800820e:	4b1b      	ldr	r3, [pc, #108]	@ (800827c <UART_SetConfig+0x90c>)
 8008210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008212:	e00c      	b.n	800822e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008214:	4b1a      	ldr	r3, [pc, #104]	@ (8008280 <UART_SetConfig+0x910>)
 8008216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008218:	e009      	b.n	800822e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800821a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800821e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008220:	e005      	b.n	800822e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800822c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800822e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 81ee 	beq.w	8008612 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823a:	4a12      	ldr	r2, [pc, #72]	@ (8008284 <UART_SetConfig+0x914>)
 800823c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008240:	461a      	mov	r2, r3
 8008242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008244:	fbb3 f3f2 	udiv	r3, r3, r2
 8008248:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4413      	add	r3, r2
 8008254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008256:	429a      	cmp	r2, r3
 8008258:	d305      	bcc.n	8008266 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008262:	429a      	cmp	r2, r3
 8008264:	d910      	bls.n	8008288 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800826c:	e1d1      	b.n	8008612 <UART_SetConfig+0xca2>
 800826e:	bf00      	nop
 8008270:	40011c00 	.word	0x40011c00
 8008274:	58024400 	.word	0x58024400
 8008278:	58000c00 	.word	0x58000c00
 800827c:	03d09000 	.word	0x03d09000
 8008280:	003d0900 	.word	0x003d0900
 8008284:	0800bd3c 	.word	0x0800bd3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828a:	2200      	movs	r2, #0
 800828c:	60bb      	str	r3, [r7, #8]
 800828e:	60fa      	str	r2, [r7, #12]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008294:	4ac0      	ldr	r2, [pc, #768]	@ (8008598 <UART_SetConfig+0xc28>)
 8008296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800829a:	b29b      	uxth	r3, r3
 800829c:	2200      	movs	r2, #0
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	607a      	str	r2, [r7, #4]
 80082a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082aa:	f7f8 fa3d 	bl	8000728 <__aeabi_uldivmod>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4610      	mov	r0, r2
 80082b4:	4619      	mov	r1, r3
 80082b6:	f04f 0200 	mov.w	r2, #0
 80082ba:	f04f 0300 	mov.w	r3, #0
 80082be:	020b      	lsls	r3, r1, #8
 80082c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082c4:	0202      	lsls	r2, r0, #8
 80082c6:	6979      	ldr	r1, [r7, #20]
 80082c8:	6849      	ldr	r1, [r1, #4]
 80082ca:	0849      	lsrs	r1, r1, #1
 80082cc:	2000      	movs	r0, #0
 80082ce:	460c      	mov	r4, r1
 80082d0:	4605      	mov	r5, r0
 80082d2:	eb12 0804 	adds.w	r8, r2, r4
 80082d6:	eb43 0905 	adc.w	r9, r3, r5
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	469a      	mov	sl, r3
 80082e2:	4693      	mov	fp, r2
 80082e4:	4652      	mov	r2, sl
 80082e6:	465b      	mov	r3, fp
 80082e8:	4640      	mov	r0, r8
 80082ea:	4649      	mov	r1, r9
 80082ec:	f7f8 fa1c 	bl	8000728 <__aeabi_uldivmod>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4613      	mov	r3, r2
 80082f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082fe:	d308      	bcc.n	8008312 <UART_SetConfig+0x9a2>
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008306:	d204      	bcs.n	8008312 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800830e:	60da      	str	r2, [r3, #12]
 8008310:	e17f      	b.n	8008612 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008318:	e17b      	b.n	8008612 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008322:	f040 80bd 	bne.w	80084a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800832a:	2b20      	cmp	r3, #32
 800832c:	dc48      	bgt.n	80083c0 <UART_SetConfig+0xa50>
 800832e:	2b00      	cmp	r3, #0
 8008330:	db7b      	blt.n	800842a <UART_SetConfig+0xaba>
 8008332:	2b20      	cmp	r3, #32
 8008334:	d879      	bhi.n	800842a <UART_SetConfig+0xaba>
 8008336:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <UART_SetConfig+0x9cc>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	080083c7 	.word	0x080083c7
 8008340:	080083cf 	.word	0x080083cf
 8008344:	0800842b 	.word	0x0800842b
 8008348:	0800842b 	.word	0x0800842b
 800834c:	080083d7 	.word	0x080083d7
 8008350:	0800842b 	.word	0x0800842b
 8008354:	0800842b 	.word	0x0800842b
 8008358:	0800842b 	.word	0x0800842b
 800835c:	080083e7 	.word	0x080083e7
 8008360:	0800842b 	.word	0x0800842b
 8008364:	0800842b 	.word	0x0800842b
 8008368:	0800842b 	.word	0x0800842b
 800836c:	0800842b 	.word	0x0800842b
 8008370:	0800842b 	.word	0x0800842b
 8008374:	0800842b 	.word	0x0800842b
 8008378:	0800842b 	.word	0x0800842b
 800837c:	080083f7 	.word	0x080083f7
 8008380:	0800842b 	.word	0x0800842b
 8008384:	0800842b 	.word	0x0800842b
 8008388:	0800842b 	.word	0x0800842b
 800838c:	0800842b 	.word	0x0800842b
 8008390:	0800842b 	.word	0x0800842b
 8008394:	0800842b 	.word	0x0800842b
 8008398:	0800842b 	.word	0x0800842b
 800839c:	0800842b 	.word	0x0800842b
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	0800842b 	.word	0x0800842b
 80083a8:	0800842b 	.word	0x0800842b
 80083ac:	0800842b 	.word	0x0800842b
 80083b0:	0800842b 	.word	0x0800842b
 80083b4:	0800842b 	.word	0x0800842b
 80083b8:	0800842b 	.word	0x0800842b
 80083bc:	0800841d 	.word	0x0800841d
 80083c0:	2b40      	cmp	r3, #64	@ 0x40
 80083c2:	d02e      	beq.n	8008422 <UART_SetConfig+0xab2>
 80083c4:	e031      	b.n	800842a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c6:	f7fd f865 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 80083ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083cc:	e033      	b.n	8008436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083ce:	f7fd f877 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 80083d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083d4:	e02f      	b.n	8008436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fa3c 	bl	8006858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e4:	e027      	b.n	8008436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083e6:	f107 0318 	add.w	r3, r7, #24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fb88 	bl	8006b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f4:	e01f      	b.n	8008436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083f6:	4b69      	ldr	r3, [pc, #420]	@ (800859c <UART_SetConfig+0xc2c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008402:	4b66      	ldr	r3, [pc, #408]	@ (800859c <UART_SetConfig+0xc2c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	08db      	lsrs	r3, r3, #3
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	4a64      	ldr	r2, [pc, #400]	@ (80085a0 <UART_SetConfig+0xc30>)
 800840e:	fa22 f303 	lsr.w	r3, r2, r3
 8008412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008414:	e00f      	b.n	8008436 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008416:	4b62      	ldr	r3, [pc, #392]	@ (80085a0 <UART_SetConfig+0xc30>)
 8008418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800841a:	e00c      	b.n	8008436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800841c:	4b61      	ldr	r3, [pc, #388]	@ (80085a4 <UART_SetConfig+0xc34>)
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008420:	e009      	b.n	8008436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008428:	e005      	b.n	8008436 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80ea 	beq.w	8008612 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008442:	4a55      	ldr	r2, [pc, #340]	@ (8008598 <UART_SetConfig+0xc28>)
 8008444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008448:	461a      	mov	r2, r3
 800844a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800844c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008450:	005a      	lsls	r2, r3, #1
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	441a      	add	r2, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008462:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008466:	2b0f      	cmp	r3, #15
 8008468:	d916      	bls.n	8008498 <UART_SetConfig+0xb28>
 800846a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008470:	d212      	bcs.n	8008498 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008474:	b29b      	uxth	r3, r3
 8008476:	f023 030f 	bic.w	r3, r3, #15
 800847a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800847c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	b29b      	uxth	r3, r3
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	b29a      	uxth	r2, r3
 8008488:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800848a:	4313      	orrs	r3, r2
 800848c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008494:	60da      	str	r2, [r3, #12]
 8008496:	e0bc      	b.n	8008612 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800849e:	e0b8      	b.n	8008612 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	dc4b      	bgt.n	8008540 <UART_SetConfig+0xbd0>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f2c0 8087 	blt.w	80085bc <UART_SetConfig+0xc4c>
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	f200 8084 	bhi.w	80085bc <UART_SetConfig+0xc4c>
 80084b4:	a201      	add	r2, pc, #4	@ (adr r2, 80084bc <UART_SetConfig+0xb4c>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	08008547 	.word	0x08008547
 80084c0:	0800854f 	.word	0x0800854f
 80084c4:	080085bd 	.word	0x080085bd
 80084c8:	080085bd 	.word	0x080085bd
 80084cc:	08008557 	.word	0x08008557
 80084d0:	080085bd 	.word	0x080085bd
 80084d4:	080085bd 	.word	0x080085bd
 80084d8:	080085bd 	.word	0x080085bd
 80084dc:	08008567 	.word	0x08008567
 80084e0:	080085bd 	.word	0x080085bd
 80084e4:	080085bd 	.word	0x080085bd
 80084e8:	080085bd 	.word	0x080085bd
 80084ec:	080085bd 	.word	0x080085bd
 80084f0:	080085bd 	.word	0x080085bd
 80084f4:	080085bd 	.word	0x080085bd
 80084f8:	080085bd 	.word	0x080085bd
 80084fc:	08008577 	.word	0x08008577
 8008500:	080085bd 	.word	0x080085bd
 8008504:	080085bd 	.word	0x080085bd
 8008508:	080085bd 	.word	0x080085bd
 800850c:	080085bd 	.word	0x080085bd
 8008510:	080085bd 	.word	0x080085bd
 8008514:	080085bd 	.word	0x080085bd
 8008518:	080085bd 	.word	0x080085bd
 800851c:	080085bd 	.word	0x080085bd
 8008520:	080085bd 	.word	0x080085bd
 8008524:	080085bd 	.word	0x080085bd
 8008528:	080085bd 	.word	0x080085bd
 800852c:	080085bd 	.word	0x080085bd
 8008530:	080085bd 	.word	0x080085bd
 8008534:	080085bd 	.word	0x080085bd
 8008538:	080085bd 	.word	0x080085bd
 800853c:	080085af 	.word	0x080085af
 8008540:	2b40      	cmp	r3, #64	@ 0x40
 8008542:	d037      	beq.n	80085b4 <UART_SetConfig+0xc44>
 8008544:	e03a      	b.n	80085bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008546:	f7fc ffa5 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 800854a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800854c:	e03c      	b.n	80085c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800854e:	f7fc ffb7 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8008552:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008554:	e038      	b.n	80085c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe f97c 	bl	8006858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008564:	e030      	b.n	80085c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008566:	f107 0318 	add.w	r3, r7, #24
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fac8 	bl	8006b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008574:	e028      	b.n	80085c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008576:	4b09      	ldr	r3, [pc, #36]	@ (800859c <UART_SetConfig+0xc2c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b00      	cmp	r3, #0
 8008580:	d012      	beq.n	80085a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008582:	4b06      	ldr	r3, [pc, #24]	@ (800859c <UART_SetConfig+0xc2c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	08db      	lsrs	r3, r3, #3
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	4a04      	ldr	r2, [pc, #16]	@ (80085a0 <UART_SetConfig+0xc30>)
 800858e:	fa22 f303 	lsr.w	r3, r2, r3
 8008592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008594:	e018      	b.n	80085c8 <UART_SetConfig+0xc58>
 8008596:	bf00      	nop
 8008598:	0800bd3c 	.word	0x0800bd3c
 800859c:	58024400 	.word	0x58024400
 80085a0:	03d09000 	.word	0x03d09000
 80085a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80085a8:	4b24      	ldr	r3, [pc, #144]	@ (800863c <UART_SetConfig+0xccc>)
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ac:	e00c      	b.n	80085c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085ae:	4b24      	ldr	r3, [pc, #144]	@ (8008640 <UART_SetConfig+0xcd0>)
 80085b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b2:	e009      	b.n	80085c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ba:	e005      	b.n	80085c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80085c6:	bf00      	nop
    }

    if (pclk != 0U)
 80085c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d021      	beq.n	8008612 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008644 <UART_SetConfig+0xcd4>)
 80085d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085d8:	461a      	mov	r2, r3
 80085da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	441a      	add	r2, r3
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f4:	2b0f      	cmp	r3, #15
 80085f6:	d909      	bls.n	800860c <UART_SetConfig+0xc9c>
 80085f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085fe:	d205      	bcs.n	800860c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	b29a      	uxth	r2, r3
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60da      	str	r2, [r3, #12]
 800860a:	e002      	b.n	8008612 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2201      	movs	r2, #1
 8008616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2201      	movs	r2, #1
 800861e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2200      	movs	r2, #0
 8008626:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2200      	movs	r2, #0
 800862c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800862e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008632:	4618      	mov	r0, r3
 8008634:	3748      	adds	r7, #72	@ 0x48
 8008636:	46bd      	mov	sp, r7
 8008638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800863c:	03d09000 	.word	0x03d09000
 8008640:	003d0900 	.word	0x003d0900
 8008644:	0800bd3c 	.word	0x0800bd3c

08008648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008654:	f003 0308 	and.w	r3, r3, #8
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	f003 0304 	and.w	r3, r3, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	f003 0320 	and.w	r3, r3, #32
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01a      	beq.n	800875e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008746:	d10a      	bne.n	800875e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	605a      	str	r2, [r3, #4]
  }
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b098      	sub	sp, #96	@ 0x60
 8008790:	af02      	add	r7, sp, #8
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800879c:	f7f8 fe0a 	bl	80013b4 <HAL_GetTick>
 80087a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d12f      	bne.n	8008810 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087b8:	2200      	movs	r2, #0
 80087ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f88e 	bl	80088e0 <UART_WaitOnFlagUntilTimeout>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d022      	beq.n	8008810 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087de:	653b      	str	r3, [r7, #80]	@ 0x50
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e6      	bne.n	80087ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2220      	movs	r2, #32
 8008800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e063      	b.n	80088d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b04      	cmp	r3, #4
 800881c:	d149      	bne.n	80088b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800881e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008826:	2200      	movs	r2, #0
 8008828:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f857 	bl	80088e0 <UART_WaitOnFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d03c      	beq.n	80088b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	623b      	str	r3, [r7, #32]
   return(result);
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800884c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008856:	633b      	str	r3, [r7, #48]	@ 0x30
 8008858:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800885c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e6      	bne.n	8008838 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3308      	adds	r3, #8
 8008870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	60fb      	str	r3, [r7, #12]
   return(result);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f023 0301 	bic.w	r3, r3, #1
 8008880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3308      	adds	r3, #8
 8008888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800888a:	61fa      	str	r2, [r7, #28]
 800888c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	69b9      	ldr	r1, [r7, #24]
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	617b      	str	r3, [r7, #20]
   return(result);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e5      	bne.n	800886a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e012      	b.n	80088d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3758      	adds	r7, #88	@ 0x58
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f0:	e04f      	b.n	8008992 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d04b      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088fa:	f7f8 fd5b 	bl	80013b4 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	429a      	cmp	r2, r3
 8008908:	d302      	bcc.n	8008910 <UART_WaitOnFlagUntilTimeout+0x30>
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e04e      	b.n	80089b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d037      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b80      	cmp	r3, #128	@ 0x80
 8008926:	d034      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b40      	cmp	r3, #64	@ 0x40
 800892c:	d031      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b08      	cmp	r3, #8
 800893a:	d110      	bne.n	800895e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2208      	movs	r2, #8
 8008942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 f921 	bl	8008b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2208      	movs	r2, #8
 800894e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e029      	b.n	80089b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800896c:	d111      	bne.n	8008992 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f907 	bl	8008b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2220      	movs	r2, #32
 8008982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e00f      	b.n	80089b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69da      	ldr	r2, [r3, #28]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4013      	ands	r3, r2
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	429a      	cmp	r2, r3
 80089a0:	bf0c      	ite	eq
 80089a2:	2301      	moveq	r3, #1
 80089a4:	2300      	movne	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d0a0      	beq.n	80088f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b096      	sub	sp, #88	@ 0x58
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	88fa      	ldrh	r2, [r7, #6]
 80089d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2222      	movs	r2, #34	@ 0x22
 80089e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d02d      	beq.n	8008a4e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f8:	4a40      	ldr	r2, [pc, #256]	@ (8008afc <UART_Start_Receive_DMA+0x140>)
 80089fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a02:	4a3f      	ldr	r2, [pc, #252]	@ (8008b00 <UART_Start_Receive_DMA+0x144>)
 8008a04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8008b04 <UART_Start_Receive_DMA+0x148>)
 8008a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a16:	2200      	movs	r2, #0
 8008a18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3324      	adds	r3, #36	@ 0x24
 8008a26:	4619      	mov	r1, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	f7f9 f934 	bl	8001c9c <HAL_DMA_Start_IT>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2210      	movs	r2, #16
 8008a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e051      	b.n	8008af2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d018      	beq.n	8008a88 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a76:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e6      	bne.n	8008a56 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008aa8:	637a      	str	r2, [r7, #52]	@ 0x34
 8008aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008aae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e5      	bne.n	8008a88 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	613b      	str	r3, [r7, #16]
   return(result);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008adc:	623a      	str	r2, [r7, #32]
 8008ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	69f9      	ldr	r1, [r7, #28]
 8008ae2:	6a3a      	ldr	r2, [r7, #32]
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e5      	bne.n	8008abc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3758      	adds	r7, #88	@ 0x58
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	08008c59 	.word	0x08008c59
 8008b00:	08008d81 	.word	0x08008d81
 8008b04:	08008dbf 	.word	0x08008dbf

08008b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b08f      	sub	sp, #60	@ 0x3c
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b30:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e6      	bne.n	8008b10 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b62:	61ba      	str	r2, [r7, #24]
 8008b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6979      	ldr	r1, [r7, #20]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e5      	bne.n	8008b42 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008b7e:	bf00      	nop
 8008b80:	373c      	adds	r7, #60	@ 0x3c
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
	...

08008b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b095      	sub	sp, #84	@ 0x54
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e6      	bne.n	8008b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8008c54 <UART_EndRxTransfer+0xc8>)
 8008bda:	4013      	ands	r3, r2
 8008bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3308      	adds	r3, #8
 8008be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e5      	bne.n	8008bc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d118      	bne.n	8008c34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6979      	ldr	r1, [r7, #20]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e6      	bne.n	8008c02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c48:	bf00      	nop
 8008c4a:	3754      	adds	r7, #84	@ 0x54
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	effffffe 	.word	0xeffffffe

08008c58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b09c      	sub	sp, #112	@ 0x70
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c6e:	d071      	beq.n	8008d54 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e6      	bne.n	8008c78 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cca:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ccc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	623b      	str	r3, [r7, #32]
   return(result);
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e5      	bne.n	8008cde <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d14:	2220      	movs	r2, #32
 8008d16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d118      	bne.n	8008d54 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0310 	bic.w	r3, r3, #16
 8008d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	69b9      	ldr	r1, [r7, #24]
 8008d46:	69fa      	ldr	r2, [r7, #28]
 8008d48:	e841 2300 	strex	r3, r2, [r1]
 8008d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e6      	bne.n	8008d22 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d56:	2200      	movs	r2, #0
 8008d58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d107      	bne.n	8008d72 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d6c:	f7fe fdf4 	bl	8007958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d70:	e002      	b.n	8008d78 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008d72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d74:	f7f7 fe88 	bl	8000a88 <HAL_UART_RxCpltCallback>
}
 8008d78:	bf00      	nop
 8008d7a:	3770      	adds	r7, #112	@ 0x70
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d109      	bne.n	8008db0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008da2:	085b      	lsrs	r3, r3, #1
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7fe fdd5 	bl	8007958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008dae:	e002      	b.n	8008db6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f7fe fdbd 	bl	8007930 <HAL_UART_RxHalfCpltCallback>
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dd2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008de6:	2b80      	cmp	r3, #128	@ 0x80
 8008de8:	d109      	bne.n	8008dfe <UART_DMAError+0x40>
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b21      	cmp	r3, #33	@ 0x21
 8008dee:	d106      	bne.n	8008dfe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008df8:	6978      	ldr	r0, [r7, #20]
 8008dfa:	f7ff fe85 	bl	8008b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e08:	2b40      	cmp	r3, #64	@ 0x40
 8008e0a:	d109      	bne.n	8008e20 <UART_DMAError+0x62>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b22      	cmp	r3, #34	@ 0x22
 8008e10:	d106      	bne.n	8008e20 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff feb6 	bl	8008b8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e26:	f043 0210 	orr.w	r2, r3, #16
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e30:	6978      	ldr	r0, [r7, #20]
 8008e32:	f7fe fd87 	bl	8007944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e36:	bf00      	nop
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7fe fd71 	bl	8007944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e62:	bf00      	nop
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b088      	sub	sp, #32
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6979      	ldr	r1, [r7, #20]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e6      	bne.n	8008e72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7fe fd32 	bl	800791c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb8:	bf00      	nop
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e027      	b.n	8008f62 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2224      	movs	r2, #36	@ 0x24
 8008f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0201 	bic.w	r2, r2, #1
 8008f38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d101      	bne.n	8008f86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e02d      	b.n	8008fe2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2224      	movs	r2, #36	@ 0x24
 8008f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f022 0201 	bic.w	r2, r2, #1
 8008fac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f850 	bl	8009068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e02d      	b.n	800905e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2224      	movs	r2, #36	@ 0x24
 800900e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0201 	bic.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f812 	bl	8009068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009074:	2b00      	cmp	r3, #0
 8009076:	d108      	bne.n	800908a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009088:	e031      	b.n	80090ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800908a:	2310      	movs	r3, #16
 800908c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800908e:	2310      	movs	r3, #16
 8009090:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	0e5b      	lsrs	r3, r3, #25
 800909a:	b2db      	uxtb	r3, r3
 800909c:	f003 0307 	and.w	r3, r3, #7
 80090a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	0f5b      	lsrs	r3, r3, #29
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	7b3a      	ldrb	r2, [r7, #12]
 80090b6:	4911      	ldr	r1, [pc, #68]	@ (80090fc <UARTEx_SetNbDataToProcess+0x94>)
 80090b8:	5c8a      	ldrb	r2, [r1, r2]
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090be:	7b3a      	ldrb	r2, [r7, #12]
 80090c0:	490f      	ldr	r1, [pc, #60]	@ (8009100 <UARTEx_SetNbDataToProcess+0x98>)
 80090c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	7b7a      	ldrb	r2, [r7, #13]
 80090d4:	4909      	ldr	r1, [pc, #36]	@ (80090fc <UARTEx_SetNbDataToProcess+0x94>)
 80090d6:	5c8a      	ldrb	r2, [r1, r2]
 80090d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090dc:	7b7a      	ldrb	r2, [r7, #13]
 80090de:	4908      	ldr	r1, [pc, #32]	@ (8009100 <UARTEx_SetNbDataToProcess+0x98>)
 80090e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	0800bd54 	.word	0x0800bd54
 8009100:	0800bd5c 	.word	0x0800bd5c

08009104 <atof>:
 8009104:	2100      	movs	r1, #0
 8009106:	f000 bdb1 	b.w	8009c6c <strtod>

0800910a <sulp>:
 800910a:	b570      	push	{r4, r5, r6, lr}
 800910c:	4604      	mov	r4, r0
 800910e:	460d      	mov	r5, r1
 8009110:	4616      	mov	r6, r2
 8009112:	ec45 4b10 	vmov	d0, r4, r5
 8009116:	f001 ff99 	bl	800b04c <__ulp>
 800911a:	b17e      	cbz	r6, 800913c <sulp+0x32>
 800911c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009120:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009124:	2b00      	cmp	r3, #0
 8009126:	dd09      	ble.n	800913c <sulp+0x32>
 8009128:	051b      	lsls	r3, r3, #20
 800912a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800912e:	2000      	movs	r0, #0
 8009130:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8009134:	ec41 0b17 	vmov	d7, r0, r1
 8009138:	ee20 0b07 	vmul.f64	d0, d0, d7
 800913c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009140 <_strtod_l>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	ed2d 8b0a 	vpush	{d8-d12}
 8009148:	b097      	sub	sp, #92	@ 0x5c
 800914a:	4688      	mov	r8, r1
 800914c:	920e      	str	r2, [sp, #56]	@ 0x38
 800914e:	2200      	movs	r2, #0
 8009150:	9212      	str	r2, [sp, #72]	@ 0x48
 8009152:	9005      	str	r0, [sp, #20]
 8009154:	f04f 0a00 	mov.w	sl, #0
 8009158:	f04f 0b00 	mov.w	fp, #0
 800915c:	460a      	mov	r2, r1
 800915e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009160:	7811      	ldrb	r1, [r2, #0]
 8009162:	292b      	cmp	r1, #43	@ 0x2b
 8009164:	d04c      	beq.n	8009200 <_strtod_l+0xc0>
 8009166:	d839      	bhi.n	80091dc <_strtod_l+0x9c>
 8009168:	290d      	cmp	r1, #13
 800916a:	d833      	bhi.n	80091d4 <_strtod_l+0x94>
 800916c:	2908      	cmp	r1, #8
 800916e:	d833      	bhi.n	80091d8 <_strtod_l+0x98>
 8009170:	2900      	cmp	r1, #0
 8009172:	d03c      	beq.n	80091ee <_strtod_l+0xae>
 8009174:	2200      	movs	r2, #0
 8009176:	9208      	str	r2, [sp, #32]
 8009178:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800917a:	782a      	ldrb	r2, [r5, #0]
 800917c:	2a30      	cmp	r2, #48	@ 0x30
 800917e:	f040 80b5 	bne.w	80092ec <_strtod_l+0x1ac>
 8009182:	786a      	ldrb	r2, [r5, #1]
 8009184:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009188:	2a58      	cmp	r2, #88	@ 0x58
 800918a:	d170      	bne.n	800926e <_strtod_l+0x12e>
 800918c:	9302      	str	r3, [sp, #8]
 800918e:	9b08      	ldr	r3, [sp, #32]
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	ab12      	add	r3, sp, #72	@ 0x48
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	4a8b      	ldr	r2, [pc, #556]	@ (80093c4 <_strtod_l+0x284>)
 8009198:	9805      	ldr	r0, [sp, #20]
 800919a:	ab13      	add	r3, sp, #76	@ 0x4c
 800919c:	a911      	add	r1, sp, #68	@ 0x44
 800919e:	f001 f847 	bl	800a230 <__gethex>
 80091a2:	f010 060f 	ands.w	r6, r0, #15
 80091a6:	4604      	mov	r4, r0
 80091a8:	d005      	beq.n	80091b6 <_strtod_l+0x76>
 80091aa:	2e06      	cmp	r6, #6
 80091ac:	d12a      	bne.n	8009204 <_strtod_l+0xc4>
 80091ae:	3501      	adds	r5, #1
 80091b0:	2300      	movs	r3, #0
 80091b2:	9511      	str	r5, [sp, #68]	@ 0x44
 80091b4:	9308      	str	r3, [sp, #32]
 80091b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f040 852f 	bne.w	8009c1c <_strtod_l+0xadc>
 80091be:	9b08      	ldr	r3, [sp, #32]
 80091c0:	ec4b ab10 	vmov	d0, sl, fp
 80091c4:	b1cb      	cbz	r3, 80091fa <_strtod_l+0xba>
 80091c6:	eeb1 0b40 	vneg.f64	d0, d0
 80091ca:	b017      	add	sp, #92	@ 0x5c
 80091cc:	ecbd 8b0a 	vpop	{d8-d12}
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	2920      	cmp	r1, #32
 80091d6:	d1cd      	bne.n	8009174 <_strtod_l+0x34>
 80091d8:	3201      	adds	r2, #1
 80091da:	e7c0      	b.n	800915e <_strtod_l+0x1e>
 80091dc:	292d      	cmp	r1, #45	@ 0x2d
 80091de:	d1c9      	bne.n	8009174 <_strtod_l+0x34>
 80091e0:	2101      	movs	r1, #1
 80091e2:	9108      	str	r1, [sp, #32]
 80091e4:	1c51      	adds	r1, r2, #1
 80091e6:	9111      	str	r1, [sp, #68]	@ 0x44
 80091e8:	7852      	ldrb	r2, [r2, #1]
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	d1c4      	bne.n	8009178 <_strtod_l+0x38>
 80091ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 850f 	bne.w	8009c18 <_strtod_l+0xad8>
 80091fa:	ec4b ab10 	vmov	d0, sl, fp
 80091fe:	e7e4      	b.n	80091ca <_strtod_l+0x8a>
 8009200:	2100      	movs	r1, #0
 8009202:	e7ee      	b.n	80091e2 <_strtod_l+0xa2>
 8009204:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009206:	b13a      	cbz	r2, 8009218 <_strtod_l+0xd8>
 8009208:	2135      	movs	r1, #53	@ 0x35
 800920a:	a814      	add	r0, sp, #80	@ 0x50
 800920c:	f002 f815 	bl	800b23a <__copybits>
 8009210:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009212:	9805      	ldr	r0, [sp, #20]
 8009214:	f001 fbe6 	bl	800a9e4 <_Bfree>
 8009218:	1e73      	subs	r3, r6, #1
 800921a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800921c:	2b04      	cmp	r3, #4
 800921e:	d806      	bhi.n	800922e <_strtod_l+0xee>
 8009220:	e8df f003 	tbb	[pc, r3]
 8009224:	201d0314 	.word	0x201d0314
 8009228:	14          	.byte	0x14
 8009229:	00          	.byte	0x00
 800922a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800922e:	05e3      	lsls	r3, r4, #23
 8009230:	bf48      	it	mi
 8009232:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800923a:	0d1b      	lsrs	r3, r3, #20
 800923c:	051b      	lsls	r3, r3, #20
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1b9      	bne.n	80091b6 <_strtod_l+0x76>
 8009242:	f000 fee1 	bl	800a008 <__errno>
 8009246:	2322      	movs	r3, #34	@ 0x22
 8009248:	6003      	str	r3, [r0, #0]
 800924a:	e7b4      	b.n	80091b6 <_strtod_l+0x76>
 800924c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8009250:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009254:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009258:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800925c:	e7e7      	b.n	800922e <_strtod_l+0xee>
 800925e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80093cc <_strtod_l+0x28c>
 8009262:	e7e4      	b.n	800922e <_strtod_l+0xee>
 8009264:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009268:	f04f 3aff 	mov.w	sl, #4294967295
 800926c:	e7df      	b.n	800922e <_strtod_l+0xee>
 800926e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	9211      	str	r2, [sp, #68]	@ 0x44
 8009274:	785b      	ldrb	r3, [r3, #1]
 8009276:	2b30      	cmp	r3, #48	@ 0x30
 8009278:	d0f9      	beq.n	800926e <_strtod_l+0x12e>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d09b      	beq.n	80091b6 <_strtod_l+0x76>
 800927e:	2301      	movs	r3, #1
 8009280:	2600      	movs	r6, #0
 8009282:	9307      	str	r3, [sp, #28]
 8009284:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009286:	930a      	str	r3, [sp, #40]	@ 0x28
 8009288:	46b1      	mov	r9, r6
 800928a:	4635      	mov	r5, r6
 800928c:	220a      	movs	r2, #10
 800928e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8009290:	7804      	ldrb	r4, [r0, #0]
 8009292:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8009296:	b2d9      	uxtb	r1, r3
 8009298:	2909      	cmp	r1, #9
 800929a:	d929      	bls.n	80092f0 <_strtod_l+0x1b0>
 800929c:	494a      	ldr	r1, [pc, #296]	@ (80093c8 <_strtod_l+0x288>)
 800929e:	2201      	movs	r2, #1
 80092a0:	f000 fdfd 	bl	8009e9e <strncmp>
 80092a4:	b378      	cbz	r0, 8009306 <_strtod_l+0x1c6>
 80092a6:	2000      	movs	r0, #0
 80092a8:	4622      	mov	r2, r4
 80092aa:	462b      	mov	r3, r5
 80092ac:	4607      	mov	r7, r0
 80092ae:	9006      	str	r0, [sp, #24]
 80092b0:	2a65      	cmp	r2, #101	@ 0x65
 80092b2:	d001      	beq.n	80092b8 <_strtod_l+0x178>
 80092b4:	2a45      	cmp	r2, #69	@ 0x45
 80092b6:	d117      	bne.n	80092e8 <_strtod_l+0x1a8>
 80092b8:	b91b      	cbnz	r3, 80092c2 <_strtod_l+0x182>
 80092ba:	9b07      	ldr	r3, [sp, #28]
 80092bc:	4303      	orrs	r3, r0
 80092be:	d096      	beq.n	80091ee <_strtod_l+0xae>
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80092c6:	f108 0201 	add.w	r2, r8, #1
 80092ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80092cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80092d0:	2a2b      	cmp	r2, #43	@ 0x2b
 80092d2:	d06b      	beq.n	80093ac <_strtod_l+0x26c>
 80092d4:	2a2d      	cmp	r2, #45	@ 0x2d
 80092d6:	d071      	beq.n	80093bc <_strtod_l+0x27c>
 80092d8:	f04f 0e00 	mov.w	lr, #0
 80092dc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80092e0:	2c09      	cmp	r4, #9
 80092e2:	d979      	bls.n	80093d8 <_strtod_l+0x298>
 80092e4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80092e8:	2400      	movs	r4, #0
 80092ea:	e094      	b.n	8009416 <_strtod_l+0x2d6>
 80092ec:	2300      	movs	r3, #0
 80092ee:	e7c7      	b.n	8009280 <_strtod_l+0x140>
 80092f0:	2d08      	cmp	r5, #8
 80092f2:	f100 0001 	add.w	r0, r0, #1
 80092f6:	bfd4      	ite	le
 80092f8:	fb02 3909 	mlale	r9, r2, r9, r3
 80092fc:	fb02 3606 	mlagt	r6, r2, r6, r3
 8009300:	3501      	adds	r5, #1
 8009302:	9011      	str	r0, [sp, #68]	@ 0x44
 8009304:	e7c3      	b.n	800928e <_strtod_l+0x14e>
 8009306:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	9211      	str	r2, [sp, #68]	@ 0x44
 800930c:	785a      	ldrb	r2, [r3, #1]
 800930e:	b375      	cbz	r5, 800936e <_strtod_l+0x22e>
 8009310:	4607      	mov	r7, r0
 8009312:	462b      	mov	r3, r5
 8009314:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009318:	2909      	cmp	r1, #9
 800931a:	d913      	bls.n	8009344 <_strtod_l+0x204>
 800931c:	2101      	movs	r1, #1
 800931e:	9106      	str	r1, [sp, #24]
 8009320:	e7c6      	b.n	80092b0 <_strtod_l+0x170>
 8009322:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	9211      	str	r2, [sp, #68]	@ 0x44
 8009328:	785a      	ldrb	r2, [r3, #1]
 800932a:	3001      	adds	r0, #1
 800932c:	2a30      	cmp	r2, #48	@ 0x30
 800932e:	d0f8      	beq.n	8009322 <_strtod_l+0x1e2>
 8009330:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009334:	2b08      	cmp	r3, #8
 8009336:	f200 8476 	bhi.w	8009c26 <_strtod_l+0xae6>
 800933a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800933c:	930a      	str	r3, [sp, #40]	@ 0x28
 800933e:	4607      	mov	r7, r0
 8009340:	2000      	movs	r0, #0
 8009342:	4603      	mov	r3, r0
 8009344:	3a30      	subs	r2, #48	@ 0x30
 8009346:	f100 0101 	add.w	r1, r0, #1
 800934a:	d023      	beq.n	8009394 <_strtod_l+0x254>
 800934c:	440f      	add	r7, r1
 800934e:	eb00 0c03 	add.w	ip, r0, r3
 8009352:	4619      	mov	r1, r3
 8009354:	240a      	movs	r4, #10
 8009356:	4561      	cmp	r1, ip
 8009358:	d10b      	bne.n	8009372 <_strtod_l+0x232>
 800935a:	1c5c      	adds	r4, r3, #1
 800935c:	4403      	add	r3, r0
 800935e:	2b08      	cmp	r3, #8
 8009360:	4404      	add	r4, r0
 8009362:	dc11      	bgt.n	8009388 <_strtod_l+0x248>
 8009364:	230a      	movs	r3, #10
 8009366:	fb03 2909 	mla	r9, r3, r9, r2
 800936a:	2100      	movs	r1, #0
 800936c:	e013      	b.n	8009396 <_strtod_l+0x256>
 800936e:	4628      	mov	r0, r5
 8009370:	e7dc      	b.n	800932c <_strtod_l+0x1ec>
 8009372:	2908      	cmp	r1, #8
 8009374:	f101 0101 	add.w	r1, r1, #1
 8009378:	dc02      	bgt.n	8009380 <_strtod_l+0x240>
 800937a:	fb04 f909 	mul.w	r9, r4, r9
 800937e:	e7ea      	b.n	8009356 <_strtod_l+0x216>
 8009380:	2910      	cmp	r1, #16
 8009382:	bfd8      	it	le
 8009384:	4366      	mulle	r6, r4
 8009386:	e7e6      	b.n	8009356 <_strtod_l+0x216>
 8009388:	2b0f      	cmp	r3, #15
 800938a:	dcee      	bgt.n	800936a <_strtod_l+0x22a>
 800938c:	230a      	movs	r3, #10
 800938e:	fb03 2606 	mla	r6, r3, r6, r2
 8009392:	e7ea      	b.n	800936a <_strtod_l+0x22a>
 8009394:	461c      	mov	r4, r3
 8009396:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	9211      	str	r2, [sp, #68]	@ 0x44
 800939c:	785a      	ldrb	r2, [r3, #1]
 800939e:	4608      	mov	r0, r1
 80093a0:	4623      	mov	r3, r4
 80093a2:	e7b7      	b.n	8009314 <_strtod_l+0x1d4>
 80093a4:	2301      	movs	r3, #1
 80093a6:	2700      	movs	r7, #0
 80093a8:	9306      	str	r3, [sp, #24]
 80093aa:	e786      	b.n	80092ba <_strtod_l+0x17a>
 80093ac:	f04f 0e00 	mov.w	lr, #0
 80093b0:	f108 0202 	add.w	r2, r8, #2
 80093b4:	9211      	str	r2, [sp, #68]	@ 0x44
 80093b6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80093ba:	e78f      	b.n	80092dc <_strtod_l+0x19c>
 80093bc:	f04f 0e01 	mov.w	lr, #1
 80093c0:	e7f6      	b.n	80093b0 <_strtod_l+0x270>
 80093c2:	bf00      	nop
 80093c4:	0800bd88 	.word	0x0800bd88
 80093c8:	0800bd64 	.word	0x0800bd64
 80093cc:	7ff00000 	.word	0x7ff00000
 80093d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093d2:	1c54      	adds	r4, r2, #1
 80093d4:	9411      	str	r4, [sp, #68]	@ 0x44
 80093d6:	7852      	ldrb	r2, [r2, #1]
 80093d8:	2a30      	cmp	r2, #48	@ 0x30
 80093da:	d0f9      	beq.n	80093d0 <_strtod_l+0x290>
 80093dc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80093e0:	2c08      	cmp	r4, #8
 80093e2:	d881      	bhi.n	80092e8 <_strtod_l+0x1a8>
 80093e4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80093e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80093ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093ee:	1c51      	adds	r1, r2, #1
 80093f0:	9111      	str	r1, [sp, #68]	@ 0x44
 80093f2:	7852      	ldrb	r2, [r2, #1]
 80093f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80093f8:	2c09      	cmp	r4, #9
 80093fa:	d938      	bls.n	800946e <_strtod_l+0x32e>
 80093fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80093fe:	1b0c      	subs	r4, r1, r4
 8009400:	2c08      	cmp	r4, #8
 8009402:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8009406:	dc02      	bgt.n	800940e <_strtod_l+0x2ce>
 8009408:	4564      	cmp	r4, ip
 800940a:	bfa8      	it	ge
 800940c:	4664      	movge	r4, ip
 800940e:	f1be 0f00 	cmp.w	lr, #0
 8009412:	d000      	beq.n	8009416 <_strtod_l+0x2d6>
 8009414:	4264      	negs	r4, r4
 8009416:	2b00      	cmp	r3, #0
 8009418:	d14e      	bne.n	80094b8 <_strtod_l+0x378>
 800941a:	9b07      	ldr	r3, [sp, #28]
 800941c:	4318      	orrs	r0, r3
 800941e:	f47f aeca 	bne.w	80091b6 <_strtod_l+0x76>
 8009422:	9b06      	ldr	r3, [sp, #24]
 8009424:	2b00      	cmp	r3, #0
 8009426:	f47f aee2 	bne.w	80091ee <_strtod_l+0xae>
 800942a:	2a69      	cmp	r2, #105	@ 0x69
 800942c:	d027      	beq.n	800947e <_strtod_l+0x33e>
 800942e:	dc24      	bgt.n	800947a <_strtod_l+0x33a>
 8009430:	2a49      	cmp	r2, #73	@ 0x49
 8009432:	d024      	beq.n	800947e <_strtod_l+0x33e>
 8009434:	2a4e      	cmp	r2, #78	@ 0x4e
 8009436:	f47f aeda 	bne.w	80091ee <_strtod_l+0xae>
 800943a:	4997      	ldr	r1, [pc, #604]	@ (8009698 <_strtod_l+0x558>)
 800943c:	a811      	add	r0, sp, #68	@ 0x44
 800943e:	f001 f919 	bl	800a674 <__match>
 8009442:	2800      	cmp	r0, #0
 8009444:	f43f aed3 	beq.w	80091ee <_strtod_l+0xae>
 8009448:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b28      	cmp	r3, #40	@ 0x28
 800944e:	d12d      	bne.n	80094ac <_strtod_l+0x36c>
 8009450:	4992      	ldr	r1, [pc, #584]	@ (800969c <_strtod_l+0x55c>)
 8009452:	aa14      	add	r2, sp, #80	@ 0x50
 8009454:	a811      	add	r0, sp, #68	@ 0x44
 8009456:	f001 f921 	bl	800a69c <__hexnan>
 800945a:	2805      	cmp	r0, #5
 800945c:	d126      	bne.n	80094ac <_strtod_l+0x36c>
 800945e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009460:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8009464:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009468:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800946c:	e6a3      	b.n	80091b6 <_strtod_l+0x76>
 800946e:	240a      	movs	r4, #10
 8009470:	fb04 2c0c 	mla	ip, r4, ip, r2
 8009474:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8009478:	e7b8      	b.n	80093ec <_strtod_l+0x2ac>
 800947a:	2a6e      	cmp	r2, #110	@ 0x6e
 800947c:	e7db      	b.n	8009436 <_strtod_l+0x2f6>
 800947e:	4988      	ldr	r1, [pc, #544]	@ (80096a0 <_strtod_l+0x560>)
 8009480:	a811      	add	r0, sp, #68	@ 0x44
 8009482:	f001 f8f7 	bl	800a674 <__match>
 8009486:	2800      	cmp	r0, #0
 8009488:	f43f aeb1 	beq.w	80091ee <_strtod_l+0xae>
 800948c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800948e:	4985      	ldr	r1, [pc, #532]	@ (80096a4 <_strtod_l+0x564>)
 8009490:	3b01      	subs	r3, #1
 8009492:	a811      	add	r0, sp, #68	@ 0x44
 8009494:	9311      	str	r3, [sp, #68]	@ 0x44
 8009496:	f001 f8ed 	bl	800a674 <__match>
 800949a:	b910      	cbnz	r0, 80094a2 <_strtod_l+0x362>
 800949c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800949e:	3301      	adds	r3, #1
 80094a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80094a2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80096b8 <_strtod_l+0x578>
 80094a6:	f04f 0a00 	mov.w	sl, #0
 80094aa:	e684      	b.n	80091b6 <_strtod_l+0x76>
 80094ac:	487e      	ldr	r0, [pc, #504]	@ (80096a8 <_strtod_l+0x568>)
 80094ae:	f000 fde7 	bl	800a080 <nan>
 80094b2:	ec5b ab10 	vmov	sl, fp, d0
 80094b6:	e67e      	b.n	80091b6 <_strtod_l+0x76>
 80094b8:	ee07 9a90 	vmov	s15, r9
 80094bc:	1be2      	subs	r2, r4, r7
 80094be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	bf08      	it	eq
 80094c6:	461d      	moveq	r5, r3
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80094cc:	461a      	mov	r2, r3
 80094ce:	bfa8      	it	ge
 80094d0:	2210      	movge	r2, #16
 80094d2:	2b09      	cmp	r3, #9
 80094d4:	ec5b ab17 	vmov	sl, fp, d7
 80094d8:	dc15      	bgt.n	8009506 <_strtod_l+0x3c6>
 80094da:	1be1      	subs	r1, r4, r7
 80094dc:	2900      	cmp	r1, #0
 80094de:	f43f ae6a 	beq.w	80091b6 <_strtod_l+0x76>
 80094e2:	eba4 0107 	sub.w	r1, r4, r7
 80094e6:	dd72      	ble.n	80095ce <_strtod_l+0x48e>
 80094e8:	2916      	cmp	r1, #22
 80094ea:	dc59      	bgt.n	80095a0 <_strtod_l+0x460>
 80094ec:	4b6f      	ldr	r3, [pc, #444]	@ (80096ac <_strtod_l+0x56c>)
 80094ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094f4:	ed93 7b00 	vldr	d7, [r3]
 80094f8:	ec4b ab16 	vmov	d6, sl, fp
 80094fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009500:	ec5b ab17 	vmov	sl, fp, d7
 8009504:	e657      	b.n	80091b6 <_strtod_l+0x76>
 8009506:	4969      	ldr	r1, [pc, #420]	@ (80096ac <_strtod_l+0x56c>)
 8009508:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800950c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8009510:	ee06 6a90 	vmov	s13, r6
 8009514:	2b0f      	cmp	r3, #15
 8009516:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800951a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800951e:	ec5b ab16 	vmov	sl, fp, d6
 8009522:	ddda      	ble.n	80094da <_strtod_l+0x39a>
 8009524:	1a9a      	subs	r2, r3, r2
 8009526:	1be1      	subs	r1, r4, r7
 8009528:	440a      	add	r2, r1
 800952a:	2a00      	cmp	r2, #0
 800952c:	f340 8094 	ble.w	8009658 <_strtod_l+0x518>
 8009530:	f012 000f 	ands.w	r0, r2, #15
 8009534:	d00a      	beq.n	800954c <_strtod_l+0x40c>
 8009536:	495d      	ldr	r1, [pc, #372]	@ (80096ac <_strtod_l+0x56c>)
 8009538:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800953c:	ed91 7b00 	vldr	d7, [r1]
 8009540:	ec4b ab16 	vmov	d6, sl, fp
 8009544:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009548:	ec5b ab17 	vmov	sl, fp, d7
 800954c:	f032 020f 	bics.w	r2, r2, #15
 8009550:	d073      	beq.n	800963a <_strtod_l+0x4fa>
 8009552:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8009556:	dd47      	ble.n	80095e8 <_strtod_l+0x4a8>
 8009558:	2400      	movs	r4, #0
 800955a:	4625      	mov	r5, r4
 800955c:	9407      	str	r4, [sp, #28]
 800955e:	4626      	mov	r6, r4
 8009560:	9a05      	ldr	r2, [sp, #20]
 8009562:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80096b8 <_strtod_l+0x578>
 8009566:	2322      	movs	r3, #34	@ 0x22
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	f04f 0a00 	mov.w	sl, #0
 800956e:	9b07      	ldr	r3, [sp, #28]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f43f ae20 	beq.w	80091b6 <_strtod_l+0x76>
 8009576:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009578:	9805      	ldr	r0, [sp, #20]
 800957a:	f001 fa33 	bl	800a9e4 <_Bfree>
 800957e:	9805      	ldr	r0, [sp, #20]
 8009580:	4631      	mov	r1, r6
 8009582:	f001 fa2f 	bl	800a9e4 <_Bfree>
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	4629      	mov	r1, r5
 800958a:	f001 fa2b 	bl	800a9e4 <_Bfree>
 800958e:	9907      	ldr	r1, [sp, #28]
 8009590:	9805      	ldr	r0, [sp, #20]
 8009592:	f001 fa27 	bl	800a9e4 <_Bfree>
 8009596:	9805      	ldr	r0, [sp, #20]
 8009598:	4621      	mov	r1, r4
 800959a:	f001 fa23 	bl	800a9e4 <_Bfree>
 800959e:	e60a      	b.n	80091b6 <_strtod_l+0x76>
 80095a0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80095a4:	1be0      	subs	r0, r4, r7
 80095a6:	4281      	cmp	r1, r0
 80095a8:	dbbc      	blt.n	8009524 <_strtod_l+0x3e4>
 80095aa:	4a40      	ldr	r2, [pc, #256]	@ (80096ac <_strtod_l+0x56c>)
 80095ac:	f1c3 030f 	rsb	r3, r3, #15
 80095b0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80095b4:	ed91 7b00 	vldr	d7, [r1]
 80095b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095ba:	ec4b ab16 	vmov	d6, sl, fp
 80095be:	1acb      	subs	r3, r1, r3
 80095c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80095c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80095c8:	ed92 6b00 	vldr	d6, [r2]
 80095cc:	e796      	b.n	80094fc <_strtod_l+0x3bc>
 80095ce:	3116      	adds	r1, #22
 80095d0:	dba8      	blt.n	8009524 <_strtod_l+0x3e4>
 80095d2:	4b36      	ldr	r3, [pc, #216]	@ (80096ac <_strtod_l+0x56c>)
 80095d4:	1b3c      	subs	r4, r7, r4
 80095d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80095da:	ed94 7b00 	vldr	d7, [r4]
 80095de:	ec4b ab16 	vmov	d6, sl, fp
 80095e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80095e6:	e78b      	b.n	8009500 <_strtod_l+0x3c0>
 80095e8:	2000      	movs	r0, #0
 80095ea:	ec4b ab17 	vmov	d7, sl, fp
 80095ee:	4e30      	ldr	r6, [pc, #192]	@ (80096b0 <_strtod_l+0x570>)
 80095f0:	1112      	asrs	r2, r2, #4
 80095f2:	4601      	mov	r1, r0
 80095f4:	2a01      	cmp	r2, #1
 80095f6:	dc23      	bgt.n	8009640 <_strtod_l+0x500>
 80095f8:	b108      	cbz	r0, 80095fe <_strtod_l+0x4be>
 80095fa:	ec5b ab17 	vmov	sl, fp, d7
 80095fe:	4a2c      	ldr	r2, [pc, #176]	@ (80096b0 <_strtod_l+0x570>)
 8009600:	482c      	ldr	r0, [pc, #176]	@ (80096b4 <_strtod_l+0x574>)
 8009602:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009606:	ed92 7b00 	vldr	d7, [r2]
 800960a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800960e:	ec4b ab16 	vmov	d6, sl, fp
 8009612:	4a29      	ldr	r2, [pc, #164]	@ (80096b8 <_strtod_l+0x578>)
 8009614:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009618:	ee17 1a90 	vmov	r1, s15
 800961c:	400a      	ands	r2, r1
 800961e:	4282      	cmp	r2, r0
 8009620:	ec5b ab17 	vmov	sl, fp, d7
 8009624:	d898      	bhi.n	8009558 <_strtod_l+0x418>
 8009626:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800962a:	4282      	cmp	r2, r0
 800962c:	bf86      	itte	hi
 800962e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80096bc <_strtod_l+0x57c>
 8009632:	f04f 3aff 	movhi.w	sl, #4294967295
 8009636:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800963a:	2200      	movs	r2, #0
 800963c:	9206      	str	r2, [sp, #24]
 800963e:	e076      	b.n	800972e <_strtod_l+0x5ee>
 8009640:	f012 0f01 	tst.w	r2, #1
 8009644:	d004      	beq.n	8009650 <_strtod_l+0x510>
 8009646:	ed96 6b00 	vldr	d6, [r6]
 800964a:	2001      	movs	r0, #1
 800964c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009650:	3101      	adds	r1, #1
 8009652:	1052      	asrs	r2, r2, #1
 8009654:	3608      	adds	r6, #8
 8009656:	e7cd      	b.n	80095f4 <_strtod_l+0x4b4>
 8009658:	d0ef      	beq.n	800963a <_strtod_l+0x4fa>
 800965a:	4252      	negs	r2, r2
 800965c:	f012 000f 	ands.w	r0, r2, #15
 8009660:	d00a      	beq.n	8009678 <_strtod_l+0x538>
 8009662:	4912      	ldr	r1, [pc, #72]	@ (80096ac <_strtod_l+0x56c>)
 8009664:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009668:	ed91 7b00 	vldr	d7, [r1]
 800966c:	ec4b ab16 	vmov	d6, sl, fp
 8009670:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009674:	ec5b ab17 	vmov	sl, fp, d7
 8009678:	1112      	asrs	r2, r2, #4
 800967a:	d0de      	beq.n	800963a <_strtod_l+0x4fa>
 800967c:	2a1f      	cmp	r2, #31
 800967e:	dd1f      	ble.n	80096c0 <_strtod_l+0x580>
 8009680:	2400      	movs	r4, #0
 8009682:	4625      	mov	r5, r4
 8009684:	9407      	str	r4, [sp, #28]
 8009686:	4626      	mov	r6, r4
 8009688:	9a05      	ldr	r2, [sp, #20]
 800968a:	2322      	movs	r3, #34	@ 0x22
 800968c:	f04f 0a00 	mov.w	sl, #0
 8009690:	f04f 0b00 	mov.w	fp, #0
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	e76a      	b.n	800956e <_strtod_l+0x42e>
 8009698:	0800bd6f 	.word	0x0800bd6f
 800969c:	0800bd74 	.word	0x0800bd74
 80096a0:	0800bd66 	.word	0x0800bd66
 80096a4:	0800bd69 	.word	0x0800bd69
 80096a8:	0800be7c 	.word	0x0800be7c
 80096ac:	0800bf80 	.word	0x0800bf80
 80096b0:	0800bf58 	.word	0x0800bf58
 80096b4:	7ca00000 	.word	0x7ca00000
 80096b8:	7ff00000 	.word	0x7ff00000
 80096bc:	7fefffff 	.word	0x7fefffff
 80096c0:	f012 0110 	ands.w	r1, r2, #16
 80096c4:	bf18      	it	ne
 80096c6:	216a      	movne	r1, #106	@ 0x6a
 80096c8:	9106      	str	r1, [sp, #24]
 80096ca:	ec4b ab17 	vmov	d7, sl, fp
 80096ce:	49b0      	ldr	r1, [pc, #704]	@ (8009990 <_strtod_l+0x850>)
 80096d0:	2000      	movs	r0, #0
 80096d2:	07d6      	lsls	r6, r2, #31
 80096d4:	d504      	bpl.n	80096e0 <_strtod_l+0x5a0>
 80096d6:	ed91 6b00 	vldr	d6, [r1]
 80096da:	2001      	movs	r0, #1
 80096dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096e0:	1052      	asrs	r2, r2, #1
 80096e2:	f101 0108 	add.w	r1, r1, #8
 80096e6:	d1f4      	bne.n	80096d2 <_strtod_l+0x592>
 80096e8:	b108      	cbz	r0, 80096ee <_strtod_l+0x5ae>
 80096ea:	ec5b ab17 	vmov	sl, fp, d7
 80096ee:	9a06      	ldr	r2, [sp, #24]
 80096f0:	b1b2      	cbz	r2, 8009720 <_strtod_l+0x5e0>
 80096f2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80096f6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	4658      	mov	r0, fp
 80096fe:	dd0f      	ble.n	8009720 <_strtod_l+0x5e0>
 8009700:	2a1f      	cmp	r2, #31
 8009702:	dd55      	ble.n	80097b0 <_strtod_l+0x670>
 8009704:	2a34      	cmp	r2, #52	@ 0x34
 8009706:	bfde      	ittt	le
 8009708:	f04f 32ff 	movle.w	r2, #4294967295
 800970c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8009710:	408a      	lslle	r2, r1
 8009712:	f04f 0a00 	mov.w	sl, #0
 8009716:	bfcc      	ite	gt
 8009718:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800971c:	ea02 0b00 	andle.w	fp, r2, r0
 8009720:	ec4b ab17 	vmov	d7, sl, fp
 8009724:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972c:	d0a8      	beq.n	8009680 <_strtod_l+0x540>
 800972e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009730:	9805      	ldr	r0, [sp, #20]
 8009732:	f8cd 9000 	str.w	r9, [sp]
 8009736:	462a      	mov	r2, r5
 8009738:	f001 f9bc 	bl	800aab4 <__s2b>
 800973c:	9007      	str	r0, [sp, #28]
 800973e:	2800      	cmp	r0, #0
 8009740:	f43f af0a 	beq.w	8009558 <_strtod_l+0x418>
 8009744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009746:	1b3f      	subs	r7, r7, r4
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfb4      	ite	lt
 800974c:	463b      	movlt	r3, r7
 800974e:	2300      	movge	r3, #0
 8009750:	930a      	str	r3, [sp, #40]	@ 0x28
 8009752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009754:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8009980 <_strtod_l+0x840>
 8009758:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800975c:	2400      	movs	r4, #0
 800975e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009760:	4625      	mov	r5, r4
 8009762:	9b07      	ldr	r3, [sp, #28]
 8009764:	9805      	ldr	r0, [sp, #20]
 8009766:	6859      	ldr	r1, [r3, #4]
 8009768:	f001 f8fc 	bl	800a964 <_Balloc>
 800976c:	4606      	mov	r6, r0
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f aef6 	beq.w	8009560 <_strtod_l+0x420>
 8009774:	9b07      	ldr	r3, [sp, #28]
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	ec4b ab19 	vmov	d9, sl, fp
 800977c:	3202      	adds	r2, #2
 800977e:	f103 010c 	add.w	r1, r3, #12
 8009782:	0092      	lsls	r2, r2, #2
 8009784:	300c      	adds	r0, #12
 8009786:	f000 fc6c 	bl	800a062 <memcpy>
 800978a:	eeb0 0b49 	vmov.f64	d0, d9
 800978e:	9805      	ldr	r0, [sp, #20]
 8009790:	aa14      	add	r2, sp, #80	@ 0x50
 8009792:	a913      	add	r1, sp, #76	@ 0x4c
 8009794:	f001 fcca 	bl	800b12c <__d2b>
 8009798:	9012      	str	r0, [sp, #72]	@ 0x48
 800979a:	2800      	cmp	r0, #0
 800979c:	f43f aee0 	beq.w	8009560 <_strtod_l+0x420>
 80097a0:	9805      	ldr	r0, [sp, #20]
 80097a2:	2101      	movs	r1, #1
 80097a4:	f001 fa1c 	bl	800abe0 <__i2b>
 80097a8:	4605      	mov	r5, r0
 80097aa:	b940      	cbnz	r0, 80097be <_strtod_l+0x67e>
 80097ac:	2500      	movs	r5, #0
 80097ae:	e6d7      	b.n	8009560 <_strtod_l+0x420>
 80097b0:	f04f 31ff 	mov.w	r1, #4294967295
 80097b4:	fa01 f202 	lsl.w	r2, r1, r2
 80097b8:	ea02 0a0a 	and.w	sl, r2, sl
 80097bc:	e7b0      	b.n	8009720 <_strtod_l+0x5e0>
 80097be:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80097c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80097c2:	2f00      	cmp	r7, #0
 80097c4:	bfab      	itete	ge
 80097c6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80097c8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80097ca:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80097ce:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80097d2:	bfac      	ite	ge
 80097d4:	eb07 0903 	addge.w	r9, r7, r3
 80097d8:	eba3 0807 	sublt.w	r8, r3, r7
 80097dc:	9b06      	ldr	r3, [sp, #24]
 80097de:	1aff      	subs	r7, r7, r3
 80097e0:	4417      	add	r7, r2
 80097e2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80097e6:	4a6b      	ldr	r2, [pc, #428]	@ (8009994 <_strtod_l+0x854>)
 80097e8:	3f01      	subs	r7, #1
 80097ea:	4297      	cmp	r7, r2
 80097ec:	da51      	bge.n	8009892 <_strtod_l+0x752>
 80097ee:	1bd1      	subs	r1, r2, r7
 80097f0:	291f      	cmp	r1, #31
 80097f2:	eba3 0301 	sub.w	r3, r3, r1
 80097f6:	f04f 0201 	mov.w	r2, #1
 80097fa:	dc3e      	bgt.n	800987a <_strtod_l+0x73a>
 80097fc:	408a      	lsls	r2, r1
 80097fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009800:	2200      	movs	r2, #0
 8009802:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009804:	eb09 0703 	add.w	r7, r9, r3
 8009808:	4498      	add	r8, r3
 800980a:	9b06      	ldr	r3, [sp, #24]
 800980c:	45b9      	cmp	r9, r7
 800980e:	4498      	add	r8, r3
 8009810:	464b      	mov	r3, r9
 8009812:	bfa8      	it	ge
 8009814:	463b      	movge	r3, r7
 8009816:	4543      	cmp	r3, r8
 8009818:	bfa8      	it	ge
 800981a:	4643      	movge	r3, r8
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfc2      	ittt	gt
 8009820:	1aff      	subgt	r7, r7, r3
 8009822:	eba8 0803 	subgt.w	r8, r8, r3
 8009826:	eba9 0903 	subgt.w	r9, r9, r3
 800982a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800982c:	2b00      	cmp	r3, #0
 800982e:	dd16      	ble.n	800985e <_strtod_l+0x71e>
 8009830:	4629      	mov	r1, r5
 8009832:	9805      	ldr	r0, [sp, #20]
 8009834:	461a      	mov	r2, r3
 8009836:	f001 fa93 	bl	800ad60 <__pow5mult>
 800983a:	4605      	mov	r5, r0
 800983c:	2800      	cmp	r0, #0
 800983e:	d0b5      	beq.n	80097ac <_strtod_l+0x66c>
 8009840:	4601      	mov	r1, r0
 8009842:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	f001 f9e1 	bl	800ac0c <__multiply>
 800984a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800984c:	2800      	cmp	r0, #0
 800984e:	f43f ae87 	beq.w	8009560 <_strtod_l+0x420>
 8009852:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009854:	9805      	ldr	r0, [sp, #20]
 8009856:	f001 f8c5 	bl	800a9e4 <_Bfree>
 800985a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800985c:	9312      	str	r3, [sp, #72]	@ 0x48
 800985e:	2f00      	cmp	r7, #0
 8009860:	dc1b      	bgt.n	800989a <_strtod_l+0x75a>
 8009862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	dd21      	ble.n	80098ac <_strtod_l+0x76c>
 8009868:	4631      	mov	r1, r6
 800986a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800986c:	9805      	ldr	r0, [sp, #20]
 800986e:	f001 fa77 	bl	800ad60 <__pow5mult>
 8009872:	4606      	mov	r6, r0
 8009874:	b9d0      	cbnz	r0, 80098ac <_strtod_l+0x76c>
 8009876:	2600      	movs	r6, #0
 8009878:	e672      	b.n	8009560 <_strtod_l+0x420>
 800987a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800987e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009882:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8009886:	37e2      	adds	r7, #226	@ 0xe2
 8009888:	fa02 f107 	lsl.w	r1, r2, r7
 800988c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800988e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009890:	e7b8      	b.n	8009804 <_strtod_l+0x6c4>
 8009892:	2200      	movs	r2, #0
 8009894:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009896:	2201      	movs	r2, #1
 8009898:	e7f9      	b.n	800988e <_strtod_l+0x74e>
 800989a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800989c:	9805      	ldr	r0, [sp, #20]
 800989e:	463a      	mov	r2, r7
 80098a0:	f001 fab8 	bl	800ae14 <__lshift>
 80098a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d1db      	bne.n	8009862 <_strtod_l+0x722>
 80098aa:	e659      	b.n	8009560 <_strtod_l+0x420>
 80098ac:	f1b8 0f00 	cmp.w	r8, #0
 80098b0:	dd07      	ble.n	80098c2 <_strtod_l+0x782>
 80098b2:	4631      	mov	r1, r6
 80098b4:	9805      	ldr	r0, [sp, #20]
 80098b6:	4642      	mov	r2, r8
 80098b8:	f001 faac 	bl	800ae14 <__lshift>
 80098bc:	4606      	mov	r6, r0
 80098be:	2800      	cmp	r0, #0
 80098c0:	d0d9      	beq.n	8009876 <_strtod_l+0x736>
 80098c2:	f1b9 0f00 	cmp.w	r9, #0
 80098c6:	dd08      	ble.n	80098da <_strtod_l+0x79a>
 80098c8:	4629      	mov	r1, r5
 80098ca:	9805      	ldr	r0, [sp, #20]
 80098cc:	464a      	mov	r2, r9
 80098ce:	f001 faa1 	bl	800ae14 <__lshift>
 80098d2:	4605      	mov	r5, r0
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f43f ae43 	beq.w	8009560 <_strtod_l+0x420>
 80098da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80098dc:	9805      	ldr	r0, [sp, #20]
 80098de:	4632      	mov	r2, r6
 80098e0:	f001 fb20 	bl	800af24 <__mdiff>
 80098e4:	4604      	mov	r4, r0
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f43f ae3a 	beq.w	8009560 <_strtod_l+0x420>
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80098f2:	60c3      	str	r3, [r0, #12]
 80098f4:	4629      	mov	r1, r5
 80098f6:	f001 faf9 	bl	800aeec <__mcmp>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	da4e      	bge.n	800999c <_strtod_l+0x85c>
 80098fe:	ea58 080a 	orrs.w	r8, r8, sl
 8009902:	d174      	bne.n	80099ee <_strtod_l+0x8ae>
 8009904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009908:	2b00      	cmp	r3, #0
 800990a:	d170      	bne.n	80099ee <_strtod_l+0x8ae>
 800990c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009910:	0d1b      	lsrs	r3, r3, #20
 8009912:	051b      	lsls	r3, r3, #20
 8009914:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009918:	d969      	bls.n	80099ee <_strtod_l+0x8ae>
 800991a:	6963      	ldr	r3, [r4, #20]
 800991c:	b913      	cbnz	r3, 8009924 <_strtod_l+0x7e4>
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	2b01      	cmp	r3, #1
 8009922:	dd64      	ble.n	80099ee <_strtod_l+0x8ae>
 8009924:	4621      	mov	r1, r4
 8009926:	2201      	movs	r2, #1
 8009928:	9805      	ldr	r0, [sp, #20]
 800992a:	f001 fa73 	bl	800ae14 <__lshift>
 800992e:	4629      	mov	r1, r5
 8009930:	4604      	mov	r4, r0
 8009932:	f001 fadb 	bl	800aeec <__mcmp>
 8009936:	2800      	cmp	r0, #0
 8009938:	dd59      	ble.n	80099ee <_strtod_l+0x8ae>
 800993a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800993e:	9a06      	ldr	r2, [sp, #24]
 8009940:	0d1b      	lsrs	r3, r3, #20
 8009942:	051b      	lsls	r3, r3, #20
 8009944:	2a00      	cmp	r2, #0
 8009946:	d070      	beq.n	8009a2a <_strtod_l+0x8ea>
 8009948:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800994c:	d86d      	bhi.n	8009a2a <_strtod_l+0x8ea>
 800994e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009952:	f67f ae99 	bls.w	8009688 <_strtod_l+0x548>
 8009956:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009988 <_strtod_l+0x848>
 800995a:	ec4b ab16 	vmov	d6, sl, fp
 800995e:	4b0e      	ldr	r3, [pc, #56]	@ (8009998 <_strtod_l+0x858>)
 8009960:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009964:	ee17 2a90 	vmov	r2, s15
 8009968:	4013      	ands	r3, r2
 800996a:	ec5b ab17 	vmov	sl, fp, d7
 800996e:	2b00      	cmp	r3, #0
 8009970:	f47f ae01 	bne.w	8009576 <_strtod_l+0x436>
 8009974:	9a05      	ldr	r2, [sp, #20]
 8009976:	2322      	movs	r3, #34	@ 0x22
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e5fc      	b.n	8009576 <_strtod_l+0x436>
 800997c:	f3af 8000 	nop.w
 8009980:	ffc00000 	.word	0xffc00000
 8009984:	41dfffff 	.word	0x41dfffff
 8009988:	00000000 	.word	0x00000000
 800998c:	39500000 	.word	0x39500000
 8009990:	0800bda0 	.word	0x0800bda0
 8009994:	fffffc02 	.word	0xfffffc02
 8009998:	7ff00000 	.word	0x7ff00000
 800999c:	46d9      	mov	r9, fp
 800999e:	d15d      	bne.n	8009a5c <_strtod_l+0x91c>
 80099a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099a4:	f1b8 0f00 	cmp.w	r8, #0
 80099a8:	d02a      	beq.n	8009a00 <_strtod_l+0x8c0>
 80099aa:	4aab      	ldr	r2, [pc, #684]	@ (8009c58 <_strtod_l+0xb18>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d12a      	bne.n	8009a06 <_strtod_l+0x8c6>
 80099b0:	9b06      	ldr	r3, [sp, #24]
 80099b2:	4652      	mov	r2, sl
 80099b4:	b1fb      	cbz	r3, 80099f6 <_strtod_l+0x8b6>
 80099b6:	4ba9      	ldr	r3, [pc, #676]	@ (8009c5c <_strtod_l+0xb1c>)
 80099b8:	ea0b 0303 	and.w	r3, fp, r3
 80099bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099c0:	f04f 31ff 	mov.w	r1, #4294967295
 80099c4:	d81a      	bhi.n	80099fc <_strtod_l+0x8bc>
 80099c6:	0d1b      	lsrs	r3, r3, #20
 80099c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099cc:	fa01 f303 	lsl.w	r3, r1, r3
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d118      	bne.n	8009a06 <_strtod_l+0x8c6>
 80099d4:	4ba2      	ldr	r3, [pc, #648]	@ (8009c60 <_strtod_l+0xb20>)
 80099d6:	4599      	cmp	r9, r3
 80099d8:	d102      	bne.n	80099e0 <_strtod_l+0x8a0>
 80099da:	3201      	adds	r2, #1
 80099dc:	f43f adc0 	beq.w	8009560 <_strtod_l+0x420>
 80099e0:	4b9e      	ldr	r3, [pc, #632]	@ (8009c5c <_strtod_l+0xb1c>)
 80099e2:	ea09 0303 	and.w	r3, r9, r3
 80099e6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80099ea:	f04f 0a00 	mov.w	sl, #0
 80099ee:	9b06      	ldr	r3, [sp, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1b0      	bne.n	8009956 <_strtod_l+0x816>
 80099f4:	e5bf      	b.n	8009576 <_strtod_l+0x436>
 80099f6:	f04f 33ff 	mov.w	r3, #4294967295
 80099fa:	e7e9      	b.n	80099d0 <_strtod_l+0x890>
 80099fc:	460b      	mov	r3, r1
 80099fe:	e7e7      	b.n	80099d0 <_strtod_l+0x890>
 8009a00:	ea53 030a 	orrs.w	r3, r3, sl
 8009a04:	d099      	beq.n	800993a <_strtod_l+0x7fa>
 8009a06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a08:	b1c3      	cbz	r3, 8009a3c <_strtod_l+0x8fc>
 8009a0a:	ea13 0f09 	tst.w	r3, r9
 8009a0e:	d0ee      	beq.n	80099ee <_strtod_l+0x8ae>
 8009a10:	9a06      	ldr	r2, [sp, #24]
 8009a12:	4650      	mov	r0, sl
 8009a14:	4659      	mov	r1, fp
 8009a16:	f1b8 0f00 	cmp.w	r8, #0
 8009a1a:	d013      	beq.n	8009a44 <_strtod_l+0x904>
 8009a1c:	f7ff fb75 	bl	800910a <sulp>
 8009a20:	ee39 7b00 	vadd.f64	d7, d9, d0
 8009a24:	ec5b ab17 	vmov	sl, fp, d7
 8009a28:	e7e1      	b.n	80099ee <_strtod_l+0x8ae>
 8009a2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a36:	f04f 3aff 	mov.w	sl, #4294967295
 8009a3a:	e7d8      	b.n	80099ee <_strtod_l+0x8ae>
 8009a3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a3e:	ea13 0f0a 	tst.w	r3, sl
 8009a42:	e7e4      	b.n	8009a0e <_strtod_l+0x8ce>
 8009a44:	f7ff fb61 	bl	800910a <sulp>
 8009a48:	ee39 0b40 	vsub.f64	d0, d9, d0
 8009a4c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a54:	ec5b ab10 	vmov	sl, fp, d0
 8009a58:	d1c9      	bne.n	80099ee <_strtod_l+0x8ae>
 8009a5a:	e615      	b.n	8009688 <_strtod_l+0x548>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f001 fbbc 	bl	800b1dc <__ratio>
 8009a64:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8009a68:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a70:	d85d      	bhi.n	8009b2e <_strtod_l+0x9ee>
 8009a72:	f1b8 0f00 	cmp.w	r8, #0
 8009a76:	d164      	bne.n	8009b42 <_strtod_l+0xa02>
 8009a78:	f1ba 0f00 	cmp.w	sl, #0
 8009a7c:	d14b      	bne.n	8009b16 <_strtod_l+0x9d6>
 8009a7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a82:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d160      	bne.n	8009b4c <_strtod_l+0xa0c>
 8009a8a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8009a8e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	d401      	bmi.n	8009a9c <_strtod_l+0x95c>
 8009a98:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009a9c:	eeb1 ab48 	vneg.f64	d10, d8
 8009aa0:	486e      	ldr	r0, [pc, #440]	@ (8009c5c <_strtod_l+0xb1c>)
 8009aa2:	4970      	ldr	r1, [pc, #448]	@ (8009c64 <_strtod_l+0xb24>)
 8009aa4:	ea09 0700 	and.w	r7, r9, r0
 8009aa8:	428f      	cmp	r7, r1
 8009aaa:	ec53 2b1a 	vmov	r2, r3, d10
 8009aae:	d17d      	bne.n	8009bac <_strtod_l+0xa6c>
 8009ab0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009ab4:	ec4b ab1c 	vmov	d12, sl, fp
 8009ab8:	eeb0 0b4c 	vmov.f64	d0, d12
 8009abc:	f001 fac6 	bl	800b04c <__ulp>
 8009ac0:	4866      	ldr	r0, [pc, #408]	@ (8009c5c <_strtod_l+0xb1c>)
 8009ac2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009ac6:	ee1c 3a90 	vmov	r3, s25
 8009aca:	4a67      	ldr	r2, [pc, #412]	@ (8009c68 <_strtod_l+0xb28>)
 8009acc:	ea03 0100 	and.w	r1, r3, r0
 8009ad0:	4291      	cmp	r1, r2
 8009ad2:	ec5b ab1c 	vmov	sl, fp, d12
 8009ad6:	d93c      	bls.n	8009b52 <_strtod_l+0xa12>
 8009ad8:	ee19 2a90 	vmov	r2, s19
 8009adc:	4b60      	ldr	r3, [pc, #384]	@ (8009c60 <_strtod_l+0xb20>)
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d104      	bne.n	8009aec <_strtod_l+0x9ac>
 8009ae2:	ee19 3a10 	vmov	r3, s18
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	f43f ad3a 	beq.w	8009560 <_strtod_l+0x420>
 8009aec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8009c60 <_strtod_l+0xb20>
 8009af0:	f04f 3aff 	mov.w	sl, #4294967295
 8009af4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009af6:	9805      	ldr	r0, [sp, #20]
 8009af8:	f000 ff74 	bl	800a9e4 <_Bfree>
 8009afc:	9805      	ldr	r0, [sp, #20]
 8009afe:	4631      	mov	r1, r6
 8009b00:	f000 ff70 	bl	800a9e4 <_Bfree>
 8009b04:	9805      	ldr	r0, [sp, #20]
 8009b06:	4629      	mov	r1, r5
 8009b08:	f000 ff6c 	bl	800a9e4 <_Bfree>
 8009b0c:	9805      	ldr	r0, [sp, #20]
 8009b0e:	4621      	mov	r1, r4
 8009b10:	f000 ff68 	bl	800a9e4 <_Bfree>
 8009b14:	e625      	b.n	8009762 <_strtod_l+0x622>
 8009b16:	f1ba 0f01 	cmp.w	sl, #1
 8009b1a:	d103      	bne.n	8009b24 <_strtod_l+0x9e4>
 8009b1c:	f1bb 0f00 	cmp.w	fp, #0
 8009b20:	f43f adb2 	beq.w	8009688 <_strtod_l+0x548>
 8009b24:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009b28:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009b2c:	e7b8      	b.n	8009aa0 <_strtod_l+0x960>
 8009b2e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009b32:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009b36:	f1b8 0f00 	cmp.w	r8, #0
 8009b3a:	d0af      	beq.n	8009a9c <_strtod_l+0x95c>
 8009b3c:	eeb0 ab48 	vmov.f64	d10, d8
 8009b40:	e7ae      	b.n	8009aa0 <_strtod_l+0x960>
 8009b42:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8009b46:	eeb0 8b4a 	vmov.f64	d8, d10
 8009b4a:	e7a9      	b.n	8009aa0 <_strtod_l+0x960>
 8009b4c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009b50:	e7a6      	b.n	8009aa0 <_strtod_l+0x960>
 8009b52:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b56:	9b06      	ldr	r3, [sp, #24]
 8009b58:	46d9      	mov	r9, fp
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1ca      	bne.n	8009af4 <_strtod_l+0x9b4>
 8009b5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b62:	0d1b      	lsrs	r3, r3, #20
 8009b64:	051b      	lsls	r3, r3, #20
 8009b66:	429f      	cmp	r7, r3
 8009b68:	d1c4      	bne.n	8009af4 <_strtod_l+0x9b4>
 8009b6a:	ec51 0b18 	vmov	r0, r1, d8
 8009b6e:	f7f6 fdf3 	bl	8000758 <__aeabi_d2lz>
 8009b72:	f7f6 fdab 	bl	80006cc <__aeabi_l2d>
 8009b76:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8009b7a:	ec41 0b17 	vmov	d7, r0, r1
 8009b7e:	ea49 090a 	orr.w	r9, r9, sl
 8009b82:	ea59 0908 	orrs.w	r9, r9, r8
 8009b86:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009b8a:	d03c      	beq.n	8009c06 <_strtod_l+0xac6>
 8009b8c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8009c40 <_strtod_l+0xb00>
 8009b90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b98:	f53f aced 	bmi.w	8009576 <_strtod_l+0x436>
 8009b9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009c48 <_strtod_l+0xb08>
 8009ba0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba8:	dda4      	ble.n	8009af4 <_strtod_l+0x9b4>
 8009baa:	e4e4      	b.n	8009576 <_strtod_l+0x436>
 8009bac:	9906      	ldr	r1, [sp, #24]
 8009bae:	b1e1      	cbz	r1, 8009bea <_strtod_l+0xaaa>
 8009bb0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009bb4:	d819      	bhi.n	8009bea <_strtod_l+0xaaa>
 8009bb6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbe:	d811      	bhi.n	8009be4 <_strtod_l+0xaa4>
 8009bc0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009bc4:	ee18 3a10 	vmov	r3, s16
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	bf38      	it	cc
 8009bcc:	2301      	movcc	r3, #1
 8009bce:	ee08 3a10 	vmov	s16, r3
 8009bd2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009bd6:	f1b8 0f00 	cmp.w	r8, #0
 8009bda:	d111      	bne.n	8009c00 <_strtod_l+0xac0>
 8009bdc:	eeb1 7b48 	vneg.f64	d7, d8
 8009be0:	ec53 2b17 	vmov	r2, r3, d7
 8009be4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8009be8:	1bcb      	subs	r3, r1, r7
 8009bea:	eeb0 0b49 	vmov.f64	d0, d9
 8009bee:	ec43 2b1a 	vmov	d10, r2, r3
 8009bf2:	f001 fa2b 	bl	800b04c <__ulp>
 8009bf6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8009bfa:	ec5b ab19 	vmov	sl, fp, d9
 8009bfe:	e7aa      	b.n	8009b56 <_strtod_l+0xa16>
 8009c00:	eeb0 7b48 	vmov.f64	d7, d8
 8009c04:	e7ec      	b.n	8009be0 <_strtod_l+0xaa0>
 8009c06:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8009c50 <_strtod_l+0xb10>
 8009c0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c12:	f57f af6f 	bpl.w	8009af4 <_strtod_l+0x9b4>
 8009c16:	e4ae      	b.n	8009576 <_strtod_l+0x436>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9308      	str	r3, [sp, #32]
 8009c1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	f7ff bacc 	b.w	80091be <_strtod_l+0x7e>
 8009c26:	2a65      	cmp	r2, #101	@ 0x65
 8009c28:	f43f abbc 	beq.w	80093a4 <_strtod_l+0x264>
 8009c2c:	2a45      	cmp	r2, #69	@ 0x45
 8009c2e:	f43f abb9 	beq.w	80093a4 <_strtod_l+0x264>
 8009c32:	2301      	movs	r3, #1
 8009c34:	9306      	str	r3, [sp, #24]
 8009c36:	f7ff bbf0 	b.w	800941a <_strtod_l+0x2da>
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w
 8009c40:	94a03595 	.word	0x94a03595
 8009c44:	3fdfffff 	.word	0x3fdfffff
 8009c48:	35afe535 	.word	0x35afe535
 8009c4c:	3fe00000 	.word	0x3fe00000
 8009c50:	94a03595 	.word	0x94a03595
 8009c54:	3fcfffff 	.word	0x3fcfffff
 8009c58:	000fffff 	.word	0x000fffff
 8009c5c:	7ff00000 	.word	0x7ff00000
 8009c60:	7fefffff 	.word	0x7fefffff
 8009c64:	7fe00000 	.word	0x7fe00000
 8009c68:	7c9fffff 	.word	0x7c9fffff

08009c6c <strtod>:
 8009c6c:	460a      	mov	r2, r1
 8009c6e:	4601      	mov	r1, r0
 8009c70:	4802      	ldr	r0, [pc, #8]	@ (8009c7c <strtod+0x10>)
 8009c72:	4b03      	ldr	r3, [pc, #12]	@ (8009c80 <strtod+0x14>)
 8009c74:	6800      	ldr	r0, [r0, #0]
 8009c76:	f7ff ba63 	b.w	8009140 <_strtod_l>
 8009c7a:	bf00      	nop
 8009c7c:	24000188 	.word	0x24000188
 8009c80:	2400001c 	.word	0x2400001c

08009c84 <std>:
 8009c84:	2300      	movs	r3, #0
 8009c86:	b510      	push	{r4, lr}
 8009c88:	4604      	mov	r4, r0
 8009c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c92:	6083      	str	r3, [r0, #8]
 8009c94:	8181      	strh	r1, [r0, #12]
 8009c96:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c98:	81c2      	strh	r2, [r0, #14]
 8009c9a:	6183      	str	r3, [r0, #24]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	2208      	movs	r2, #8
 8009ca0:	305c      	adds	r0, #92	@ 0x5c
 8009ca2:	f000 f8f4 	bl	8009e8e <memset>
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <std+0x58>)
 8009ca8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009caa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce0 <std+0x5c>)
 8009cac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cae:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce4 <std+0x60>)
 8009cb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce8 <std+0x64>)
 8009cb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cec <std+0x68>)
 8009cb8:	6224      	str	r4, [r4, #32]
 8009cba:	429c      	cmp	r4, r3
 8009cbc:	d006      	beq.n	8009ccc <std+0x48>
 8009cbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cc2:	4294      	cmp	r4, r2
 8009cc4:	d002      	beq.n	8009ccc <std+0x48>
 8009cc6:	33d0      	adds	r3, #208	@ 0xd0
 8009cc8:	429c      	cmp	r4, r3
 8009cca:	d105      	bne.n	8009cd8 <std+0x54>
 8009ccc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd4:	f000 b9c2 	b.w	800a05c <__retarget_lock_init_recursive>
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	bf00      	nop
 8009cdc:	08009e09 	.word	0x08009e09
 8009ce0:	08009e2b 	.word	0x08009e2b
 8009ce4:	08009e63 	.word	0x08009e63
 8009ce8:	08009e87 	.word	0x08009e87
 8009cec:	240003b0 	.word	0x240003b0

08009cf0 <stdio_exit_handler>:
 8009cf0:	4a02      	ldr	r2, [pc, #8]	@ (8009cfc <stdio_exit_handler+0xc>)
 8009cf2:	4903      	ldr	r1, [pc, #12]	@ (8009d00 <stdio_exit_handler+0x10>)
 8009cf4:	4803      	ldr	r0, [pc, #12]	@ (8009d04 <stdio_exit_handler+0x14>)
 8009cf6:	f000 b869 	b.w	8009dcc <_fwalk_sglue>
 8009cfa:	bf00      	nop
 8009cfc:	24000010 	.word	0x24000010
 8009d00:	0800b3e5 	.word	0x0800b3e5
 8009d04:	2400018c 	.word	0x2400018c

08009d08 <cleanup_stdio>:
 8009d08:	6841      	ldr	r1, [r0, #4]
 8009d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d3c <cleanup_stdio+0x34>)
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	d001      	beq.n	8009d18 <cleanup_stdio+0x10>
 8009d14:	f001 fb66 	bl	800b3e4 <_fflush_r>
 8009d18:	68a1      	ldr	r1, [r4, #8]
 8009d1a:	4b09      	ldr	r3, [pc, #36]	@ (8009d40 <cleanup_stdio+0x38>)
 8009d1c:	4299      	cmp	r1, r3
 8009d1e:	d002      	beq.n	8009d26 <cleanup_stdio+0x1e>
 8009d20:	4620      	mov	r0, r4
 8009d22:	f001 fb5f 	bl	800b3e4 <_fflush_r>
 8009d26:	68e1      	ldr	r1, [r4, #12]
 8009d28:	4b06      	ldr	r3, [pc, #24]	@ (8009d44 <cleanup_stdio+0x3c>)
 8009d2a:	4299      	cmp	r1, r3
 8009d2c:	d004      	beq.n	8009d38 <cleanup_stdio+0x30>
 8009d2e:	4620      	mov	r0, r4
 8009d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d34:	f001 bb56 	b.w	800b3e4 <_fflush_r>
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	bf00      	nop
 8009d3c:	240003b0 	.word	0x240003b0
 8009d40:	24000418 	.word	0x24000418
 8009d44:	24000480 	.word	0x24000480

08009d48 <global_stdio_init.part.0>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d78 <global_stdio_init.part.0+0x30>)
 8009d4c:	4c0b      	ldr	r4, [pc, #44]	@ (8009d7c <global_stdio_init.part.0+0x34>)
 8009d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8009d80 <global_stdio_init.part.0+0x38>)
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	4620      	mov	r0, r4
 8009d54:	2200      	movs	r2, #0
 8009d56:	2104      	movs	r1, #4
 8009d58:	f7ff ff94 	bl	8009c84 <std>
 8009d5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d60:	2201      	movs	r2, #1
 8009d62:	2109      	movs	r1, #9
 8009d64:	f7ff ff8e 	bl	8009c84 <std>
 8009d68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d72:	2112      	movs	r1, #18
 8009d74:	f7ff bf86 	b.w	8009c84 <std>
 8009d78:	240004e8 	.word	0x240004e8
 8009d7c:	240003b0 	.word	0x240003b0
 8009d80:	08009cf1 	.word	0x08009cf1

08009d84 <__sfp_lock_acquire>:
 8009d84:	4801      	ldr	r0, [pc, #4]	@ (8009d8c <__sfp_lock_acquire+0x8>)
 8009d86:	f000 b96a 	b.w	800a05e <__retarget_lock_acquire_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	240004f1 	.word	0x240004f1

08009d90 <__sfp_lock_release>:
 8009d90:	4801      	ldr	r0, [pc, #4]	@ (8009d98 <__sfp_lock_release+0x8>)
 8009d92:	f000 b965 	b.w	800a060 <__retarget_lock_release_recursive>
 8009d96:	bf00      	nop
 8009d98:	240004f1 	.word	0x240004f1

08009d9c <__sinit>:
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	4604      	mov	r4, r0
 8009da0:	f7ff fff0 	bl	8009d84 <__sfp_lock_acquire>
 8009da4:	6a23      	ldr	r3, [r4, #32]
 8009da6:	b11b      	cbz	r3, 8009db0 <__sinit+0x14>
 8009da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dac:	f7ff bff0 	b.w	8009d90 <__sfp_lock_release>
 8009db0:	4b04      	ldr	r3, [pc, #16]	@ (8009dc4 <__sinit+0x28>)
 8009db2:	6223      	str	r3, [r4, #32]
 8009db4:	4b04      	ldr	r3, [pc, #16]	@ (8009dc8 <__sinit+0x2c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1f5      	bne.n	8009da8 <__sinit+0xc>
 8009dbc:	f7ff ffc4 	bl	8009d48 <global_stdio_init.part.0>
 8009dc0:	e7f2      	b.n	8009da8 <__sinit+0xc>
 8009dc2:	bf00      	nop
 8009dc4:	08009d09 	.word	0x08009d09
 8009dc8:	240004e8 	.word	0x240004e8

08009dcc <_fwalk_sglue>:
 8009dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	4688      	mov	r8, r1
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	2600      	movs	r6, #0
 8009dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8009de0:	d505      	bpl.n	8009dee <_fwalk_sglue+0x22>
 8009de2:	6824      	ldr	r4, [r4, #0]
 8009de4:	2c00      	cmp	r4, #0
 8009de6:	d1f7      	bne.n	8009dd8 <_fwalk_sglue+0xc>
 8009de8:	4630      	mov	r0, r6
 8009dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d907      	bls.n	8009e04 <_fwalk_sglue+0x38>
 8009df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	d003      	beq.n	8009e04 <_fwalk_sglue+0x38>
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	4638      	mov	r0, r7
 8009e00:	47c0      	blx	r8
 8009e02:	4306      	orrs	r6, r0
 8009e04:	3568      	adds	r5, #104	@ 0x68
 8009e06:	e7e9      	b.n	8009ddc <_fwalk_sglue+0x10>

08009e08 <__sread>:
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e10:	f000 f8d6 	bl	8009fc0 <_read_r>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	bfab      	itete	ge
 8009e18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e1c:	181b      	addge	r3, r3, r0
 8009e1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e22:	bfac      	ite	ge
 8009e24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e26:	81a3      	strhlt	r3, [r4, #12]
 8009e28:	bd10      	pop	{r4, pc}

08009e2a <__swrite>:
 8009e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	461f      	mov	r7, r3
 8009e30:	898b      	ldrh	r3, [r1, #12]
 8009e32:	05db      	lsls	r3, r3, #23
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	4616      	mov	r6, r2
 8009e3a:	d505      	bpl.n	8009e48 <__swrite+0x1e>
 8009e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e40:	2302      	movs	r3, #2
 8009e42:	2200      	movs	r2, #0
 8009e44:	f000 f8aa 	bl	8009f9c <_lseek_r>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e52:	81a3      	strh	r3, [r4, #12]
 8009e54:	4632      	mov	r2, r6
 8009e56:	463b      	mov	r3, r7
 8009e58:	4628      	mov	r0, r5
 8009e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	f000 b8c1 	b.w	8009fe4 <_write_r>

08009e62 <__sseek>:
 8009e62:	b510      	push	{r4, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6a:	f000 f897 	bl	8009f9c <_lseek_r>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	bf15      	itete	ne
 8009e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e7e:	81a3      	strheq	r3, [r4, #12]
 8009e80:	bf18      	it	ne
 8009e82:	81a3      	strhne	r3, [r4, #12]
 8009e84:	bd10      	pop	{r4, pc}

08009e86 <__sclose>:
 8009e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8a:	f000 b877 	b.w	8009f7c <_close_r>

08009e8e <memset>:
 8009e8e:	4402      	add	r2, r0
 8009e90:	4603      	mov	r3, r0
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d100      	bne.n	8009e98 <memset+0xa>
 8009e96:	4770      	bx	lr
 8009e98:	f803 1b01 	strb.w	r1, [r3], #1
 8009e9c:	e7f9      	b.n	8009e92 <memset+0x4>

08009e9e <strncmp>:
 8009e9e:	b510      	push	{r4, lr}
 8009ea0:	b16a      	cbz	r2, 8009ebe <strncmp+0x20>
 8009ea2:	3901      	subs	r1, #1
 8009ea4:	1884      	adds	r4, r0, r2
 8009ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eaa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d103      	bne.n	8009eba <strncmp+0x1c>
 8009eb2:	42a0      	cmp	r0, r4
 8009eb4:	d001      	beq.n	8009eba <strncmp+0x1c>
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	d1f5      	bne.n	8009ea6 <strncmp+0x8>
 8009eba:	1ad0      	subs	r0, r2, r3
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	e7fc      	b.n	8009ebc <strncmp+0x1e>
	...

08009ec4 <strtok>:
 8009ec4:	4b16      	ldr	r3, [pc, #88]	@ (8009f20 <strtok+0x5c>)
 8009ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eca:	681f      	ldr	r7, [r3, #0]
 8009ecc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009ece:	4605      	mov	r5, r0
 8009ed0:	460e      	mov	r6, r1
 8009ed2:	b9ec      	cbnz	r4, 8009f10 <strtok+0x4c>
 8009ed4:	2050      	movs	r0, #80	@ 0x50
 8009ed6:	f000 fc7d 	bl	800a7d4 <malloc>
 8009eda:	4602      	mov	r2, r0
 8009edc:	6478      	str	r0, [r7, #68]	@ 0x44
 8009ede:	b920      	cbnz	r0, 8009eea <strtok+0x26>
 8009ee0:	4b10      	ldr	r3, [pc, #64]	@ (8009f24 <strtok+0x60>)
 8009ee2:	4811      	ldr	r0, [pc, #68]	@ (8009f28 <strtok+0x64>)
 8009ee4:	215b      	movs	r1, #91	@ 0x5b
 8009ee6:	f000 f8d3 	bl	800a090 <__assert_func>
 8009eea:	e9c0 4400 	strd	r4, r4, [r0]
 8009eee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009ef2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009ef6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009efa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009efe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009f02:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009f06:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009f0a:	6184      	str	r4, [r0, #24]
 8009f0c:	7704      	strb	r4, [r0, #28]
 8009f0e:	6244      	str	r4, [r0, #36]	@ 0x24
 8009f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	2301      	movs	r3, #1
 8009f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1c:	f000 b806 	b.w	8009f2c <__strtok_r>
 8009f20:	24000188 	.word	0x24000188
 8009f24:	0800bdc8 	.word	0x0800bdc8
 8009f28:	0800bddf 	.word	0x0800bddf

08009f2c <__strtok_r>:
 8009f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b908      	cbnz	r0, 8009f36 <__strtok_r+0xa>
 8009f32:	6814      	ldr	r4, [r2, #0]
 8009f34:	b144      	cbz	r4, 8009f48 <__strtok_r+0x1c>
 8009f36:	4620      	mov	r0, r4
 8009f38:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009f3c:	460f      	mov	r7, r1
 8009f3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009f42:	b91e      	cbnz	r6, 8009f4c <__strtok_r+0x20>
 8009f44:	b965      	cbnz	r5, 8009f60 <__strtok_r+0x34>
 8009f46:	6015      	str	r5, [r2, #0]
 8009f48:	2000      	movs	r0, #0
 8009f4a:	e005      	b.n	8009f58 <__strtok_r+0x2c>
 8009f4c:	42b5      	cmp	r5, r6
 8009f4e:	d1f6      	bne.n	8009f3e <__strtok_r+0x12>
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1f0      	bne.n	8009f36 <__strtok_r+0xa>
 8009f54:	6014      	str	r4, [r2, #0]
 8009f56:	7003      	strb	r3, [r0, #0]
 8009f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f5a:	461c      	mov	r4, r3
 8009f5c:	e00c      	b.n	8009f78 <__strtok_r+0x4c>
 8009f5e:	b915      	cbnz	r5, 8009f66 <__strtok_r+0x3a>
 8009f60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f64:	460e      	mov	r6, r1
 8009f66:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009f6a:	42ab      	cmp	r3, r5
 8009f6c:	d1f7      	bne.n	8009f5e <__strtok_r+0x32>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0f3      	beq.n	8009f5a <__strtok_r+0x2e>
 8009f72:	2300      	movs	r3, #0
 8009f74:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009f78:	6014      	str	r4, [r2, #0]
 8009f7a:	e7ed      	b.n	8009f58 <__strtok_r+0x2c>

08009f7c <_close_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	@ (8009f98 <_close_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f7 f882 	bl	8001090 <_close>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_close_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_close_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	240004ec 	.word	0x240004ec

08009f9c <_lseek_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	@ (8009fbc <_lseek_r+0x20>)
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	602a      	str	r2, [r5, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f7f7 f897 	bl	80010de <_lseek>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_lseek_r+0x1e>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_lseek_r+0x1e>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	240004ec 	.word	0x240004ec

08009fc0 <_read_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d07      	ldr	r5, [pc, #28]	@ (8009fe0 <_read_r+0x20>)
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	4611      	mov	r1, r2
 8009fca:	2200      	movs	r2, #0
 8009fcc:	602a      	str	r2, [r5, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f7f7 f825 	bl	800101e <_read>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_read_r+0x1e>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_read_r+0x1e>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	240004ec 	.word	0x240004ec

08009fe4 <_write_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d07      	ldr	r5, [pc, #28]	@ (800a004 <_write_r+0x20>)
 8009fe8:	4604      	mov	r4, r0
 8009fea:	4608      	mov	r0, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	602a      	str	r2, [r5, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f7f7 f830 	bl	8001058 <_write>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_write_r+0x1e>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_write_r+0x1e>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	240004ec 	.word	0x240004ec

0800a008 <__errno>:
 800a008:	4b01      	ldr	r3, [pc, #4]	@ (800a010 <__errno+0x8>)
 800a00a:	6818      	ldr	r0, [r3, #0]
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	24000188 	.word	0x24000188

0800a014 <__libc_init_array>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	4d0d      	ldr	r5, [pc, #52]	@ (800a04c <__libc_init_array+0x38>)
 800a018:	4c0d      	ldr	r4, [pc, #52]	@ (800a050 <__libc_init_array+0x3c>)
 800a01a:	1b64      	subs	r4, r4, r5
 800a01c:	10a4      	asrs	r4, r4, #2
 800a01e:	2600      	movs	r6, #0
 800a020:	42a6      	cmp	r6, r4
 800a022:	d109      	bne.n	800a038 <__libc_init_array+0x24>
 800a024:	4d0b      	ldr	r5, [pc, #44]	@ (800a054 <__libc_init_array+0x40>)
 800a026:	4c0c      	ldr	r4, [pc, #48]	@ (800a058 <__libc_init_array+0x44>)
 800a028:	f001 fe6c 	bl	800bd04 <_init>
 800a02c:	1b64      	subs	r4, r4, r5
 800a02e:	10a4      	asrs	r4, r4, #2
 800a030:	2600      	movs	r6, #0
 800a032:	42a6      	cmp	r6, r4
 800a034:	d105      	bne.n	800a042 <__libc_init_array+0x2e>
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03c:	4798      	blx	r3
 800a03e:	3601      	adds	r6, #1
 800a040:	e7ee      	b.n	800a020 <__libc_init_array+0xc>
 800a042:	f855 3b04 	ldr.w	r3, [r5], #4
 800a046:	4798      	blx	r3
 800a048:	3601      	adds	r6, #1
 800a04a:	e7f2      	b.n	800a032 <__libc_init_array+0x1e>
 800a04c:	0800c184 	.word	0x0800c184
 800a050:	0800c184 	.word	0x0800c184
 800a054:	0800c184 	.word	0x0800c184
 800a058:	0800c188 	.word	0x0800c188

0800a05c <__retarget_lock_init_recursive>:
 800a05c:	4770      	bx	lr

0800a05e <__retarget_lock_acquire_recursive>:
 800a05e:	4770      	bx	lr

0800a060 <__retarget_lock_release_recursive>:
 800a060:	4770      	bx	lr

0800a062 <memcpy>:
 800a062:	440a      	add	r2, r1
 800a064:	4291      	cmp	r1, r2
 800a066:	f100 33ff 	add.w	r3, r0, #4294967295
 800a06a:	d100      	bne.n	800a06e <memcpy+0xc>
 800a06c:	4770      	bx	lr
 800a06e:	b510      	push	{r4, lr}
 800a070:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a074:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a078:	4291      	cmp	r1, r2
 800a07a:	d1f9      	bne.n	800a070 <memcpy+0xe>
 800a07c:	bd10      	pop	{r4, pc}
	...

0800a080 <nan>:
 800a080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a088 <nan+0x8>
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	00000000 	.word	0x00000000
 800a08c:	7ff80000 	.word	0x7ff80000

0800a090 <__assert_func>:
 800a090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a092:	4614      	mov	r4, r2
 800a094:	461a      	mov	r2, r3
 800a096:	4b09      	ldr	r3, [pc, #36]	@ (800a0bc <__assert_func+0x2c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4605      	mov	r5, r0
 800a09c:	68d8      	ldr	r0, [r3, #12]
 800a09e:	b954      	cbnz	r4, 800a0b6 <__assert_func+0x26>
 800a0a0:	4b07      	ldr	r3, [pc, #28]	@ (800a0c0 <__assert_func+0x30>)
 800a0a2:	461c      	mov	r4, r3
 800a0a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0a8:	9100      	str	r1, [sp, #0]
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	4905      	ldr	r1, [pc, #20]	@ (800a0c4 <__assert_func+0x34>)
 800a0ae:	f001 f9c1 	bl	800b434 <fiprintf>
 800a0b2:	f001 f9e1 	bl	800b478 <abort>
 800a0b6:	4b04      	ldr	r3, [pc, #16]	@ (800a0c8 <__assert_func+0x38>)
 800a0b8:	e7f4      	b.n	800a0a4 <__assert_func+0x14>
 800a0ba:	bf00      	nop
 800a0bc:	24000188 	.word	0x24000188
 800a0c0:	0800be7c 	.word	0x0800be7c
 800a0c4:	0800be4e 	.word	0x0800be4e
 800a0c8:	0800be41 	.word	0x0800be41

0800a0cc <_free_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	d041      	beq.n	800a158 <_free_r+0x8c>
 800a0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d8:	1f0c      	subs	r4, r1, #4
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	bfb8      	it	lt
 800a0de:	18e4      	addlt	r4, r4, r3
 800a0e0:	f000 fc34 	bl	800a94c <__malloc_lock>
 800a0e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a15c <_free_r+0x90>)
 800a0e6:	6813      	ldr	r3, [r2, #0]
 800a0e8:	b933      	cbnz	r3, 800a0f8 <_free_r+0x2c>
 800a0ea:	6063      	str	r3, [r4, #4]
 800a0ec:	6014      	str	r4, [r2, #0]
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0f4:	f000 bc30 	b.w	800a958 <__malloc_unlock>
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	d908      	bls.n	800a10e <_free_r+0x42>
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	1821      	adds	r1, r4, r0
 800a100:	428b      	cmp	r3, r1
 800a102:	bf01      	itttt	eq
 800a104:	6819      	ldreq	r1, [r3, #0]
 800a106:	685b      	ldreq	r3, [r3, #4]
 800a108:	1809      	addeq	r1, r1, r0
 800a10a:	6021      	streq	r1, [r4, #0]
 800a10c:	e7ed      	b.n	800a0ea <_free_r+0x1e>
 800a10e:	461a      	mov	r2, r3
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	b10b      	cbz	r3, 800a118 <_free_r+0x4c>
 800a114:	42a3      	cmp	r3, r4
 800a116:	d9fa      	bls.n	800a10e <_free_r+0x42>
 800a118:	6811      	ldr	r1, [r2, #0]
 800a11a:	1850      	adds	r0, r2, r1
 800a11c:	42a0      	cmp	r0, r4
 800a11e:	d10b      	bne.n	800a138 <_free_r+0x6c>
 800a120:	6820      	ldr	r0, [r4, #0]
 800a122:	4401      	add	r1, r0
 800a124:	1850      	adds	r0, r2, r1
 800a126:	4283      	cmp	r3, r0
 800a128:	6011      	str	r1, [r2, #0]
 800a12a:	d1e0      	bne.n	800a0ee <_free_r+0x22>
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	6053      	str	r3, [r2, #4]
 800a132:	4408      	add	r0, r1
 800a134:	6010      	str	r0, [r2, #0]
 800a136:	e7da      	b.n	800a0ee <_free_r+0x22>
 800a138:	d902      	bls.n	800a140 <_free_r+0x74>
 800a13a:	230c      	movs	r3, #12
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	e7d6      	b.n	800a0ee <_free_r+0x22>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	1821      	adds	r1, r4, r0
 800a144:	428b      	cmp	r3, r1
 800a146:	bf04      	itt	eq
 800a148:	6819      	ldreq	r1, [r3, #0]
 800a14a:	685b      	ldreq	r3, [r3, #4]
 800a14c:	6063      	str	r3, [r4, #4]
 800a14e:	bf04      	itt	eq
 800a150:	1809      	addeq	r1, r1, r0
 800a152:	6021      	streq	r1, [r4, #0]
 800a154:	6054      	str	r4, [r2, #4]
 800a156:	e7ca      	b.n	800a0ee <_free_r+0x22>
 800a158:	bd38      	pop	{r3, r4, r5, pc}
 800a15a:	bf00      	nop
 800a15c:	240004f8 	.word	0x240004f8

0800a160 <rshift>:
 800a160:	6903      	ldr	r3, [r0, #16]
 800a162:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a16a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a16e:	f100 0414 	add.w	r4, r0, #20
 800a172:	dd45      	ble.n	800a200 <rshift+0xa0>
 800a174:	f011 011f 	ands.w	r1, r1, #31
 800a178:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a17c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a180:	d10c      	bne.n	800a19c <rshift+0x3c>
 800a182:	f100 0710 	add.w	r7, r0, #16
 800a186:	4629      	mov	r1, r5
 800a188:	42b1      	cmp	r1, r6
 800a18a:	d334      	bcc.n	800a1f6 <rshift+0x96>
 800a18c:	1a9b      	subs	r3, r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	1eea      	subs	r2, r5, #3
 800a192:	4296      	cmp	r6, r2
 800a194:	bf38      	it	cc
 800a196:	2300      	movcc	r3, #0
 800a198:	4423      	add	r3, r4
 800a19a:	e015      	b.n	800a1c8 <rshift+0x68>
 800a19c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1a0:	f1c1 0820 	rsb	r8, r1, #32
 800a1a4:	40cf      	lsrs	r7, r1
 800a1a6:	f105 0e04 	add.w	lr, r5, #4
 800a1aa:	46a1      	mov	r9, r4
 800a1ac:	4576      	cmp	r6, lr
 800a1ae:	46f4      	mov	ip, lr
 800a1b0:	d815      	bhi.n	800a1de <rshift+0x7e>
 800a1b2:	1a9a      	subs	r2, r3, r2
 800a1b4:	0092      	lsls	r2, r2, #2
 800a1b6:	3a04      	subs	r2, #4
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	42ae      	cmp	r6, r5
 800a1bc:	bf38      	it	cc
 800a1be:	2200      	movcc	r2, #0
 800a1c0:	18a3      	adds	r3, r4, r2
 800a1c2:	50a7      	str	r7, [r4, r2]
 800a1c4:	b107      	cbz	r7, 800a1c8 <rshift+0x68>
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	1b1a      	subs	r2, r3, r4
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a1d0:	bf08      	it	eq
 800a1d2:	2300      	moveq	r3, #0
 800a1d4:	6102      	str	r2, [r0, #16]
 800a1d6:	bf08      	it	eq
 800a1d8:	6143      	streq	r3, [r0, #20]
 800a1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1de:	f8dc c000 	ldr.w	ip, [ip]
 800a1e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a1e6:	ea4c 0707 	orr.w	r7, ip, r7
 800a1ea:	f849 7b04 	str.w	r7, [r9], #4
 800a1ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1f2:	40cf      	lsrs	r7, r1
 800a1f4:	e7da      	b.n	800a1ac <rshift+0x4c>
 800a1f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a1fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800a1fe:	e7c3      	b.n	800a188 <rshift+0x28>
 800a200:	4623      	mov	r3, r4
 800a202:	e7e1      	b.n	800a1c8 <rshift+0x68>

0800a204 <__hexdig_fun>:
 800a204:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a208:	2b09      	cmp	r3, #9
 800a20a:	d802      	bhi.n	800a212 <__hexdig_fun+0xe>
 800a20c:	3820      	subs	r0, #32
 800a20e:	b2c0      	uxtb	r0, r0
 800a210:	4770      	bx	lr
 800a212:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a216:	2b05      	cmp	r3, #5
 800a218:	d801      	bhi.n	800a21e <__hexdig_fun+0x1a>
 800a21a:	3847      	subs	r0, #71	@ 0x47
 800a21c:	e7f7      	b.n	800a20e <__hexdig_fun+0xa>
 800a21e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a222:	2b05      	cmp	r3, #5
 800a224:	d801      	bhi.n	800a22a <__hexdig_fun+0x26>
 800a226:	3827      	subs	r0, #39	@ 0x27
 800a228:	e7f1      	b.n	800a20e <__hexdig_fun+0xa>
 800a22a:	2000      	movs	r0, #0
 800a22c:	4770      	bx	lr
	...

0800a230 <__gethex>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	b085      	sub	sp, #20
 800a236:	468a      	mov	sl, r1
 800a238:	9302      	str	r3, [sp, #8]
 800a23a:	680b      	ldr	r3, [r1, #0]
 800a23c:	9001      	str	r0, [sp, #4]
 800a23e:	4690      	mov	r8, r2
 800a240:	1c9c      	adds	r4, r3, #2
 800a242:	46a1      	mov	r9, r4
 800a244:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a248:	2830      	cmp	r0, #48	@ 0x30
 800a24a:	d0fa      	beq.n	800a242 <__gethex+0x12>
 800a24c:	eba9 0303 	sub.w	r3, r9, r3
 800a250:	f1a3 0b02 	sub.w	fp, r3, #2
 800a254:	f7ff ffd6 	bl	800a204 <__hexdig_fun>
 800a258:	4605      	mov	r5, r0
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d168      	bne.n	800a330 <__gethex+0x100>
 800a25e:	49a0      	ldr	r1, [pc, #640]	@ (800a4e0 <__gethex+0x2b0>)
 800a260:	2201      	movs	r2, #1
 800a262:	4648      	mov	r0, r9
 800a264:	f7ff fe1b 	bl	8009e9e <strncmp>
 800a268:	4607      	mov	r7, r0
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d167      	bne.n	800a33e <__gethex+0x10e>
 800a26e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a272:	4626      	mov	r6, r4
 800a274:	f7ff ffc6 	bl	800a204 <__hexdig_fun>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d062      	beq.n	800a342 <__gethex+0x112>
 800a27c:	4623      	mov	r3, r4
 800a27e:	7818      	ldrb	r0, [r3, #0]
 800a280:	2830      	cmp	r0, #48	@ 0x30
 800a282:	4699      	mov	r9, r3
 800a284:	f103 0301 	add.w	r3, r3, #1
 800a288:	d0f9      	beq.n	800a27e <__gethex+0x4e>
 800a28a:	f7ff ffbb 	bl	800a204 <__hexdig_fun>
 800a28e:	fab0 f580 	clz	r5, r0
 800a292:	096d      	lsrs	r5, r5, #5
 800a294:	f04f 0b01 	mov.w	fp, #1
 800a298:	464a      	mov	r2, r9
 800a29a:	4616      	mov	r6, r2
 800a29c:	3201      	adds	r2, #1
 800a29e:	7830      	ldrb	r0, [r6, #0]
 800a2a0:	f7ff ffb0 	bl	800a204 <__hexdig_fun>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d1f8      	bne.n	800a29a <__gethex+0x6a>
 800a2a8:	498d      	ldr	r1, [pc, #564]	@ (800a4e0 <__gethex+0x2b0>)
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f7ff fdf6 	bl	8009e9e <strncmp>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d13f      	bne.n	800a336 <__gethex+0x106>
 800a2b6:	b944      	cbnz	r4, 800a2ca <__gethex+0x9a>
 800a2b8:	1c74      	adds	r4, r6, #1
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	4616      	mov	r6, r2
 800a2be:	3201      	adds	r2, #1
 800a2c0:	7830      	ldrb	r0, [r6, #0]
 800a2c2:	f7ff ff9f 	bl	800a204 <__hexdig_fun>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d1f8      	bne.n	800a2bc <__gethex+0x8c>
 800a2ca:	1ba4      	subs	r4, r4, r6
 800a2cc:	00a7      	lsls	r7, r4, #2
 800a2ce:	7833      	ldrb	r3, [r6, #0]
 800a2d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a2d4:	2b50      	cmp	r3, #80	@ 0x50
 800a2d6:	d13e      	bne.n	800a356 <__gethex+0x126>
 800a2d8:	7873      	ldrb	r3, [r6, #1]
 800a2da:	2b2b      	cmp	r3, #43	@ 0x2b
 800a2dc:	d033      	beq.n	800a346 <__gethex+0x116>
 800a2de:	2b2d      	cmp	r3, #45	@ 0x2d
 800a2e0:	d034      	beq.n	800a34c <__gethex+0x11c>
 800a2e2:	1c71      	adds	r1, r6, #1
 800a2e4:	2400      	movs	r4, #0
 800a2e6:	7808      	ldrb	r0, [r1, #0]
 800a2e8:	f7ff ff8c 	bl	800a204 <__hexdig_fun>
 800a2ec:	1e43      	subs	r3, r0, #1
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b18      	cmp	r3, #24
 800a2f2:	d830      	bhi.n	800a356 <__gethex+0x126>
 800a2f4:	f1a0 0210 	sub.w	r2, r0, #16
 800a2f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a2fc:	f7ff ff82 	bl	800a204 <__hexdig_fun>
 800a300:	f100 3cff 	add.w	ip, r0, #4294967295
 800a304:	fa5f fc8c 	uxtb.w	ip, ip
 800a308:	f1bc 0f18 	cmp.w	ip, #24
 800a30c:	f04f 030a 	mov.w	r3, #10
 800a310:	d91e      	bls.n	800a350 <__gethex+0x120>
 800a312:	b104      	cbz	r4, 800a316 <__gethex+0xe6>
 800a314:	4252      	negs	r2, r2
 800a316:	4417      	add	r7, r2
 800a318:	f8ca 1000 	str.w	r1, [sl]
 800a31c:	b1ed      	cbz	r5, 800a35a <__gethex+0x12a>
 800a31e:	f1bb 0f00 	cmp.w	fp, #0
 800a322:	bf0c      	ite	eq
 800a324:	2506      	moveq	r5, #6
 800a326:	2500      	movne	r5, #0
 800a328:	4628      	mov	r0, r5
 800a32a:	b005      	add	sp, #20
 800a32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a330:	2500      	movs	r5, #0
 800a332:	462c      	mov	r4, r5
 800a334:	e7b0      	b.n	800a298 <__gethex+0x68>
 800a336:	2c00      	cmp	r4, #0
 800a338:	d1c7      	bne.n	800a2ca <__gethex+0x9a>
 800a33a:	4627      	mov	r7, r4
 800a33c:	e7c7      	b.n	800a2ce <__gethex+0x9e>
 800a33e:	464e      	mov	r6, r9
 800a340:	462f      	mov	r7, r5
 800a342:	2501      	movs	r5, #1
 800a344:	e7c3      	b.n	800a2ce <__gethex+0x9e>
 800a346:	2400      	movs	r4, #0
 800a348:	1cb1      	adds	r1, r6, #2
 800a34a:	e7cc      	b.n	800a2e6 <__gethex+0xb6>
 800a34c:	2401      	movs	r4, #1
 800a34e:	e7fb      	b.n	800a348 <__gethex+0x118>
 800a350:	fb03 0002 	mla	r0, r3, r2, r0
 800a354:	e7ce      	b.n	800a2f4 <__gethex+0xc4>
 800a356:	4631      	mov	r1, r6
 800a358:	e7de      	b.n	800a318 <__gethex+0xe8>
 800a35a:	eba6 0309 	sub.w	r3, r6, r9
 800a35e:	3b01      	subs	r3, #1
 800a360:	4629      	mov	r1, r5
 800a362:	2b07      	cmp	r3, #7
 800a364:	dc0a      	bgt.n	800a37c <__gethex+0x14c>
 800a366:	9801      	ldr	r0, [sp, #4]
 800a368:	f000 fafc 	bl	800a964 <_Balloc>
 800a36c:	4604      	mov	r4, r0
 800a36e:	b940      	cbnz	r0, 800a382 <__gethex+0x152>
 800a370:	4b5c      	ldr	r3, [pc, #368]	@ (800a4e4 <__gethex+0x2b4>)
 800a372:	4602      	mov	r2, r0
 800a374:	21e4      	movs	r1, #228	@ 0xe4
 800a376:	485c      	ldr	r0, [pc, #368]	@ (800a4e8 <__gethex+0x2b8>)
 800a378:	f7ff fe8a 	bl	800a090 <__assert_func>
 800a37c:	3101      	adds	r1, #1
 800a37e:	105b      	asrs	r3, r3, #1
 800a380:	e7ef      	b.n	800a362 <__gethex+0x132>
 800a382:	f100 0a14 	add.w	sl, r0, #20
 800a386:	2300      	movs	r3, #0
 800a388:	4655      	mov	r5, sl
 800a38a:	469b      	mov	fp, r3
 800a38c:	45b1      	cmp	r9, r6
 800a38e:	d337      	bcc.n	800a400 <__gethex+0x1d0>
 800a390:	f845 bb04 	str.w	fp, [r5], #4
 800a394:	eba5 050a 	sub.w	r5, r5, sl
 800a398:	10ad      	asrs	r5, r5, #2
 800a39a:	6125      	str	r5, [r4, #16]
 800a39c:	4658      	mov	r0, fp
 800a39e:	f000 fbd3 	bl	800ab48 <__hi0bits>
 800a3a2:	016d      	lsls	r5, r5, #5
 800a3a4:	f8d8 6000 	ldr.w	r6, [r8]
 800a3a8:	1a2d      	subs	r5, r5, r0
 800a3aa:	42b5      	cmp	r5, r6
 800a3ac:	dd54      	ble.n	800a458 <__gethex+0x228>
 800a3ae:	1bad      	subs	r5, r5, r6
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 ff64 	bl	800b280 <__any_on>
 800a3b8:	4681      	mov	r9, r0
 800a3ba:	b178      	cbz	r0, 800a3dc <__gethex+0x1ac>
 800a3bc:	1e6b      	subs	r3, r5, #1
 800a3be:	1159      	asrs	r1, r3, #5
 800a3c0:	f003 021f 	and.w	r2, r3, #31
 800a3c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a3c8:	f04f 0901 	mov.w	r9, #1
 800a3cc:	fa09 f202 	lsl.w	r2, r9, r2
 800a3d0:	420a      	tst	r2, r1
 800a3d2:	d003      	beq.n	800a3dc <__gethex+0x1ac>
 800a3d4:	454b      	cmp	r3, r9
 800a3d6:	dc36      	bgt.n	800a446 <__gethex+0x216>
 800a3d8:	f04f 0902 	mov.w	r9, #2
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f7ff febe 	bl	800a160 <rshift>
 800a3e4:	442f      	add	r7, r5
 800a3e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3ea:	42bb      	cmp	r3, r7
 800a3ec:	da42      	bge.n	800a474 <__gethex+0x244>
 800a3ee:	9801      	ldr	r0, [sp, #4]
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	f000 faf7 	bl	800a9e4 <_Bfree>
 800a3f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	25a3      	movs	r5, #163	@ 0xa3
 800a3fe:	e793      	b.n	800a328 <__gethex+0xf8>
 800a400:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a404:	2a2e      	cmp	r2, #46	@ 0x2e
 800a406:	d012      	beq.n	800a42e <__gethex+0x1fe>
 800a408:	2b20      	cmp	r3, #32
 800a40a:	d104      	bne.n	800a416 <__gethex+0x1e6>
 800a40c:	f845 bb04 	str.w	fp, [r5], #4
 800a410:	f04f 0b00 	mov.w	fp, #0
 800a414:	465b      	mov	r3, fp
 800a416:	7830      	ldrb	r0, [r6, #0]
 800a418:	9303      	str	r3, [sp, #12]
 800a41a:	f7ff fef3 	bl	800a204 <__hexdig_fun>
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	f000 000f 	and.w	r0, r0, #15
 800a424:	4098      	lsls	r0, r3
 800a426:	ea4b 0b00 	orr.w	fp, fp, r0
 800a42a:	3304      	adds	r3, #4
 800a42c:	e7ae      	b.n	800a38c <__gethex+0x15c>
 800a42e:	45b1      	cmp	r9, r6
 800a430:	d8ea      	bhi.n	800a408 <__gethex+0x1d8>
 800a432:	492b      	ldr	r1, [pc, #172]	@ (800a4e0 <__gethex+0x2b0>)
 800a434:	9303      	str	r3, [sp, #12]
 800a436:	2201      	movs	r2, #1
 800a438:	4630      	mov	r0, r6
 800a43a:	f7ff fd30 	bl	8009e9e <strncmp>
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	2800      	cmp	r0, #0
 800a442:	d1e1      	bne.n	800a408 <__gethex+0x1d8>
 800a444:	e7a2      	b.n	800a38c <__gethex+0x15c>
 800a446:	1ea9      	subs	r1, r5, #2
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 ff19 	bl	800b280 <__any_on>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d0c2      	beq.n	800a3d8 <__gethex+0x1a8>
 800a452:	f04f 0903 	mov.w	r9, #3
 800a456:	e7c1      	b.n	800a3dc <__gethex+0x1ac>
 800a458:	da09      	bge.n	800a46e <__gethex+0x23e>
 800a45a:	1b75      	subs	r5, r6, r5
 800a45c:	4621      	mov	r1, r4
 800a45e:	9801      	ldr	r0, [sp, #4]
 800a460:	462a      	mov	r2, r5
 800a462:	f000 fcd7 	bl	800ae14 <__lshift>
 800a466:	1b7f      	subs	r7, r7, r5
 800a468:	4604      	mov	r4, r0
 800a46a:	f100 0a14 	add.w	sl, r0, #20
 800a46e:	f04f 0900 	mov.w	r9, #0
 800a472:	e7b8      	b.n	800a3e6 <__gethex+0x1b6>
 800a474:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a478:	42bd      	cmp	r5, r7
 800a47a:	dd6f      	ble.n	800a55c <__gethex+0x32c>
 800a47c:	1bed      	subs	r5, r5, r7
 800a47e:	42ae      	cmp	r6, r5
 800a480:	dc34      	bgt.n	800a4ec <__gethex+0x2bc>
 800a482:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a486:	2b02      	cmp	r3, #2
 800a488:	d022      	beq.n	800a4d0 <__gethex+0x2a0>
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d024      	beq.n	800a4d8 <__gethex+0x2a8>
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d115      	bne.n	800a4be <__gethex+0x28e>
 800a492:	42ae      	cmp	r6, r5
 800a494:	d113      	bne.n	800a4be <__gethex+0x28e>
 800a496:	2e01      	cmp	r6, #1
 800a498:	d10b      	bne.n	800a4b2 <__gethex+0x282>
 800a49a:	9a02      	ldr	r2, [sp, #8]
 800a49c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	f8ca 3000 	str.w	r3, [sl]
 800a4aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ac:	2562      	movs	r5, #98	@ 0x62
 800a4ae:	601c      	str	r4, [r3, #0]
 800a4b0:	e73a      	b.n	800a328 <__gethex+0xf8>
 800a4b2:	1e71      	subs	r1, r6, #1
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 fee3 	bl	800b280 <__any_on>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d1ed      	bne.n	800a49a <__gethex+0x26a>
 800a4be:	9801      	ldr	r0, [sp, #4]
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	f000 fa8f 	bl	800a9e4 <_Bfree>
 800a4c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	2550      	movs	r5, #80	@ 0x50
 800a4ce:	e72b      	b.n	800a328 <__gethex+0xf8>
 800a4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1f3      	bne.n	800a4be <__gethex+0x28e>
 800a4d6:	e7e0      	b.n	800a49a <__gethex+0x26a>
 800a4d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1dd      	bne.n	800a49a <__gethex+0x26a>
 800a4de:	e7ee      	b.n	800a4be <__gethex+0x28e>
 800a4e0:	0800bd64 	.word	0x0800bd64
 800a4e4:	0800be7d 	.word	0x0800be7d
 800a4e8:	0800be8e 	.word	0x0800be8e
 800a4ec:	1e6f      	subs	r7, r5, #1
 800a4ee:	f1b9 0f00 	cmp.w	r9, #0
 800a4f2:	d130      	bne.n	800a556 <__gethex+0x326>
 800a4f4:	b127      	cbz	r7, 800a500 <__gethex+0x2d0>
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 fec1 	bl	800b280 <__any_on>
 800a4fe:	4681      	mov	r9, r0
 800a500:	117a      	asrs	r2, r7, #5
 800a502:	2301      	movs	r3, #1
 800a504:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a508:	f007 071f 	and.w	r7, r7, #31
 800a50c:	40bb      	lsls	r3, r7
 800a50e:	4213      	tst	r3, r2
 800a510:	4629      	mov	r1, r5
 800a512:	4620      	mov	r0, r4
 800a514:	bf18      	it	ne
 800a516:	f049 0902 	orrne.w	r9, r9, #2
 800a51a:	f7ff fe21 	bl	800a160 <rshift>
 800a51e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a522:	1b76      	subs	r6, r6, r5
 800a524:	2502      	movs	r5, #2
 800a526:	f1b9 0f00 	cmp.w	r9, #0
 800a52a:	d047      	beq.n	800a5bc <__gethex+0x38c>
 800a52c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d015      	beq.n	800a560 <__gethex+0x330>
 800a534:	2b03      	cmp	r3, #3
 800a536:	d017      	beq.n	800a568 <__gethex+0x338>
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d109      	bne.n	800a550 <__gethex+0x320>
 800a53c:	f019 0f02 	tst.w	r9, #2
 800a540:	d006      	beq.n	800a550 <__gethex+0x320>
 800a542:	f8da 3000 	ldr.w	r3, [sl]
 800a546:	ea49 0903 	orr.w	r9, r9, r3
 800a54a:	f019 0f01 	tst.w	r9, #1
 800a54e:	d10e      	bne.n	800a56e <__gethex+0x33e>
 800a550:	f045 0510 	orr.w	r5, r5, #16
 800a554:	e032      	b.n	800a5bc <__gethex+0x38c>
 800a556:	f04f 0901 	mov.w	r9, #1
 800a55a:	e7d1      	b.n	800a500 <__gethex+0x2d0>
 800a55c:	2501      	movs	r5, #1
 800a55e:	e7e2      	b.n	800a526 <__gethex+0x2f6>
 800a560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a562:	f1c3 0301 	rsb	r3, r3, #1
 800a566:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0f0      	beq.n	800a550 <__gethex+0x320>
 800a56e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a572:	f104 0314 	add.w	r3, r4, #20
 800a576:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a57a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a57e:	f04f 0c00 	mov.w	ip, #0
 800a582:	4618      	mov	r0, r3
 800a584:	f853 2b04 	ldr.w	r2, [r3], #4
 800a588:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a58c:	d01b      	beq.n	800a5c6 <__gethex+0x396>
 800a58e:	3201      	adds	r2, #1
 800a590:	6002      	str	r2, [r0, #0]
 800a592:	2d02      	cmp	r5, #2
 800a594:	f104 0314 	add.w	r3, r4, #20
 800a598:	d13c      	bne.n	800a614 <__gethex+0x3e4>
 800a59a:	f8d8 2000 	ldr.w	r2, [r8]
 800a59e:	3a01      	subs	r2, #1
 800a5a0:	42b2      	cmp	r2, r6
 800a5a2:	d109      	bne.n	800a5b8 <__gethex+0x388>
 800a5a4:	1171      	asrs	r1, r6, #5
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5ac:	f006 061f 	and.w	r6, r6, #31
 800a5b0:	fa02 f606 	lsl.w	r6, r2, r6
 800a5b4:	421e      	tst	r6, r3
 800a5b6:	d13a      	bne.n	800a62e <__gethex+0x3fe>
 800a5b8:	f045 0520 	orr.w	r5, r5, #32
 800a5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5be:	601c      	str	r4, [r3, #0]
 800a5c0:	9b02      	ldr	r3, [sp, #8]
 800a5c2:	601f      	str	r7, [r3, #0]
 800a5c4:	e6b0      	b.n	800a328 <__gethex+0xf8>
 800a5c6:	4299      	cmp	r1, r3
 800a5c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a5cc:	d8d9      	bhi.n	800a582 <__gethex+0x352>
 800a5ce:	68a3      	ldr	r3, [r4, #8]
 800a5d0:	459b      	cmp	fp, r3
 800a5d2:	db17      	blt.n	800a604 <__gethex+0x3d4>
 800a5d4:	6861      	ldr	r1, [r4, #4]
 800a5d6:	9801      	ldr	r0, [sp, #4]
 800a5d8:	3101      	adds	r1, #1
 800a5da:	f000 f9c3 	bl	800a964 <_Balloc>
 800a5de:	4681      	mov	r9, r0
 800a5e0:	b918      	cbnz	r0, 800a5ea <__gethex+0x3ba>
 800a5e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a64c <__gethex+0x41c>)
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	2184      	movs	r1, #132	@ 0x84
 800a5e8:	e6c5      	b.n	800a376 <__gethex+0x146>
 800a5ea:	6922      	ldr	r2, [r4, #16]
 800a5ec:	3202      	adds	r2, #2
 800a5ee:	f104 010c 	add.w	r1, r4, #12
 800a5f2:	0092      	lsls	r2, r2, #2
 800a5f4:	300c      	adds	r0, #12
 800a5f6:	f7ff fd34 	bl	800a062 <memcpy>
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	9801      	ldr	r0, [sp, #4]
 800a5fe:	f000 f9f1 	bl	800a9e4 <_Bfree>
 800a602:	464c      	mov	r4, r9
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a60c:	6122      	str	r2, [r4, #16]
 800a60e:	2201      	movs	r2, #1
 800a610:	615a      	str	r2, [r3, #20]
 800a612:	e7be      	b.n	800a592 <__gethex+0x362>
 800a614:	6922      	ldr	r2, [r4, #16]
 800a616:	455a      	cmp	r2, fp
 800a618:	dd0b      	ble.n	800a632 <__gethex+0x402>
 800a61a:	2101      	movs	r1, #1
 800a61c:	4620      	mov	r0, r4
 800a61e:	f7ff fd9f 	bl	800a160 <rshift>
 800a622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a626:	3701      	adds	r7, #1
 800a628:	42bb      	cmp	r3, r7
 800a62a:	f6ff aee0 	blt.w	800a3ee <__gethex+0x1be>
 800a62e:	2501      	movs	r5, #1
 800a630:	e7c2      	b.n	800a5b8 <__gethex+0x388>
 800a632:	f016 061f 	ands.w	r6, r6, #31
 800a636:	d0fa      	beq.n	800a62e <__gethex+0x3fe>
 800a638:	4453      	add	r3, sl
 800a63a:	f1c6 0620 	rsb	r6, r6, #32
 800a63e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a642:	f000 fa81 	bl	800ab48 <__hi0bits>
 800a646:	42b0      	cmp	r0, r6
 800a648:	dbe7      	blt.n	800a61a <__gethex+0x3ea>
 800a64a:	e7f0      	b.n	800a62e <__gethex+0x3fe>
 800a64c:	0800be7d 	.word	0x0800be7d

0800a650 <L_shift>:
 800a650:	f1c2 0208 	rsb	r2, r2, #8
 800a654:	0092      	lsls	r2, r2, #2
 800a656:	b570      	push	{r4, r5, r6, lr}
 800a658:	f1c2 0620 	rsb	r6, r2, #32
 800a65c:	6843      	ldr	r3, [r0, #4]
 800a65e:	6804      	ldr	r4, [r0, #0]
 800a660:	fa03 f506 	lsl.w	r5, r3, r6
 800a664:	432c      	orrs	r4, r5
 800a666:	40d3      	lsrs	r3, r2
 800a668:	6004      	str	r4, [r0, #0]
 800a66a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a66e:	4288      	cmp	r0, r1
 800a670:	d3f4      	bcc.n	800a65c <L_shift+0xc>
 800a672:	bd70      	pop	{r4, r5, r6, pc}

0800a674 <__match>:
 800a674:	b530      	push	{r4, r5, lr}
 800a676:	6803      	ldr	r3, [r0, #0]
 800a678:	3301      	adds	r3, #1
 800a67a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a67e:	b914      	cbnz	r4, 800a686 <__match+0x12>
 800a680:	6003      	str	r3, [r0, #0]
 800a682:	2001      	movs	r0, #1
 800a684:	bd30      	pop	{r4, r5, pc}
 800a686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a68a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a68e:	2d19      	cmp	r5, #25
 800a690:	bf98      	it	ls
 800a692:	3220      	addls	r2, #32
 800a694:	42a2      	cmp	r2, r4
 800a696:	d0f0      	beq.n	800a67a <__match+0x6>
 800a698:	2000      	movs	r0, #0
 800a69a:	e7f3      	b.n	800a684 <__match+0x10>

0800a69c <__hexnan>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	680b      	ldr	r3, [r1, #0]
 800a6a2:	6801      	ldr	r1, [r0, #0]
 800a6a4:	115e      	asrs	r6, r3, #5
 800a6a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6aa:	f013 031f 	ands.w	r3, r3, #31
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	bf18      	it	ne
 800a6b2:	3604      	addne	r6, #4
 800a6b4:	2500      	movs	r5, #0
 800a6b6:	1f37      	subs	r7, r6, #4
 800a6b8:	4682      	mov	sl, r0
 800a6ba:	4690      	mov	r8, r2
 800a6bc:	9301      	str	r3, [sp, #4]
 800a6be:	f846 5c04 	str.w	r5, [r6, #-4]
 800a6c2:	46b9      	mov	r9, r7
 800a6c4:	463c      	mov	r4, r7
 800a6c6:	9502      	str	r5, [sp, #8]
 800a6c8:	46ab      	mov	fp, r5
 800a6ca:	784a      	ldrb	r2, [r1, #1]
 800a6cc:	1c4b      	adds	r3, r1, #1
 800a6ce:	9303      	str	r3, [sp, #12]
 800a6d0:	b342      	cbz	r2, 800a724 <__hexnan+0x88>
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	9105      	str	r1, [sp, #20]
 800a6d6:	9204      	str	r2, [sp, #16]
 800a6d8:	f7ff fd94 	bl	800a204 <__hexdig_fun>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d151      	bne.n	800a784 <__hexnan+0xe8>
 800a6e0:	9a04      	ldr	r2, [sp, #16]
 800a6e2:	9905      	ldr	r1, [sp, #20]
 800a6e4:	2a20      	cmp	r2, #32
 800a6e6:	d818      	bhi.n	800a71a <__hexnan+0x7e>
 800a6e8:	9b02      	ldr	r3, [sp, #8]
 800a6ea:	459b      	cmp	fp, r3
 800a6ec:	dd13      	ble.n	800a716 <__hexnan+0x7a>
 800a6ee:	454c      	cmp	r4, r9
 800a6f0:	d206      	bcs.n	800a700 <__hexnan+0x64>
 800a6f2:	2d07      	cmp	r5, #7
 800a6f4:	dc04      	bgt.n	800a700 <__hexnan+0x64>
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f7ff ffa8 	bl	800a650 <L_shift>
 800a700:	4544      	cmp	r4, r8
 800a702:	d952      	bls.n	800a7aa <__hexnan+0x10e>
 800a704:	2300      	movs	r3, #0
 800a706:	f1a4 0904 	sub.w	r9, r4, #4
 800a70a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a70e:	f8cd b008 	str.w	fp, [sp, #8]
 800a712:	464c      	mov	r4, r9
 800a714:	461d      	mov	r5, r3
 800a716:	9903      	ldr	r1, [sp, #12]
 800a718:	e7d7      	b.n	800a6ca <__hexnan+0x2e>
 800a71a:	2a29      	cmp	r2, #41	@ 0x29
 800a71c:	d157      	bne.n	800a7ce <__hexnan+0x132>
 800a71e:	3102      	adds	r1, #2
 800a720:	f8ca 1000 	str.w	r1, [sl]
 800a724:	f1bb 0f00 	cmp.w	fp, #0
 800a728:	d051      	beq.n	800a7ce <__hexnan+0x132>
 800a72a:	454c      	cmp	r4, r9
 800a72c:	d206      	bcs.n	800a73c <__hexnan+0xa0>
 800a72e:	2d07      	cmp	r5, #7
 800a730:	dc04      	bgt.n	800a73c <__hexnan+0xa0>
 800a732:	462a      	mov	r2, r5
 800a734:	4649      	mov	r1, r9
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff ff8a 	bl	800a650 <L_shift>
 800a73c:	4544      	cmp	r4, r8
 800a73e:	d936      	bls.n	800a7ae <__hexnan+0x112>
 800a740:	f1a8 0204 	sub.w	r2, r8, #4
 800a744:	4623      	mov	r3, r4
 800a746:	f853 1b04 	ldr.w	r1, [r3], #4
 800a74a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a74e:	429f      	cmp	r7, r3
 800a750:	d2f9      	bcs.n	800a746 <__hexnan+0xaa>
 800a752:	1b3b      	subs	r3, r7, r4
 800a754:	f023 0303 	bic.w	r3, r3, #3
 800a758:	3304      	adds	r3, #4
 800a75a:	3401      	adds	r4, #1
 800a75c:	3e03      	subs	r6, #3
 800a75e:	42b4      	cmp	r4, r6
 800a760:	bf88      	it	hi
 800a762:	2304      	movhi	r3, #4
 800a764:	4443      	add	r3, r8
 800a766:	2200      	movs	r2, #0
 800a768:	f843 2b04 	str.w	r2, [r3], #4
 800a76c:	429f      	cmp	r7, r3
 800a76e:	d2fb      	bcs.n	800a768 <__hexnan+0xcc>
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	b91b      	cbnz	r3, 800a77c <__hexnan+0xe0>
 800a774:	4547      	cmp	r7, r8
 800a776:	d128      	bne.n	800a7ca <__hexnan+0x12e>
 800a778:	2301      	movs	r3, #1
 800a77a:	603b      	str	r3, [r7, #0]
 800a77c:	2005      	movs	r0, #5
 800a77e:	b007      	add	sp, #28
 800a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a784:	3501      	adds	r5, #1
 800a786:	2d08      	cmp	r5, #8
 800a788:	f10b 0b01 	add.w	fp, fp, #1
 800a78c:	dd06      	ble.n	800a79c <__hexnan+0x100>
 800a78e:	4544      	cmp	r4, r8
 800a790:	d9c1      	bls.n	800a716 <__hexnan+0x7a>
 800a792:	2300      	movs	r3, #0
 800a794:	f844 3c04 	str.w	r3, [r4, #-4]
 800a798:	2501      	movs	r5, #1
 800a79a:	3c04      	subs	r4, #4
 800a79c:	6822      	ldr	r2, [r4, #0]
 800a79e:	f000 000f 	and.w	r0, r0, #15
 800a7a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a7a6:	6020      	str	r0, [r4, #0]
 800a7a8:	e7b5      	b.n	800a716 <__hexnan+0x7a>
 800a7aa:	2508      	movs	r5, #8
 800a7ac:	e7b3      	b.n	800a716 <__hexnan+0x7a>
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d0dd      	beq.n	800a770 <__hexnan+0xd4>
 800a7b4:	f1c3 0320 	rsb	r3, r3, #32
 800a7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7bc:	40da      	lsrs	r2, r3
 800a7be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	f846 3c04 	str.w	r3, [r6, #-4]
 800a7c8:	e7d2      	b.n	800a770 <__hexnan+0xd4>
 800a7ca:	3f04      	subs	r7, #4
 800a7cc:	e7d0      	b.n	800a770 <__hexnan+0xd4>
 800a7ce:	2004      	movs	r0, #4
 800a7d0:	e7d5      	b.n	800a77e <__hexnan+0xe2>
	...

0800a7d4 <malloc>:
 800a7d4:	4b02      	ldr	r3, [pc, #8]	@ (800a7e0 <malloc+0xc>)
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	f000 b825 	b.w	800a828 <_malloc_r>
 800a7de:	bf00      	nop
 800a7e0:	24000188 	.word	0x24000188

0800a7e4 <sbrk_aligned>:
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a824 <sbrk_aligned+0x40>)
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	6831      	ldr	r1, [r6, #0]
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	b911      	cbnz	r1, 800a7f6 <sbrk_aligned+0x12>
 800a7f0:	f000 fe32 	bl	800b458 <_sbrk_r>
 800a7f4:	6030      	str	r0, [r6, #0]
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	f000 fe2d 	bl	800b458 <_sbrk_r>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	d103      	bne.n	800a80a <sbrk_aligned+0x26>
 800a802:	f04f 34ff 	mov.w	r4, #4294967295
 800a806:	4620      	mov	r0, r4
 800a808:	bd70      	pop	{r4, r5, r6, pc}
 800a80a:	1cc4      	adds	r4, r0, #3
 800a80c:	f024 0403 	bic.w	r4, r4, #3
 800a810:	42a0      	cmp	r0, r4
 800a812:	d0f8      	beq.n	800a806 <sbrk_aligned+0x22>
 800a814:	1a21      	subs	r1, r4, r0
 800a816:	4628      	mov	r0, r5
 800a818:	f000 fe1e 	bl	800b458 <_sbrk_r>
 800a81c:	3001      	adds	r0, #1
 800a81e:	d1f2      	bne.n	800a806 <sbrk_aligned+0x22>
 800a820:	e7ef      	b.n	800a802 <sbrk_aligned+0x1e>
 800a822:	bf00      	nop
 800a824:	240004f4 	.word	0x240004f4

0800a828 <_malloc_r>:
 800a828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a82c:	1ccd      	adds	r5, r1, #3
 800a82e:	f025 0503 	bic.w	r5, r5, #3
 800a832:	3508      	adds	r5, #8
 800a834:	2d0c      	cmp	r5, #12
 800a836:	bf38      	it	cc
 800a838:	250c      	movcc	r5, #12
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	4606      	mov	r6, r0
 800a83e:	db01      	blt.n	800a844 <_malloc_r+0x1c>
 800a840:	42a9      	cmp	r1, r5
 800a842:	d904      	bls.n	800a84e <_malloc_r+0x26>
 800a844:	230c      	movs	r3, #12
 800a846:	6033      	str	r3, [r6, #0]
 800a848:	2000      	movs	r0, #0
 800a84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a84e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a924 <_malloc_r+0xfc>
 800a852:	f000 f87b 	bl	800a94c <__malloc_lock>
 800a856:	f8d8 3000 	ldr.w	r3, [r8]
 800a85a:	461c      	mov	r4, r3
 800a85c:	bb44      	cbnz	r4, 800a8b0 <_malloc_r+0x88>
 800a85e:	4629      	mov	r1, r5
 800a860:	4630      	mov	r0, r6
 800a862:	f7ff ffbf 	bl	800a7e4 <sbrk_aligned>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	4604      	mov	r4, r0
 800a86a:	d158      	bne.n	800a91e <_malloc_r+0xf6>
 800a86c:	f8d8 4000 	ldr.w	r4, [r8]
 800a870:	4627      	mov	r7, r4
 800a872:	2f00      	cmp	r7, #0
 800a874:	d143      	bne.n	800a8fe <_malloc_r+0xd6>
 800a876:	2c00      	cmp	r4, #0
 800a878:	d04b      	beq.n	800a912 <_malloc_r+0xea>
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	4639      	mov	r1, r7
 800a87e:	4630      	mov	r0, r6
 800a880:	eb04 0903 	add.w	r9, r4, r3
 800a884:	f000 fde8 	bl	800b458 <_sbrk_r>
 800a888:	4581      	cmp	r9, r0
 800a88a:	d142      	bne.n	800a912 <_malloc_r+0xea>
 800a88c:	6821      	ldr	r1, [r4, #0]
 800a88e:	1a6d      	subs	r5, r5, r1
 800a890:	4629      	mov	r1, r5
 800a892:	4630      	mov	r0, r6
 800a894:	f7ff ffa6 	bl	800a7e4 <sbrk_aligned>
 800a898:	3001      	adds	r0, #1
 800a89a:	d03a      	beq.n	800a912 <_malloc_r+0xea>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	442b      	add	r3, r5
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	bb62      	cbnz	r2, 800a904 <_malloc_r+0xdc>
 800a8aa:	f8c8 7000 	str.w	r7, [r8]
 800a8ae:	e00f      	b.n	800a8d0 <_malloc_r+0xa8>
 800a8b0:	6822      	ldr	r2, [r4, #0]
 800a8b2:	1b52      	subs	r2, r2, r5
 800a8b4:	d420      	bmi.n	800a8f8 <_malloc_r+0xd0>
 800a8b6:	2a0b      	cmp	r2, #11
 800a8b8:	d917      	bls.n	800a8ea <_malloc_r+0xc2>
 800a8ba:	1961      	adds	r1, r4, r5
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	6025      	str	r5, [r4, #0]
 800a8c0:	bf18      	it	ne
 800a8c2:	6059      	strne	r1, [r3, #4]
 800a8c4:	6863      	ldr	r3, [r4, #4]
 800a8c6:	bf08      	it	eq
 800a8c8:	f8c8 1000 	streq.w	r1, [r8]
 800a8cc:	5162      	str	r2, [r4, r5]
 800a8ce:	604b      	str	r3, [r1, #4]
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f000 f841 	bl	800a958 <__malloc_unlock>
 800a8d6:	f104 000b 	add.w	r0, r4, #11
 800a8da:	1d23      	adds	r3, r4, #4
 800a8dc:	f020 0007 	bic.w	r0, r0, #7
 800a8e0:	1ac2      	subs	r2, r0, r3
 800a8e2:	bf1c      	itt	ne
 800a8e4:	1a1b      	subne	r3, r3, r0
 800a8e6:	50a3      	strne	r3, [r4, r2]
 800a8e8:	e7af      	b.n	800a84a <_malloc_r+0x22>
 800a8ea:	6862      	ldr	r2, [r4, #4]
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	bf0c      	ite	eq
 800a8f0:	f8c8 2000 	streq.w	r2, [r8]
 800a8f4:	605a      	strne	r2, [r3, #4]
 800a8f6:	e7eb      	b.n	800a8d0 <_malloc_r+0xa8>
 800a8f8:	4623      	mov	r3, r4
 800a8fa:	6864      	ldr	r4, [r4, #4]
 800a8fc:	e7ae      	b.n	800a85c <_malloc_r+0x34>
 800a8fe:	463c      	mov	r4, r7
 800a900:	687f      	ldr	r7, [r7, #4]
 800a902:	e7b6      	b.n	800a872 <_malloc_r+0x4a>
 800a904:	461a      	mov	r2, r3
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	42a3      	cmp	r3, r4
 800a90a:	d1fb      	bne.n	800a904 <_malloc_r+0xdc>
 800a90c:	2300      	movs	r3, #0
 800a90e:	6053      	str	r3, [r2, #4]
 800a910:	e7de      	b.n	800a8d0 <_malloc_r+0xa8>
 800a912:	230c      	movs	r3, #12
 800a914:	6033      	str	r3, [r6, #0]
 800a916:	4630      	mov	r0, r6
 800a918:	f000 f81e 	bl	800a958 <__malloc_unlock>
 800a91c:	e794      	b.n	800a848 <_malloc_r+0x20>
 800a91e:	6005      	str	r5, [r0, #0]
 800a920:	e7d6      	b.n	800a8d0 <_malloc_r+0xa8>
 800a922:	bf00      	nop
 800a924:	240004f8 	.word	0x240004f8

0800a928 <__ascii_mbtowc>:
 800a928:	b082      	sub	sp, #8
 800a92a:	b901      	cbnz	r1, 800a92e <__ascii_mbtowc+0x6>
 800a92c:	a901      	add	r1, sp, #4
 800a92e:	b142      	cbz	r2, 800a942 <__ascii_mbtowc+0x1a>
 800a930:	b14b      	cbz	r3, 800a946 <__ascii_mbtowc+0x1e>
 800a932:	7813      	ldrb	r3, [r2, #0]
 800a934:	600b      	str	r3, [r1, #0]
 800a936:	7812      	ldrb	r2, [r2, #0]
 800a938:	1e10      	subs	r0, r2, #0
 800a93a:	bf18      	it	ne
 800a93c:	2001      	movne	r0, #1
 800a93e:	b002      	add	sp, #8
 800a940:	4770      	bx	lr
 800a942:	4610      	mov	r0, r2
 800a944:	e7fb      	b.n	800a93e <__ascii_mbtowc+0x16>
 800a946:	f06f 0001 	mvn.w	r0, #1
 800a94a:	e7f8      	b.n	800a93e <__ascii_mbtowc+0x16>

0800a94c <__malloc_lock>:
 800a94c:	4801      	ldr	r0, [pc, #4]	@ (800a954 <__malloc_lock+0x8>)
 800a94e:	f7ff bb86 	b.w	800a05e <__retarget_lock_acquire_recursive>
 800a952:	bf00      	nop
 800a954:	240004f0 	.word	0x240004f0

0800a958 <__malloc_unlock>:
 800a958:	4801      	ldr	r0, [pc, #4]	@ (800a960 <__malloc_unlock+0x8>)
 800a95a:	f7ff bb81 	b.w	800a060 <__retarget_lock_release_recursive>
 800a95e:	bf00      	nop
 800a960:	240004f0 	.word	0x240004f0

0800a964 <_Balloc>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	69c6      	ldr	r6, [r0, #28]
 800a968:	4604      	mov	r4, r0
 800a96a:	460d      	mov	r5, r1
 800a96c:	b976      	cbnz	r6, 800a98c <_Balloc+0x28>
 800a96e:	2010      	movs	r0, #16
 800a970:	f7ff ff30 	bl	800a7d4 <malloc>
 800a974:	4602      	mov	r2, r0
 800a976:	61e0      	str	r0, [r4, #28]
 800a978:	b920      	cbnz	r0, 800a984 <_Balloc+0x20>
 800a97a:	4b18      	ldr	r3, [pc, #96]	@ (800a9dc <_Balloc+0x78>)
 800a97c:	4818      	ldr	r0, [pc, #96]	@ (800a9e0 <_Balloc+0x7c>)
 800a97e:	216b      	movs	r1, #107	@ 0x6b
 800a980:	f7ff fb86 	bl	800a090 <__assert_func>
 800a984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a988:	6006      	str	r6, [r0, #0]
 800a98a:	60c6      	str	r6, [r0, #12]
 800a98c:	69e6      	ldr	r6, [r4, #28]
 800a98e:	68f3      	ldr	r3, [r6, #12]
 800a990:	b183      	cbz	r3, 800a9b4 <_Balloc+0x50>
 800a992:	69e3      	ldr	r3, [r4, #28]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a99a:	b9b8      	cbnz	r0, 800a9cc <_Balloc+0x68>
 800a99c:	2101      	movs	r1, #1
 800a99e:	fa01 f605 	lsl.w	r6, r1, r5
 800a9a2:	1d72      	adds	r2, r6, #5
 800a9a4:	0092      	lsls	r2, r2, #2
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 fd6d 	bl	800b486 <_calloc_r>
 800a9ac:	b160      	cbz	r0, 800a9c8 <_Balloc+0x64>
 800a9ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9b2:	e00e      	b.n	800a9d2 <_Balloc+0x6e>
 800a9b4:	2221      	movs	r2, #33	@ 0x21
 800a9b6:	2104      	movs	r1, #4
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fd64 	bl	800b486 <_calloc_r>
 800a9be:	69e3      	ldr	r3, [r4, #28]
 800a9c0:	60f0      	str	r0, [r6, #12]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e4      	bne.n	800a992 <_Balloc+0x2e>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	6802      	ldr	r2, [r0, #0]
 800a9ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9d8:	e7f7      	b.n	800a9ca <_Balloc+0x66>
 800a9da:	bf00      	nop
 800a9dc:	0800bdc8 	.word	0x0800bdc8
 800a9e0:	0800beee 	.word	0x0800beee

0800a9e4 <_Bfree>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	69c6      	ldr	r6, [r0, #28]
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	b976      	cbnz	r6, 800aa0c <_Bfree+0x28>
 800a9ee:	2010      	movs	r0, #16
 800a9f0:	f7ff fef0 	bl	800a7d4 <malloc>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	61e8      	str	r0, [r5, #28]
 800a9f8:	b920      	cbnz	r0, 800aa04 <_Bfree+0x20>
 800a9fa:	4b09      	ldr	r3, [pc, #36]	@ (800aa20 <_Bfree+0x3c>)
 800a9fc:	4809      	ldr	r0, [pc, #36]	@ (800aa24 <_Bfree+0x40>)
 800a9fe:	218f      	movs	r1, #143	@ 0x8f
 800aa00:	f7ff fb46 	bl	800a090 <__assert_func>
 800aa04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa08:	6006      	str	r6, [r0, #0]
 800aa0a:	60c6      	str	r6, [r0, #12]
 800aa0c:	b13c      	cbz	r4, 800aa1e <_Bfree+0x3a>
 800aa0e:	69eb      	ldr	r3, [r5, #28]
 800aa10:	6862      	ldr	r2, [r4, #4]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa18:	6021      	str	r1, [r4, #0]
 800aa1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa1e:	bd70      	pop	{r4, r5, r6, pc}
 800aa20:	0800bdc8 	.word	0x0800bdc8
 800aa24:	0800beee 	.word	0x0800beee

0800aa28 <__multadd>:
 800aa28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2c:	690d      	ldr	r5, [r1, #16]
 800aa2e:	4607      	mov	r7, r0
 800aa30:	460c      	mov	r4, r1
 800aa32:	461e      	mov	r6, r3
 800aa34:	f101 0c14 	add.w	ip, r1, #20
 800aa38:	2000      	movs	r0, #0
 800aa3a:	f8dc 3000 	ldr.w	r3, [ip]
 800aa3e:	b299      	uxth	r1, r3
 800aa40:	fb02 6101 	mla	r1, r2, r1, r6
 800aa44:	0c1e      	lsrs	r6, r3, #16
 800aa46:	0c0b      	lsrs	r3, r1, #16
 800aa48:	fb02 3306 	mla	r3, r2, r6, r3
 800aa4c:	b289      	uxth	r1, r1
 800aa4e:	3001      	adds	r0, #1
 800aa50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa54:	4285      	cmp	r5, r0
 800aa56:	f84c 1b04 	str.w	r1, [ip], #4
 800aa5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa5e:	dcec      	bgt.n	800aa3a <__multadd+0x12>
 800aa60:	b30e      	cbz	r6, 800aaa6 <__multadd+0x7e>
 800aa62:	68a3      	ldr	r3, [r4, #8]
 800aa64:	42ab      	cmp	r3, r5
 800aa66:	dc19      	bgt.n	800aa9c <__multadd+0x74>
 800aa68:	6861      	ldr	r1, [r4, #4]
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	3101      	adds	r1, #1
 800aa6e:	f7ff ff79 	bl	800a964 <_Balloc>
 800aa72:	4680      	mov	r8, r0
 800aa74:	b928      	cbnz	r0, 800aa82 <__multadd+0x5a>
 800aa76:	4602      	mov	r2, r0
 800aa78:	4b0c      	ldr	r3, [pc, #48]	@ (800aaac <__multadd+0x84>)
 800aa7a:	480d      	ldr	r0, [pc, #52]	@ (800aab0 <__multadd+0x88>)
 800aa7c:	21ba      	movs	r1, #186	@ 0xba
 800aa7e:	f7ff fb07 	bl	800a090 <__assert_func>
 800aa82:	6922      	ldr	r2, [r4, #16]
 800aa84:	3202      	adds	r2, #2
 800aa86:	f104 010c 	add.w	r1, r4, #12
 800aa8a:	0092      	lsls	r2, r2, #2
 800aa8c:	300c      	adds	r0, #12
 800aa8e:	f7ff fae8 	bl	800a062 <memcpy>
 800aa92:	4621      	mov	r1, r4
 800aa94:	4638      	mov	r0, r7
 800aa96:	f7ff ffa5 	bl	800a9e4 <_Bfree>
 800aa9a:	4644      	mov	r4, r8
 800aa9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aaa0:	3501      	adds	r5, #1
 800aaa2:	615e      	str	r6, [r3, #20]
 800aaa4:	6125      	str	r5, [r4, #16]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaac:	0800be7d 	.word	0x0800be7d
 800aab0:	0800beee 	.word	0x0800beee

0800aab4 <__s2b>:
 800aab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab8:	460c      	mov	r4, r1
 800aaba:	4615      	mov	r5, r2
 800aabc:	461f      	mov	r7, r3
 800aabe:	2209      	movs	r2, #9
 800aac0:	3308      	adds	r3, #8
 800aac2:	4606      	mov	r6, r0
 800aac4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aac8:	2100      	movs	r1, #0
 800aaca:	2201      	movs	r2, #1
 800aacc:	429a      	cmp	r2, r3
 800aace:	db09      	blt.n	800aae4 <__s2b+0x30>
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7ff ff47 	bl	800a964 <_Balloc>
 800aad6:	b940      	cbnz	r0, 800aaea <__s2b+0x36>
 800aad8:	4602      	mov	r2, r0
 800aada:	4b19      	ldr	r3, [pc, #100]	@ (800ab40 <__s2b+0x8c>)
 800aadc:	4819      	ldr	r0, [pc, #100]	@ (800ab44 <__s2b+0x90>)
 800aade:	21d3      	movs	r1, #211	@ 0xd3
 800aae0:	f7ff fad6 	bl	800a090 <__assert_func>
 800aae4:	0052      	lsls	r2, r2, #1
 800aae6:	3101      	adds	r1, #1
 800aae8:	e7f0      	b.n	800aacc <__s2b+0x18>
 800aaea:	9b08      	ldr	r3, [sp, #32]
 800aaec:	6143      	str	r3, [r0, #20]
 800aaee:	2d09      	cmp	r5, #9
 800aaf0:	f04f 0301 	mov.w	r3, #1
 800aaf4:	6103      	str	r3, [r0, #16]
 800aaf6:	dd16      	ble.n	800ab26 <__s2b+0x72>
 800aaf8:	f104 0909 	add.w	r9, r4, #9
 800aafc:	46c8      	mov	r8, r9
 800aafe:	442c      	add	r4, r5
 800ab00:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab04:	4601      	mov	r1, r0
 800ab06:	3b30      	subs	r3, #48	@ 0x30
 800ab08:	220a      	movs	r2, #10
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f7ff ff8c 	bl	800aa28 <__multadd>
 800ab10:	45a0      	cmp	r8, r4
 800ab12:	d1f5      	bne.n	800ab00 <__s2b+0x4c>
 800ab14:	f1a5 0408 	sub.w	r4, r5, #8
 800ab18:	444c      	add	r4, r9
 800ab1a:	1b2d      	subs	r5, r5, r4
 800ab1c:	1963      	adds	r3, r4, r5
 800ab1e:	42bb      	cmp	r3, r7
 800ab20:	db04      	blt.n	800ab2c <__s2b+0x78>
 800ab22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab26:	340a      	adds	r4, #10
 800ab28:	2509      	movs	r5, #9
 800ab2a:	e7f6      	b.n	800ab1a <__s2b+0x66>
 800ab2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab30:	4601      	mov	r1, r0
 800ab32:	3b30      	subs	r3, #48	@ 0x30
 800ab34:	220a      	movs	r2, #10
 800ab36:	4630      	mov	r0, r6
 800ab38:	f7ff ff76 	bl	800aa28 <__multadd>
 800ab3c:	e7ee      	b.n	800ab1c <__s2b+0x68>
 800ab3e:	bf00      	nop
 800ab40:	0800be7d 	.word	0x0800be7d
 800ab44:	0800beee 	.word	0x0800beee

0800ab48 <__hi0bits>:
 800ab48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	bf36      	itet	cc
 800ab50:	0403      	lslcc	r3, r0, #16
 800ab52:	2000      	movcs	r0, #0
 800ab54:	2010      	movcc	r0, #16
 800ab56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab5a:	bf3c      	itt	cc
 800ab5c:	021b      	lslcc	r3, r3, #8
 800ab5e:	3008      	addcc	r0, #8
 800ab60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab64:	bf3c      	itt	cc
 800ab66:	011b      	lslcc	r3, r3, #4
 800ab68:	3004      	addcc	r0, #4
 800ab6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab6e:	bf3c      	itt	cc
 800ab70:	009b      	lslcc	r3, r3, #2
 800ab72:	3002      	addcc	r0, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	db05      	blt.n	800ab84 <__hi0bits+0x3c>
 800ab78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab7c:	f100 0001 	add.w	r0, r0, #1
 800ab80:	bf08      	it	eq
 800ab82:	2020      	moveq	r0, #32
 800ab84:	4770      	bx	lr

0800ab86 <__lo0bits>:
 800ab86:	6803      	ldr	r3, [r0, #0]
 800ab88:	4602      	mov	r2, r0
 800ab8a:	f013 0007 	ands.w	r0, r3, #7
 800ab8e:	d00b      	beq.n	800aba8 <__lo0bits+0x22>
 800ab90:	07d9      	lsls	r1, r3, #31
 800ab92:	d421      	bmi.n	800abd8 <__lo0bits+0x52>
 800ab94:	0798      	lsls	r0, r3, #30
 800ab96:	bf49      	itett	mi
 800ab98:	085b      	lsrmi	r3, r3, #1
 800ab9a:	089b      	lsrpl	r3, r3, #2
 800ab9c:	2001      	movmi	r0, #1
 800ab9e:	6013      	strmi	r3, [r2, #0]
 800aba0:	bf5c      	itt	pl
 800aba2:	6013      	strpl	r3, [r2, #0]
 800aba4:	2002      	movpl	r0, #2
 800aba6:	4770      	bx	lr
 800aba8:	b299      	uxth	r1, r3
 800abaa:	b909      	cbnz	r1, 800abb0 <__lo0bits+0x2a>
 800abac:	0c1b      	lsrs	r3, r3, #16
 800abae:	2010      	movs	r0, #16
 800abb0:	b2d9      	uxtb	r1, r3
 800abb2:	b909      	cbnz	r1, 800abb8 <__lo0bits+0x32>
 800abb4:	3008      	adds	r0, #8
 800abb6:	0a1b      	lsrs	r3, r3, #8
 800abb8:	0719      	lsls	r1, r3, #28
 800abba:	bf04      	itt	eq
 800abbc:	091b      	lsreq	r3, r3, #4
 800abbe:	3004      	addeq	r0, #4
 800abc0:	0799      	lsls	r1, r3, #30
 800abc2:	bf04      	itt	eq
 800abc4:	089b      	lsreq	r3, r3, #2
 800abc6:	3002      	addeq	r0, #2
 800abc8:	07d9      	lsls	r1, r3, #31
 800abca:	d403      	bmi.n	800abd4 <__lo0bits+0x4e>
 800abcc:	085b      	lsrs	r3, r3, #1
 800abce:	f100 0001 	add.w	r0, r0, #1
 800abd2:	d003      	beq.n	800abdc <__lo0bits+0x56>
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	4770      	bx	lr
 800abd8:	2000      	movs	r0, #0
 800abda:	4770      	bx	lr
 800abdc:	2020      	movs	r0, #32
 800abde:	4770      	bx	lr

0800abe0 <__i2b>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	460c      	mov	r4, r1
 800abe4:	2101      	movs	r1, #1
 800abe6:	f7ff febd 	bl	800a964 <_Balloc>
 800abea:	4602      	mov	r2, r0
 800abec:	b928      	cbnz	r0, 800abfa <__i2b+0x1a>
 800abee:	4b05      	ldr	r3, [pc, #20]	@ (800ac04 <__i2b+0x24>)
 800abf0:	4805      	ldr	r0, [pc, #20]	@ (800ac08 <__i2b+0x28>)
 800abf2:	f240 1145 	movw	r1, #325	@ 0x145
 800abf6:	f7ff fa4b 	bl	800a090 <__assert_func>
 800abfa:	2301      	movs	r3, #1
 800abfc:	6144      	str	r4, [r0, #20]
 800abfe:	6103      	str	r3, [r0, #16]
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	bf00      	nop
 800ac04:	0800be7d 	.word	0x0800be7d
 800ac08:	0800beee 	.word	0x0800beee

0800ac0c <__multiply>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4614      	mov	r4, r2
 800ac12:	690a      	ldr	r2, [r1, #16]
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	bfa8      	it	ge
 800ac1a:	4623      	movge	r3, r4
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	bfa4      	itt	ge
 800ac20:	460c      	movge	r4, r1
 800ac22:	461f      	movge	r7, r3
 800ac24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	6861      	ldr	r1, [r4, #4]
 800ac30:	eb0a 0609 	add.w	r6, sl, r9
 800ac34:	42b3      	cmp	r3, r6
 800ac36:	b085      	sub	sp, #20
 800ac38:	bfb8      	it	lt
 800ac3a:	3101      	addlt	r1, #1
 800ac3c:	f7ff fe92 	bl	800a964 <_Balloc>
 800ac40:	b930      	cbnz	r0, 800ac50 <__multiply+0x44>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4b44      	ldr	r3, [pc, #272]	@ (800ad58 <__multiply+0x14c>)
 800ac46:	4845      	ldr	r0, [pc, #276]	@ (800ad5c <__multiply+0x150>)
 800ac48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac4c:	f7ff fa20 	bl	800a090 <__assert_func>
 800ac50:	f100 0514 	add.w	r5, r0, #20
 800ac54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac58:	462b      	mov	r3, r5
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	4543      	cmp	r3, r8
 800ac5e:	d321      	bcc.n	800aca4 <__multiply+0x98>
 800ac60:	f107 0114 	add.w	r1, r7, #20
 800ac64:	f104 0214 	add.w	r2, r4, #20
 800ac68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac70:	9302      	str	r3, [sp, #8]
 800ac72:	1b13      	subs	r3, r2, r4
 800ac74:	3b15      	subs	r3, #21
 800ac76:	f023 0303 	bic.w	r3, r3, #3
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	f104 0715 	add.w	r7, r4, #21
 800ac80:	42ba      	cmp	r2, r7
 800ac82:	bf38      	it	cc
 800ac84:	2304      	movcc	r3, #4
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	9b02      	ldr	r3, [sp, #8]
 800ac8a:	9103      	str	r1, [sp, #12]
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	d80c      	bhi.n	800acaa <__multiply+0x9e>
 800ac90:	2e00      	cmp	r6, #0
 800ac92:	dd03      	ble.n	800ac9c <__multiply+0x90>
 800ac94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d05b      	beq.n	800ad54 <__multiply+0x148>
 800ac9c:	6106      	str	r6, [r0, #16]
 800ac9e:	b005      	add	sp, #20
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	f843 2b04 	str.w	r2, [r3], #4
 800aca8:	e7d8      	b.n	800ac5c <__multiply+0x50>
 800acaa:	f8b1 a000 	ldrh.w	sl, [r1]
 800acae:	f1ba 0f00 	cmp.w	sl, #0
 800acb2:	d024      	beq.n	800acfe <__multiply+0xf2>
 800acb4:	f104 0e14 	add.w	lr, r4, #20
 800acb8:	46a9      	mov	r9, r5
 800acba:	f04f 0c00 	mov.w	ip, #0
 800acbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acc2:	f8d9 3000 	ldr.w	r3, [r9]
 800acc6:	fa1f fb87 	uxth.w	fp, r7
 800acca:	b29b      	uxth	r3, r3
 800accc:	fb0a 330b 	mla	r3, sl, fp, r3
 800acd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800acd4:	f8d9 7000 	ldr.w	r7, [r9]
 800acd8:	4463      	add	r3, ip
 800acda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acde:	fb0a c70b 	mla	r7, sl, fp, ip
 800ace2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acec:	4572      	cmp	r2, lr
 800acee:	f849 3b04 	str.w	r3, [r9], #4
 800acf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acf6:	d8e2      	bhi.n	800acbe <__multiply+0xb2>
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	f845 c003 	str.w	ip, [r5, r3]
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad04:	3104      	adds	r1, #4
 800ad06:	f1b9 0f00 	cmp.w	r9, #0
 800ad0a:	d021      	beq.n	800ad50 <__multiply+0x144>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	f104 0c14 	add.w	ip, r4, #20
 800ad12:	46ae      	mov	lr, r5
 800ad14:	f04f 0a00 	mov.w	sl, #0
 800ad18:	f8bc b000 	ldrh.w	fp, [ip]
 800ad1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad20:	fb09 770b 	mla	r7, r9, fp, r7
 800ad24:	4457      	add	r7, sl
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad2c:	f84e 3b04 	str.w	r3, [lr], #4
 800ad30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad38:	f8be 3000 	ldrh.w	r3, [lr]
 800ad3c:	fb09 330a 	mla	r3, r9, sl, r3
 800ad40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad44:	4562      	cmp	r2, ip
 800ad46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad4a:	d8e5      	bhi.n	800ad18 <__multiply+0x10c>
 800ad4c:	9f01      	ldr	r7, [sp, #4]
 800ad4e:	51eb      	str	r3, [r5, r7]
 800ad50:	3504      	adds	r5, #4
 800ad52:	e799      	b.n	800ac88 <__multiply+0x7c>
 800ad54:	3e01      	subs	r6, #1
 800ad56:	e79b      	b.n	800ac90 <__multiply+0x84>
 800ad58:	0800be7d 	.word	0x0800be7d
 800ad5c:	0800beee 	.word	0x0800beee

0800ad60 <__pow5mult>:
 800ad60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad64:	4615      	mov	r5, r2
 800ad66:	f012 0203 	ands.w	r2, r2, #3
 800ad6a:	4607      	mov	r7, r0
 800ad6c:	460e      	mov	r6, r1
 800ad6e:	d007      	beq.n	800ad80 <__pow5mult+0x20>
 800ad70:	4c25      	ldr	r4, [pc, #148]	@ (800ae08 <__pow5mult+0xa8>)
 800ad72:	3a01      	subs	r2, #1
 800ad74:	2300      	movs	r3, #0
 800ad76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad7a:	f7ff fe55 	bl	800aa28 <__multadd>
 800ad7e:	4606      	mov	r6, r0
 800ad80:	10ad      	asrs	r5, r5, #2
 800ad82:	d03d      	beq.n	800ae00 <__pow5mult+0xa0>
 800ad84:	69fc      	ldr	r4, [r7, #28]
 800ad86:	b97c      	cbnz	r4, 800ada8 <__pow5mult+0x48>
 800ad88:	2010      	movs	r0, #16
 800ad8a:	f7ff fd23 	bl	800a7d4 <malloc>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	61f8      	str	r0, [r7, #28]
 800ad92:	b928      	cbnz	r0, 800ada0 <__pow5mult+0x40>
 800ad94:	4b1d      	ldr	r3, [pc, #116]	@ (800ae0c <__pow5mult+0xac>)
 800ad96:	481e      	ldr	r0, [pc, #120]	@ (800ae10 <__pow5mult+0xb0>)
 800ad98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad9c:	f7ff f978 	bl	800a090 <__assert_func>
 800ada0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ada4:	6004      	str	r4, [r0, #0]
 800ada6:	60c4      	str	r4, [r0, #12]
 800ada8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800adac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adb0:	b94c      	cbnz	r4, 800adc6 <__pow5mult+0x66>
 800adb2:	f240 2171 	movw	r1, #625	@ 0x271
 800adb6:	4638      	mov	r0, r7
 800adb8:	f7ff ff12 	bl	800abe0 <__i2b>
 800adbc:	2300      	movs	r3, #0
 800adbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800adc2:	4604      	mov	r4, r0
 800adc4:	6003      	str	r3, [r0, #0]
 800adc6:	f04f 0900 	mov.w	r9, #0
 800adca:	07eb      	lsls	r3, r5, #31
 800adcc:	d50a      	bpl.n	800ade4 <__pow5mult+0x84>
 800adce:	4631      	mov	r1, r6
 800add0:	4622      	mov	r2, r4
 800add2:	4638      	mov	r0, r7
 800add4:	f7ff ff1a 	bl	800ac0c <__multiply>
 800add8:	4631      	mov	r1, r6
 800adda:	4680      	mov	r8, r0
 800addc:	4638      	mov	r0, r7
 800adde:	f7ff fe01 	bl	800a9e4 <_Bfree>
 800ade2:	4646      	mov	r6, r8
 800ade4:	106d      	asrs	r5, r5, #1
 800ade6:	d00b      	beq.n	800ae00 <__pow5mult+0xa0>
 800ade8:	6820      	ldr	r0, [r4, #0]
 800adea:	b938      	cbnz	r0, 800adfc <__pow5mult+0x9c>
 800adec:	4622      	mov	r2, r4
 800adee:	4621      	mov	r1, r4
 800adf0:	4638      	mov	r0, r7
 800adf2:	f7ff ff0b 	bl	800ac0c <__multiply>
 800adf6:	6020      	str	r0, [r4, #0]
 800adf8:	f8c0 9000 	str.w	r9, [r0]
 800adfc:	4604      	mov	r4, r0
 800adfe:	e7e4      	b.n	800adca <__pow5mult+0x6a>
 800ae00:	4630      	mov	r0, r6
 800ae02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae06:	bf00      	nop
 800ae08:	0800bf48 	.word	0x0800bf48
 800ae0c:	0800bdc8 	.word	0x0800bdc8
 800ae10:	0800beee 	.word	0x0800beee

0800ae14 <__lshift>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	460c      	mov	r4, r1
 800ae1a:	6849      	ldr	r1, [r1, #4]
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae22:	68a3      	ldr	r3, [r4, #8]
 800ae24:	4607      	mov	r7, r0
 800ae26:	4691      	mov	r9, r2
 800ae28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae2c:	f108 0601 	add.w	r6, r8, #1
 800ae30:	42b3      	cmp	r3, r6
 800ae32:	db0b      	blt.n	800ae4c <__lshift+0x38>
 800ae34:	4638      	mov	r0, r7
 800ae36:	f7ff fd95 	bl	800a964 <_Balloc>
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	b948      	cbnz	r0, 800ae52 <__lshift+0x3e>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	4b28      	ldr	r3, [pc, #160]	@ (800aee4 <__lshift+0xd0>)
 800ae42:	4829      	ldr	r0, [pc, #164]	@ (800aee8 <__lshift+0xd4>)
 800ae44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae48:	f7ff f922 	bl	800a090 <__assert_func>
 800ae4c:	3101      	adds	r1, #1
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	e7ee      	b.n	800ae30 <__lshift+0x1c>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f100 0114 	add.w	r1, r0, #20
 800ae58:	f100 0210 	add.w	r2, r0, #16
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	4553      	cmp	r3, sl
 800ae60:	db33      	blt.n	800aeca <__lshift+0xb6>
 800ae62:	6920      	ldr	r0, [r4, #16]
 800ae64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae68:	f104 0314 	add.w	r3, r4, #20
 800ae6c:	f019 091f 	ands.w	r9, r9, #31
 800ae70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae78:	d02b      	beq.n	800aed2 <__lshift+0xbe>
 800ae7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae7e:	468a      	mov	sl, r1
 800ae80:	2200      	movs	r2, #0
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	fa00 f009 	lsl.w	r0, r0, r9
 800ae88:	4310      	orrs	r0, r2
 800ae8a:	f84a 0b04 	str.w	r0, [sl], #4
 800ae8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae92:	459c      	cmp	ip, r3
 800ae94:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae98:	d8f3      	bhi.n	800ae82 <__lshift+0x6e>
 800ae9a:	ebac 0304 	sub.w	r3, ip, r4
 800ae9e:	3b15      	subs	r3, #21
 800aea0:	f023 0303 	bic.w	r3, r3, #3
 800aea4:	3304      	adds	r3, #4
 800aea6:	f104 0015 	add.w	r0, r4, #21
 800aeaa:	4584      	cmp	ip, r0
 800aeac:	bf38      	it	cc
 800aeae:	2304      	movcc	r3, #4
 800aeb0:	50ca      	str	r2, [r1, r3]
 800aeb2:	b10a      	cbz	r2, 800aeb8 <__lshift+0xa4>
 800aeb4:	f108 0602 	add.w	r6, r8, #2
 800aeb8:	3e01      	subs	r6, #1
 800aeba:	4638      	mov	r0, r7
 800aebc:	612e      	str	r6, [r5, #16]
 800aebe:	4621      	mov	r1, r4
 800aec0:	f7ff fd90 	bl	800a9e4 <_Bfree>
 800aec4:	4628      	mov	r0, r5
 800aec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeca:	f842 0f04 	str.w	r0, [r2, #4]!
 800aece:	3301      	adds	r3, #1
 800aed0:	e7c5      	b.n	800ae5e <__lshift+0x4a>
 800aed2:	3904      	subs	r1, #4
 800aed4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aedc:	459c      	cmp	ip, r3
 800aede:	d8f9      	bhi.n	800aed4 <__lshift+0xc0>
 800aee0:	e7ea      	b.n	800aeb8 <__lshift+0xa4>
 800aee2:	bf00      	nop
 800aee4:	0800be7d 	.word	0x0800be7d
 800aee8:	0800beee 	.word	0x0800beee

0800aeec <__mcmp>:
 800aeec:	690a      	ldr	r2, [r1, #16]
 800aeee:	4603      	mov	r3, r0
 800aef0:	6900      	ldr	r0, [r0, #16]
 800aef2:	1a80      	subs	r0, r0, r2
 800aef4:	b530      	push	{r4, r5, lr}
 800aef6:	d10e      	bne.n	800af16 <__mcmp+0x2a>
 800aef8:	3314      	adds	r3, #20
 800aefa:	3114      	adds	r1, #20
 800aefc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af0c:	4295      	cmp	r5, r2
 800af0e:	d003      	beq.n	800af18 <__mcmp+0x2c>
 800af10:	d205      	bcs.n	800af1e <__mcmp+0x32>
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	bd30      	pop	{r4, r5, pc}
 800af18:	42a3      	cmp	r3, r4
 800af1a:	d3f3      	bcc.n	800af04 <__mcmp+0x18>
 800af1c:	e7fb      	b.n	800af16 <__mcmp+0x2a>
 800af1e:	2001      	movs	r0, #1
 800af20:	e7f9      	b.n	800af16 <__mcmp+0x2a>
	...

0800af24 <__mdiff>:
 800af24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	4689      	mov	r9, r1
 800af2a:	4606      	mov	r6, r0
 800af2c:	4611      	mov	r1, r2
 800af2e:	4648      	mov	r0, r9
 800af30:	4614      	mov	r4, r2
 800af32:	f7ff ffdb 	bl	800aeec <__mcmp>
 800af36:	1e05      	subs	r5, r0, #0
 800af38:	d112      	bne.n	800af60 <__mdiff+0x3c>
 800af3a:	4629      	mov	r1, r5
 800af3c:	4630      	mov	r0, r6
 800af3e:	f7ff fd11 	bl	800a964 <_Balloc>
 800af42:	4602      	mov	r2, r0
 800af44:	b928      	cbnz	r0, 800af52 <__mdiff+0x2e>
 800af46:	4b3f      	ldr	r3, [pc, #252]	@ (800b044 <__mdiff+0x120>)
 800af48:	f240 2137 	movw	r1, #567	@ 0x237
 800af4c:	483e      	ldr	r0, [pc, #248]	@ (800b048 <__mdiff+0x124>)
 800af4e:	f7ff f89f 	bl	800a090 <__assert_func>
 800af52:	2301      	movs	r3, #1
 800af54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af58:	4610      	mov	r0, r2
 800af5a:	b003      	add	sp, #12
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	bfbc      	itt	lt
 800af62:	464b      	movlt	r3, r9
 800af64:	46a1      	movlt	r9, r4
 800af66:	4630      	mov	r0, r6
 800af68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af6c:	bfba      	itte	lt
 800af6e:	461c      	movlt	r4, r3
 800af70:	2501      	movlt	r5, #1
 800af72:	2500      	movge	r5, #0
 800af74:	f7ff fcf6 	bl	800a964 <_Balloc>
 800af78:	4602      	mov	r2, r0
 800af7a:	b918      	cbnz	r0, 800af84 <__mdiff+0x60>
 800af7c:	4b31      	ldr	r3, [pc, #196]	@ (800b044 <__mdiff+0x120>)
 800af7e:	f240 2145 	movw	r1, #581	@ 0x245
 800af82:	e7e3      	b.n	800af4c <__mdiff+0x28>
 800af84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af88:	6926      	ldr	r6, [r4, #16]
 800af8a:	60c5      	str	r5, [r0, #12]
 800af8c:	f109 0310 	add.w	r3, r9, #16
 800af90:	f109 0514 	add.w	r5, r9, #20
 800af94:	f104 0e14 	add.w	lr, r4, #20
 800af98:	f100 0b14 	add.w	fp, r0, #20
 800af9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afa0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afa4:	9301      	str	r3, [sp, #4]
 800afa6:	46d9      	mov	r9, fp
 800afa8:	f04f 0c00 	mov.w	ip, #0
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800afb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	fa1f f38a 	uxth.w	r3, sl
 800afbc:	4619      	mov	r1, r3
 800afbe:	b283      	uxth	r3, r0
 800afc0:	1acb      	subs	r3, r1, r3
 800afc2:	0c00      	lsrs	r0, r0, #16
 800afc4:	4463      	add	r3, ip
 800afc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800afca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800afce:	b29b      	uxth	r3, r3
 800afd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800afd4:	4576      	cmp	r6, lr
 800afd6:	f849 3b04 	str.w	r3, [r9], #4
 800afda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afde:	d8e5      	bhi.n	800afac <__mdiff+0x88>
 800afe0:	1b33      	subs	r3, r6, r4
 800afe2:	3b15      	subs	r3, #21
 800afe4:	f023 0303 	bic.w	r3, r3, #3
 800afe8:	3415      	adds	r4, #21
 800afea:	3304      	adds	r3, #4
 800afec:	42a6      	cmp	r6, r4
 800afee:	bf38      	it	cc
 800aff0:	2304      	movcc	r3, #4
 800aff2:	441d      	add	r5, r3
 800aff4:	445b      	add	r3, fp
 800aff6:	461e      	mov	r6, r3
 800aff8:	462c      	mov	r4, r5
 800affa:	4544      	cmp	r4, r8
 800affc:	d30e      	bcc.n	800b01c <__mdiff+0xf8>
 800affe:	f108 0103 	add.w	r1, r8, #3
 800b002:	1b49      	subs	r1, r1, r5
 800b004:	f021 0103 	bic.w	r1, r1, #3
 800b008:	3d03      	subs	r5, #3
 800b00a:	45a8      	cmp	r8, r5
 800b00c:	bf38      	it	cc
 800b00e:	2100      	movcc	r1, #0
 800b010:	440b      	add	r3, r1
 800b012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b016:	b191      	cbz	r1, 800b03e <__mdiff+0x11a>
 800b018:	6117      	str	r7, [r2, #16]
 800b01a:	e79d      	b.n	800af58 <__mdiff+0x34>
 800b01c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b020:	46e6      	mov	lr, ip
 800b022:	0c08      	lsrs	r0, r1, #16
 800b024:	fa1c fc81 	uxtah	ip, ip, r1
 800b028:	4471      	add	r1, lr
 800b02a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b02e:	b289      	uxth	r1, r1
 800b030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b034:	f846 1b04 	str.w	r1, [r6], #4
 800b038:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b03c:	e7dd      	b.n	800affa <__mdiff+0xd6>
 800b03e:	3f01      	subs	r7, #1
 800b040:	e7e7      	b.n	800b012 <__mdiff+0xee>
 800b042:	bf00      	nop
 800b044:	0800be7d 	.word	0x0800be7d
 800b048:	0800beee 	.word	0x0800beee

0800b04c <__ulp>:
 800b04c:	b082      	sub	sp, #8
 800b04e:	ed8d 0b00 	vstr	d0, [sp]
 800b052:	9a01      	ldr	r2, [sp, #4]
 800b054:	4b0f      	ldr	r3, [pc, #60]	@ (800b094 <__ulp+0x48>)
 800b056:	4013      	ands	r3, r2
 800b058:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dc08      	bgt.n	800b072 <__ulp+0x26>
 800b060:	425b      	negs	r3, r3
 800b062:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b066:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b06a:	da04      	bge.n	800b076 <__ulp+0x2a>
 800b06c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b070:	4113      	asrs	r3, r2
 800b072:	2200      	movs	r2, #0
 800b074:	e008      	b.n	800b088 <__ulp+0x3c>
 800b076:	f1a2 0314 	sub.w	r3, r2, #20
 800b07a:	2b1e      	cmp	r3, #30
 800b07c:	bfda      	itte	le
 800b07e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b082:	40da      	lsrle	r2, r3
 800b084:	2201      	movgt	r2, #1
 800b086:	2300      	movs	r3, #0
 800b088:	4619      	mov	r1, r3
 800b08a:	4610      	mov	r0, r2
 800b08c:	ec41 0b10 	vmov	d0, r0, r1
 800b090:	b002      	add	sp, #8
 800b092:	4770      	bx	lr
 800b094:	7ff00000 	.word	0x7ff00000

0800b098 <__b2d>:
 800b098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09c:	6906      	ldr	r6, [r0, #16]
 800b09e:	f100 0814 	add.w	r8, r0, #20
 800b0a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b0a6:	1f37      	subs	r7, r6, #4
 800b0a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f7ff fd4b 	bl	800ab48 <__hi0bits>
 800b0b2:	f1c0 0320 	rsb	r3, r0, #32
 800b0b6:	280a      	cmp	r0, #10
 800b0b8:	600b      	str	r3, [r1, #0]
 800b0ba:	491b      	ldr	r1, [pc, #108]	@ (800b128 <__b2d+0x90>)
 800b0bc:	dc15      	bgt.n	800b0ea <__b2d+0x52>
 800b0be:	f1c0 0c0b 	rsb	ip, r0, #11
 800b0c2:	fa22 f30c 	lsr.w	r3, r2, ip
 800b0c6:	45b8      	cmp	r8, r7
 800b0c8:	ea43 0501 	orr.w	r5, r3, r1
 800b0cc:	bf34      	ite	cc
 800b0ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b0d2:	2300      	movcs	r3, #0
 800b0d4:	3015      	adds	r0, #21
 800b0d6:	fa02 f000 	lsl.w	r0, r2, r0
 800b0da:	fa23 f30c 	lsr.w	r3, r3, ip
 800b0de:	4303      	orrs	r3, r0
 800b0e0:	461c      	mov	r4, r3
 800b0e2:	ec45 4b10 	vmov	d0, r4, r5
 800b0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ea:	45b8      	cmp	r8, r7
 800b0ec:	bf3a      	itte	cc
 800b0ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b0f2:	f1a6 0708 	subcc.w	r7, r6, #8
 800b0f6:	2300      	movcs	r3, #0
 800b0f8:	380b      	subs	r0, #11
 800b0fa:	d012      	beq.n	800b122 <__b2d+0x8a>
 800b0fc:	f1c0 0120 	rsb	r1, r0, #32
 800b100:	fa23 f401 	lsr.w	r4, r3, r1
 800b104:	4082      	lsls	r2, r0
 800b106:	4322      	orrs	r2, r4
 800b108:	4547      	cmp	r7, r8
 800b10a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b10e:	bf8c      	ite	hi
 800b110:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b114:	2200      	movls	r2, #0
 800b116:	4083      	lsls	r3, r0
 800b118:	40ca      	lsrs	r2, r1
 800b11a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b11e:	4313      	orrs	r3, r2
 800b120:	e7de      	b.n	800b0e0 <__b2d+0x48>
 800b122:	ea42 0501 	orr.w	r5, r2, r1
 800b126:	e7db      	b.n	800b0e0 <__b2d+0x48>
 800b128:	3ff00000 	.word	0x3ff00000

0800b12c <__d2b>:
 800b12c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b130:	460f      	mov	r7, r1
 800b132:	2101      	movs	r1, #1
 800b134:	ec59 8b10 	vmov	r8, r9, d0
 800b138:	4616      	mov	r6, r2
 800b13a:	f7ff fc13 	bl	800a964 <_Balloc>
 800b13e:	4604      	mov	r4, r0
 800b140:	b930      	cbnz	r0, 800b150 <__d2b+0x24>
 800b142:	4602      	mov	r2, r0
 800b144:	4b23      	ldr	r3, [pc, #140]	@ (800b1d4 <__d2b+0xa8>)
 800b146:	4824      	ldr	r0, [pc, #144]	@ (800b1d8 <__d2b+0xac>)
 800b148:	f240 310f 	movw	r1, #783	@ 0x30f
 800b14c:	f7fe ffa0 	bl	800a090 <__assert_func>
 800b150:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b154:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b158:	b10d      	cbz	r5, 800b15e <__d2b+0x32>
 800b15a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	f1b8 0300 	subs.w	r3, r8, #0
 800b164:	d023      	beq.n	800b1ae <__d2b+0x82>
 800b166:	4668      	mov	r0, sp
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	f7ff fd0c 	bl	800ab86 <__lo0bits>
 800b16e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b172:	b1d0      	cbz	r0, 800b1aa <__d2b+0x7e>
 800b174:	f1c0 0320 	rsb	r3, r0, #32
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	430b      	orrs	r3, r1
 800b17e:	40c2      	lsrs	r2, r0
 800b180:	6163      	str	r3, [r4, #20]
 800b182:	9201      	str	r2, [sp, #4]
 800b184:	9b01      	ldr	r3, [sp, #4]
 800b186:	61a3      	str	r3, [r4, #24]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bf0c      	ite	eq
 800b18c:	2201      	moveq	r2, #1
 800b18e:	2202      	movne	r2, #2
 800b190:	6122      	str	r2, [r4, #16]
 800b192:	b1a5      	cbz	r5, 800b1be <__d2b+0x92>
 800b194:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b198:	4405      	add	r5, r0
 800b19a:	603d      	str	r5, [r7, #0]
 800b19c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b1a0:	6030      	str	r0, [r6, #0]
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	b003      	add	sp, #12
 800b1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1aa:	6161      	str	r1, [r4, #20]
 800b1ac:	e7ea      	b.n	800b184 <__d2b+0x58>
 800b1ae:	a801      	add	r0, sp, #4
 800b1b0:	f7ff fce9 	bl	800ab86 <__lo0bits>
 800b1b4:	9b01      	ldr	r3, [sp, #4]
 800b1b6:	6163      	str	r3, [r4, #20]
 800b1b8:	3020      	adds	r0, #32
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	e7e8      	b.n	800b190 <__d2b+0x64>
 800b1be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b1c6:	6038      	str	r0, [r7, #0]
 800b1c8:	6918      	ldr	r0, [r3, #16]
 800b1ca:	f7ff fcbd 	bl	800ab48 <__hi0bits>
 800b1ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1d2:	e7e5      	b.n	800b1a0 <__d2b+0x74>
 800b1d4:	0800be7d 	.word	0x0800be7d
 800b1d8:	0800beee 	.word	0x0800beee

0800b1dc <__ratio>:
 800b1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	4688      	mov	r8, r1
 800b1e2:	4669      	mov	r1, sp
 800b1e4:	4681      	mov	r9, r0
 800b1e6:	f7ff ff57 	bl	800b098 <__b2d>
 800b1ea:	a901      	add	r1, sp, #4
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	ec55 4b10 	vmov	r4, r5, d0
 800b1f2:	f7ff ff51 	bl	800b098 <__b2d>
 800b1f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b1fa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b204:	1a5b      	subs	r3, r3, r1
 800b206:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b20a:	ec57 6b10 	vmov	r6, r7, d0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	bfd6      	itet	le
 800b212:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b216:	462a      	movgt	r2, r5
 800b218:	463a      	movle	r2, r7
 800b21a:	46ab      	mov	fp, r5
 800b21c:	46a2      	mov	sl, r4
 800b21e:	bfce      	itee	gt
 800b220:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b224:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b228:	ee00 3a90 	vmovle	s1, r3
 800b22c:	ec4b ab17 	vmov	d7, sl, fp
 800b230:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b234:	b003      	add	sp, #12
 800b236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b23a <__copybits>:
 800b23a:	3901      	subs	r1, #1
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	1149      	asrs	r1, r1, #5
 800b240:	6914      	ldr	r4, [r2, #16]
 800b242:	3101      	adds	r1, #1
 800b244:	f102 0314 	add.w	r3, r2, #20
 800b248:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b24c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b250:	1f05      	subs	r5, r0, #4
 800b252:	42a3      	cmp	r3, r4
 800b254:	d30c      	bcc.n	800b270 <__copybits+0x36>
 800b256:	1aa3      	subs	r3, r4, r2
 800b258:	3b11      	subs	r3, #17
 800b25a:	f023 0303 	bic.w	r3, r3, #3
 800b25e:	3211      	adds	r2, #17
 800b260:	42a2      	cmp	r2, r4
 800b262:	bf88      	it	hi
 800b264:	2300      	movhi	r3, #0
 800b266:	4418      	add	r0, r3
 800b268:	2300      	movs	r3, #0
 800b26a:	4288      	cmp	r0, r1
 800b26c:	d305      	bcc.n	800b27a <__copybits+0x40>
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	f853 6b04 	ldr.w	r6, [r3], #4
 800b274:	f845 6f04 	str.w	r6, [r5, #4]!
 800b278:	e7eb      	b.n	800b252 <__copybits+0x18>
 800b27a:	f840 3b04 	str.w	r3, [r0], #4
 800b27e:	e7f4      	b.n	800b26a <__copybits+0x30>

0800b280 <__any_on>:
 800b280:	f100 0214 	add.w	r2, r0, #20
 800b284:	6900      	ldr	r0, [r0, #16]
 800b286:	114b      	asrs	r3, r1, #5
 800b288:	4298      	cmp	r0, r3
 800b28a:	b510      	push	{r4, lr}
 800b28c:	db11      	blt.n	800b2b2 <__any_on+0x32>
 800b28e:	dd0a      	ble.n	800b2a6 <__any_on+0x26>
 800b290:	f011 011f 	ands.w	r1, r1, #31
 800b294:	d007      	beq.n	800b2a6 <__any_on+0x26>
 800b296:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b29a:	fa24 f001 	lsr.w	r0, r4, r1
 800b29e:	fa00 f101 	lsl.w	r1, r0, r1
 800b2a2:	428c      	cmp	r4, r1
 800b2a4:	d10b      	bne.n	800b2be <__any_on+0x3e>
 800b2a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d803      	bhi.n	800b2b6 <__any_on+0x36>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	bd10      	pop	{r4, pc}
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	e7f7      	b.n	800b2a6 <__any_on+0x26>
 800b2b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2ba:	2900      	cmp	r1, #0
 800b2bc:	d0f5      	beq.n	800b2aa <__any_on+0x2a>
 800b2be:	2001      	movs	r0, #1
 800b2c0:	e7f6      	b.n	800b2b0 <__any_on+0x30>

0800b2c2 <__ascii_wctomb>:
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	b141      	cbz	r1, 800b2da <__ascii_wctomb+0x18>
 800b2c8:	2aff      	cmp	r2, #255	@ 0xff
 800b2ca:	d904      	bls.n	800b2d6 <__ascii_wctomb+0x14>
 800b2cc:	228a      	movs	r2, #138	@ 0x8a
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d4:	4770      	bx	lr
 800b2d6:	700a      	strb	r2, [r1, #0]
 800b2d8:	2001      	movs	r0, #1
 800b2da:	4770      	bx	lr

0800b2dc <__sflush_r>:
 800b2dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e4:	0716      	lsls	r6, r2, #28
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	d454      	bmi.n	800b396 <__sflush_r+0xba>
 800b2ec:	684b      	ldr	r3, [r1, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	dc02      	bgt.n	800b2f8 <__sflush_r+0x1c>
 800b2f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	dd48      	ble.n	800b38a <__sflush_r+0xae>
 800b2f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2fa:	2e00      	cmp	r6, #0
 800b2fc:	d045      	beq.n	800b38a <__sflush_r+0xae>
 800b2fe:	2300      	movs	r3, #0
 800b300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b304:	682f      	ldr	r7, [r5, #0]
 800b306:	6a21      	ldr	r1, [r4, #32]
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	d030      	beq.n	800b36e <__sflush_r+0x92>
 800b30c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	0759      	lsls	r1, r3, #29
 800b312:	d505      	bpl.n	800b320 <__sflush_r+0x44>
 800b314:	6863      	ldr	r3, [r4, #4]
 800b316:	1ad2      	subs	r2, r2, r3
 800b318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b31a:	b10b      	cbz	r3, 800b320 <__sflush_r+0x44>
 800b31c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b31e:	1ad2      	subs	r2, r2, r3
 800b320:	2300      	movs	r3, #0
 800b322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b324:	6a21      	ldr	r1, [r4, #32]
 800b326:	4628      	mov	r0, r5
 800b328:	47b0      	blx	r6
 800b32a:	1c43      	adds	r3, r0, #1
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	d106      	bne.n	800b33e <__sflush_r+0x62>
 800b330:	6829      	ldr	r1, [r5, #0]
 800b332:	291d      	cmp	r1, #29
 800b334:	d82b      	bhi.n	800b38e <__sflush_r+0xb2>
 800b336:	4a2a      	ldr	r2, [pc, #168]	@ (800b3e0 <__sflush_r+0x104>)
 800b338:	410a      	asrs	r2, r1
 800b33a:	07d6      	lsls	r6, r2, #31
 800b33c:	d427      	bmi.n	800b38e <__sflush_r+0xb2>
 800b33e:	2200      	movs	r2, #0
 800b340:	6062      	str	r2, [r4, #4]
 800b342:	04d9      	lsls	r1, r3, #19
 800b344:	6922      	ldr	r2, [r4, #16]
 800b346:	6022      	str	r2, [r4, #0]
 800b348:	d504      	bpl.n	800b354 <__sflush_r+0x78>
 800b34a:	1c42      	adds	r2, r0, #1
 800b34c:	d101      	bne.n	800b352 <__sflush_r+0x76>
 800b34e:	682b      	ldr	r3, [r5, #0]
 800b350:	b903      	cbnz	r3, 800b354 <__sflush_r+0x78>
 800b352:	6560      	str	r0, [r4, #84]	@ 0x54
 800b354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b356:	602f      	str	r7, [r5, #0]
 800b358:	b1b9      	cbz	r1, 800b38a <__sflush_r+0xae>
 800b35a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b35e:	4299      	cmp	r1, r3
 800b360:	d002      	beq.n	800b368 <__sflush_r+0x8c>
 800b362:	4628      	mov	r0, r5
 800b364:	f7fe feb2 	bl	800a0cc <_free_r>
 800b368:	2300      	movs	r3, #0
 800b36a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b36c:	e00d      	b.n	800b38a <__sflush_r+0xae>
 800b36e:	2301      	movs	r3, #1
 800b370:	4628      	mov	r0, r5
 800b372:	47b0      	blx	r6
 800b374:	4602      	mov	r2, r0
 800b376:	1c50      	adds	r0, r2, #1
 800b378:	d1c9      	bne.n	800b30e <__sflush_r+0x32>
 800b37a:	682b      	ldr	r3, [r5, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d0c6      	beq.n	800b30e <__sflush_r+0x32>
 800b380:	2b1d      	cmp	r3, #29
 800b382:	d001      	beq.n	800b388 <__sflush_r+0xac>
 800b384:	2b16      	cmp	r3, #22
 800b386:	d11e      	bne.n	800b3c6 <__sflush_r+0xea>
 800b388:	602f      	str	r7, [r5, #0]
 800b38a:	2000      	movs	r0, #0
 800b38c:	e022      	b.n	800b3d4 <__sflush_r+0xf8>
 800b38e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b392:	b21b      	sxth	r3, r3
 800b394:	e01b      	b.n	800b3ce <__sflush_r+0xf2>
 800b396:	690f      	ldr	r7, [r1, #16]
 800b398:	2f00      	cmp	r7, #0
 800b39a:	d0f6      	beq.n	800b38a <__sflush_r+0xae>
 800b39c:	0793      	lsls	r3, r2, #30
 800b39e:	680e      	ldr	r6, [r1, #0]
 800b3a0:	bf08      	it	eq
 800b3a2:	694b      	ldreq	r3, [r1, #20]
 800b3a4:	600f      	str	r7, [r1, #0]
 800b3a6:	bf18      	it	ne
 800b3a8:	2300      	movne	r3, #0
 800b3aa:	eba6 0807 	sub.w	r8, r6, r7
 800b3ae:	608b      	str	r3, [r1, #8]
 800b3b0:	f1b8 0f00 	cmp.w	r8, #0
 800b3b4:	dde9      	ble.n	800b38a <__sflush_r+0xae>
 800b3b6:	6a21      	ldr	r1, [r4, #32]
 800b3b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3ba:	4643      	mov	r3, r8
 800b3bc:	463a      	mov	r2, r7
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b0      	blx	r6
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	dc08      	bgt.n	800b3d8 <__sflush_r+0xfc>
 800b3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d8:	4407      	add	r7, r0
 800b3da:	eba8 0800 	sub.w	r8, r8, r0
 800b3de:	e7e7      	b.n	800b3b0 <__sflush_r+0xd4>
 800b3e0:	dfbffffe 	.word	0xdfbffffe

0800b3e4 <_fflush_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	690b      	ldr	r3, [r1, #16]
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	b913      	cbnz	r3, 800b3f4 <_fflush_r+0x10>
 800b3ee:	2500      	movs	r5, #0
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	b118      	cbz	r0, 800b3fe <_fflush_r+0x1a>
 800b3f6:	6a03      	ldr	r3, [r0, #32]
 800b3f8:	b90b      	cbnz	r3, 800b3fe <_fflush_r+0x1a>
 800b3fa:	f7fe fccf 	bl	8009d9c <__sinit>
 800b3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0f3      	beq.n	800b3ee <_fflush_r+0xa>
 800b406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b408:	07d0      	lsls	r0, r2, #31
 800b40a:	d404      	bmi.n	800b416 <_fflush_r+0x32>
 800b40c:	0599      	lsls	r1, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_fflush_r+0x32>
 800b410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b412:	f7fe fe24 	bl	800a05e <__retarget_lock_acquire_recursive>
 800b416:	4628      	mov	r0, r5
 800b418:	4621      	mov	r1, r4
 800b41a:	f7ff ff5f 	bl	800b2dc <__sflush_r>
 800b41e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b420:	07da      	lsls	r2, r3, #31
 800b422:	4605      	mov	r5, r0
 800b424:	d4e4      	bmi.n	800b3f0 <_fflush_r+0xc>
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	059b      	lsls	r3, r3, #22
 800b42a:	d4e1      	bmi.n	800b3f0 <_fflush_r+0xc>
 800b42c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b42e:	f7fe fe17 	bl	800a060 <__retarget_lock_release_recursive>
 800b432:	e7dd      	b.n	800b3f0 <_fflush_r+0xc>

0800b434 <fiprintf>:
 800b434:	b40e      	push	{r1, r2, r3}
 800b436:	b503      	push	{r0, r1, lr}
 800b438:	4601      	mov	r1, r0
 800b43a:	ab03      	add	r3, sp, #12
 800b43c:	4805      	ldr	r0, [pc, #20]	@ (800b454 <fiprintf+0x20>)
 800b43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b442:	6800      	ldr	r0, [r0, #0]
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	f000 f85b 	bl	800b500 <_vfiprintf_r>
 800b44a:	b002      	add	sp, #8
 800b44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b450:	b003      	add	sp, #12
 800b452:	4770      	bx	lr
 800b454:	24000188 	.word	0x24000188

0800b458 <_sbrk_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d06      	ldr	r5, [pc, #24]	@ (800b474 <_sbrk_r+0x1c>)
 800b45c:	2300      	movs	r3, #0
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	f7f5 fe48 	bl	80010f8 <_sbrk>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_sbrk_r+0x1a>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_sbrk_r+0x1a>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	240004ec 	.word	0x240004ec

0800b478 <abort>:
 800b478:	b508      	push	{r3, lr}
 800b47a:	2006      	movs	r0, #6
 800b47c:	f000 fba2 	bl	800bbc4 <raise>
 800b480:	2001      	movs	r0, #1
 800b482:	f7f5 fdc1 	bl	8001008 <_exit>

0800b486 <_calloc_r>:
 800b486:	b570      	push	{r4, r5, r6, lr}
 800b488:	fba1 5402 	umull	r5, r4, r1, r2
 800b48c:	b93c      	cbnz	r4, 800b49e <_calloc_r+0x18>
 800b48e:	4629      	mov	r1, r5
 800b490:	f7ff f9ca 	bl	800a828 <_malloc_r>
 800b494:	4606      	mov	r6, r0
 800b496:	b928      	cbnz	r0, 800b4a4 <_calloc_r+0x1e>
 800b498:	2600      	movs	r6, #0
 800b49a:	4630      	mov	r0, r6
 800b49c:	bd70      	pop	{r4, r5, r6, pc}
 800b49e:	220c      	movs	r2, #12
 800b4a0:	6002      	str	r2, [r0, #0]
 800b4a2:	e7f9      	b.n	800b498 <_calloc_r+0x12>
 800b4a4:	462a      	mov	r2, r5
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f7fe fcf1 	bl	8009e8e <memset>
 800b4ac:	e7f5      	b.n	800b49a <_calloc_r+0x14>

0800b4ae <__sfputc_r>:
 800b4ae:	6893      	ldr	r3, [r2, #8]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	b410      	push	{r4}
 800b4b6:	6093      	str	r3, [r2, #8]
 800b4b8:	da08      	bge.n	800b4cc <__sfputc_r+0x1e>
 800b4ba:	6994      	ldr	r4, [r2, #24]
 800b4bc:	42a3      	cmp	r3, r4
 800b4be:	db01      	blt.n	800b4c4 <__sfputc_r+0x16>
 800b4c0:	290a      	cmp	r1, #10
 800b4c2:	d103      	bne.n	800b4cc <__sfputc_r+0x1e>
 800b4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c8:	f000 bac0 	b.w	800ba4c <__swbuf_r>
 800b4cc:	6813      	ldr	r3, [r2, #0]
 800b4ce:	1c58      	adds	r0, r3, #1
 800b4d0:	6010      	str	r0, [r2, #0]
 800b4d2:	7019      	strb	r1, [r3, #0]
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <__sfputs_r>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	4614      	mov	r4, r2
 800b4e4:	18d5      	adds	r5, r2, r3
 800b4e6:	42ac      	cmp	r4, r5
 800b4e8:	d101      	bne.n	800b4ee <__sfputs_r+0x12>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e007      	b.n	800b4fe <__sfputs_r+0x22>
 800b4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f2:	463a      	mov	r2, r7
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f7ff ffda 	bl	800b4ae <__sfputc_r>
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	d1f3      	bne.n	800b4e6 <__sfputs_r+0xa>
 800b4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b500 <_vfiprintf_r>:
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	460d      	mov	r5, r1
 800b506:	b09d      	sub	sp, #116	@ 0x74
 800b508:	4614      	mov	r4, r2
 800b50a:	4698      	mov	r8, r3
 800b50c:	4606      	mov	r6, r0
 800b50e:	b118      	cbz	r0, 800b518 <_vfiprintf_r+0x18>
 800b510:	6a03      	ldr	r3, [r0, #32]
 800b512:	b90b      	cbnz	r3, 800b518 <_vfiprintf_r+0x18>
 800b514:	f7fe fc42 	bl	8009d9c <__sinit>
 800b518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b51a:	07d9      	lsls	r1, r3, #31
 800b51c:	d405      	bmi.n	800b52a <_vfiprintf_r+0x2a>
 800b51e:	89ab      	ldrh	r3, [r5, #12]
 800b520:	059a      	lsls	r2, r3, #22
 800b522:	d402      	bmi.n	800b52a <_vfiprintf_r+0x2a>
 800b524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b526:	f7fe fd9a 	bl	800a05e <__retarget_lock_acquire_recursive>
 800b52a:	89ab      	ldrh	r3, [r5, #12]
 800b52c:	071b      	lsls	r3, r3, #28
 800b52e:	d501      	bpl.n	800b534 <_vfiprintf_r+0x34>
 800b530:	692b      	ldr	r3, [r5, #16]
 800b532:	b99b      	cbnz	r3, 800b55c <_vfiprintf_r+0x5c>
 800b534:	4629      	mov	r1, r5
 800b536:	4630      	mov	r0, r6
 800b538:	f000 fac6 	bl	800bac8 <__swsetup_r>
 800b53c:	b170      	cbz	r0, 800b55c <_vfiprintf_r+0x5c>
 800b53e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b540:	07dc      	lsls	r4, r3, #31
 800b542:	d504      	bpl.n	800b54e <_vfiprintf_r+0x4e>
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	b01d      	add	sp, #116	@ 0x74
 800b54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54e:	89ab      	ldrh	r3, [r5, #12]
 800b550:	0598      	lsls	r0, r3, #22
 800b552:	d4f7      	bmi.n	800b544 <_vfiprintf_r+0x44>
 800b554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b556:	f7fe fd83 	bl	800a060 <__retarget_lock_release_recursive>
 800b55a:	e7f3      	b.n	800b544 <_vfiprintf_r+0x44>
 800b55c:	2300      	movs	r3, #0
 800b55e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b560:	2320      	movs	r3, #32
 800b562:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b566:	f8cd 800c 	str.w	r8, [sp, #12]
 800b56a:	2330      	movs	r3, #48	@ 0x30
 800b56c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b71c <_vfiprintf_r+0x21c>
 800b570:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b574:	f04f 0901 	mov.w	r9, #1
 800b578:	4623      	mov	r3, r4
 800b57a:	469a      	mov	sl, r3
 800b57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b580:	b10a      	cbz	r2, 800b586 <_vfiprintf_r+0x86>
 800b582:	2a25      	cmp	r2, #37	@ 0x25
 800b584:	d1f9      	bne.n	800b57a <_vfiprintf_r+0x7a>
 800b586:	ebba 0b04 	subs.w	fp, sl, r4
 800b58a:	d00b      	beq.n	800b5a4 <_vfiprintf_r+0xa4>
 800b58c:	465b      	mov	r3, fp
 800b58e:	4622      	mov	r2, r4
 800b590:	4629      	mov	r1, r5
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ffa2 	bl	800b4dc <__sfputs_r>
 800b598:	3001      	adds	r0, #1
 800b59a:	f000 80a7 	beq.w	800b6ec <_vfiprintf_r+0x1ec>
 800b59e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5a0:	445a      	add	r2, fp
 800b5a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 809f 	beq.w	800b6ec <_vfiprintf_r+0x1ec>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b8:	f10a 0a01 	add.w	sl, sl, #1
 800b5bc:	9304      	str	r3, [sp, #16]
 800b5be:	9307      	str	r3, [sp, #28]
 800b5c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5c6:	4654      	mov	r4, sl
 800b5c8:	2205      	movs	r2, #5
 800b5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ce:	4853      	ldr	r0, [pc, #332]	@ (800b71c <_vfiprintf_r+0x21c>)
 800b5d0:	f7f4 fe9e 	bl	8000310 <memchr>
 800b5d4:	9a04      	ldr	r2, [sp, #16]
 800b5d6:	b9d8      	cbnz	r0, 800b610 <_vfiprintf_r+0x110>
 800b5d8:	06d1      	lsls	r1, r2, #27
 800b5da:	bf44      	itt	mi
 800b5dc:	2320      	movmi	r3, #32
 800b5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5e2:	0713      	lsls	r3, r2, #28
 800b5e4:	bf44      	itt	mi
 800b5e6:	232b      	movmi	r3, #43	@ 0x2b
 800b5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5f2:	d015      	beq.n	800b620 <_vfiprintf_r+0x120>
 800b5f4:	9a07      	ldr	r2, [sp, #28]
 800b5f6:	4654      	mov	r4, sl
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f04f 0c0a 	mov.w	ip, #10
 800b5fe:	4621      	mov	r1, r4
 800b600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b604:	3b30      	subs	r3, #48	@ 0x30
 800b606:	2b09      	cmp	r3, #9
 800b608:	d94b      	bls.n	800b6a2 <_vfiprintf_r+0x1a2>
 800b60a:	b1b0      	cbz	r0, 800b63a <_vfiprintf_r+0x13a>
 800b60c:	9207      	str	r2, [sp, #28]
 800b60e:	e014      	b.n	800b63a <_vfiprintf_r+0x13a>
 800b610:	eba0 0308 	sub.w	r3, r0, r8
 800b614:	fa09 f303 	lsl.w	r3, r9, r3
 800b618:	4313      	orrs	r3, r2
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	46a2      	mov	sl, r4
 800b61e:	e7d2      	b.n	800b5c6 <_vfiprintf_r+0xc6>
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	1d19      	adds	r1, r3, #4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	9103      	str	r1, [sp, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bfbb      	ittet	lt
 800b62c:	425b      	neglt	r3, r3
 800b62e:	f042 0202 	orrlt.w	r2, r2, #2
 800b632:	9307      	strge	r3, [sp, #28]
 800b634:	9307      	strlt	r3, [sp, #28]
 800b636:	bfb8      	it	lt
 800b638:	9204      	strlt	r2, [sp, #16]
 800b63a:	7823      	ldrb	r3, [r4, #0]
 800b63c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b63e:	d10a      	bne.n	800b656 <_vfiprintf_r+0x156>
 800b640:	7863      	ldrb	r3, [r4, #1]
 800b642:	2b2a      	cmp	r3, #42	@ 0x2a
 800b644:	d132      	bne.n	800b6ac <_vfiprintf_r+0x1ac>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	1d1a      	adds	r2, r3, #4
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	9203      	str	r2, [sp, #12]
 800b64e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b652:	3402      	adds	r4, #2
 800b654:	9305      	str	r3, [sp, #20]
 800b656:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b72c <_vfiprintf_r+0x22c>
 800b65a:	7821      	ldrb	r1, [r4, #0]
 800b65c:	2203      	movs	r2, #3
 800b65e:	4650      	mov	r0, sl
 800b660:	f7f4 fe56 	bl	8000310 <memchr>
 800b664:	b138      	cbz	r0, 800b676 <_vfiprintf_r+0x176>
 800b666:	9b04      	ldr	r3, [sp, #16]
 800b668:	eba0 000a 	sub.w	r0, r0, sl
 800b66c:	2240      	movs	r2, #64	@ 0x40
 800b66e:	4082      	lsls	r2, r0
 800b670:	4313      	orrs	r3, r2
 800b672:	3401      	adds	r4, #1
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67a:	4829      	ldr	r0, [pc, #164]	@ (800b720 <_vfiprintf_r+0x220>)
 800b67c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b680:	2206      	movs	r2, #6
 800b682:	f7f4 fe45 	bl	8000310 <memchr>
 800b686:	2800      	cmp	r0, #0
 800b688:	d03f      	beq.n	800b70a <_vfiprintf_r+0x20a>
 800b68a:	4b26      	ldr	r3, [pc, #152]	@ (800b724 <_vfiprintf_r+0x224>)
 800b68c:	bb1b      	cbnz	r3, 800b6d6 <_vfiprintf_r+0x1d6>
 800b68e:	9b03      	ldr	r3, [sp, #12]
 800b690:	3307      	adds	r3, #7
 800b692:	f023 0307 	bic.w	r3, r3, #7
 800b696:	3308      	adds	r3, #8
 800b698:	9303      	str	r3, [sp, #12]
 800b69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b69c:	443b      	add	r3, r7
 800b69e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a0:	e76a      	b.n	800b578 <_vfiprintf_r+0x78>
 800b6a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	e7a8      	b.n	800b5fe <_vfiprintf_r+0xfe>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	3401      	adds	r4, #1
 800b6b0:	9305      	str	r3, [sp, #20]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	f04f 0c0a 	mov.w	ip, #10
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6be:	3a30      	subs	r2, #48	@ 0x30
 800b6c0:	2a09      	cmp	r2, #9
 800b6c2:	d903      	bls.n	800b6cc <_vfiprintf_r+0x1cc>
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0c6      	beq.n	800b656 <_vfiprintf_r+0x156>
 800b6c8:	9105      	str	r1, [sp, #20]
 800b6ca:	e7c4      	b.n	800b656 <_vfiprintf_r+0x156>
 800b6cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e7f0      	b.n	800b6b8 <_vfiprintf_r+0x1b8>
 800b6d6:	ab03      	add	r3, sp, #12
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	462a      	mov	r2, r5
 800b6dc:	4b12      	ldr	r3, [pc, #72]	@ (800b728 <_vfiprintf_r+0x228>)
 800b6de:	a904      	add	r1, sp, #16
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f3af 8000 	nop.w
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	1c78      	adds	r0, r7, #1
 800b6ea:	d1d6      	bne.n	800b69a <_vfiprintf_r+0x19a>
 800b6ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6ee:	07d9      	lsls	r1, r3, #31
 800b6f0:	d405      	bmi.n	800b6fe <_vfiprintf_r+0x1fe>
 800b6f2:	89ab      	ldrh	r3, [r5, #12]
 800b6f4:	059a      	lsls	r2, r3, #22
 800b6f6:	d402      	bmi.n	800b6fe <_vfiprintf_r+0x1fe>
 800b6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6fa:	f7fe fcb1 	bl	800a060 <__retarget_lock_release_recursive>
 800b6fe:	89ab      	ldrh	r3, [r5, #12]
 800b700:	065b      	lsls	r3, r3, #25
 800b702:	f53f af1f 	bmi.w	800b544 <_vfiprintf_r+0x44>
 800b706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b708:	e71e      	b.n	800b548 <_vfiprintf_r+0x48>
 800b70a:	ab03      	add	r3, sp, #12
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	462a      	mov	r2, r5
 800b710:	4b05      	ldr	r3, [pc, #20]	@ (800b728 <_vfiprintf_r+0x228>)
 800b712:	a904      	add	r1, sp, #16
 800b714:	4630      	mov	r0, r6
 800b716:	f000 f879 	bl	800b80c <_printf_i>
 800b71a:	e7e4      	b.n	800b6e6 <_vfiprintf_r+0x1e6>
 800b71c:	0800c149 	.word	0x0800c149
 800b720:	0800c153 	.word	0x0800c153
 800b724:	00000000 	.word	0x00000000
 800b728:	0800b4dd 	.word	0x0800b4dd
 800b72c:	0800c14f 	.word	0x0800c14f

0800b730 <_printf_common>:
 800b730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b734:	4616      	mov	r6, r2
 800b736:	4698      	mov	r8, r3
 800b738:	688a      	ldr	r2, [r1, #8]
 800b73a:	690b      	ldr	r3, [r1, #16]
 800b73c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b740:	4293      	cmp	r3, r2
 800b742:	bfb8      	it	lt
 800b744:	4613      	movlt	r3, r2
 800b746:	6033      	str	r3, [r6, #0]
 800b748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b74c:	4607      	mov	r7, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	b10a      	cbz	r2, 800b756 <_printf_common+0x26>
 800b752:	3301      	adds	r3, #1
 800b754:	6033      	str	r3, [r6, #0]
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	0699      	lsls	r1, r3, #26
 800b75a:	bf42      	ittt	mi
 800b75c:	6833      	ldrmi	r3, [r6, #0]
 800b75e:	3302      	addmi	r3, #2
 800b760:	6033      	strmi	r3, [r6, #0]
 800b762:	6825      	ldr	r5, [r4, #0]
 800b764:	f015 0506 	ands.w	r5, r5, #6
 800b768:	d106      	bne.n	800b778 <_printf_common+0x48>
 800b76a:	f104 0a19 	add.w	sl, r4, #25
 800b76e:	68e3      	ldr	r3, [r4, #12]
 800b770:	6832      	ldr	r2, [r6, #0]
 800b772:	1a9b      	subs	r3, r3, r2
 800b774:	42ab      	cmp	r3, r5
 800b776:	dc26      	bgt.n	800b7c6 <_printf_common+0x96>
 800b778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b77c:	6822      	ldr	r2, [r4, #0]
 800b77e:	3b00      	subs	r3, #0
 800b780:	bf18      	it	ne
 800b782:	2301      	movne	r3, #1
 800b784:	0692      	lsls	r2, r2, #26
 800b786:	d42b      	bmi.n	800b7e0 <_printf_common+0xb0>
 800b788:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b78c:	4641      	mov	r1, r8
 800b78e:	4638      	mov	r0, r7
 800b790:	47c8      	blx	r9
 800b792:	3001      	adds	r0, #1
 800b794:	d01e      	beq.n	800b7d4 <_printf_common+0xa4>
 800b796:	6823      	ldr	r3, [r4, #0]
 800b798:	6922      	ldr	r2, [r4, #16]
 800b79a:	f003 0306 	and.w	r3, r3, #6
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	bf02      	ittt	eq
 800b7a2:	68e5      	ldreq	r5, [r4, #12]
 800b7a4:	6833      	ldreq	r3, [r6, #0]
 800b7a6:	1aed      	subeq	r5, r5, r3
 800b7a8:	68a3      	ldr	r3, [r4, #8]
 800b7aa:	bf0c      	ite	eq
 800b7ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7b0:	2500      	movne	r5, #0
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	bfc4      	itt	gt
 800b7b6:	1a9b      	subgt	r3, r3, r2
 800b7b8:	18ed      	addgt	r5, r5, r3
 800b7ba:	2600      	movs	r6, #0
 800b7bc:	341a      	adds	r4, #26
 800b7be:	42b5      	cmp	r5, r6
 800b7c0:	d11a      	bne.n	800b7f8 <_printf_common+0xc8>
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	e008      	b.n	800b7d8 <_printf_common+0xa8>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	4652      	mov	r2, sl
 800b7ca:	4641      	mov	r1, r8
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	47c8      	blx	r9
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d103      	bne.n	800b7dc <_printf_common+0xac>
 800b7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7dc:	3501      	adds	r5, #1
 800b7de:	e7c6      	b.n	800b76e <_printf_common+0x3e>
 800b7e0:	18e1      	adds	r1, r4, r3
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	2030      	movs	r0, #48	@ 0x30
 800b7e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7ea:	4422      	add	r2, r4
 800b7ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7f4:	3302      	adds	r3, #2
 800b7f6:	e7c7      	b.n	800b788 <_printf_common+0x58>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	4622      	mov	r2, r4
 800b7fc:	4641      	mov	r1, r8
 800b7fe:	4638      	mov	r0, r7
 800b800:	47c8      	blx	r9
 800b802:	3001      	adds	r0, #1
 800b804:	d0e6      	beq.n	800b7d4 <_printf_common+0xa4>
 800b806:	3601      	adds	r6, #1
 800b808:	e7d9      	b.n	800b7be <_printf_common+0x8e>
	...

0800b80c <_printf_i>:
 800b80c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b810:	7e0f      	ldrb	r7, [r1, #24]
 800b812:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b814:	2f78      	cmp	r7, #120	@ 0x78
 800b816:	4691      	mov	r9, r2
 800b818:	4680      	mov	r8, r0
 800b81a:	460c      	mov	r4, r1
 800b81c:	469a      	mov	sl, r3
 800b81e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b822:	d807      	bhi.n	800b834 <_printf_i+0x28>
 800b824:	2f62      	cmp	r7, #98	@ 0x62
 800b826:	d80a      	bhi.n	800b83e <_printf_i+0x32>
 800b828:	2f00      	cmp	r7, #0
 800b82a:	f000 80d2 	beq.w	800b9d2 <_printf_i+0x1c6>
 800b82e:	2f58      	cmp	r7, #88	@ 0x58
 800b830:	f000 80b9 	beq.w	800b9a6 <_printf_i+0x19a>
 800b834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b83c:	e03a      	b.n	800b8b4 <_printf_i+0xa8>
 800b83e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b842:	2b15      	cmp	r3, #21
 800b844:	d8f6      	bhi.n	800b834 <_printf_i+0x28>
 800b846:	a101      	add	r1, pc, #4	@ (adr r1, 800b84c <_printf_i+0x40>)
 800b848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b84c:	0800b8a5 	.word	0x0800b8a5
 800b850:	0800b8b9 	.word	0x0800b8b9
 800b854:	0800b835 	.word	0x0800b835
 800b858:	0800b835 	.word	0x0800b835
 800b85c:	0800b835 	.word	0x0800b835
 800b860:	0800b835 	.word	0x0800b835
 800b864:	0800b8b9 	.word	0x0800b8b9
 800b868:	0800b835 	.word	0x0800b835
 800b86c:	0800b835 	.word	0x0800b835
 800b870:	0800b835 	.word	0x0800b835
 800b874:	0800b835 	.word	0x0800b835
 800b878:	0800b9b9 	.word	0x0800b9b9
 800b87c:	0800b8e3 	.word	0x0800b8e3
 800b880:	0800b973 	.word	0x0800b973
 800b884:	0800b835 	.word	0x0800b835
 800b888:	0800b835 	.word	0x0800b835
 800b88c:	0800b9db 	.word	0x0800b9db
 800b890:	0800b835 	.word	0x0800b835
 800b894:	0800b8e3 	.word	0x0800b8e3
 800b898:	0800b835 	.word	0x0800b835
 800b89c:	0800b835 	.word	0x0800b835
 800b8a0:	0800b97b 	.word	0x0800b97b
 800b8a4:	6833      	ldr	r3, [r6, #0]
 800b8a6:	1d1a      	adds	r2, r3, #4
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6032      	str	r2, [r6, #0]
 800b8ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e09d      	b.n	800b9f4 <_printf_i+0x1e8>
 800b8b8:	6833      	ldr	r3, [r6, #0]
 800b8ba:	6820      	ldr	r0, [r4, #0]
 800b8bc:	1d19      	adds	r1, r3, #4
 800b8be:	6031      	str	r1, [r6, #0]
 800b8c0:	0606      	lsls	r6, r0, #24
 800b8c2:	d501      	bpl.n	800b8c8 <_printf_i+0xbc>
 800b8c4:	681d      	ldr	r5, [r3, #0]
 800b8c6:	e003      	b.n	800b8d0 <_printf_i+0xc4>
 800b8c8:	0645      	lsls	r5, r0, #25
 800b8ca:	d5fb      	bpl.n	800b8c4 <_printf_i+0xb8>
 800b8cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8d0:	2d00      	cmp	r5, #0
 800b8d2:	da03      	bge.n	800b8dc <_printf_i+0xd0>
 800b8d4:	232d      	movs	r3, #45	@ 0x2d
 800b8d6:	426d      	negs	r5, r5
 800b8d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8dc:	4859      	ldr	r0, [pc, #356]	@ (800ba44 <_printf_i+0x238>)
 800b8de:	230a      	movs	r3, #10
 800b8e0:	e011      	b.n	800b906 <_printf_i+0xfa>
 800b8e2:	6821      	ldr	r1, [r4, #0]
 800b8e4:	6833      	ldr	r3, [r6, #0]
 800b8e6:	0608      	lsls	r0, r1, #24
 800b8e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8ec:	d402      	bmi.n	800b8f4 <_printf_i+0xe8>
 800b8ee:	0649      	lsls	r1, r1, #25
 800b8f0:	bf48      	it	mi
 800b8f2:	b2ad      	uxthmi	r5, r5
 800b8f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8f6:	4853      	ldr	r0, [pc, #332]	@ (800ba44 <_printf_i+0x238>)
 800b8f8:	6033      	str	r3, [r6, #0]
 800b8fa:	bf14      	ite	ne
 800b8fc:	230a      	movne	r3, #10
 800b8fe:	2308      	moveq	r3, #8
 800b900:	2100      	movs	r1, #0
 800b902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b906:	6866      	ldr	r6, [r4, #4]
 800b908:	60a6      	str	r6, [r4, #8]
 800b90a:	2e00      	cmp	r6, #0
 800b90c:	bfa2      	ittt	ge
 800b90e:	6821      	ldrge	r1, [r4, #0]
 800b910:	f021 0104 	bicge.w	r1, r1, #4
 800b914:	6021      	strge	r1, [r4, #0]
 800b916:	b90d      	cbnz	r5, 800b91c <_printf_i+0x110>
 800b918:	2e00      	cmp	r6, #0
 800b91a:	d04b      	beq.n	800b9b4 <_printf_i+0x1a8>
 800b91c:	4616      	mov	r6, r2
 800b91e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b922:	fb03 5711 	mls	r7, r3, r1, r5
 800b926:	5dc7      	ldrb	r7, [r0, r7]
 800b928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b92c:	462f      	mov	r7, r5
 800b92e:	42bb      	cmp	r3, r7
 800b930:	460d      	mov	r5, r1
 800b932:	d9f4      	bls.n	800b91e <_printf_i+0x112>
 800b934:	2b08      	cmp	r3, #8
 800b936:	d10b      	bne.n	800b950 <_printf_i+0x144>
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	07df      	lsls	r7, r3, #31
 800b93c:	d508      	bpl.n	800b950 <_printf_i+0x144>
 800b93e:	6923      	ldr	r3, [r4, #16]
 800b940:	6861      	ldr	r1, [r4, #4]
 800b942:	4299      	cmp	r1, r3
 800b944:	bfde      	ittt	le
 800b946:	2330      	movle	r3, #48	@ 0x30
 800b948:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b94c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b950:	1b92      	subs	r2, r2, r6
 800b952:	6122      	str	r2, [r4, #16]
 800b954:	f8cd a000 	str.w	sl, [sp]
 800b958:	464b      	mov	r3, r9
 800b95a:	aa03      	add	r2, sp, #12
 800b95c:	4621      	mov	r1, r4
 800b95e:	4640      	mov	r0, r8
 800b960:	f7ff fee6 	bl	800b730 <_printf_common>
 800b964:	3001      	adds	r0, #1
 800b966:	d14a      	bne.n	800b9fe <_printf_i+0x1f2>
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	b004      	add	sp, #16
 800b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	f043 0320 	orr.w	r3, r3, #32
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	4833      	ldr	r0, [pc, #204]	@ (800ba48 <_printf_i+0x23c>)
 800b97c:	2778      	movs	r7, #120	@ 0x78
 800b97e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	6831      	ldr	r1, [r6, #0]
 800b986:	061f      	lsls	r7, r3, #24
 800b988:	f851 5b04 	ldr.w	r5, [r1], #4
 800b98c:	d402      	bmi.n	800b994 <_printf_i+0x188>
 800b98e:	065f      	lsls	r7, r3, #25
 800b990:	bf48      	it	mi
 800b992:	b2ad      	uxthmi	r5, r5
 800b994:	6031      	str	r1, [r6, #0]
 800b996:	07d9      	lsls	r1, r3, #31
 800b998:	bf44      	itt	mi
 800b99a:	f043 0320 	orrmi.w	r3, r3, #32
 800b99e:	6023      	strmi	r3, [r4, #0]
 800b9a0:	b11d      	cbz	r5, 800b9aa <_printf_i+0x19e>
 800b9a2:	2310      	movs	r3, #16
 800b9a4:	e7ac      	b.n	800b900 <_printf_i+0xf4>
 800b9a6:	4827      	ldr	r0, [pc, #156]	@ (800ba44 <_printf_i+0x238>)
 800b9a8:	e7e9      	b.n	800b97e <_printf_i+0x172>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	f023 0320 	bic.w	r3, r3, #32
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	e7f6      	b.n	800b9a2 <_printf_i+0x196>
 800b9b4:	4616      	mov	r6, r2
 800b9b6:	e7bd      	b.n	800b934 <_printf_i+0x128>
 800b9b8:	6833      	ldr	r3, [r6, #0]
 800b9ba:	6825      	ldr	r5, [r4, #0]
 800b9bc:	6961      	ldr	r1, [r4, #20]
 800b9be:	1d18      	adds	r0, r3, #4
 800b9c0:	6030      	str	r0, [r6, #0]
 800b9c2:	062e      	lsls	r6, r5, #24
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	d501      	bpl.n	800b9cc <_printf_i+0x1c0>
 800b9c8:	6019      	str	r1, [r3, #0]
 800b9ca:	e002      	b.n	800b9d2 <_printf_i+0x1c6>
 800b9cc:	0668      	lsls	r0, r5, #25
 800b9ce:	d5fb      	bpl.n	800b9c8 <_printf_i+0x1bc>
 800b9d0:	8019      	strh	r1, [r3, #0]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	6123      	str	r3, [r4, #16]
 800b9d6:	4616      	mov	r6, r2
 800b9d8:	e7bc      	b.n	800b954 <_printf_i+0x148>
 800b9da:	6833      	ldr	r3, [r6, #0]
 800b9dc:	1d1a      	adds	r2, r3, #4
 800b9de:	6032      	str	r2, [r6, #0]
 800b9e0:	681e      	ldr	r6, [r3, #0]
 800b9e2:	6862      	ldr	r2, [r4, #4]
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f7f4 fc92 	bl	8000310 <memchr>
 800b9ec:	b108      	cbz	r0, 800b9f2 <_printf_i+0x1e6>
 800b9ee:	1b80      	subs	r0, r0, r6
 800b9f0:	6060      	str	r0, [r4, #4]
 800b9f2:	6863      	ldr	r3, [r4, #4]
 800b9f4:	6123      	str	r3, [r4, #16]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9fc:	e7aa      	b.n	800b954 <_printf_i+0x148>
 800b9fe:	6923      	ldr	r3, [r4, #16]
 800ba00:	4632      	mov	r2, r6
 800ba02:	4649      	mov	r1, r9
 800ba04:	4640      	mov	r0, r8
 800ba06:	47d0      	blx	sl
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d0ad      	beq.n	800b968 <_printf_i+0x15c>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	079b      	lsls	r3, r3, #30
 800ba10:	d413      	bmi.n	800ba3a <_printf_i+0x22e>
 800ba12:	68e0      	ldr	r0, [r4, #12]
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	4298      	cmp	r0, r3
 800ba18:	bfb8      	it	lt
 800ba1a:	4618      	movlt	r0, r3
 800ba1c:	e7a6      	b.n	800b96c <_printf_i+0x160>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	4632      	mov	r2, r6
 800ba22:	4649      	mov	r1, r9
 800ba24:	4640      	mov	r0, r8
 800ba26:	47d0      	blx	sl
 800ba28:	3001      	adds	r0, #1
 800ba2a:	d09d      	beq.n	800b968 <_printf_i+0x15c>
 800ba2c:	3501      	adds	r5, #1
 800ba2e:	68e3      	ldr	r3, [r4, #12]
 800ba30:	9903      	ldr	r1, [sp, #12]
 800ba32:	1a5b      	subs	r3, r3, r1
 800ba34:	42ab      	cmp	r3, r5
 800ba36:	dcf2      	bgt.n	800ba1e <_printf_i+0x212>
 800ba38:	e7eb      	b.n	800ba12 <_printf_i+0x206>
 800ba3a:	2500      	movs	r5, #0
 800ba3c:	f104 0619 	add.w	r6, r4, #25
 800ba40:	e7f5      	b.n	800ba2e <_printf_i+0x222>
 800ba42:	bf00      	nop
 800ba44:	0800c15a 	.word	0x0800c15a
 800ba48:	0800c16b 	.word	0x0800c16b

0800ba4c <__swbuf_r>:
 800ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4e:	460e      	mov	r6, r1
 800ba50:	4614      	mov	r4, r2
 800ba52:	4605      	mov	r5, r0
 800ba54:	b118      	cbz	r0, 800ba5e <__swbuf_r+0x12>
 800ba56:	6a03      	ldr	r3, [r0, #32]
 800ba58:	b90b      	cbnz	r3, 800ba5e <__swbuf_r+0x12>
 800ba5a:	f7fe f99f 	bl	8009d9c <__sinit>
 800ba5e:	69a3      	ldr	r3, [r4, #24]
 800ba60:	60a3      	str	r3, [r4, #8]
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	071a      	lsls	r2, r3, #28
 800ba66:	d501      	bpl.n	800ba6c <__swbuf_r+0x20>
 800ba68:	6923      	ldr	r3, [r4, #16]
 800ba6a:	b943      	cbnz	r3, 800ba7e <__swbuf_r+0x32>
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f000 f82a 	bl	800bac8 <__swsetup_r>
 800ba74:	b118      	cbz	r0, 800ba7e <__swbuf_r+0x32>
 800ba76:	f04f 37ff 	mov.w	r7, #4294967295
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	6922      	ldr	r2, [r4, #16]
 800ba82:	1a98      	subs	r0, r3, r2
 800ba84:	6963      	ldr	r3, [r4, #20]
 800ba86:	b2f6      	uxtb	r6, r6
 800ba88:	4283      	cmp	r3, r0
 800ba8a:	4637      	mov	r7, r6
 800ba8c:	dc05      	bgt.n	800ba9a <__swbuf_r+0x4e>
 800ba8e:	4621      	mov	r1, r4
 800ba90:	4628      	mov	r0, r5
 800ba92:	f7ff fca7 	bl	800b3e4 <_fflush_r>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d1ed      	bne.n	800ba76 <__swbuf_r+0x2a>
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	60a3      	str	r3, [r4, #8]
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	6022      	str	r2, [r4, #0]
 800baa6:	701e      	strb	r6, [r3, #0]
 800baa8:	6962      	ldr	r2, [r4, #20]
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	429a      	cmp	r2, r3
 800baae:	d004      	beq.n	800baba <__swbuf_r+0x6e>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	07db      	lsls	r3, r3, #31
 800bab4:	d5e1      	bpl.n	800ba7a <__swbuf_r+0x2e>
 800bab6:	2e0a      	cmp	r6, #10
 800bab8:	d1df      	bne.n	800ba7a <__swbuf_r+0x2e>
 800baba:	4621      	mov	r1, r4
 800babc:	4628      	mov	r0, r5
 800babe:	f7ff fc91 	bl	800b3e4 <_fflush_r>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d0d9      	beq.n	800ba7a <__swbuf_r+0x2e>
 800bac6:	e7d6      	b.n	800ba76 <__swbuf_r+0x2a>

0800bac8 <__swsetup_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4b29      	ldr	r3, [pc, #164]	@ (800bb70 <__swsetup_r+0xa8>)
 800bacc:	4605      	mov	r5, r0
 800bace:	6818      	ldr	r0, [r3, #0]
 800bad0:	460c      	mov	r4, r1
 800bad2:	b118      	cbz	r0, 800badc <__swsetup_r+0x14>
 800bad4:	6a03      	ldr	r3, [r0, #32]
 800bad6:	b90b      	cbnz	r3, 800badc <__swsetup_r+0x14>
 800bad8:	f7fe f960 	bl	8009d9c <__sinit>
 800badc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae0:	0719      	lsls	r1, r3, #28
 800bae2:	d422      	bmi.n	800bb2a <__swsetup_r+0x62>
 800bae4:	06da      	lsls	r2, r3, #27
 800bae6:	d407      	bmi.n	800baf8 <__swsetup_r+0x30>
 800bae8:	2209      	movs	r2, #9
 800baea:	602a      	str	r2, [r5, #0]
 800baec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baf0:	81a3      	strh	r3, [r4, #12]
 800baf2:	f04f 30ff 	mov.w	r0, #4294967295
 800baf6:	e033      	b.n	800bb60 <__swsetup_r+0x98>
 800baf8:	0758      	lsls	r0, r3, #29
 800bafa:	d512      	bpl.n	800bb22 <__swsetup_r+0x5a>
 800bafc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bafe:	b141      	cbz	r1, 800bb12 <__swsetup_r+0x4a>
 800bb00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb04:	4299      	cmp	r1, r3
 800bb06:	d002      	beq.n	800bb0e <__swsetup_r+0x46>
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f7fe fadf 	bl	800a0cc <_free_r>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb18:	81a3      	strh	r3, [r4, #12]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6063      	str	r3, [r4, #4]
 800bb1e:	6923      	ldr	r3, [r4, #16]
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	f043 0308 	orr.w	r3, r3, #8
 800bb28:	81a3      	strh	r3, [r4, #12]
 800bb2a:	6923      	ldr	r3, [r4, #16]
 800bb2c:	b94b      	cbnz	r3, 800bb42 <__swsetup_r+0x7a>
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb38:	d003      	beq.n	800bb42 <__swsetup_r+0x7a>
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	f000 f883 	bl	800bc48 <__smakebuf_r>
 800bb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb46:	f013 0201 	ands.w	r2, r3, #1
 800bb4a:	d00a      	beq.n	800bb62 <__swsetup_r+0x9a>
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	60a2      	str	r2, [r4, #8]
 800bb50:	6962      	ldr	r2, [r4, #20]
 800bb52:	4252      	negs	r2, r2
 800bb54:	61a2      	str	r2, [r4, #24]
 800bb56:	6922      	ldr	r2, [r4, #16]
 800bb58:	b942      	cbnz	r2, 800bb6c <__swsetup_r+0xa4>
 800bb5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb5e:	d1c5      	bne.n	800baec <__swsetup_r+0x24>
 800bb60:	bd38      	pop	{r3, r4, r5, pc}
 800bb62:	0799      	lsls	r1, r3, #30
 800bb64:	bf58      	it	pl
 800bb66:	6962      	ldrpl	r2, [r4, #20]
 800bb68:	60a2      	str	r2, [r4, #8]
 800bb6a:	e7f4      	b.n	800bb56 <__swsetup_r+0x8e>
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e7f7      	b.n	800bb60 <__swsetup_r+0x98>
 800bb70:	24000188 	.word	0x24000188

0800bb74 <_raise_r>:
 800bb74:	291f      	cmp	r1, #31
 800bb76:	b538      	push	{r3, r4, r5, lr}
 800bb78:	4605      	mov	r5, r0
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	d904      	bls.n	800bb88 <_raise_r+0x14>
 800bb7e:	2316      	movs	r3, #22
 800bb80:	6003      	str	r3, [r0, #0]
 800bb82:	f04f 30ff 	mov.w	r0, #4294967295
 800bb86:	bd38      	pop	{r3, r4, r5, pc}
 800bb88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bb8a:	b112      	cbz	r2, 800bb92 <_raise_r+0x1e>
 800bb8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb90:	b94b      	cbnz	r3, 800bba6 <_raise_r+0x32>
 800bb92:	4628      	mov	r0, r5
 800bb94:	f000 f830 	bl	800bbf8 <_getpid_r>
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba2:	f000 b817 	b.w	800bbd4 <_kill_r>
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d00a      	beq.n	800bbc0 <_raise_r+0x4c>
 800bbaa:	1c59      	adds	r1, r3, #1
 800bbac:	d103      	bne.n	800bbb6 <_raise_r+0x42>
 800bbae:	2316      	movs	r3, #22
 800bbb0:	6003      	str	r3, [r0, #0]
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	e7e7      	b.n	800bb86 <_raise_r+0x12>
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4798      	blx	r3
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	e7e0      	b.n	800bb86 <_raise_r+0x12>

0800bbc4 <raise>:
 800bbc4:	4b02      	ldr	r3, [pc, #8]	@ (800bbd0 <raise+0xc>)
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	f7ff bfd3 	b.w	800bb74 <_raise_r>
 800bbce:	bf00      	nop
 800bbd0:	24000188 	.word	0x24000188

0800bbd4 <_kill_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4d07      	ldr	r5, [pc, #28]	@ (800bbf4 <_kill_r+0x20>)
 800bbd8:	2300      	movs	r3, #0
 800bbda:	4604      	mov	r4, r0
 800bbdc:	4608      	mov	r0, r1
 800bbde:	4611      	mov	r1, r2
 800bbe0:	602b      	str	r3, [r5, #0]
 800bbe2:	f7f5 fa01 	bl	8000fe8 <_kill>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	d102      	bne.n	800bbf0 <_kill_r+0x1c>
 800bbea:	682b      	ldr	r3, [r5, #0]
 800bbec:	b103      	cbz	r3, 800bbf0 <_kill_r+0x1c>
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	bd38      	pop	{r3, r4, r5, pc}
 800bbf2:	bf00      	nop
 800bbf4:	240004ec 	.word	0x240004ec

0800bbf8 <_getpid_r>:
 800bbf8:	f7f5 b9ee 	b.w	8000fd8 <_getpid>

0800bbfc <__swhatbuf_r>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	460c      	mov	r4, r1
 800bc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc04:	2900      	cmp	r1, #0
 800bc06:	b096      	sub	sp, #88	@ 0x58
 800bc08:	4615      	mov	r5, r2
 800bc0a:	461e      	mov	r6, r3
 800bc0c:	da0d      	bge.n	800bc2a <__swhatbuf_r+0x2e>
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc14:	f04f 0100 	mov.w	r1, #0
 800bc18:	bf14      	ite	ne
 800bc1a:	2340      	movne	r3, #64	@ 0x40
 800bc1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc20:	2000      	movs	r0, #0
 800bc22:	6031      	str	r1, [r6, #0]
 800bc24:	602b      	str	r3, [r5, #0]
 800bc26:	b016      	add	sp, #88	@ 0x58
 800bc28:	bd70      	pop	{r4, r5, r6, pc}
 800bc2a:	466a      	mov	r2, sp
 800bc2c:	f000 f848 	bl	800bcc0 <_fstat_r>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	dbec      	blt.n	800bc0e <__swhatbuf_r+0x12>
 800bc34:	9901      	ldr	r1, [sp, #4]
 800bc36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc3e:	4259      	negs	r1, r3
 800bc40:	4159      	adcs	r1, r3
 800bc42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc46:	e7eb      	b.n	800bc20 <__swhatbuf_r+0x24>

0800bc48 <__smakebuf_r>:
 800bc48:	898b      	ldrh	r3, [r1, #12]
 800bc4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc4c:	079d      	lsls	r5, r3, #30
 800bc4e:	4606      	mov	r6, r0
 800bc50:	460c      	mov	r4, r1
 800bc52:	d507      	bpl.n	800bc64 <__smakebuf_r+0x1c>
 800bc54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	6123      	str	r3, [r4, #16]
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	6163      	str	r3, [r4, #20]
 800bc60:	b003      	add	sp, #12
 800bc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc64:	ab01      	add	r3, sp, #4
 800bc66:	466a      	mov	r2, sp
 800bc68:	f7ff ffc8 	bl	800bbfc <__swhatbuf_r>
 800bc6c:	9f00      	ldr	r7, [sp, #0]
 800bc6e:	4605      	mov	r5, r0
 800bc70:	4639      	mov	r1, r7
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7fe fdd8 	bl	800a828 <_malloc_r>
 800bc78:	b948      	cbnz	r0, 800bc8e <__smakebuf_r+0x46>
 800bc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7e:	059a      	lsls	r2, r3, #22
 800bc80:	d4ee      	bmi.n	800bc60 <__smakebuf_r+0x18>
 800bc82:	f023 0303 	bic.w	r3, r3, #3
 800bc86:	f043 0302 	orr.w	r3, r3, #2
 800bc8a:	81a3      	strh	r3, [r4, #12]
 800bc8c:	e7e2      	b.n	800bc54 <__smakebuf_r+0xc>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	6020      	str	r0, [r4, #0]
 800bc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc96:	81a3      	strh	r3, [r4, #12]
 800bc98:	9b01      	ldr	r3, [sp, #4]
 800bc9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc9e:	b15b      	cbz	r3, 800bcb8 <__smakebuf_r+0x70>
 800bca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bca4:	4630      	mov	r0, r6
 800bca6:	f000 f81d 	bl	800bce4 <_isatty_r>
 800bcaa:	b128      	cbz	r0, 800bcb8 <__smakebuf_r+0x70>
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	f023 0303 	bic.w	r3, r3, #3
 800bcb2:	f043 0301 	orr.w	r3, r3, #1
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	431d      	orrs	r5, r3
 800bcbc:	81a5      	strh	r5, [r4, #12]
 800bcbe:	e7cf      	b.n	800bc60 <__smakebuf_r+0x18>

0800bcc0 <_fstat_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d07      	ldr	r5, [pc, #28]	@ (800bce0 <_fstat_r+0x20>)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	4608      	mov	r0, r1
 800bcca:	4611      	mov	r1, r2
 800bccc:	602b      	str	r3, [r5, #0]
 800bcce:	f7f5 f9eb 	bl	80010a8 <_fstat>
 800bcd2:	1c43      	adds	r3, r0, #1
 800bcd4:	d102      	bne.n	800bcdc <_fstat_r+0x1c>
 800bcd6:	682b      	ldr	r3, [r5, #0]
 800bcd8:	b103      	cbz	r3, 800bcdc <_fstat_r+0x1c>
 800bcda:	6023      	str	r3, [r4, #0]
 800bcdc:	bd38      	pop	{r3, r4, r5, pc}
 800bcde:	bf00      	nop
 800bce0:	240004ec 	.word	0x240004ec

0800bce4 <_isatty_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4d06      	ldr	r5, [pc, #24]	@ (800bd00 <_isatty_r+0x1c>)
 800bce8:	2300      	movs	r3, #0
 800bcea:	4604      	mov	r4, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	602b      	str	r3, [r5, #0]
 800bcf0:	f7f5 f9ea 	bl	80010c8 <_isatty>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d102      	bne.n	800bcfe <_isatty_r+0x1a>
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	b103      	cbz	r3, 800bcfe <_isatty_r+0x1a>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	240004ec 	.word	0x240004ec

0800bd04 <_init>:
 800bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd06:	bf00      	nop
 800bd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd0a:	bc08      	pop	{r3}
 800bd0c:	469e      	mov	lr, r3
 800bd0e:	4770      	bx	lr

0800bd10 <_fini>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	bf00      	nop
 800bd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd16:	bc08      	pop	{r3}
 800bd18:	469e      	mov	lr, r3
 800bd1a:	4770      	bx	lr
