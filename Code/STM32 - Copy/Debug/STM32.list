
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800509c  0800509c  0000609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  080050a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000210  24000020  080050c4  00007020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000230  080050c4  00007230  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011d8b  00000000  00000000  0000704e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000021f7  00000000  00000000  00018dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001028  00000000  00000000  0001afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ca2  00000000  00000000  0001bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000272d  00000000  00000000  0001cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014058  00000000  00000000  0001f3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00145227  00000000  00000000  0003341f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00178646  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044bc  00000000  00000000  0017868c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  0017cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000020 	.word	0x24000020
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005074 	.word	0x08005074

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000024 	.word	0x24000024
 800030c:	08005074 	.word	0x08005074

08000310 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//----------------------Ngat Sensor----------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

	//------------
	if (htim->Instance==htim2.Instance)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b92      	ldr	r3, [pc, #584]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	f040 80cd 	bne.w	80004c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	{


		if (HOME == 1){
 8000326:	4b91      	ldr	r3, [pc, #580]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	f040 80c8 	bne.w	80004c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			g+=1;
 8000330:	4b8f      	ldr	r3, [pc, #572]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000332:	edd3 7a00 	vldr	s15, [r3]
 8000336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800033a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800033e:	4b8c      	ldr	r3, [pc, #560]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000340:	edc3 7a00 	vstr	s15, [r3]

		if(g > 21000){
 8000344:	4b8a      	ldr	r3, [pc, #552]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000346:	edd3 7a00 	vldr	s15, [r3]
 800034a:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000574 <HAL_TIM_PeriodElapsedCallback+0x264>
 800034e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000356:	dd0a      	ble.n	800036e <HAL_TIM_PeriodElapsedCallback+0x5e>
			target_angle_1 = -45;
 8000358:	4b87      	ldr	r3, [pc, #540]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800035a:	4a88      	ldr	r2, [pc, #544]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800035c:	601a      	str	r2, [r3, #0]
			target_angle_2 = -45;
 800035e:	4b88      	ldr	r3, [pc, #544]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000360:	4a86      	ldr	r2, [pc, #536]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000362:	601a      	str	r2, [r3, #0]
			target_angle_3 = 0;
 8000364:	4b87      	ldr	r3, [pc, #540]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000366:	f04f 0200 	mov.w	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	e049      	b.n	8000402 <HAL_TIM_PeriodElapsedCallback+0xf2>
		}else if(g > 16000){
 800036e:	4b80      	ldr	r3, [pc, #512]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000370:	edd3 7a00 	vldr	s15, [r3]
 8000374:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8000588 <HAL_TIM_PeriodElapsedCallback+0x278>
 8000378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000380:	dd0a      	ble.n	8000398 <HAL_TIM_PeriodElapsedCallback+0x88>
			target_angle_1 = 0;
 8000382:	4b7d      	ldr	r3, [pc, #500]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000384:	f04f 0200 	mov.w	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
			target_angle_2 = -45;
 800038a:	4b7d      	ldr	r3, [pc, #500]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800038c:	4a7b      	ldr	r2, [pc, #492]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800038e:	601a      	str	r2, [r3, #0]
			target_angle_3 = -45;
 8000390:	4b7c      	ldr	r3, [pc, #496]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000392:	4a7a      	ldr	r2, [pc, #488]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	e034      	b.n	8000402 <HAL_TIM_PeriodElapsedCallback+0xf2>
		}
		else if(g > 12000){
 8000398:	4b75      	ldr	r3, [pc, #468]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800039a:	edd3 7a00 	vldr	s15, [r3]
 800039e:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800058c <HAL_TIM_PeriodElapsedCallback+0x27c>
 80003a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003aa:	dd0a      	ble.n	80003c2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			target_angle_1 = 0;
 80003ac:	4b72      	ldr	r3, [pc, #456]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003ae:	f04f 0200 	mov.w	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
			target_angle_2 = -45;
 80003b4:	4b72      	ldr	r3, [pc, #456]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003b6:	4a71      	ldr	r2, [pc, #452]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80003b8:	601a      	str	r2, [r3, #0]
			target_angle_3 = -45;
 80003ba:	4b72      	ldr	r3, [pc, #456]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003bc:	4a6f      	ldr	r2, [pc, #444]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	e01f      	b.n	8000402 <HAL_TIM_PeriodElapsedCallback+0xf2>
		}else if (g > 5000){
 80003c2:	4b6b      	ldr	r3, [pc, #428]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80003c4:	edd3 7a00 	vldr	s15, [r3]
 80003c8:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8000590 <HAL_TIM_PeriodElapsedCallback+0x280>
 80003cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	dd0b      	ble.n	80003ee <HAL_TIM_PeriodElapsedCallback+0xde>
			target_angle_1 = 0;
 80003d6:	4b68      	ldr	r3, [pc, #416]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003d8:	f04f 0200 	mov.w	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
			target_angle_2 = -45;
 80003de:	4b68      	ldr	r3, [pc, #416]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003e0:	4a66      	ldr	r2, [pc, #408]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80003e2:	601a      	str	r2, [r3, #0]
			target_angle_3 = 0;
 80003e4:	4b67      	ldr	r3, [pc, #412]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003e6:	f04f 0200 	mov.w	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	e009      	b.n	8000402 <HAL_TIM_PeriodElapsedCallback+0xf2>
		}else{
			target_angle_1 = 0;
 80003ee:	4b62      	ldr	r3, [pc, #392]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003f0:	f04f 0200 	mov.w	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
			target_angle_2 = -45;
 80003f6:	4b62      	ldr	r3, [pc, #392]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003f8:	4a60      	ldr	r2, [pc, #384]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80003fa:	601a      	str	r2, [r3, #0]
			target_angle_3 = -45;
 80003fc:	4b61      	ldr	r3, [pc, #388]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003fe:	4a5f      	ldr	r2, [pc, #380]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000400:	601a      	str	r2, [r3, #0]





			if ((target_angle_1 != target_angle_1_temp)||(target_angle_2 != target_angle_2_temp)||(target_angle_3 != target_angle_3_temp)){
 8000402:	4b5d      	ldr	r3, [pc, #372]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000404:	ed93 7a00 	vldr	s14, [r3]
 8000408:	4b62      	ldr	r3, [pc, #392]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800040a:	edd3 7a00 	vldr	s15, [r3]
 800040e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000416:	d115      	bne.n	8000444 <HAL_TIM_PeriodElapsedCallback+0x134>
 8000418:	4b59      	ldr	r3, [pc, #356]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800041a:	ed93 7a00 	vldr	s14, [r3]
 800041e:	4b5e      	ldr	r3, [pc, #376]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000420:	edd3 7a00 	vldr	s15, [r3]
 8000424:	eeb4 7a67 	vcmp.f32	s14, s15
 8000428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800042c:	d10a      	bne.n	8000444 <HAL_TIM_PeriodElapsedCallback+0x134>
 800042e:	4b55      	ldr	r3, [pc, #340]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000430:	ed93 7a00 	vldr	s14, [r3]
 8000434:	4b59      	ldr	r3, [pc, #356]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000436:	edd3 7a00 	vldr	s15, [r3]
 800043a:	eeb4 7a67 	vcmp.f32	s14, s15
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	d03d      	beq.n	80004c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>

				target_angle_1_temp = target_angle_1;
 8000444:	4b4c      	ldr	r3, [pc, #304]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a52      	ldr	r2, [pc, #328]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800044a:	6013      	str	r3, [r2, #0]
				target_angle_2_temp = target_angle_2;
 800044c:	4b4c      	ldr	r3, [pc, #304]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a51      	ldr	r2, [pc, #324]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000452:	6013      	str	r3, [r2, #0]
				target_angle_3_temp = target_angle_3;
 8000454:	4b4b      	ldr	r3, [pc, #300]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a50      	ldr	r2, [pc, #320]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800045a:	6013      	str	r3, [r2, #0]


				a3Ratio = fabs((target_angle_3 - angle3)/((target_angle_2 - angle2) + (target_angle_3 - angle3)));
 800045c:	4b49      	ldr	r3, [pc, #292]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800045e:	ed93 7a00 	vldr	s14, [r3]
 8000462:	4b4f      	ldr	r3, [pc, #316]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000464:	edd3 7a00 	vldr	s15, [r3]
 8000468:	ee77 6a67 	vsub.f32	s13, s14, s15
 800046c:	4b44      	ldr	r3, [pc, #272]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800046e:	ed93 7a00 	vldr	s14, [r3]
 8000472:	4b4c      	ldr	r3, [pc, #304]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000474:	edd3 7a00 	vldr	s15, [r3]
 8000478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800047c:	4b41      	ldr	r3, [pc, #260]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800047e:	ed93 6a00 	vldr	s12, [r3]
 8000482:	4b47      	ldr	r3, [pc, #284]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000484:	edd3 7a00 	vldr	s15, [r3]
 8000488:	ee76 7a67 	vsub.f32	s15, s12, s15
 800048c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000494:	eef0 7ae7 	vabs.f32	s15, s15
 8000498:	4b43      	ldr	r3, [pc, #268]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800049a:	edc3 7a00 	vstr	s15, [r3]

				angleControl(target_angle_1,target_angle_2,target_angle_3);
 800049e:	4b36      	ldr	r3, [pc, #216]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80004a0:	edd3 7a00 	vldr	s15, [r3]
 80004a4:	4b36      	ldr	r3, [pc, #216]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004a6:	ed93 7a00 	vldr	s14, [r3]
 80004aa:	4b36      	ldr	r3, [pc, #216]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004ac:	edd3 6a00 	vldr	s13, [r3]
 80004b0:	eeb0 1a66 	vmov.f32	s2, s13
 80004b4:	eef0 0a47 	vmov.f32	s1, s14
 80004b8:	eeb0 0a67 	vmov.f32	s0, s15
 80004bc:	f000 f98a 	bl	80007d4 <angleControl>
			}
		}
	}

	if (htim->Instance == TIM4)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a39      	ldr	r2, [pc, #228]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	f040 80b5 	bne.w	8000636 <HAL_TIM_PeriodElapsedCallback+0x326>
	{  // Ensure the correct timer is being checked
		// Handle Motor 1
		if (countPulseL1 > 0) {
 80004cc:	4b38      	ldr	r3, [pc, #224]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	dd1f      	ble.n	8000514 <HAL_TIM_PeriodElapsedCallback+0x204>
			softCounter1++;  // Increment soft counter for motor 1
 80004d4:	4b37      	ldr	r3, [pc, #220]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a36      	ldr	r2, [pc, #216]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80004dc:	6013      	str	r3, [r2, #0]
			if (softCounter1 >= periodMotor1) {  // If soft counter reaches the desired period
 80004de:	4b35      	ldr	r3, [pc, #212]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	4b35      	ldr	r3, [pc, #212]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	db19      	blt.n	800051e <HAL_TIM_PeriodElapsedCallback+0x20e>
				HAL_GPIO_TogglePin(GPIOB, motorL1_Pin);  // Toggle Motor 1 pin (generate pulse)
 80004ea:	2101      	movs	r1, #1
 80004ec:	4833      	ldr	r0, [pc, #204]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80004ee:	f001 fc98 	bl	8001e22 <HAL_GPIO_TogglePin>
				softCounter1 = 0;  // Reset the soft counter for motor 1
 80004f2:	4b30      	ldr	r3, [pc, #192]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
				countPulseL1--;    // Decrement the pulse count
 80004f8:	4b2d      	ldr	r3, [pc, #180]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	4a2c      	ldr	r2, [pc, #176]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000500:	6013      	str	r3, [r2, #0]
				//e = 360/(44800*2);
				update_current_angle(1,1,dir1);
 8000502:	4b2f      	ldr	r3, [pc, #188]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4619      	mov	r1, r3
 8000508:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800050c:	2001      	movs	r0, #1
 800050e:	f000 f8a3 	bl	8000658 <update_current_angle>
 8000512:	e004      	b.n	800051e <HAL_TIM_PeriodElapsedCallback+0x20e>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL1_Pin, GPIO_PIN_RESET);  // Stop Motor 1
 8000514:	2200      	movs	r2, #0
 8000516:	2101      	movs	r1, #1
 8000518:	4828      	ldr	r0, [pc, #160]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800051a:	f001 fc69 	bl	8001df0 <HAL_GPIO_WritePin>
		}

		// Handle Motor 2
		if (countPulseL2 > 0) {
 800051e:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	dd56      	ble.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>
			softCounter2++;  // Increment soft counter for motor 2
 8000526:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	4a26      	ldr	r2, [pc, #152]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800052e:	6013      	str	r3, [r2, #0]
			if (softCounter2 >= periodMotor2) {  // If soft counter reaches the desired period
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	db50      	blt.n	80005de <HAL_TIM_PeriodElapsedCallback+0x2ce>
				HAL_GPIO_TogglePin(GPIOB, motorL2_Pin);  // Toggle Motor 2 pin (generate pulse)
 800053c:	2102      	movs	r1, #2
 800053e:	481f      	ldr	r0, [pc, #124]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000540:	f001 fc6f 	bl	8001e22 <HAL_GPIO_TogglePin>
				softCounter2 = 0;  // Reset the soft counter for motor 2
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
				countPulseL2--;    // Decrement the pulse count
 800054a:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	4a1c      	ldr	r2, [pc, #112]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000552:	6013      	str	r3, [r2, #0]
				update_current_angle(2,1,dir2);
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800055e:	2002      	movs	r0, #2
 8000560:	f000 f87a 	bl	8000658 <update_current_angle>
 8000564:	e03b      	b.n	80005de <HAL_TIM_PeriodElapsedCallback+0x2ce>
 8000566:	bf00      	nop
 8000568:	24000138 	.word	0x24000138
 800056c:	240001dc 	.word	0x240001dc
 8000570:	240001f8 	.word	0x240001f8
 8000574:	46a41000 	.word	0x46a41000
 8000578:	24000220 	.word	0x24000220
 800057c:	c2340000 	.word	0xc2340000
 8000580:	24000224 	.word	0x24000224
 8000584:	24000228 	.word	0x24000228
 8000588:	467a0000 	.word	0x467a0000
 800058c:	463b8000 	.word	0x463b8000
 8000590:	459c4000 	.word	0x459c4000
 8000594:	24000004 	.word	0x24000004
 8000598:	24000008 	.word	0x24000008
 800059c:	2400000c 	.word	0x2400000c
 80005a0:	240001d8 	.word	0x240001d8
 80005a4:	240001d4 	.word	0x240001d4
 80005a8:	24000204 	.word	0x24000204
 80005ac:	40000800 	.word	0x40000800
 80005b0:	240001e0 	.word	0x240001e0
 80005b4:	24000208 	.word	0x24000208
 80005b8:	24000214 	.word	0x24000214
 80005bc:	58020400 	.word	0x58020400
 80005c0:	240001fc 	.word	0x240001fc
 80005c4:	240001e4 	.word	0x240001e4
 80005c8:	2400020c 	.word	0x2400020c
 80005cc:	24000218 	.word	0x24000218
 80005d0:	24000200 	.word	0x24000200
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL2_Pin, GPIO_PIN_RESET);  // Stop Motor 2
 80005d4:	2200      	movs	r2, #0
 80005d6:	2102      	movs	r1, #2
 80005d8:	4819      	ldr	r0, [pc, #100]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80005da:	f001 fc09 	bl	8001df0 <HAL_GPIO_WritePin>
		}

		// Handle Motor 3
		if (countPulseL3 > 0) {
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	dd22      	ble.n	800062c <HAL_TIM_PeriodElapsedCallback+0x31c>
			softCounter3++;  // Increment soft counter for motor 3
 80005e6:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a16      	ldr	r2, [pc, #88]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80005ee:	6013      	str	r3, [r2, #0]
			if (softCounter3 >= periodMotor3) {  // If soft counter reaches the desired period
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	db1c      	blt.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x326>
				HAL_GPIO_TogglePin(GPIOB, motorL3_Pin);  // Toggle Motor 3 pin (generate pulse)
 80005fc:	2104      	movs	r1, #4
 80005fe:	4810      	ldr	r0, [pc, #64]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000600:	f001 fc0f 	bl	8001e22 <HAL_GPIO_TogglePin>
				softCounter3 = 0;  // Reset the soft counter for motor 3
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
				countPulseL3--;    // Decrement the pulse count
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	4a0c      	ldr	r2, [pc, #48]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000612:	6013      	str	r3, [r2, #0]
				update_current_angle(3,a3Ratio, dir3);
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	eeb0 0a67 	vmov.f32	s0, s15
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f817 	bl	8000658 <update_current_angle>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
		}
	}
}
 800062a:	e004      	b.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x326>
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
 800062c:	2200      	movs	r2, #0
 800062e:	2104      	movs	r1, #4
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000632:	f001 fbdd 	bl	8001df0 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	58020400 	.word	0x58020400
 8000644:	240001e8 	.word	0x240001e8
 8000648:	24000210 	.word	0x24000210
 800064c:	2400021c 	.word	0x2400021c
 8000650:	24000204 	.word	0x24000204
 8000654:	24000000 	.word	0x24000000

08000658 <update_current_angle>:
    // Read raw angle from angleL3 sensor
    AS5600_GetRawAngle(angleL3, &angle3);

}

void update_current_angle(int motor_index, float steps, int direction) {
 8000658:	b480      	push	{r7}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	ed87 0a02 	vstr	s0, [r7, #8]
 8000664:	6079      	str	r1, [r7, #4]
    float angle_change = steps * 360.0 / (44800.0 * 2); // Calculate the change in angle
 8000666:	edd7 7a02 	vldr	s15, [r7, #8]
 800066a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800066e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8000700 <update_current_angle+0xa8>
 8000672:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000676:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8000708 <update_current_angle+0xb0>
 800067a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800067e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000682:	edc7 7a05 	vstr	s15, [r7, #20]

    // If direction is negative, reverse the angle change
    if (direction < 0) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	da05      	bge.n	8000698 <update_current_angle+0x40>
        angle_change = - angle_change;
 800068c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000690:	eef1 7a67 	vneg.f32	s15, s15
 8000694:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    switch (motor_index){
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b03      	cmp	r3, #3
 800069c:	d01f      	beq.n	80006de <update_current_angle+0x86>
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	dc27      	bgt.n	80006f4 <update_current_angle+0x9c>
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d003      	beq.n	80006b2 <update_current_angle+0x5a>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d00b      	beq.n	80006c8 <update_current_angle+0x70>
            break;
        case 3:
            angle3 += angle_change; // Update current angle for motor 3
            break;
    }
}
 80006b0:	e020      	b.n	80006f4 <update_current_angle+0x9c>
            angle1 += angle_change; // Update current angle for motor 1
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <update_current_angle+0xb8>)
 80006b4:	ed93 7a00 	vldr	s14, [r3]
 80006b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80006bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <update_current_angle+0xb8>)
 80006c2:	edc3 7a00 	vstr	s15, [r3]
            break;
 80006c6:	e015      	b.n	80006f4 <update_current_angle+0x9c>
            angle2 += angle_change; // Update current angle for motor 2
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <update_current_angle+0xbc>)
 80006ca:	ed93 7a00 	vldr	s14, [r3]
 80006ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80006d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <update_current_angle+0xbc>)
 80006d8:	edc3 7a00 	vstr	s15, [r3]
            break;
 80006dc:	e00a      	b.n	80006f4 <update_current_angle+0x9c>
            angle3 += angle_change; // Update current angle for motor 3
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <update_current_angle+0xc0>)
 80006e0:	ed93 7a00 	vldr	s14, [r3]
 80006e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80006e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <update_current_angle+0xc0>)
 80006ee:	edc3 7a00 	vstr	s15, [r3]
            break;
 80006f2:	bf00      	nop
}
 80006f4:	bf00      	nop
 80006f6:	371c      	adds	r7, #28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	00000000 	.word	0x00000000
 8000704:	40768000 	.word	0x40768000
 8000708:	00000000 	.word	0x00000000
 800070c:	40f5e000 	.word	0x40f5e000
 8000710:	240001d0 	.word	0x240001d0
 8000714:	240001d4 	.word	0x240001d4
 8000718:	240001d8 	.word	0x240001d8

0800071c <calculate_steps>:

int calculate_steps(float current_angle, float target_angle)
{
 800071c:	b480      	push	{r7}
 800071e:	b087      	sub	sp, #28
 8000720:	af00      	add	r7, sp, #0
 8000722:	ed87 0a01 	vstr	s0, [r7, #4]
 8000726:	edc7 0a00 	vstr	s1, [r7]
    // Calculate the angular difference

    float angular_difference ;
    int temp;

    temp = target_angle - current_angle;
 800072a:	ed97 7a00 	vldr	s14, [r7]
 800072e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800073a:	ee17 3a90 	vmov	r3, s15
 800073e:	613b      	str	r3, [r7, #16]
	if (abs(temp) < 0.01){
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	2b00      	cmp	r3, #0
 8000744:	db06      	blt.n	8000754 <calculate_steps+0x38>
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	2b00      	cmp	r3, #0
 800074a:	dc03      	bgt.n	8000754 <calculate_steps+0x38>
		angular_difference = 0;
 800074c:	f04f 0300 	mov.w	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	e007      	b.n	8000764 <calculate_steps+0x48>
	}else{
		angular_difference = target_angle - current_angle;
 8000754:	ed97 7a00 	vldr	s14, [r7]
 8000758:	edd7 7a01 	vldr	s15, [r7, #4]
 800075c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000760:	edc7 7a05 	vstr	s15, [r7, #20]
	}


    // Convert angular difference to steps
    int steps_needed = (int)((angular_difference / 360) * 44800*2);
 8000764:	ed97 7a05 	vldr	s14, [r7, #20]
 8000768:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000794 <calculate_steps+0x78>
 800076c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000770:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000798 <calculate_steps+0x7c>
 8000774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000778:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800077c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000780:	ee17 3a90 	vmov	r3, s15
 8000784:	60fb      	str	r3, [r7, #12]

    // Return the absolute number of steps (stepper motors can't move negative steps)
    return steps_needed;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	371c      	adds	r7, #28
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	43b40000 	.word	0x43b40000
 8000798:	472f0000 	.word	0x472f0000

0800079c <maxSteps>:

int maxSteps(int steps_motor_1, int steps_motor_2, int steps_motor_3)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
    int max_value = steps_motor_1;  // Assume motor 1 has the maximum steps
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	617b      	str	r3, [r7, #20]

    if (steps_motor_2 > max_value) {
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dd01      	ble.n	80007b8 <maxSteps+0x1c>
        max_value = steps_motor_2;  // Update if motor 2 has more steps
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	617b      	str	r3, [r7, #20]
    }

    if (steps_motor_3 > max_value) {
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dd01      	ble.n	80007c4 <maxSteps+0x28>
        max_value = steps_motor_3;  // Update if motor 3 has more steps
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	617b      	str	r3, [r7, #20]
    }

    return max_value;  // Return the largest number of steps
 80007c4:	697b      	ldr	r3, [r7, #20]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <angleControl>:


void angleControl(float target_angle_1, float target_angle_2, float target_angle_3) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	ed87 0a03 	vstr	s0, [r7, #12]
 80007de:	edc7 0a02 	vstr	s1, [r7, #8]
 80007e2:	ed87 1a01 	vstr	s2, [r7, #4]
	// Read the current angles from the sensors
	//Read_Angles();

	// Calculate the required steps for each motor based on current and target angles
	int steps_motor_1 = calculate_steps(angle1, (target_angle_1));
 80007e6:	4b9e      	ldr	r3, [pc, #632]	@ (8000a60 <angleControl+0x28c>)
 80007e8:	edd3 7a00 	vldr	s15, [r3]
 80007ec:	edd7 0a03 	vldr	s1, [r7, #12]
 80007f0:	eeb0 0a67 	vmov.f32	s0, s15
 80007f4:	f7ff ff92 	bl	800071c <calculate_steps>
 80007f8:	61b8      	str	r0, [r7, #24]
	int steps_motor_2 = calculate_steps(angle2, (target_angle_2));
 80007fa:	4b9a      	ldr	r3, [pc, #616]	@ (8000a64 <angleControl+0x290>)
 80007fc:	edd3 7a00 	vldr	s15, [r3]
 8000800:	edd7 0a02 	vldr	s1, [r7, #8]
 8000804:	eeb0 0a67 	vmov.f32	s0, s15
 8000808:	f7ff ff88 	bl	800071c <calculate_steps>
 800080c:	6178      	str	r0, [r7, #20]

	int steps_motor_3 = calculate_steps(angle3, target_angle_3 + target_angle_2);
 800080e:	4b96      	ldr	r3, [pc, #600]	@ (8000a68 <angleControl+0x294>)
 8000810:	edd3 6a00 	vldr	s13, [r3]
 8000814:	ed97 7a01 	vldr	s14, [r7, #4]
 8000818:	edd7 7a02 	vldr	s15, [r7, #8]
 800081c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000820:	eef0 0a67 	vmov.f32	s1, s15
 8000824:	eeb0 0a66 	vmov.f32	s0, s13
 8000828:	f7ff ff78 	bl	800071c <calculate_steps>
 800082c:	61f8      	str	r0, [r7, #28]

	// Set the pulse counts for each motor
	countPulseL1 = abs(steps_motor_1);
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	2b00      	cmp	r3, #0
 8000832:	bfb8      	it	lt
 8000834:	425b      	neglt	r3, r3
 8000836:	4a8d      	ldr	r2, [pc, #564]	@ (8000a6c <angleControl+0x298>)
 8000838:	6013      	str	r3, [r2, #0]
	countPulseL2 = abs(steps_motor_2);
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	2b00      	cmp	r3, #0
 800083e:	bfb8      	it	lt
 8000840:	425b      	neglt	r3, r3
 8000842:	4a8b      	ldr	r2, [pc, #556]	@ (8000a70 <angleControl+0x29c>)
 8000844:	6013      	str	r3, [r2, #0]
	countPulseL3 = abs(steps_motor_3);
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	2b00      	cmp	r3, #0
 800084a:	bfb8      	it	lt
 800084c:	425b      	neglt	r3, r3
 800084e:	4a89      	ldr	r2, [pc, #548]	@ (8000a74 <angleControl+0x2a0>)
 8000850:	6013      	str	r3, [r2, #0]


	// Determine the direction for each motor and set control pins accordingly
	if (target_angle_1 > angle1) {
 8000852:	4b83      	ldr	r3, [pc, #524]	@ (8000a60 <angleControl+0x28c>)
 8000854:	edd3 7a00 	vldr	s15, [r3]
 8000858:	ed97 7a03 	vldr	s14, [r7, #12]
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	dd09      	ble.n	800087a <angleControl+0xa6>
		// Move motor 1 clockwise
		dir1 = 1;
 8000866:	4b84      	ldr	r3, [pc, #528]	@ (8000a78 <angleControl+0x2a4>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000872:	4882      	ldr	r0, [pc, #520]	@ (8000a7c <angleControl+0x2a8>)
 8000874:	f001 fabc 	bl	8001df0 <HAL_GPIO_WritePin>
 8000878:	e009      	b.n	800088e <angleControl+0xba>

	} else {
		dir1 = -1;
 800087a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a78 <angleControl+0x2a4>)
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	601a      	str	r2, [r3, #0]
		// Move motor 1 counterclockwise
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000888:	487c      	ldr	r0, [pc, #496]	@ (8000a7c <angleControl+0x2a8>)
 800088a:	f001 fab1 	bl	8001df0 <HAL_GPIO_WritePin>
	}

	if (target_angle_2 > angle2) {
 800088e:	4b75      	ldr	r3, [pc, #468]	@ (8000a64 <angleControl+0x290>)
 8000890:	edd3 7a00 	vldr	s15, [r3]
 8000894:	ed97 7a02 	vldr	s14, [r7, #8]
 8000898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800089c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a0:	dd09      	ble.n	80008b6 <angleControl+0xe2>
		// Move motor 2 clockwise
		dir2 = 1;
 80008a2:	4b77      	ldr	r3, [pc, #476]	@ (8000a80 <angleControl+0x2ac>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ae:	4873      	ldr	r0, [pc, #460]	@ (8000a7c <angleControl+0x2a8>)
 80008b0:	f001 fa9e 	bl	8001df0 <HAL_GPIO_WritePin>
 80008b4:	e009      	b.n	80008ca <angleControl+0xf6>
	} else {
		// Move motor 2 counterclockwise
		dir2 = -1;
 80008b6:	4b72      	ldr	r3, [pc, #456]	@ (8000a80 <angleControl+0x2ac>)
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c4:	486d      	ldr	r0, [pc, #436]	@ (8000a7c <angleControl+0x2a8>)
 80008c6:	f001 fa93 	bl	8001df0 <HAL_GPIO_WritePin>
	}

	if (target_angle_3 > angle3) {
 80008ca:	4b67      	ldr	r3, [pc, #412]	@ (8000a68 <angleControl+0x294>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80008d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	dd03      	ble.n	80008e6 <angleControl+0x112>
		// Move motor 3 clockwise
		dir3 = 1;
 80008de:	4b69      	ldr	r3, [pc, #420]	@ (8000a84 <angleControl+0x2b0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e003      	b.n	80008ee <angleControl+0x11a>
		//HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
	} else {
		// Move motor 3 counterclockwise
		dir3 = -1;
 80008e6:	4b67      	ldr	r3, [pc, #412]	@ (8000a84 <angleControl+0x2b0>)
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
	}

	if (dir3 != dir2){
 80008ee:	4b65      	ldr	r3, [pc, #404]	@ (8000a84 <angleControl+0x2b0>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b63      	ldr	r3, [pc, #396]	@ (8000a80 <angleControl+0x2ac>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d02c      	beq.n	8000954 <angleControl+0x180>
		if (abs(target_angle_3  - angle3) <= abs(target_angle_2  - angle2))
 80008fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000a68 <angleControl+0x294>)
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	ed97 7a01 	vldr	s14, [r7, #4]
 8000904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090c:	ee17 3a90 	vmov	r3, s15
 8000910:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000914:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000918:	4b52      	ldr	r3, [pc, #328]	@ (8000a64 <angleControl+0x290>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800092a:	ee17 3a90 	vmov	r3, s15
 800092e:	2b00      	cmp	r3, #0
 8000930:	bfb8      	it	lt
 8000932:	425b      	neglt	r3, r3
 8000934:	429a      	cmp	r2, r3
 8000936:	dc06      	bgt.n	8000946 <angleControl+0x172>
		{
			HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800093e:	484f      	ldr	r0, [pc, #316]	@ (8000a7c <angleControl+0x2a8>)
 8000940:	f001 fa56 	bl	8001df0 <HAL_GPIO_WritePin>
 8000944:	e02b      	b.n	800099e <angleControl+0x1ca>
		}else{
			HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800094c:	484b      	ldr	r0, [pc, #300]	@ (8000a7c <angleControl+0x2a8>)
 800094e:	f001 fa4f 	bl	8001df0 <HAL_GPIO_WritePin>
 8000952:	e024      	b.n	800099e <angleControl+0x1ca>
			//countPulseL3 = abs(steps_motor_3) + countPulseL2;
		}
	}else{

		if (dir2 < 0){
 8000954:	4b4a      	ldr	r3, [pc, #296]	@ (8000a80 <angleControl+0x2ac>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	da0f      	bge.n	800097c <angleControl+0x1a8>
			countPulseL3 = abs(steps_motor_3);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	2b00      	cmp	r3, #0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	4a43      	ldr	r2, [pc, #268]	@ (8000a74 <angleControl+0x2a0>)
 8000966:	6013      	str	r3, [r2, #0]
			steps_motor_3 = countPulseL3;
 8000968:	4b42      	ldr	r3, [pc, #264]	@ (8000a74 <angleControl+0x2a0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	61fb      	str	r3, [r7, #28]
			HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000974:	4841      	ldr	r0, [pc, #260]	@ (8000a7c <angleControl+0x2a8>)
 8000976:	f001 fa3b 	bl	8001df0 <HAL_GPIO_WritePin>
 800097a:	e010      	b.n	800099e <angleControl+0x1ca>

		}else{
			countPulseL3 = abs(steps_motor_3 + steps_motor_2);
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	4413      	add	r3, r2
 8000982:	2b00      	cmp	r3, #0
 8000984:	bfb8      	it	lt
 8000986:	425b      	neglt	r3, r3
 8000988:	4a3a      	ldr	r2, [pc, #232]	@ (8000a74 <angleControl+0x2a0>)
 800098a:	6013      	str	r3, [r2, #0]
			steps_motor_3 = countPulseL3;
 800098c:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <angleControl+0x2a0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	61fb      	str	r3, [r7, #28]
			HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000998:	4838      	ldr	r0, [pc, #224]	@ (8000a7c <angleControl+0x2a8>)
 800099a:	f001 fa29 	bl	8001df0 <HAL_GPIO_WritePin>

	}


	// Determine the maximum steps needed to synchronize the motors
	int max_steps = maxSteps(abs(steps_motor_1), abs(steps_motor_2), abs(steps_motor_3));
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80009a4:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80009ae:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bfb8      	it	lt
 80009b8:	425b      	neglt	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	f7ff feee 	bl	800079c <maxSteps>
 80009c0:	6138      	str	r0, [r7, #16]

	// Calculate the pulse periods for each motor based on the maximum steps
	periodMotor1 = (int)(((float)max_steps / abs(steps_motor_1)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80009e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ec:	ee17 2a90 	vmov	r2, s15
 80009f0:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <angleControl+0x2b4>)
 80009f2:	601a      	str	r2, [r3, #0]
	periodMotor2 = (int)(((float)max_steps / abs(steps_motor_2)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	ee07 3a90 	vmov	s15, r3
 80009fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bfb8      	it	lt
 8000a04:	425b      	neglt	r3, r3
 8000a06:	ee07 3a90 	vmov	s15, r3
 8000a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a12:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a1e:	ee17 2a90 	vmov	r2, s15
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <angleControl+0x2b8>)
 8000a24:	601a      	str	r2, [r3, #0]
	periodMotor3 = (int)(((float)max_steps / abs(steps_motor_3)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bfb8      	it	lt
 8000a36:	425b      	neglt	r3, r3
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a50:	ee17 2a90 	vmov	r2, s15
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <angleControl+0x2bc>)
 8000a56:	601a      	str	r2, [r3, #0]

	// Start the timer if it is not already running (ensure the timer has been initialized)
	//HAL_TIM_Base_Start_IT(&htim4);
}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	240001d0 	.word	0x240001d0
 8000a64:	240001d4 	.word	0x240001d4
 8000a68:	240001d8 	.word	0x240001d8
 8000a6c:	240001e0 	.word	0x240001e0
 8000a70:	240001e4 	.word	0x240001e4
 8000a74:	240001e8 	.word	0x240001e8
 8000a78:	240001fc 	.word	0x240001fc
 8000a7c:	58021400 	.word	0x58021400
 8000a80:	24000200 	.word	0x24000200
 8000a84:	24000000 	.word	0x24000000
 8000a88:	24000214 	.word	0x24000214
 8000a8c:	24000218 	.word	0x24000218
 8000a90:	2400021c 	.word	0x2400021c

08000a94 <autoHomeMotors>:

void autoHomeMotors(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    // Set initial movement direction for homing (assumes motors move towards the limit switches)
    HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET); // Move Motor 1 in the homing direction
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9e:	481d      	ldr	r0, [pc, #116]	@ (8000b14 <autoHomeMotors+0x80>)
 8000aa0:	f001 f9a6 	bl	8001df0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET); // Move Motor 2 in the homing direction
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aaa:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <autoHomeMotors+0x80>)
 8000aac:	f001 f9a0 	bl	8001df0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET); // Move Motor 3 in the homing direction
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ab6:	4817      	ldr	r0, [pc, #92]	@ (8000b14 <autoHomeMotors+0x80>)
 8000ab8:	f001 f99a 	bl	8001df0 <HAL_GPIO_WritePin>


    // Start moving the motors
    countPulseL1 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <autoHomeMotors+0x84>)
 8000abe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000ac2:	601a      	str	r2, [r3, #0]
    countPulseL2 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <autoHomeMotors+0x88>)
 8000ac6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000aca:	601a      	str	r2, [r3, #0]
    countPulseL3 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <autoHomeMotors+0x8c>)
 8000ace:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000ad2:	601a      	str	r2, [r3, #0]

    periodMotor1 = 4;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <autoHomeMotors+0x90>)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	601a      	str	r2, [r3, #0]
	periodMotor2 = 4;
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <autoHomeMotors+0x94>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	601a      	str	r2, [r3, #0]
	periodMotor3 = 4;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <autoHomeMotors+0x98>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	601a      	str	r2, [r3, #0]

    // Wait until all limit switches are triggered
    while (a == 0 || b == 0 || c == 0) {
 8000ae6:	e001      	b.n	8000aec <autoHomeMotors+0x58>
        checkLimitSwitches(); // Continuously check the limit switches
 8000ae8:	f000 f844 	bl	8000b74 <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0) {
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <autoHomeMotors+0x9c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f9      	beq.n	8000ae8 <autoHomeMotors+0x54>
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <autoHomeMotors+0xa0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f5      	beq.n	8000ae8 <autoHomeMotors+0x54>
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <autoHomeMotors+0xa4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f1      	beq.n	8000ae8 <autoHomeMotors+0x54>
    }

    // Set the home angle once all limit switches are activated
    HOME = 1;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <autoHomeMotors+0xa8>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
    setHomeAngles();
 8000b0a:	f000 f819 	bl	8000b40 <setHomeAngles>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	58021400 	.word	0x58021400
 8000b18:	240001e0 	.word	0x240001e0
 8000b1c:	240001e4 	.word	0x240001e4
 8000b20:	240001e8 	.word	0x240001e8
 8000b24:	24000214 	.word	0x24000214
 8000b28:	24000218 	.word	0x24000218
 8000b2c:	2400021c 	.word	0x2400021c
 8000b30:	240001ec 	.word	0x240001ec
 8000b34:	240001f0 	.word	0x240001f0
 8000b38:	240001f4 	.word	0x240001f4
 8000b3c:	240001dc 	.word	0x240001dc

08000b40 <setHomeAngles>:

void setHomeAngles(void) {
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
    // Set the current angle to zero or a specific home angle as needed
    angle1 = 0.0; // Home position for Motor 1
 8000b44:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <setHomeAngles+0x24>)
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
    angle2 = 0.0; // Home position for Motor 2
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <setHomeAngles+0x28>)
 8000b4e:	f04f 0200 	mov.w	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
    angle3 = -68.0; // Home position for Motor 3
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <setHomeAngles+0x2c>)
 8000b56:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <setHomeAngles+0x30>)
 8000b58:	601a      	str	r2, [r3, #0]

}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	240001d0 	.word	0x240001d0
 8000b68:	240001d4 	.word	0x240001d4
 8000b6c:	240001d8 	.word	0x240001d8
 8000b70:	c2880000 	.word	0xc2880000

08000b74 <checkLimitSwitches>:

void checkLimitSwitches(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    // Check and handle limit switch 1
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4820      	ldr	r0, [pc, #128]	@ (8000bfc <checkLimitSwitches+0x88>)
 8000b7c:	f001 f920 	bl	8001dc0 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d106      	bne.n	8000b94 <checkLimitSwitches+0x20>
        a = 1;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <checkLimitSwitches+0x8c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
        countPulseL1 = 0;  // Stop Motor 1 if limit switch 1 is triggered
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <checkLimitSwitches+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e002      	b.n	8000b9a <checkLimitSwitches+0x26>
    } else {
        a = 0;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <checkLimitSwitches+0x8c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
    }

    // Check and handle limit switch 2, ensuring that it only works if limit switch 3 is not active
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4817      	ldr	r0, [pc, #92]	@ (8000bfc <checkLimitSwitches+0x88>)
 8000b9e:	f001 f90f 	bl	8001dc0 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d106      	bne.n	8000bb6 <checkLimitSwitches+0x42>
        b = 1;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <checkLimitSwitches+0x94>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
        countPulseL2 = 0;  // Stop Motor 2 if limit switch 2 is triggered
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <checkLimitSwitches+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	e002      	b.n	8000bbc <checkLimitSwitches+0x48>
    } else {
        b = 0;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <checkLimitSwitches+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
    }

    // Check and handle limit switch 3
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8000bbc:	2140      	movs	r1, #64	@ 0x40
 8000bbe:	480f      	ldr	r0, [pc, #60]	@ (8000bfc <checkLimitSwitches+0x88>)
 8000bc0:	f001 f8fe 	bl	8001dc0 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10d      	bne.n	8000be6 <checkLimitSwitches+0x72>
        c = 1;
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <checkLimitSwitches+0x9c>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
        countPulseL3 = countPulseL2;  // Stop Motor 3 if limit switch 3 is triggered
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <checkLimitSwitches+0x98>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c14 <checkLimitSwitches+0xa0>)
 8000bd6:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);  // Stop motor direction for M3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bde:	480e      	ldr	r0, [pc, #56]	@ (8000c18 <checkLimitSwitches+0xa4>)
 8000be0:	f001 f906 	bl	8001df0 <HAL_GPIO_WritePin>
    } else {
        c = 0;
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
    }
}
 8000be4:	e008      	b.n	8000bf8 <checkLimitSwitches+0x84>
        c = 0;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <checkLimitSwitches+0x9c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bf2:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <checkLimitSwitches+0xa4>)
 8000bf4:	f001 f8fc 	bl	8001df0 <HAL_GPIO_WritePin>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	58020000 	.word	0x58020000
 8000c00:	240001ec 	.word	0x240001ec
 8000c04:	240001e0 	.word	0x240001e0
 8000c08:	240001f0 	.word	0x240001f0
 8000c0c:	240001e4 	.word	0x240001e4
 8000c10:	240001f4 	.word	0x240001f4
 8000c14:	240001e8 	.word	0x240001e8
 8000c18:	58021400 	.word	0x58021400

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     HAL_Init();
 8000c20:	f000 fd78 	bl	8001714 <HAL_Init>
//	angleL3->i2cHandle= &hi2c3;
//	AS5600_Init(angleL3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f81a 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 fa1c 	bl	8001064 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c2c:	f000 f97e 	bl	8000f2c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000c30:	f000 f8bc 	bl	8000dac <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c34:	f000 f8fa 	bl	8000e2c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000c38:	f000 f938 	bl	8000eac <MX_I2C3_Init>
  MX_TIM4_Init();
 8000c3c:	f000 f9c4 	bl	8000fc8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <main+0x38>)
 8000c42:	f003 fd33 	bl	80046ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000c46:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <main+0x3c>)
 8000c48:	f003 fd30 	bl	80046ac <HAL_TIM_Base_Start_IT>
  autoHomeMotors();
 8000c4c:	f7ff ff22 	bl	8000a94 <autoHomeMotors>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <main+0x34>
 8000c54:	24000138 	.word	0x24000138
 8000c58:	24000184 	.word	0x24000184

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0a4      	sub	sp, #144	@ 0x90
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 f9d6 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c74:	2220      	movs	r2, #32
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f9cf 	bl	800501c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f001 fa15 	bl	80020c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b41      	ldr	r3, [pc, #260]	@ (8000da0 <SystemClock_Config+0x144>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8000da0 <SystemClock_Config+0x144>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b3d      	ldr	r3, [pc, #244]	@ (8000da0 <SystemClock_Config+0x144>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb6:	bf00      	nop
 8000cb8:	4b39      	ldr	r3, [pc, #228]	@ (8000da0 <SystemClock_Config+0x144>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cc4:	d1f8      	bne.n	8000cb8 <SystemClock_Config+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000cc6:	2330      	movs	r3, #48	@ 0x30
 8000cc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000cce:	2380      	movs	r3, #128	@ 0x80
 8000cd0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ce2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ce6:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 fa11 	bl	8002134 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d18:	f000 fa80 	bl	800121c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	233f      	movs	r3, #63	@ 0x3f
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2303      	movs	r3, #3
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000d24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d2e:	2340      	movs	r3, #64	@ 0x40
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d32:	2340      	movs	r3, #64	@ 0x40
 8000d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d3c:	2340      	movs	r3, #64	@ 0x40
 8000d3e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d44:	2102      	movs	r1, #2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fdce 	bl	80028e8 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000d52:	f000 fa63 	bl	800121c <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <SystemClock_Config+0x148>)
 8000d58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000d5c:	4a11      	ldr	r2, [pc, #68]	@ (8000da4 <SystemClock_Config+0x148>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <SystemClock_Config+0x148>)
 8000d68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB1;
 8000d78:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <SystemClock_Config+0x14c>)
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000d86:	2322      	movs	r3, #34	@ 0x22
 8000d88:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fa78 	bl	8004288 <HAL_RCCEx_CRSConfig>
}
 8000d98:	bf00      	nop
 8000d9a:	3790      	adds	r7, #144	@ 0x90
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	58024800 	.word	0x58024800
 8000da4:	58024400 	.word	0x58024400
 8000da8:	02dc6bff 	.word	0x02dc6bff

08000dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e24 <MX_I2C1_Init+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000db8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e28 <MX_I2C1_Init+0x7c>)
 8000dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de6:	480e      	ldr	r0, [pc, #56]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000de8:	f001 f836 	bl	8001e58 <HAL_I2C_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000df2:	f000 fa13 	bl	800121c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dfa:	f001 f8c9 	bl	8001f90 <HAL_I2CEx_ConfigAnalogFilter>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e04:	f000 fa0a 	bl	800121c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000e0c:	f001 f90b 	bl	8002026 <HAL_I2CEx_ConfigDigitalFilter>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e16:	f000 fa01 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2400003c 	.word	0x2400003c
 8000e24:	40005400 	.word	0x40005400
 8000e28:	00a0a3f7 	.word	0x00a0a3f7

08000e2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <MX_I2C2_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A0A3F7;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <MX_I2C2_Init+0x7c>)
 8000e3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e66:	480e      	ldr	r0, [pc, #56]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e68:	f000 fff6 	bl	8001e58 <HAL_I2C_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e72:	f000 f9d3 	bl	800121c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e7a:	f001 f889 	bl	8001f90 <HAL_I2CEx_ConfigAnalogFilter>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f000 f9ca 	bl	800121c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_I2C2_Init+0x74>)
 8000e8c:	f001 f8cb 	bl	8002026 <HAL_I2CEx_ConfigDigitalFilter>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 f9c1 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	24000090 	.word	0x24000090
 8000ea4:	40005800 	.word	0x40005800
 8000ea8:	00a0a3f7 	.word	0x00a0a3f7

08000eac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f24 <MX_I2C3_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00A0A3F7;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f28 <MX_I2C3_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ee6:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000ee8:	f000 ffb6 	bl	8001e58 <HAL_I2C_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ef2:	f000 f993 	bl	800121c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000efa:	f001 f849 	bl	8001f90 <HAL_I2CEx_ConfigAnalogFilter>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f04:	f000 f98a 	bl	800121c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_I2C3_Init+0x74>)
 8000f0c:	f001 f88b 	bl	8002026 <HAL_I2CEx_ConfigDigitalFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f000 f981 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	240000e4 	.word	0x240000e4
 8000f24:	40005c00 	.word	0x40005c00
 8000f28:	00a0a3f7 	.word	0x00a0a3f7

08000f2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000f4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000f54:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8000f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f72:	4814      	ldr	r0, [pc, #80]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000f74:	f003 fb42 	bl	80045fc <HAL_TIM_Base_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f7e:	f000 f94d 	bl	800121c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000f90:	f003 fd1a 	bl	80049c8 <HAL_TIM_ConfigClockSource>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f9a:	f000 f93f 	bl	800121c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <MX_TIM2_Init+0x98>)
 8000fac:	f003 ff7c 	bl	8004ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fb6:	f000 f931 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	24000138 	.word	0x24000138

08000fc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <MX_TIM4_Init+0x94>)
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8001060 <MX_TIM4_Init+0x98>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <MX_TIM4_Init+0x94>)
 8000fee:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8000ff2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	@ (800105c <MX_TIM4_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <MX_TIM4_Init+0x94>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b16      	ldr	r3, [pc, #88]	@ (800105c <MX_TIM4_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b15      	ldr	r3, [pc, #84]	@ (800105c <MX_TIM4_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800100c:	4813      	ldr	r0, [pc, #76]	@ (800105c <MX_TIM4_Init+0x94>)
 800100e:	f003 faf5 	bl	80045fc <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001018:	f000 f900 	bl	800121c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001020:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <MX_TIM4_Init+0x94>)
 800102a:	f003 fccd 	bl	80049c8 <HAL_TIM_ConfigClockSource>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001034:	f000 f8f2 	bl	800121c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_TIM4_Init+0x94>)
 8001046:	f003 ff2f 	bl	8004ea8 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001050:	f000 f8e4 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	24000184 	.word	0x24000184
 8001060:	40000800 	.word	0x40000800

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	4b63      	ldr	r3, [pc, #396]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a61      	ldr	r2, [pc, #388]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b5f      	ldr	r3, [pc, #380]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b5b      	ldr	r3, [pc, #364]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	4a5a      	ldr	r2, [pc, #360]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a8:	4b57      	ldr	r3, [pc, #348]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b54      	ldr	r3, [pc, #336]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	4a52      	ldr	r2, [pc, #328]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c6:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010da:	4a4b      	ldr	r2, [pc, #300]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e4:	4b48      	ldr	r3, [pc, #288]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b45      	ldr	r3, [pc, #276]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	4a43      	ldr	r2, [pc, #268]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001102:	4b41      	ldr	r3, [pc, #260]	@ (8001208 <MX_GPIO_Init+0x1a4>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Mag_GPIO_Port, Mag_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2180      	movs	r1, #128	@ 0x80
 8001114:	483d      	ldr	r0, [pc, #244]	@ (800120c <MX_GPIO_Init+0x1a8>)
 8001116:	f000 fe6b 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorL1_Pin|motorL2_Pin|motorL3_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2107      	movs	r1, #7
 800111e:	483c      	ldr	r0, [pc, #240]	@ (8001210 <MX_GPIO_Init+0x1ac>)
 8001120:	f000 fe66 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M1dir_Pin|M2dir_Pin|M3dir_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800112a:	483a      	ldr	r0, [pc, #232]	@ (8001214 <MX_GPIO_Init+0x1b0>)
 800112c:	f000 fe60 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2180      	movs	r1, #128	@ 0x80
 8001134:	4838      	ldr	r0, [pc, #224]	@ (8001218 <MX_GPIO_Init+0x1b4>)
 8001136:	f000 fe5b 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LimL1_Pin LimL2_Pin LimL3_Pin */
  GPIO_InitStruct.Pin = LimL1_Pin|LimL2_Pin|LimL3_Pin;
 800113a:	2370      	movs	r3, #112	@ 0x70
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001142:	2302      	movs	r3, #2
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	482f      	ldr	r0, [pc, #188]	@ (800120c <MX_GPIO_Init+0x1a8>)
 800114e:	f000 fc8f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mag_Pin */
  GPIO_InitStruct.Pin = Mag_Pin;
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Mag_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4828      	ldr	r0, [pc, #160]	@ (800120c <MX_GPIO_Init+0x1a8>)
 800116a:	f000 fc81 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : motorL1_Pin motorL2_Pin */
  GPIO_InitStruct.Pin = motorL1_Pin|motorL2_Pin;
 800116e:	2303      	movs	r3, #3
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800117a:	2301      	movs	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4822      	ldr	r0, [pc, #136]	@ (8001210 <MX_GPIO_Init+0x1ac>)
 8001186:	f000 fc73 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : motorL3_Pin */
  GPIO_InitStruct.Pin = motorL3_Pin;
 800118a:	2304      	movs	r3, #4
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(motorL3_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	481b      	ldr	r0, [pc, #108]	@ (8001210 <MX_GPIO_Init+0x1ac>)
 80011a2:	f000 fc65 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1dir_Pin M2dir_Pin M3dir_Pin */
  GPIO_InitStruct.Pin = M1dir_Pin|M2dir_Pin|M3dir_Pin;
 80011a6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4815      	ldr	r0, [pc, #84]	@ (8001214 <MX_GPIO_Init+0x1b0>)
 80011c0:	f000 fc56 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	480f      	ldr	r0, [pc, #60]	@ (8001218 <MX_GPIO_Init+0x1b4>)
 80011dc:	f000 fc48 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011e0:	2308      	movs	r3, #8
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_CRS_SYNC;
 80011f0:	230a      	movs	r3, #10
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_GPIO_Init+0x1ac>)
 80011fc:	f000 fc38 	bl	8001a70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	@ 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	58024400 	.word	0x58024400
 800120c:	58020000 	.word	0x58020000
 8001210:	58020400 	.word	0x58020400
 8001214:	58021400 	.word	0x58021400
 8001218:	58021800 	.word	0x58021800

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <Error_Handler+0x8>

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_MspInit+0x30>)
 8001230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001234:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <HAL_MspInit+0x30>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_MspInit+0x30>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	58024400 	.word	0x58024400

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0be      	sub	sp, #248	@ 0xf8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001278:	22b8      	movs	r2, #184	@ 0xb8
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fecd 	bl	800501c <memset>
  if(hi2c->Instance==I2C1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a85      	ldr	r2, [pc, #532]	@ (800149c <HAL_I2C_MspInit+0x240>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d146      	bne.n	800131a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800128c:	f04f 0208 	mov.w	r2, #8
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fe50 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80012ae:	f7ff ffb5 	bl	800121c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b7b      	ldr	r3, [pc, #492]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	4a79      	ldr	r2, [pc, #484]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c2:	4b77      	ldr	r3, [pc, #476]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d0:	23c0      	movs	r3, #192	@ 0xc0
 80012d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d6:	2312      	movs	r3, #18
 80012d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e8:	2304      	movs	r3, #4
 80012ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012f2:	4619      	mov	r1, r3
 80012f4:	486b      	ldr	r0, [pc, #428]	@ (80014a4 <HAL_I2C_MspInit+0x248>)
 80012f6:	f000 fbbb 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fa:	4b69      	ldr	r3, [pc, #420]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 80012fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001300:	4a67      	ldr	r2, [pc, #412]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 8001302:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001306:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800130a:	4b65      	ldr	r3, [pc, #404]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 800130c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001318:	e0bc      	b.n	8001494 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a62      	ldr	r2, [pc, #392]	@ (80014a8 <HAL_I2C_MspInit+0x24c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d146      	bne.n	80013b2 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001324:	f04f 0208 	mov.w	r2, #8
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fe04 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001346:	f7ff ff69 	bl	800121c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800134a:	4b55      	ldr	r3, [pc, #340]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001350:	4a53      	ldr	r2, [pc, #332]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800135a:	4b51      	ldr	r3, [pc, #324]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001368:	2303      	movs	r3, #3
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136e:	2312      	movs	r3, #18
 8001370:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001380:	2304      	movs	r3, #4
 8001382:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001386:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800138a:	4619      	mov	r1, r3
 800138c:	4847      	ldr	r0, [pc, #284]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 800138e:	f000 fb6f 	bl	8001a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001392:	4b43      	ldr	r3, [pc, #268]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001398:	4a41      	ldr	r2, [pc, #260]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 800139a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800139e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013a2:	4b3f      	ldr	r3, [pc, #252]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	69bb      	ldr	r3, [r7, #24]
}
 80013b0:	e070      	b.n	8001494 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C3)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a3e      	ldr	r2, [pc, #248]	@ (80014b0 <HAL_I2C_MspInit+0x254>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d16b      	bne.n	8001494 <HAL_I2C_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013bc:	f04f 0208 	mov.w	r2, #8
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fdb8 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_MspInit+0x186>
      Error_Handler();
 80013de:	f7ff ff1d 	bl	800121c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e8:	4a2d      	ldr	r2, [pc, #180]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001406:	4a26      	ldr	r2, [pc, #152]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001410:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800141e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001426:	2312      	movs	r3, #18
 8001428:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001438:	2304      	movs	r3, #4
 800143a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001442:	4619      	mov	r1, r3
 8001444:	481b      	ldr	r0, [pc, #108]	@ (80014b4 <HAL_I2C_MspInit+0x258>)
 8001446:	f000 fb13 	bl	8001a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800144a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001464:	2304      	movs	r3, #4
 8001466:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800146e:	4619      	mov	r1, r3
 8001470:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <HAL_I2C_MspInit+0x25c>)
 8001472:	f000 fafd 	bl	8001a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 8001478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800147c:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 800147e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001482:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 8001488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800148c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	bf00      	nop
 8001496:	37f8      	adds	r7, #248	@ 0xf8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40005400 	.word	0x40005400
 80014a0:	58024400 	.word	0x58024400
 80014a4:	58020400 	.word	0x58020400
 80014a8:	40005800 	.word	0x40005800
 80014ac:	58021400 	.word	0x58021400
 80014b0:	40005c00 	.word	0x40005c00
 80014b4:	58020800 	.word	0x58020800
 80014b8:	58020000 	.word	0x58020000

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014cc:	d117      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <HAL_TIM_Base_MspInit+0x84>)
 80014d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <HAL_TIM_Base_MspInit+0x84>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <HAL_TIM_Base_MspInit+0x84>)
 80014e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	201c      	movs	r0, #28
 80014f2:	f000 fa88 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f6:	201c      	movs	r0, #28
 80014f8:	f000 fa9f 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014fc:	e01b      	b.n	8001536 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <HAL_TIM_Base_MspInit+0x88>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d116      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <HAL_TIM_Base_MspInit+0x84>)
 800150a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800150e:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <HAL_TIM_Base_MspInit+0x84>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <HAL_TIM_Base_MspInit+0x84>)
 800151a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201e      	movs	r0, #30
 800152c:	f000 fa6b 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001530:	201e      	movs	r0, #30
 8001532:	f000 fa82 	bl	8001a3a <HAL_NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	58024400 	.word	0x58024400
 8001544:	40000800 	.word	0x40000800

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <NMI_Handler+0x4>

08001550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <MemManage_Handler+0x4>

08001560 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <UsageFault_Handler+0x4>

08001570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159e:	f000 f92b 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015ac:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <TIM2_IRQHandler+0x10>)
 80015ae:	f003 f903 	bl	80047b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	24000138 	.word	0x24000138

080015bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <TIM4_IRQHandler+0x10>)
 80015c2:	f003 f8f9 	bl	80047b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	24000184 	.word	0x24000184

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015d4:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <SystemInit+0xd0>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015da:	4a31      	ldr	r2, [pc, #196]	@ (80016a0 <SystemInit+0xd0>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015e4:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <SystemInit+0xd4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	2b06      	cmp	r3, #6
 80015ee:	d807      	bhi.n	8001600 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015f0:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <SystemInit+0xd4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 030f 	bic.w	r3, r3, #15
 80015f8:	4a2a      	ldr	r2, [pc, #168]	@ (80016a4 <SystemInit+0xd4>)
 80015fa:	f043 0307 	orr.w	r3, r3, #7
 80015fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001600:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <SystemInit+0xd8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a28      	ldr	r2, [pc, #160]	@ (80016a8 <SystemInit+0xd8>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800160c:	4b26      	ldr	r3, [pc, #152]	@ (80016a8 <SystemInit+0xd8>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001612:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <SystemInit+0xd8>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4924      	ldr	r1, [pc, #144]	@ (80016a8 <SystemInit+0xd8>)
 8001618:	4b24      	ldr	r3, [pc, #144]	@ (80016ac <SystemInit+0xdc>)
 800161a:	4013      	ands	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800161e:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <SystemInit+0xd4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800162a:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <SystemInit+0xd4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 030f 	bic.w	r3, r3, #15
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <SystemInit+0xd4>)
 8001634:	f043 0307 	orr.w	r3, r3, #7
 8001638:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <SystemInit+0xd8>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <SystemInit+0xd8>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <SystemInit+0xd8>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <SystemInit+0xd8>)
 800164e:	4a18      	ldr	r2, [pc, #96]	@ (80016b0 <SystemInit+0xe0>)
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <SystemInit+0xd8>)
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <SystemInit+0xe4>)
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <SystemInit+0xd8>)
 800165a:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <SystemInit+0xe8>)
 800165c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <SystemInit+0xd8>)
 8001660:	2200      	movs	r2, #0
 8001662:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <SystemInit+0xd8>)
 8001666:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <SystemInit+0xe8>)
 8001668:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <SystemInit+0xd8>)
 800166c:	2200      	movs	r2, #0
 800166e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001670:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <SystemInit+0xd8>)
 8001672:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <SystemInit+0xe8>)
 8001674:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <SystemInit+0xd8>)
 8001678:	2200      	movs	r2, #0
 800167a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <SystemInit+0xd8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <SystemInit+0xd8>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001686:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <SystemInit+0xd8>)
 800168a:	2200      	movs	r2, #0
 800168c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <SystemInit+0xec>)
 8001690:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001694:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	52002000 	.word	0x52002000
 80016a8:	58024400 	.word	0x58024400
 80016ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80016b0:	02020200 	.word	0x02020200
 80016b4:	01ff0000 	.word	0x01ff0000
 80016b8:	01010280 	.word	0x01010280
 80016bc:	52004000 	.word	0x52004000

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016c4:	f7ff ff84 	bl	80015d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ca:	490d      	ldr	r1, [pc, #52]	@ (8001700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e0:	4c0a      	ldr	r4, [pc, #40]	@ (800170c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ee:	f003 fc9d 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7ff fa93 	bl	8000c1c <main>
  bx  lr
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80016fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001700:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001704:	080050a4 	.word	0x080050a4
  ldr r2, =_sbss
 8001708:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 800170c:	24000230 	.word	0x24000230

08001710 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC3_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171a:	2003      	movs	r0, #3
 800171c:	f000 f968 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001720:	f001 fa98 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_Init+0x68>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	4913      	ldr	r1, [pc, #76]	@ (8001780 <HAL_Init+0x6c>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_Init+0x68>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <HAL_Init+0x6c>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <HAL_Init+0x70>)
 8001756:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001758:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <HAL_Init+0x74>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175e:	200f      	movs	r0, #15
 8001760:	f000 f814 	bl	800178c <HAL_InitTick>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e002      	b.n	8001774 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800176e:	f7ff fd5b 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	58024400 	.word	0x58024400
 8001780:	0800508c 	.word	0x0800508c
 8001784:	24000014 	.word	0x24000014
 8001788:	24000010 	.word	0x24000010

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_InitTick+0x60>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e021      	b.n	80017e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <HAL_InitTick+0x64>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_InitTick+0x60>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f94d 	bl	8001a56 <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f917 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	@ (80017f4 <HAL_InitTick+0x68>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2400001c 	.word	0x2400001c
 80017f0:	24000010 	.word	0x24000010
 80017f4:	24000018 	.word	0x24000018

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2400001c 	.word	0x2400001c
 800181c:	2400022c 	.word	0x2400022c

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2400022c 	.word	0x2400022c

08001838 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetREVID+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0c1b      	lsrs	r3, r3, #16
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	5c001000 	.word	0x5c001000

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	4313      	orrs	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	05fa0000 	.word	0x05fa0000

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	@ (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff40 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff33 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa4 	bl	80019ac <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a7e:	4b86      	ldr	r3, [pc, #536]	@ (8001c98 <HAL_GPIO_Init+0x228>)
 8001a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a82:	e18c      	b.n	8001d9e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 817e 	beq.w	8001d98 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d005      	beq.n	8001ab4 <HAL_GPIO_Init+0x44>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d130      	bne.n	8001b16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aea:	2201      	movs	r2, #1
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	f003 0201 	and.w	r2, r3, #1
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d017      	beq.n	8001b52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d123      	bne.n	8001ba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	69b9      	ldr	r1, [r7, #24]
 8001ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0203 	and.w	r2, r3, #3
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80d8 	beq.w	8001d98 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c9c <HAL_GPIO_Init+0x22c>)
 8001bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bee:	4a2b      	ldr	r2, [pc, #172]	@ (8001c9c <HAL_GPIO_Init+0x22c>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <HAL_GPIO_Init+0x22c>)
 8001bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <HAL_GPIO_Init+0x230>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <HAL_GPIO_Init+0x234>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d04a      	beq.n	8001cc8 <HAL_GPIO_Init+0x258>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca8 <HAL_GPIO_Init+0x238>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02b      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cac <HAL_GPIO_Init+0x23c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d025      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb0 <HAL_GPIO_Init+0x240>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01f      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_GPIO_Init+0x244>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a18      	ldr	r2, [pc, #96]	@ (8001cb8 <HAL_GPIO_Init+0x248>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <HAL_GPIO_Init+0x24c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a16      	ldr	r2, [pc, #88]	@ (8001cc0 <HAL_GPIO_Init+0x250>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <HAL_GPIO_Init+0x254>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x206>
 8001c72:	2309      	movs	r3, #9
 8001c74:	e029      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c76:	230a      	movs	r3, #10
 8001c78:	e027      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e025      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e023      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e021      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e01f      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e01d      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e01b      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e019      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c96:	bf00      	nop
 8001c98:	58000080 	.word	0x58000080
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58000400 	.word	0x58000400
 8001ca4:	58020000 	.word	0x58020000
 8001ca8:	58020400 	.word	0x58020400
 8001cac:	58020800 	.word	0x58020800
 8001cb0:	58020c00 	.word	0x58020c00
 8001cb4:	58021000 	.word	0x58021000
 8001cb8:	58021400 	.word	0x58021400
 8001cbc:	58021800 	.word	0x58021800
 8001cc0:	58021c00 	.word	0x58021c00
 8001cc4:	58022400 	.word	0x58022400
 8001cc8:	2300      	movs	r3, #0
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	f002 0203 	and.w	r2, r2, #3
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	4093      	lsls	r3, r2
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cda:	4938      	ldr	r1, [pc, #224]	@ (8001dbc <HAL_GPIO_Init+0x34c>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f ae6b 	bne.w	8001a84 <HAL_GPIO_Init+0x14>
  }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3724      	adds	r7, #36	@ 0x24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	58000400 	.word	0x58000400

08001dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	400b      	ands	r3, r1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e08b      	b.n	8001f82 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff f9ec 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2224      	movs	r2, #36	@ 0x24
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ea8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	e006      	b.n	8001ee0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ede:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d108      	bne.n	8001efa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	e007      	b.n	8001f0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_I2C_Init+0x134>)
 8001f16:	430b      	orrs	r3, r1
 8001f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69d9      	ldr	r1, [r3, #28]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	02008000 	.word	0x02008000

08001f90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d138      	bne.n	8002018 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e032      	b.n	800201a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	@ 0x24
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b20      	cmp	r3, #32
 800203a:	d139      	bne.n	80020b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002046:	2302      	movs	r3, #2
 8002048:	e033      	b.n	80020b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2224      	movs	r2, #36	@ 0x24
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002078:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d00a      	beq.n	80020ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e01f      	b.n	8002126 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e01d      	b.n	8002126 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	490f      	ldr	r1, [pc, #60]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020fa:	f7ff fb91 	bl	8001820 <HAL_GetTick>
 80020fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002100:	e009      	b.n	8002116 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002102:	f7ff fb8d 	bl	8001820 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002110:	d901      	bls.n	8002116 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e007      	b.n	8002126 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002122:	d1ee      	bne.n	8002102 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	58024800 	.word	0x58024800

08002134 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	@ 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e3c8      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8087 	beq.w	8002262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002154:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800215e:	4b86      	ldr	r3, [pc, #536]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002166:	2b10      	cmp	r3, #16
 8002168:	d007      	beq.n	800217a <HAL_RCC_OscConfig+0x46>
 800216a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216c:	2b18      	cmp	r3, #24
 800216e:	d110      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
 8002170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d10b      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d06c      	beq.n	8002260 <HAL_RCC_OscConfig+0x12c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d168      	bne.n	8002260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e3a2      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x76>
 800219c:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a75      	ldr	r2, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e02e      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b71      	ldr	r3, [pc, #452]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a70      	ldr	r2, [pc, #448]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b6e      	ldr	r3, [pc, #440]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6d      	ldr	r2, [pc, #436]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0xbc>
 80021d6:	4b68      	ldr	r3, [pc, #416]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a67      	ldr	r2, [pc, #412]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b65      	ldr	r3, [pc, #404]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a64      	ldr	r2, [pc, #400]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021f0:	4b61      	ldr	r3, [pc, #388]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a60      	ldr	r2, [pc, #384]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a5d      	ldr	r2, [pc, #372]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff fb06 	bl	8001820 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fb02 	bl	8001820 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	@ 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e356      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800222a:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xe4>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff faf2 	bl	8001820 <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff faee 	bl	8001820 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	@ 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e342      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002252:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x10c>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 808c 	beq.w	8002388 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002278:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800227a:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_RCC_OscConfig+0x162>
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	2b18      	cmp	r3, #24
 800228a:	d137      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c8>
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d132      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002296:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_RCC_OscConfig+0x17a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e314      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022ae:	4b32      	ldr	r3, [pc, #200]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0219 	bic.w	r2, r3, #25
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	492f      	ldr	r1, [pc, #188]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff faae 	bl	8001820 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff faaa 	bl	8001820 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e2fe      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022da:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	4920      	ldr	r1, [pc, #128]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fa:	e045      	b.n	8002388 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d026      	beq.n	8002352 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002304:	4b1c      	ldr	r3, [pc, #112]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 0219 	bic.w	r2, r3, #25
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4919      	ldr	r1, [pc, #100]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff fa83 	bl	8001820 <HAL_GetTick>
 800231a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff fa7f 	bl	8001820 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e2d3      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	490b      	ldr	r1, [pc, #44]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	e01a      	b.n	8002388 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a08      	ldr	r2, [pc, #32]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7ff fa5f 	bl	8001820 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7ff fa5b 	bl	8001820 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d903      	bls.n	800237c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e2af      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
 8002378:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800237c:	4b96      	ldr	r3, [pc, #600]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ee      	bne.n	8002366 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d06a      	beq.n	800246a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002394:	4b90      	ldr	r3, [pc, #576]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800239c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800239e:	4b8e      	ldr	r3, [pc, #568]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d007      	beq.n	80023ba <HAL_RCC_OscConfig+0x286>
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b18      	cmp	r3, #24
 80023ae:	d11b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2b4>
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d116      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023ba:	4b87      	ldr	r3, [pc, #540]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_RCC_OscConfig+0x29e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b80      	cmp	r3, #128	@ 0x80
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e282      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023d2:	4b81      	ldr	r3, [pc, #516]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	497d      	ldr	r1, [pc, #500]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023e6:	e040      	b.n	800246a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023f0:	4b79      	ldr	r3, [pc, #484]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a78      	ldr	r2, [pc, #480]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fa10 	bl	8001820 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002404:	f7ff fa0c 	bl	8001820 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e260      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002416:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002422:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	4969      	ldr	r1, [pc, #420]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	60cb      	str	r3, [r1, #12]
 8002436:	e018      	b.n	800246a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002438:	4b67      	ldr	r3, [pc, #412]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a66      	ldr	r2, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 800243e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f9ec 	bl	8001820 <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800244c:	f7ff f9e8 	bl	8001820 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e23c      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800245e:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d036      	beq.n	80024e4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d019      	beq.n	80024b2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247e:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002482:	4a55      	ldr	r2, [pc, #340]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7ff f9c9 	bl	8001820 <HAL_GetTick>
 800248e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7ff f9c5 	bl	8001820 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e219      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024a4:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x35e>
 80024b0:	e018      	b.n	80024e4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b2:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b6:	4a48      	ldr	r2, [pc, #288]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7ff f9af 	bl	8001820 <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7ff f9ab 	bl	8001820 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1ff      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024d8:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d036      	beq.n	800255e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d019      	beq.n	800252c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024f8:	4b37      	ldr	r3, [pc, #220]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a36      	ldr	r2, [pc, #216]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002504:	f7ff f98c 	bl	8001820 <HAL_GetTick>
 8002508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250c:	f7ff f988 	bl	8001820 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1dc      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800251e:	4b2e      	ldr	r3, [pc, #184]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x3d8>
 800252a:	e018      	b.n	800255e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800252c:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a29      	ldr	r2, [pc, #164]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002536:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002538:	f7ff f972 	bl	8001820 <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002540:	f7ff f96e 	bl	8001820 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1c2      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8086 	beq.w	8002678 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800256c:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_RCC_OscConfig+0x4a8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1a      	ldr	r2, [pc, #104]	@ (80025dc <HAL_RCC_OscConfig+0x4a8>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002578:	f7ff f952 	bl	8001820 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7ff f94e 	bl	8001820 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1a2      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_RCC_OscConfig+0x4a8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_OscConfig+0x480>
 80025a6:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b2:	e032      	b.n	800261a <HAL_RCC_OscConfig+0x4e6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4ac>
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a02      	ldr	r2, [pc, #8]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d4:	e021      	b.n	800261a <HAL_RCC_OscConfig+0x4e6>
 80025d6:	bf00      	nop
 80025d8:	58024400 	.word	0x58024400
 80025dc:	58024800 	.word	0x58024800
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x4ce>
 80025e8:	4b83      	ldr	r3, [pc, #524]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ec:	4a82      	ldr	r2, [pc, #520]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f4:	4b80      	ldr	r3, [pc, #512]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f8:	4a7f      	ldr	r2, [pc, #508]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002600:	e00b      	b.n	800261a <HAL_RCC_OscConfig+0x4e6>
 8002602:	4b7d      	ldr	r3, [pc, #500]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	4a7c      	ldr	r2, [pc, #496]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6713      	str	r3, [r2, #112]	@ 0x70
 800260e:	4b7a      	ldr	r3, [pc, #488]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	4a79      	ldr	r2, [pc, #484]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7ff f8fd 	bl	8001820 <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7ff f8f9 	bl	8001820 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e14b      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002640:	4b6d      	ldr	r3, [pc, #436]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ee      	beq.n	800262a <HAL_RCC_OscConfig+0x4f6>
 800264c:	e014      	b.n	8002678 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff f8e7 	bl	8001820 <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7ff f8e3 	bl	8001820 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e135      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800266c:	4b62      	ldr	r3, [pc, #392]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ee      	bne.n	8002656 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 812a 	beq.w	80028d6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002682:	4b5d      	ldr	r3, [pc, #372]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800268a:	2b18      	cmp	r3, #24
 800268c:	f000 80ba 	beq.w	8002804 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	2b02      	cmp	r3, #2
 8002696:	f040 8095 	bne.w	80027c4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b57      	ldr	r3, [pc, #348]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80026a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7ff f8bb 	bl	8001820 <HAL_GetTick>
 80026aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7ff f8b7 	bl	8001820 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e10b      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026c0:	4b4d      	ldr	r3, [pc, #308]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026cc:	4b4a      	ldr	r3, [pc, #296]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80026ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026d0:	4b4a      	ldr	r3, [pc, #296]	@ (80027fc <HAL_RCC_OscConfig+0x6c8>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	430a      	orrs	r2, r1
 80026e0:	4945      	ldr	r1, [pc, #276]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	628b      	str	r3, [r1, #40]	@ 0x28
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f4:	3b01      	subs	r3, #1
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	3b01      	subs	r3, #1
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270e:	3b01      	subs	r3, #1
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002716:	4938      	ldr	r1, [pc, #224]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800271c:	4b36      	ldr	r3, [pc, #216]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	4a35      	ldr	r2, [pc, #212]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002728:	4b33      	ldr	r3, [pc, #204]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800272a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800272c:	4b34      	ldr	r3, [pc, #208]	@ (8002800 <HAL_RCC_OscConfig+0x6cc>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002734:	00d2      	lsls	r2, r2, #3
 8002736:	4930      	ldr	r1, [pc, #192]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800273c:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	f023 020c 	bic.w	r2, r3, #12
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	492b      	ldr	r1, [pc, #172]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	f023 0202 	bic.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	4927      	ldr	r1, [pc, #156]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002760:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	4a24      	ldr	r2, [pc, #144]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800276c:	4b22      	ldr	r3, [pc, #136]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	4a21      	ldr	r2, [pc, #132]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002778:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	4a1e      	ldr	r2, [pc, #120]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800277e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002784:	4b1c      	ldr	r3, [pc, #112]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002790:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a18      	ldr	r2, [pc, #96]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7ff f840 	bl	8001820 <HAL_GetTick>
 80027a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7ff f83c 	bl	8001820 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e090      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x670>
 80027c2:	e088      	b.n	80028d6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80027ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7ff f826 	bl	8001820 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7ff f822 	bl	8001820 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e076      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ea:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x6a4>
 80027f6:	e06e      	b.n	80028d6 <HAL_RCC_OscConfig+0x7a2>
 80027f8:	58024400 	.word	0x58024400
 80027fc:	fffffc0c 	.word	0xfffffc0c
 8002800:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002804:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800280a:	4b35      	ldr	r3, [pc, #212]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	2b01      	cmp	r3, #1
 8002816:	d031      	beq.n	800287c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d12a      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d122      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d11a      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	0a5b      	lsrs	r3, r3, #9
 800284a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002852:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d111      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	0c1b      	lsrs	r3, r3, #16
 800285c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002864:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d108      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	0e1b      	lsrs	r3, r3, #24
 800286e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002876:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e02b      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002880:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 8002882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002884:	08db      	lsrs	r3, r3, #3
 8002886:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800288a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d01f      	beq.n	80028d6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002896:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	4a11      	ldr	r2, [pc, #68]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a2:	f7fe ffbd 	bl	8001820 <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80028a8:	bf00      	nop
 80028aa:	f7fe ffb9 	bl	8001820 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d0f9      	beq.n	80028aa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 80028b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <HAL_RCC_OscConfig+0x7b0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028c2:	00d2      	lsls	r2, r2, #3
 80028c4:	4906      	ldr	r1, [pc, #24]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	4a04      	ldr	r2, [pc, #16]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3730      	adds	r7, #48	@ 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	58024400 	.word	0x58024400
 80028e4:	ffff0007 	.word	0xffff0007

080028e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e19c      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b87      	ldr	r3, [pc, #540]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 020f 	bic.w	r2, r3, #15
 8002912:	4985      	ldr	r1, [pc, #532]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b83      	ldr	r3, [pc, #524]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e184      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002944:	429a      	cmp	r2, r3
 8002946:	d908      	bls.n	800295a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002948:	4b78      	ldr	r3, [pc, #480]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	4975      	ldr	r1, [pc, #468]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002956:	4313      	orrs	r3, r2
 8002958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	4b70      	ldr	r3, [pc, #448]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002972:	429a      	cmp	r2, r3
 8002974:	d908      	bls.n	8002988 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002976:	4b6d      	ldr	r3, [pc, #436]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	496a      	ldr	r1, [pc, #424]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002984:	4313      	orrs	r3, r2
 8002986:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	4b64      	ldr	r3, [pc, #400]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d908      	bls.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029a4:	4b61      	ldr	r3, [pc, #388]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	495e      	ldr	r1, [pc, #376]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d010      	beq.n	80029e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d908      	bls.n	80029e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029d2:	4b56      	ldr	r3, [pc, #344]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4953      	ldr	r1, [pc, #332]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d908      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f023 020f 	bic.w	r2, r3, #15
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4947      	ldr	r1, [pc, #284]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d055      	beq.n	8002aca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a1e:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4940      	ldr	r1, [pc, #256]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a38:	4b3c      	ldr	r3, [pc, #240]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d121      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0f6      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a50:	4b36      	ldr	r3, [pc, #216]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d115      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0ea      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a68:	4b30      	ldr	r3, [pc, #192]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0de      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a78:	4b2c      	ldr	r3, [pc, #176]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0d6      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a88:	4b28      	ldr	r3, [pc, #160]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f023 0207 	bic.w	r2, r3, #7
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4925      	ldr	r1, [pc, #148]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fec1 	bl	8001820 <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa2:	f7fe febd 	bl	8001820 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0be      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d1eb      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d208      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f023 020f 	bic.w	r2, r3, #15
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	490e      	ldr	r1, [pc, #56]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d214      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 020f 	bic.w	r2, r3, #15
 8002b0e:	4906      	ldr	r1, [pc, #24]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e086      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
 8002b28:	52002000 	.word	0x52002000
 8002b2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	4b3f      	ldr	r3, [pc, #252]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d208      	bcs.n	8002b5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	4939      	ldr	r1, [pc, #228]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d010      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	4b34      	ldr	r3, [pc, #208]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d208      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b7a:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	492e      	ldr	r1, [pc, #184]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	4b28      	ldr	r3, [pc, #160]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d208      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ba8:	4b25      	ldr	r3, [pc, #148]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4922      	ldr	r1, [pc, #136]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d010      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d208      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4917      	ldr	r1, [pc, #92]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002be8:	f000 f834 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	4912      	ldr	r1, [pc, #72]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_RCC_ClockConfig+0x360>)
 8002c1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <HAL_RCC_ClockConfig+0x364>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_RCC_ClockConfig+0x368>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fdae 	bl	800178c <HAL_InitTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	58024400 	.word	0x58024400
 8002c44:	0800508c 	.word	0x0800508c
 8002c48:	24000014 	.word	0x24000014
 8002c4c:	24000010 	.word	0x24000010
 8002c50:	24000018 	.word	0x24000018

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	@ 0x24
 8002c58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5a:	4bb3      	ldr	r3, [pc, #716]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c62:	2b18      	cmp	r3, #24
 8002c64:	f200 8155 	bhi.w	8002f12 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c68:	a201      	add	r2, pc, #4	@ (adr r2, 8002c70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002cd5 	.word	0x08002cd5
 8002c74:	08002f13 	.word	0x08002f13
 8002c78:	08002f13 	.word	0x08002f13
 8002c7c:	08002f13 	.word	0x08002f13
 8002c80:	08002f13 	.word	0x08002f13
 8002c84:	08002f13 	.word	0x08002f13
 8002c88:	08002f13 	.word	0x08002f13
 8002c8c:	08002f13 	.word	0x08002f13
 8002c90:	08002cfb 	.word	0x08002cfb
 8002c94:	08002f13 	.word	0x08002f13
 8002c98:	08002f13 	.word	0x08002f13
 8002c9c:	08002f13 	.word	0x08002f13
 8002ca0:	08002f13 	.word	0x08002f13
 8002ca4:	08002f13 	.word	0x08002f13
 8002ca8:	08002f13 	.word	0x08002f13
 8002cac:	08002f13 	.word	0x08002f13
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002f13 	.word	0x08002f13
 8002cb8:	08002f13 	.word	0x08002f13
 8002cbc:	08002f13 	.word	0x08002f13
 8002cc0:	08002f13 	.word	0x08002f13
 8002cc4:	08002f13 	.word	0x08002f13
 8002cc8:	08002f13 	.word	0x08002f13
 8002ccc:	08002f13 	.word	0x08002f13
 8002cd0:	08002d07 	.word	0x08002d07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cd4:	4b94      	ldr	r3, [pc, #592]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ce0:	4b91      	ldr	r3, [pc, #580]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	4a90      	ldr	r2, [pc, #576]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002cf2:	e111      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cf6:	61bb      	str	r3, [r7, #24]
      break;
 8002cf8:	e10e      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cfc:	61bb      	str	r3, [r7, #24]
      break;
 8002cfe:	e10b      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d00:	4b8c      	ldr	r3, [pc, #560]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d02:	61bb      	str	r3, [r7, #24]
      break;
 8002d04:	e108      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d06:	4b88      	ldr	r3, [pc, #544]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d10:	4b85      	ldr	r3, [pc, #532]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d1c:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d26:	4b80      	ldr	r3, [pc, #512]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2a:	08db      	lsrs	r3, r3, #3
 8002d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80e1 	beq.w	8002f0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	f000 8083 	beq.w	8002e58 <HAL_RCC_GetSysClockFreq+0x204>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f200 80a1 	bhi.w	8002e9c <HAL_RCC_GetSysClockFreq+0x248>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x114>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d056      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d66:	e099      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d68:	4b6f      	ldr	r3, [pc, #444]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02d      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d74:	4b6c      	ldr	r3, [pc, #432]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9e:	4b62      	ldr	r3, [pc, #392]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002db2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002dce:	e087      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002f3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002de2:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002df6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e12:	e065      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002f40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e26:	4b40      	ldr	r3, [pc, #256]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e3a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e56:	e043      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e62:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e7e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e9a:	e021      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ec2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ede:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	0a5b      	lsrs	r3, r3, #9
 8002ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eea:	3301      	adds	r3, #1
 8002eec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f04:	ee17 3a90 	vmov	r3, s15
 8002f08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f0a:	e005      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
      break;
 8002f10:	e002      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f12:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f14:	61bb      	str	r3, [r7, #24]
      break;
 8002f16:	bf00      	nop
  }

  return sysclockfreq;
 8002f18:	69bb      	ldr	r3, [r7, #24]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	@ 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	03d09000 	.word	0x03d09000
 8002f30:	003d0900 	.word	0x003d0900
 8002f34:	007a1200 	.word	0x007a1200
 8002f38:	46000000 	.word	0x46000000
 8002f3c:	4c742400 	.word	0x4c742400
 8002f40:	4a742400 	.word	0x4a742400
 8002f44:	4af42400 	.word	0x4af42400

08002f48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f4c:	b0c6      	sub	sp, #280	@ 0x118
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002f6c:	2500      	movs	r5, #0
 8002f6e:	ea54 0305 	orrs.w	r3, r4, r5
 8002f72:	d049      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f7e:	d02f      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f84:	d828      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f8a:	d01a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f90:	d822      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f9a:	d007      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9e:	4bab      	ldr	r3, [pc, #684]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	4aaa      	ldr	r2, [pc, #680]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002faa:	e01a      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 f9bd 	bl	8004334 <RCCEx_PLL2_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fc0:	e00f      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc6:	3328      	adds	r3, #40	@ 0x28
 8002fc8:	2102      	movs	r1, #2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 fa64 	bl	8004498 <RCCEx_PLL3_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fd6:	e004      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002fde:	e000      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002fea:	4b98      	ldr	r3, [pc, #608]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ff8:	4a94      	ldr	r2, [pc, #592]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ffe:	e003      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003004:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003014:	f04f 0900 	mov.w	r9, #0
 8003018:	ea58 0309 	orrs.w	r3, r8, r9
 800301c:	d047      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800301e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	2b04      	cmp	r3, #4
 8003026:	d82a      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003028:	a201      	add	r2, pc, #4	@ (adr r2, 8003030 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302e:	bf00      	nop
 8003030:	08003045 	.word	0x08003045
 8003034:	08003053 	.word	0x08003053
 8003038:	08003069 	.word	0x08003069
 800303c:	08003087 	.word	0x08003087
 8003040:	08003087 	.word	0x08003087
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003044:	4b81      	ldr	r3, [pc, #516]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	4a80      	ldr	r2, [pc, #512]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800304a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800304e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003050:	e01a      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003056:	3308      	adds	r3, #8
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f001 f96a 	bl	8004334 <RCCEx_PLL2_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003066:	e00f      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306c:	3328      	adds	r3, #40	@ 0x28
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fa11 	bl	8004498 <RCCEx_PLL3_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800307c:	e004      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003084:	e000      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003090:	4b6e      	ldr	r3, [pc, #440]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003094:	f023 0107 	bic.w	r1, r3, #7
 8003098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	4a6b      	ldr	r2, [pc, #428]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80030ba:	f04f 0b00 	mov.w	fp, #0
 80030be:	ea5a 030b 	orrs.w	r3, sl, fp
 80030c2:	d05b      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80030c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030cc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80030d0:	d03b      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80030d2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80030d6:	d834      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80030d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030dc:	d037      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80030de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030e2:	d82e      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80030e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80030e8:	d033      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80030ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80030ee:	d828      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80030f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030f4:	d01a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80030f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fa:	d822      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003104:	d007      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003106:	e01c      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003108:	4b50      	ldr	r3, [pc, #320]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800310a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310c:	4a4f      	ldr	r2, [pc, #316]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800310e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003114:	e01e      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800311a:	3308      	adds	r3, #8
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f001 f908 	bl	8004334 <RCCEx_PLL2_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800312a:	e013      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800312c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003130:	3328      	adds	r3, #40	@ 0x28
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f001 f9af 	bl	8004498 <RCCEx_PLL3_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003140:	e008      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003148:	e004      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800314a:	bf00      	nop
 800314c:	e002      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800315c:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003168:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800316c:	4a37      	ldr	r2, [pc, #220]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800316e:	430b      	orrs	r3, r1
 8003170:	6593      	str	r3, [r2, #88]	@ 0x58
 8003172:	e003      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800317c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003188:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003192:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003196:	460b      	mov	r3, r1
 8003198:	4313      	orrs	r3, r2
 800319a:	d05d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800319c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80031a4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80031a8:	d03b      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80031aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80031ae:	d834      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031b4:	d037      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80031b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031ba:	d82e      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031c0:	d033      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80031c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031c6:	d828      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031cc:	d01a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80031ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031d2:	d822      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031dc:	d007      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80031de:	e01c      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e0:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	4a19      	ldr	r2, [pc, #100]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031ec:	e01e      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031f2:	3308      	adds	r3, #8
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 f89c 	bl	8004334 <RCCEx_PLL2_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003202:	e013      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003208:	3328      	adds	r3, #40	@ 0x28
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f001 f943 	bl	8004498 <RCCEx_PLL3_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003218:	e008      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003220:	e004      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800322a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800323c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003240:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003244:	4a01      	ldr	r2, [pc, #4]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003246:	430b      	orrs	r3, r1
 8003248:	6593      	str	r3, [r2, #88]	@ 0x58
 800324a:	e005      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800324c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003254:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003264:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800326e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003272:	460b      	mov	r3, r1
 8003274:	4313      	orrs	r3, r2
 8003276:	d03a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	2b30      	cmp	r3, #48	@ 0x30
 8003280:	d01f      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003282:	2b30      	cmp	r3, #48	@ 0x30
 8003284:	d819      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003286:	2b20      	cmp	r3, #32
 8003288:	d00c      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800328a:	2b20      	cmp	r3, #32
 800328c:	d815      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003292:	2b10      	cmp	r3, #16
 8003294:	d111      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003296:	4baa      	ldr	r3, [pc, #680]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	4aa9      	ldr	r2, [pc, #676]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032a2:	e011      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a8:	3308      	adds	r3, #8
 80032aa:	2102      	movs	r1, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f841 	bl	8004334 <RCCEx_PLL2_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032b8:	e006      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032c0:	e002      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80032c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80032d0:	4b9b      	ldr	r3, [pc, #620]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80032d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	4a98      	ldr	r2, [pc, #608]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032e4:	e003      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80032ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80032fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003304:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003308:	460b      	mov	r3, r1
 800330a:	4313      	orrs	r3, r2
 800330c:	d051      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800330e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003318:	d035      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800331a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800331e:	d82e      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003320:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003324:	d031      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003326:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800332a:	d828      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800332c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003330:	d01a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003336:	d822      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003340:	d007      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003342:	e01c      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003344:	4b7e      	ldr	r3, [pc, #504]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	4a7d      	ldr	r2, [pc, #500]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003350:	e01c      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003356:	3308      	adds	r3, #8
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f000 ffea 	bl	8004334 <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003366:	e011      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800336c:	3328      	adds	r3, #40	@ 0x28
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f001 f891 	bl	8004498 <RCCEx_PLL3_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800337c:	e006      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003384:	e002      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800338a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800338c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003394:	4b6a      	ldr	r3, [pc, #424]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003398:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800339c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	4a67      	ldr	r2, [pc, #412]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80033a8:	e003      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80033be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4313      	orrs	r3, r2
 80033d0:	d053      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80033d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033dc:	d033      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80033de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033e2:	d82c      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80033e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033e8:	d02f      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80033ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033ee:	d826      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80033f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033f4:	d02b      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80033f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033fa:	d820      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80033fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003400:	d012      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003406:	d81a      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d022      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003410:	d115      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003416:	3308      	adds	r3, #8
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f000 ff8a 	bl	8004334 <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003426:	e015      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342c:	3328      	adds	r3, #40	@ 0x28
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f001 f831 	bl	8004498 <RCCEx_PLL3_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800343c:	e00a      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003444:	e006      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003446:	bf00      	nop
 8003448:	e004      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800345c:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800345e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003460:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	4a35      	ldr	r2, [pc, #212]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800346c:	430b      	orrs	r3, r1
 800346e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003476:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800347a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003490:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003494:	460b      	mov	r3, r1
 8003496:	4313      	orrs	r3, r2
 8003498:	d058      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800349a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800349e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034a6:	d033      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ac:	d82c      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b2:	d02f      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b8:	d826      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034be:	d02b      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80034c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034c4:	d820      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ca:	d012      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80034cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d0:	d81a      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d022      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80034d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034da:	d115      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e0:	3308      	adds	r3, #8
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 ff25 	bl	8004334 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80034f0:	e015      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f6:	3328      	adds	r3, #40	@ 0x28
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 ffcc 	bl	8004498 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003506:	e00a      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800350e:	e006      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003510:	bf00      	nop
 8003512:	e004      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003514:	bf00      	nop
 8003516:	e002      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800351c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003526:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800352e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003532:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003536:	4a02      	ldr	r2, [pc, #8]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003538:	430b      	orrs	r3, r1
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
 800353c:	e006      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800353e:	bf00      	nop
 8003540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003548:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800354c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003562:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003566:	460b      	mov	r3, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	d037      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800356c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003576:	d00e      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800357c:	d816      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d018      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003586:	d111      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003588:	4bc4      	ldr	r3, [pc, #784]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	4ac3      	ldr	r2, [pc, #780]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003594:	e00f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359a:	3308      	adds	r3, #8
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fec8 	bl	8004334 <RCCEx_PLL2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035aa:	e004      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035be:	4bb7      	ldr	r3, [pc, #732]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80035c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035cc:	4ab3      	ldr	r2, [pc, #716]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80035e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d039      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003602:	2b03      	cmp	r3, #3
 8003604:	d81c      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003606:	a201      	add	r2, pc, #4	@ (adr r2, 800360c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	08003649 	.word	0x08003649
 8003610:	0800361d 	.word	0x0800361d
 8003614:	0800362b 	.word	0x0800362b
 8003618:	08003649 	.word	0x08003649
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361c:	4b9f      	ldr	r3, [pc, #636]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	4a9e      	ldr	r2, [pc, #632]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003628:	e00f      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800362a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362e:	3308      	adds	r3, #8
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fe7e 	bl	8004334 <RCCEx_PLL2_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003652:	4b92      	ldr	r3, [pc, #584]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	f023 0103 	bic.w	r1, r3, #3
 800365a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800365e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003660:	4a8e      	ldr	r2, [pc, #568]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003662:	430b      	orrs	r3, r1
 8003664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003666:	e003      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800366c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800367c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003686:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800368a:	460b      	mov	r3, r1
 800368c:	4313      	orrs	r3, r2
 800368e:	f000 8099 	beq.w	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003692:	4b83      	ldr	r3, [pc, #524]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a82      	ldr	r2, [pc, #520]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800369e:	f7fe f8bf 	bl	8001820 <HAL_GetTick>
 80036a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036a6:	e00b      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a8:	f7fe f8ba 	bl	8001820 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	@ 0x64
 80036b6:	d903      	bls.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036be:	e005      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036c0:	4b77      	ldr	r3, [pc, #476]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ed      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80036cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d173      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80036d4:	4b71      	ldr	r3, [pc, #452]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036e0:	4053      	eors	r3, r2
 80036e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d015      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ea:	4b6c      	ldr	r3, [pc, #432]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036f6:	4b69      	ldr	r3, [pc, #420]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fa:	4a68      	ldr	r2, [pc, #416]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003700:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003702:	4b66      	ldr	r3, [pc, #408]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003706:	4a65      	ldr	r2, [pc, #404]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800370e:	4a63      	ldr	r2, [pc, #396]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003714:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800371e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003722:	d118      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe f87c 	bl	8001820 <HAL_GetTick>
 8003728:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800372c:	e00d      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe f877 	bl	8001820 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003738:	1ad2      	subs	r2, r2, r3
 800373a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800373e:	429a      	cmp	r2, r3
 8003740:	d903      	bls.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003748:	e005      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800374a:	4b54      	ldr	r3, [pc, #336]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0eb      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800375a:	2b00      	cmp	r3, #0
 800375c:	d129      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800376e:	d10e      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003770:	4b4a      	ldr	r3, [pc, #296]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003780:	091a      	lsrs	r2, r3, #4
 8003782:	4b48      	ldr	r3, [pc, #288]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003784:	4013      	ands	r3, r2
 8003786:	4a45      	ldr	r2, [pc, #276]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003788:	430b      	orrs	r3, r1
 800378a:	6113      	str	r3, [r2, #16]
 800378c:	e005      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800378e:	4b43      	ldr	r3, [pc, #268]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	4a42      	ldr	r2, [pc, #264]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003794:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003798:	6113      	str	r3, [r2, #16]
 800379a:	4b40      	ldr	r3, [pc, #256]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800379c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037aa:	4a3c      	ldr	r2, [pc, #240]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b0:	e008      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f002 0301 	and.w	r3, r2, #1
 80037d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f000 808f 	beq.w	8003904 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80037e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ec:	2b28      	cmp	r3, #40	@ 0x28
 80037ee:	d871      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80037f0:	a201      	add	r2, pc, #4	@ (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	080038dd 	.word	0x080038dd
 80037fc:	080038d5 	.word	0x080038d5
 8003800:	080038d5 	.word	0x080038d5
 8003804:	080038d5 	.word	0x080038d5
 8003808:	080038d5 	.word	0x080038d5
 800380c:	080038d5 	.word	0x080038d5
 8003810:	080038d5 	.word	0x080038d5
 8003814:	080038d5 	.word	0x080038d5
 8003818:	080038a9 	.word	0x080038a9
 800381c:	080038d5 	.word	0x080038d5
 8003820:	080038d5 	.word	0x080038d5
 8003824:	080038d5 	.word	0x080038d5
 8003828:	080038d5 	.word	0x080038d5
 800382c:	080038d5 	.word	0x080038d5
 8003830:	080038d5 	.word	0x080038d5
 8003834:	080038d5 	.word	0x080038d5
 8003838:	080038bf 	.word	0x080038bf
 800383c:	080038d5 	.word	0x080038d5
 8003840:	080038d5 	.word	0x080038d5
 8003844:	080038d5 	.word	0x080038d5
 8003848:	080038d5 	.word	0x080038d5
 800384c:	080038d5 	.word	0x080038d5
 8003850:	080038d5 	.word	0x080038d5
 8003854:	080038d5 	.word	0x080038d5
 8003858:	080038dd 	.word	0x080038dd
 800385c:	080038d5 	.word	0x080038d5
 8003860:	080038d5 	.word	0x080038d5
 8003864:	080038d5 	.word	0x080038d5
 8003868:	080038d5 	.word	0x080038d5
 800386c:	080038d5 	.word	0x080038d5
 8003870:	080038d5 	.word	0x080038d5
 8003874:	080038d5 	.word	0x080038d5
 8003878:	080038dd 	.word	0x080038dd
 800387c:	080038d5 	.word	0x080038d5
 8003880:	080038d5 	.word	0x080038d5
 8003884:	080038d5 	.word	0x080038d5
 8003888:	080038d5 	.word	0x080038d5
 800388c:	080038d5 	.word	0x080038d5
 8003890:	080038d5 	.word	0x080038d5
 8003894:	080038d5 	.word	0x080038d5
 8003898:	080038dd 	.word	0x080038dd
 800389c:	58024400 	.word	0x58024400
 80038a0:	58024800 	.word	0x58024800
 80038a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ac:	3308      	adds	r3, #8
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fd3f 	bl	8004334 <RCCEx_PLL2_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038bc:	e00f      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c2:	3328      	adds	r3, #40	@ 0x28
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fde6 	bl	8004498 <RCCEx_PLL3_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038d2:	e004      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038da:	e000      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80038dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038e6:	4bbf      	ldr	r3, [pc, #764]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80038e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80038ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038f4:	4abb      	ldr	r2, [pc, #748]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80038f6:	430b      	orrs	r3, r1
 80038f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80038fa:	e003      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003900:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f002 0302 	and.w	r3, r2, #2
 8003910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800391a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800391e:	460b      	mov	r3, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	d041      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392a:	2b05      	cmp	r3, #5
 800392c:	d824      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800392e:	a201      	add	r2, pc, #4	@ (adr r2, 8003934 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003981 	.word	0x08003981
 8003938:	0800394d 	.word	0x0800394d
 800393c:	08003963 	.word	0x08003963
 8003940:	08003981 	.word	0x08003981
 8003944:	08003981 	.word	0x08003981
 8003948:	08003981 	.word	0x08003981
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003950:	3308      	adds	r3, #8
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fced 	bl	8004334 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003960:	e00f      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003966:	3328      	adds	r3, #40	@ 0x28
 8003968:	2101      	movs	r1, #1
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fd94 	bl	8004498 <RCCEx_PLL3_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003976:	e004      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800398a:	4b96      	ldr	r3, [pc, #600]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800398c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398e:	f023 0107 	bic.w	r1, r3, #7
 8003992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003998:	4a92      	ldr	r2, [pc, #584]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800399a:	430b      	orrs	r3, r1
 800399c:	6553      	str	r3, [r2, #84]	@ 0x54
 800399e:	e003      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f002 0304 	and.w	r3, r2, #4
 80039b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039c2:	460b      	mov	r3, r1
 80039c4:	4313      	orrs	r3, r2
 80039c6:	d044      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80039c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	d825      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80039d4:	a201      	add	r2, pc, #4	@ (adr r2, 80039dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a29 	.word	0x08003a29
 80039e0:	080039f5 	.word	0x080039f5
 80039e4:	08003a0b 	.word	0x08003a0b
 80039e8:	08003a29 	.word	0x08003a29
 80039ec:	08003a29 	.word	0x08003a29
 80039f0:	08003a29 	.word	0x08003a29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f8:	3308      	adds	r3, #8
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fc99 	bl	8004334 <RCCEx_PLL2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a08:	e00f      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0e:	3328      	adds	r3, #40	@ 0x28
 8003a10:	2101      	movs	r1, #1
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fd40 	bl	8004498 <RCCEx_PLL3_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a1e:	e004      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a26:	e000      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10b      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a32:	4b6c      	ldr	r3, [pc, #432]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	f023 0107 	bic.w	r1, r3, #7
 8003a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a42:	4a68      	ldr	r2, [pc, #416]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a48:	e003      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f002 0320 	and.w	r3, r2, #32
 8003a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	d055      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a7e:	d033      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a84:	d82c      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8a:	d02f      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a90:	d826      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a96:	d02b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003a98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a9c:	d820      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa2:	d012      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003aa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa8:	d81a      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d022      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003aae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab2:	d115      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab8:	3308      	adds	r3, #8
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fc39 	bl	8004334 <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ac8:	e015      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ace:	3328      	adds	r3, #40	@ 0x28
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fce0 	bl	8004498 <RCCEx_PLL3_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ade:	e00a      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ae6:	e006      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ae8:	bf00      	nop
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003aec:	bf00      	nop
 8003aee:	e002      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003af0:	bf00      	nop
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003afe:	4b39      	ldr	r3, [pc, #228]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b0e:	4a35      	ldr	r2, [pc, #212]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b14:	e003      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003b2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b34:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	d058      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b46:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b4a:	d033      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003b4c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b50:	d82c      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b56:	d02f      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5c:	d826      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b62:	d02b      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b68:	d820      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b6e:	d012      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b74:	d81a      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d022      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7e:	d115      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b84:	3308      	adds	r3, #8
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fbd3 	bl	8004334 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b94:	e015      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9a:	3328      	adds	r3, #40	@ 0x28
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fc7a 	bl	8004498 <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bb2:	e006      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bb4:	bf00      	nop
 8003bb6:	e004      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10e      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bca:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bda:	4a02      	ldr	r2, [pc, #8]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be0:	e006      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003be2:	bf00      	nop
 8003be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003bfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d055      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c1c:	d033      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003c1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c22:	d82c      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c28:	d02f      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c2e:	d826      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c34:	d02b      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003c36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c3a:	d820      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c40:	d012      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003c42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c46:	d81a      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d022      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c50:	d115      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c56:	3308      	adds	r3, #8
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fb6a 	bl	8004334 <RCCEx_PLL2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c66:	e015      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6c:	3328      	adds	r3, #40	@ 0x28
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fc11 	bl	8004498 <RCCEx_PLL3_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c84:	e006      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003c86:	bf00      	nop
 8003c88:	e004      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003c8a:	bf00      	nop
 8003c8c:	e002      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003c8e:	bf00      	nop
 8003c90:	e000      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cac:	4a9c      	ldr	r2, [pc, #624]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb2:	e003      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f002 0308 	and.w	r3, r2, #8
 8003cc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003cd2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	d01e      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cee:	3328      	adds	r3, #40	@ 0x28
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fbd0 	bl	8004498 <RCCEx_PLL3_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003d04:	4b86      	ldr	r3, [pc, #536]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d14:	4a82      	ldr	r2, [pc, #520]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d16:	430b      	orrs	r3, r1
 8003d18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f002 0310 	and.w	r3, r2, #16
 8003d26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003d34:	460b      	mov	r3, r1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	d01e      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d46:	d10c      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4c:	3328      	adds	r3, #40	@ 0x28
 8003d4e:	2102      	movs	r1, #2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fba1 	bl	8004498 <RCCEx_PLL3_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d62:	4b6f      	ldr	r3, [pc, #444]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d72:	4a6b      	ldr	r2, [pc, #428]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003d84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d86:	2300      	movs	r3, #0
 8003d88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d03e      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003da0:	d022      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003da2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003da6:	d81b      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db0:	d00b      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003db2:	e015      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db8:	3308      	adds	r3, #8
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fab9 	bl	8004334 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003dc8:	e00f      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dce:	3328      	adds	r3, #40	@ 0x28
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb60 	bl	8004498 <RCCEx_PLL3_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003dde:	e004      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df2:	4b4b      	ldr	r3, [pc, #300]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e02:	4a47      	ldr	r2, [pc, #284]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e20:	2300      	movs	r3, #0
 8003e22:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d03b      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e3a:	d01f      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003e3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e40:	d818      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e46:	d003      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003e48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e4c:	d007      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003e4e:	e011      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e50:	4b33      	ldr	r3, [pc, #204]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	4a32      	ldr	r2, [pc, #200]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e5c:	e00f      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e62:	3328      	adds	r3, #40	@ 0x28
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fb16 	bl	8004498 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e86:	4b26      	ldr	r3, [pc, #152]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e96:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e9c:	e003      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ea2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	d034      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed0:	d007      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003ed2:	e011      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed4:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	4a11      	ldr	r2, [pc, #68]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ee0:	e00e      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fa22 	bl	8004334 <RCCEx_PLL2_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f16:	4a02      	ldr	r2, [pc, #8]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f1c:	e006      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003f1e:	bf00      	nop
 8003f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003f38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003f42:	460b      	mov	r3, r1
 8003f44:	4313      	orrs	r3, r2
 8003f46:	d00c      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4c:	3328      	adds	r3, #40	@ 0x28
 8003f4e:	2102      	movs	r1, #2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 faa1 	bl	8004498 <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003f6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f70:	2300      	movs	r3, #0
 8003f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d036      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f88:	d018      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8e:	d811      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f94:	d014      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f9a:	d80b      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d011      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa6:	4bb7      	ldr	r3, [pc, #732]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	4ab6      	ldr	r2, [pc, #728]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fba:	e004      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fce:	4bad      	ldr	r3, [pc, #692]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fdc:	4aa9      	ldr	r2, [pc, #676]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fe2:	e003      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fe8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ffe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004008:	4b9e      	ldr	r3, [pc, #632]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004016:	4a9b      	ldr	r2, [pc, #620]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800401c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800402a:	2300      	movs	r3, #0
 800402c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800402e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004032:	460b      	mov	r3, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	d009      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004038:	4b92      	ldr	r3, [pc, #584]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800403a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004046:	4a8f      	ldr	r2, [pc, #572]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004048:	430b      	orrs	r3, r1
 800404a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004058:	643b      	str	r3, [r7, #64]	@ 0x40
 800405a:	2300      	movs	r3, #0
 800405c:	647b      	str	r3, [r7, #68]	@ 0x44
 800405e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004068:	4b86      	ldr	r3, [pc, #536]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	4a85      	ldr	r2, [pc, #532]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800406e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004072:	6113      	str	r3, [r2, #16]
 8004074:	4b83      	ldr	r3, [pc, #524]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004076:	6919      	ldr	r1, [r3, #16]
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004080:	4a80      	ldr	r2, [pc, #512]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004082:	430b      	orrs	r3, r1
 8004084:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004092:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004098:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040a2:	4b78      	ldr	r3, [pc, #480]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b0:	4a74      	ldr	r2, [pc, #464]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040b2:	430b      	orrs	r3, r1
 80040b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80040c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c4:	2300      	movs	r3, #0
 80040c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80040cc:	460b      	mov	r3, r1
 80040ce:	4313      	orrs	r3, r2
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80040da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e2:	4a68      	ldr	r2, [pc, #416]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80040e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	2100      	movs	r1, #0
 80040f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d011      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004108:	3308      	adds	r3, #8
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f911 	bl	8004334 <RCCEx_PLL2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	2100      	movs	r1, #0
 8004132:	6239      	str	r1, [r7, #32]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
 800413a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d011      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004148:	3308      	adds	r3, #8
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f8f1 	bl	8004334 <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	2100      	movs	r1, #0
 8004172:	61b9      	str	r1, [r7, #24]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d011      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004188:	3308      	adds	r3, #8
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f8d1 	bl	8004334 <RCCEx_PLL2_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	2100      	movs	r1, #0
 80041b2:	6139      	str	r1, [r7, #16]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80041be:	460b      	mov	r3, r1
 80041c0:	4313      	orrs	r3, r2
 80041c2:	d011      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c8:	3328      	adds	r3, #40	@ 0x28
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f963 	bl	8004498 <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80041d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80041e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	2100      	movs	r1, #0
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d011      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004208:	3328      	adds	r3, #40	@ 0x28
 800420a:	2101      	movs	r1, #1
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f943 	bl	8004498 <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004224:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	2100      	movs	r1, #0
 8004232:	6039      	str	r1, [r7, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800423e:	460b      	mov	r3, r1
 8004240:	4313      	orrs	r3, r2
 8004242:	d011      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004248:	3328      	adds	r3, #40	@ 0x28
 800424a:	2102      	movs	r1, #2
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f923 	bl	8004498 <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004264:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004268:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
}
 8004276:	4618      	mov	r0, r3
 8004278:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400

08004288 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004290:	4b26      	ldr	r3, [pc, #152]	@ (800432c <HAL_RCCEx_CRSConfig+0xa4>)
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004296:	4a25      	ldr	r2, [pc, #148]	@ (800432c <HAL_RCCEx_CRSConfig+0xa4>)
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80042a0:	4b22      	ldr	r3, [pc, #136]	@ (800432c <HAL_RCCEx_CRSConfig+0xa4>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a6:	4a21      	ldr	r2, [pc, #132]	@ (800432c <HAL_RCCEx_CRSConfig+0xa4>)
 80042a8:	f023 0302 	bic.w	r3, r3, #2
 80042ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80042b0:	f7fd fac2 	bl	8001838 <HAL_GetREVID>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d80b      	bhi.n	80042d6 <HAL_RCCEx_CRSConfig+0x4e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042c6:	d106      	bne.n	80042d6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e008      	b.n	80042e8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80042fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004330 <HAL_RCCEx_CRSConfig+0xa8>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8004304:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <HAL_RCCEx_CRSConfig+0xa8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	4907      	ldr	r1, [pc, #28]	@ (8004330 <HAL_RCCEx_CRSConfig+0xa8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <HAL_RCCEx_CRSConfig+0xa8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a04      	ldr	r2, [pc, #16]	@ (8004330 <HAL_RCCEx_CRSConfig+0xa8>)
 800431e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004322:	6013      	str	r3, [r2, #0]
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	58024400 	.word	0x58024400
 8004330:	40008400 	.word	0x40008400

08004334 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004342:	4b53      	ldr	r3, [pc, #332]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b03      	cmp	r3, #3
 800434c:	d101      	bne.n	8004352 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e099      	b.n	8004486 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004352:	4b4f      	ldr	r3, [pc, #316]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a4e      	ldr	r2, [pc, #312]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004358:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800435c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435e:	f7fd fa5f 	bl	8001820 <HAL_GetTick>
 8004362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004364:	e008      	b.n	8004378 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004366:	f7fd fa5b 	bl	8001820 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e086      	b.n	8004486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004378:	4b45      	ldr	r3, [pc, #276]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f0      	bne.n	8004366 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004384:	4b42      	ldr	r3, [pc, #264]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	031b      	lsls	r3, r3, #12
 8004392:	493f      	ldr	r1, [pc, #252]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004394:	4313      	orrs	r3, r2
 8004396:	628b      	str	r3, [r1, #40]	@ 0x28
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	3b01      	subs	r3, #1
 800439e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	025b      	lsls	r3, r3, #9
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	061b      	lsls	r3, r3, #24
 80043c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043c8:	4931      	ldr	r1, [pc, #196]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043ce:	4b30      	ldr	r3, [pc, #192]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	492d      	ldr	r1, [pc, #180]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 80043e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e4:	f023 0220 	bic.w	r2, r3, #32
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	4928      	ldr	r1, [pc, #160]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043f2:	4b27      	ldr	r3, [pc, #156]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	4a26      	ldr	r2, [pc, #152]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043fe:	4b24      	ldr	r3, [pc, #144]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004400:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004402:	4b24      	ldr	r3, [pc, #144]	@ (8004494 <RCCEx_PLL2_Config+0x160>)
 8004404:	4013      	ands	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	69d2      	ldr	r2, [r2, #28]
 800440a:	00d2      	lsls	r2, r2, #3
 800440c:	4920      	ldr	r1, [pc, #128]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 800440e:	4313      	orrs	r3, r2
 8004410:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004412:	4b1f      	ldr	r3, [pc, #124]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	4a1e      	ldr	r2, [pc, #120]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004418:	f043 0310 	orr.w	r3, r3, #16
 800441c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004424:	4b1a      	ldr	r3, [pc, #104]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	4a19      	ldr	r2, [pc, #100]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 800442a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800442e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004430:	e00f      	b.n	8004452 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d106      	bne.n	8004446 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004438:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 800443e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004442:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004444:	e005      	b.n	8004452 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004446:	4b12      	ldr	r3, [pc, #72]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444a:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 800444c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004450:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004452:	4b0f      	ldr	r3, [pc, #60]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a0e      	ldr	r2, [pc, #56]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 8004458:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800445c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445e:	f7fd f9df 	bl	8001820 <HAL_GetTick>
 8004462:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004464:	e008      	b.n	8004478 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004466:	f7fd f9db 	bl	8001820 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e006      	b.n	8004486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <RCCEx_PLL2_Config+0x15c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	58024400 	.word	0x58024400
 8004494:	ffff0007 	.word	0xffff0007

08004498 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044a6:	4b53      	ldr	r3, [pc, #332]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d101      	bne.n	80044b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e099      	b.n	80045ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044b6:	4b4f      	ldr	r3, [pc, #316]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4e      	ldr	r2, [pc, #312]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c2:	f7fd f9ad 	bl	8001820 <HAL_GetTick>
 80044c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044c8:	e008      	b.n	80044dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044ca:	f7fd f9a9 	bl	8001820 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e086      	b.n	80045ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044dc:	4b45      	ldr	r3, [pc, #276]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044e8:	4b42      	ldr	r3, [pc, #264]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	051b      	lsls	r3, r3, #20
 80044f6:	493f      	ldr	r1, [pc, #252]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	3b01      	subs	r3, #1
 8004502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	3b01      	subs	r3, #1
 800450c:	025b      	lsls	r3, r3, #9
 800450e:	b29b      	uxth	r3, r3
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	3b01      	subs	r3, #1
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800452c:	4931      	ldr	r1, [pc, #196]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004532:	4b30      	ldr	r3, [pc, #192]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	492d      	ldr	r1, [pc, #180]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 8004540:	4313      	orrs	r3, r2
 8004542:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004544:	4b2b      	ldr	r3, [pc, #172]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	4928      	ldr	r1, [pc, #160]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 8004552:	4313      	orrs	r3, r2
 8004554:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004556:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	4a26      	ldr	r2, [pc, #152]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 800455c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004562:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 8004564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004566:	4b24      	ldr	r3, [pc, #144]	@ (80045f8 <RCCEx_PLL3_Config+0x160>)
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	69d2      	ldr	r2, [r2, #28]
 800456e:	00d2      	lsls	r2, r2, #3
 8004570:	4920      	ldr	r1, [pc, #128]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004576:	4b1f      	ldr	r3, [pc, #124]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	4a1e      	ldr	r2, [pc, #120]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 800457c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004580:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004588:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 800458e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004594:	e00f      	b.n	80045b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800459c:	4b15      	ldr	r3, [pc, #84]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	4a14      	ldr	r2, [pc, #80]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80045a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045a8:	e005      	b.n	80045b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045aa:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	4a11      	ldr	r2, [pc, #68]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045b6:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a0e      	ldr	r2, [pc, #56]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c2:	f7fd f92d 	bl	8001820 <HAL_GetTick>
 80045c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045c8:	e008      	b.n	80045dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045ca:	f7fd f929 	bl	8001820 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e006      	b.n	80045ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <RCCEx_PLL3_Config+0x15c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400
 80045f8:	ffff0007 	.word	0xffff0007

080045fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e049      	b.n	80046a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc ff4a 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 fae4 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d001      	beq.n	80046c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e05e      	b.n	8004782 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004790 <HAL_TIM_Base_Start_IT+0xe4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d02c      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ee:	d027      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a27      	ldr	r2, [pc, #156]	@ (8004794 <HAL_TIM_Base_Start_IT+0xe8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d022      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a26      	ldr	r2, [pc, #152]	@ (8004798 <HAL_TIM_Base_Start_IT+0xec>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d01d      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a24      	ldr	r2, [pc, #144]	@ (800479c <HAL_TIM_Base_Start_IT+0xf0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d018      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xf4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d013      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a21      	ldr	r2, [pc, #132]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xf8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00e      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a20      	ldr	r2, [pc, #128]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xfc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d009      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <HAL_TIM_Base_Start_IT+0x100>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x94>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1d      	ldr	r2, [pc, #116]	@ (80047b0 <HAL_TIM_Base_Start_IT+0x104>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d115      	bne.n	800476c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <HAL_TIM_Base_Start_IT+0x108>)
 8004748:	4013      	ands	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b06      	cmp	r3, #6
 8004750:	d015      	beq.n	800477e <HAL_TIM_Base_Start_IT+0xd2>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004758:	d011      	beq.n	800477e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476a:	e008      	b.n	800477e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e000      	b.n	8004780 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40001800 	.word	0x40001800
 80047a8:	40014000 	.word	0x40014000
 80047ac:	4000e000 	.word	0x4000e000
 80047b0:	4000e400 	.word	0x4000e400
 80047b4:	00010007 	.word	0x00010007

080047b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d020      	beq.n	800481c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0202 	mvn.w	r2, #2
 80047ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f9e2 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f9d4 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f9e5 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d020      	beq.n	8004868 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0204 	mvn.w	r2, #4
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9bc 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9ae 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f9bf 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0208 	mvn.w	r2, #8
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2204      	movs	r2, #4
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f996 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f988 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f999 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0210 	mvn.w	r2, #16
 80048d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2208      	movs	r2, #8
 80048d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f970 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f962 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f973 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0201 	mvn.w	r2, #1
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fb fcf6 	bl	8000310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d104      	bne.n	8004938 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00c      	beq.n	8004952 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800494a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fb51 	bl	8004ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800496e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fb49 	bl	8005008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f92d 	bl	8004bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00c      	beq.n	80049be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f06f 0220 	mvn.w	r2, #32
 80049b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fb11 	bl	8004fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIM_ConfigClockSource+0x1c>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e0dc      	b.n	8004b9e <HAL_TIM_ConfigClockSource+0x1d6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a64      	ldr	r2, [pc, #400]	@ (8004bac <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	f000 80a9 	beq.w	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a20:	4a62      	ldr	r2, [pc, #392]	@ (8004bac <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	f200 80ae 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a28:	4a61      	ldr	r2, [pc, #388]	@ (8004bb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	f000 80a1 	beq.w	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a30:	4a5f      	ldr	r2, [pc, #380]	@ (8004bb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	f200 80a6 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a38:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	f000 8099 	beq.w	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a40:	4a5c      	ldr	r2, [pc, #368]	@ (8004bb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	f200 809e 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004a4c:	f000 8091 	beq.w	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004a54:	f200 8096 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a5c:	f000 8089 	beq.w	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a64:	f200 808e 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a6c:	d03e      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0x124>
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a72:	f200 8087 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a7a:	f000 8086 	beq.w	8004b8a <HAL_TIM_ConfigClockSource+0x1c2>
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a82:	d87f      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a84:	2b70      	cmp	r3, #112	@ 0x70
 8004a86:	d01a      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0xf6>
 8004a88:	2b70      	cmp	r3, #112	@ 0x70
 8004a8a:	d87b      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a8c:	2b60      	cmp	r3, #96	@ 0x60
 8004a8e:	d050      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0x16a>
 8004a90:	2b60      	cmp	r3, #96	@ 0x60
 8004a92:	d877      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a94:	2b50      	cmp	r3, #80	@ 0x50
 8004a96:	d03c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x14a>
 8004a98:	2b50      	cmp	r3, #80	@ 0x50
 8004a9a:	d873      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	d058      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x18a>
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d86f      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004aa4:	2b30      	cmp	r3, #48	@ 0x30
 8004aa6:	d064      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004aa8:	2b30      	cmp	r3, #48	@ 0x30
 8004aaa:	d86b      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d060      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d867      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05c      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d05a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x1aa>
 8004abc:	e062      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ace:	f000 f9cb 	bl	8004e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ae0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	609a      	str	r2, [r3, #8]
      break;
 8004aea:	e04f      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004afc:	f000 f9b4 	bl	8004e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b0e:	609a      	str	r2, [r3, #8]
      break;
 8004b10:	e03c      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f000 f924 	bl	8004d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2150      	movs	r1, #80	@ 0x50
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f97e 	bl	8004e2c <TIM_ITRx_SetConfig>
      break;
 8004b30:	e02c      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 f943 	bl	8004dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2160      	movs	r1, #96	@ 0x60
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f96e 	bl	8004e2c <TIM_ITRx_SetConfig>
      break;
 8004b50:	e01c      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 f904 	bl	8004d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2140      	movs	r1, #64	@ 0x40
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f95e 	bl	8004e2c <TIM_ITRx_SetConfig>
      break;
 8004b70:	e00c      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f000 f955 	bl	8004e2c <TIM_ITRx_SetConfig>
      break;
 8004b82:	e003      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      break;
 8004b88:	e000      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	ffceff88 	.word	0xffceff88
 8004bac:	00100040 	.word	0x00100040
 8004bb0:	00100030 	.word	0x00100030
 8004bb4:	00100020 	.word	0x00100020

08004bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c26:	d00f      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a47      	ldr	r2, [pc, #284]	@ (8004d48 <TIM_Base_SetConfig+0x140>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00b      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a46      	ldr	r2, [pc, #280]	@ (8004d4c <TIM_Base_SetConfig+0x144>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a45      	ldr	r2, [pc, #276]	@ (8004d50 <TIM_Base_SetConfig+0x148>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a44      	ldr	r2, [pc, #272]	@ (8004d54 <TIM_Base_SetConfig+0x14c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d108      	bne.n	8004c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a39      	ldr	r2, [pc, #228]	@ (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d027      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c68:	d023      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a36      	ldr	r2, [pc, #216]	@ (8004d48 <TIM_Base_SetConfig+0x140>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a35      	ldr	r2, [pc, #212]	@ (8004d4c <TIM_Base_SetConfig+0x144>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01b      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a34      	ldr	r2, [pc, #208]	@ (8004d50 <TIM_Base_SetConfig+0x148>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d017      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a33      	ldr	r2, [pc, #204]	@ (8004d54 <TIM_Base_SetConfig+0x14c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a32      	ldr	r2, [pc, #200]	@ (8004d58 <TIM_Base_SetConfig+0x150>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a31      	ldr	r2, [pc, #196]	@ (8004d5c <TIM_Base_SetConfig+0x154>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a30      	ldr	r2, [pc, #192]	@ (8004d60 <TIM_Base_SetConfig+0x158>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8004d64 <TIM_Base_SetConfig+0x15c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2e      	ldr	r2, [pc, #184]	@ (8004d68 <TIM_Base_SetConfig+0x160>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a16      	ldr	r2, [pc, #88]	@ (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00f      	beq.n	8004d10 <TIM_Base_SetConfig+0x108>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a18      	ldr	r2, [pc, #96]	@ (8004d54 <TIM_Base_SetConfig+0x14c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_Base_SetConfig+0x108>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	@ (8004d58 <TIM_Base_SetConfig+0x150>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_Base_SetConfig+0x108>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a16      	ldr	r2, [pc, #88]	@ (8004d5c <TIM_Base_SetConfig+0x154>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0x108>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <TIM_Base_SetConfig+0x158>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d103      	bne.n	8004d18 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f023 0201 	bic.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	611a      	str	r2, [r3, #16]
  }
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40000c00 	.word	0x40000c00
 8004d54:	40010400 	.word	0x40010400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800
 8004d64:	4000e000 	.word	0x4000e000
 8004d68:	4000e400 	.word	0x4000e400

08004d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f023 0201 	bic.w	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 030a 	bic.w	r3, r3, #10
 8004da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f023 0210 	bic.w	r2, r3, #16
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	031b      	lsls	r3, r3, #12
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <TIM_ITRx_SetConfig+0x38>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f043 0307 	orr.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	609a      	str	r2, [r3, #8]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	ffcfff8f 	.word	0xffcfff8f

08004e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e077      	b.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a35      	ldr	r2, [pc, #212]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a34      	ldr	r2, [pc, #208]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d108      	bne.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004efa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a25      	ldr	r2, [pc, #148]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d02c      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f32:	d027      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a22      	ldr	r2, [pc, #136]	@ (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d022      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a21      	ldr	r2, [pc, #132]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d01d      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d018      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d10c      	bne.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40010400 	.word	0x40010400
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40001800 	.word	0x40001800
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	4000e000 	.word	0x4000e000
 8004fdc:	4000e400 	.word	0x4000e400

08004fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <memset>:
 800501c:	4402      	add	r2, r0
 800501e:	4603      	mov	r3, r0
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	f803 1b01 	strb.w	r1, [r3], #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4d0d      	ldr	r5, [pc, #52]	@ (8005064 <__libc_init_array+0x38>)
 8005030:	4c0d      	ldr	r4, [pc, #52]	@ (8005068 <__libc_init_array+0x3c>)
 8005032:	1b64      	subs	r4, r4, r5
 8005034:	10a4      	asrs	r4, r4, #2
 8005036:	2600      	movs	r6, #0
 8005038:	42a6      	cmp	r6, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	4d0b      	ldr	r5, [pc, #44]	@ (800506c <__libc_init_array+0x40>)
 800503e:	4c0c      	ldr	r4, [pc, #48]	@ (8005070 <__libc_init_array+0x44>)
 8005040:	f000 f818 	bl	8005074 <_init>
 8005044:	1b64      	subs	r4, r4, r5
 8005046:	10a4      	asrs	r4, r4, #2
 8005048:	2600      	movs	r6, #0
 800504a:	42a6      	cmp	r6, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f855 3b04 	ldr.w	r3, [r5], #4
 8005054:	4798      	blx	r3
 8005056:	3601      	adds	r6, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f855 3b04 	ldr.w	r3, [r5], #4
 800505e:	4798      	blx	r3
 8005060:	3601      	adds	r6, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	0800509c 	.word	0x0800509c
 8005068:	0800509c 	.word	0x0800509c
 800506c:	0800509c 	.word	0x0800509c
 8005070:	080050a0 	.word	0x080050a0

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
