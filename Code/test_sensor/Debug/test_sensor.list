
test_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  00007018  2**0
                  CONTENTS
  4 .ARM          00000000  08005de4  08005de4  00007018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005de4  08005de4  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de4  08005de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005de8  08005de8  00006de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005dec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000018  08005e04  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005e04  00007344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c967  00000000  00000000  00007041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0f  00000000  00000000  000139a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000155b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e5  00000000  00000000  00016240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177c2  00000000  00000000  00016c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e01a  00000000  00000000  0002e3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a8c1  00000000  00000000  0003c401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6cc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  000c6d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ca498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005da0 	.word	0x08005da0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005da0 	.word	0x08005da0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <__aeabi_f2uiz>:
 8000fd0:	0042      	lsls	r2, r0, #1
 8000fd2:	d20e      	bcs.n	8000ff2 <__aeabi_f2uiz+0x22>
 8000fd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fd8:	d30b      	bcc.n	8000ff2 <__aeabi_f2uiz+0x22>
 8000fda:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe2:	d409      	bmi.n	8000ff8 <__aeabi_f2uiz+0x28>
 8000fe4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fe8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fec:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr
 8000ff8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ffc:	d101      	bne.n	8001002 <__aeabi_f2uiz+0x32>
 8000ffe:	0242      	lsls	r2, r0, #9
 8001000:	d102      	bne.n	8001008 <__aeabi_f2uiz+0x38>
 8001002:	f04f 30ff 	mov.w	r0, #4294967295
 8001006:	4770      	bx	lr
 8001008:	f04f 0000 	mov.w	r0, #0
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if (htim->Instance==htim2.Instance)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d108      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		if ( HOME == 1){
 8001024:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d104      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x26>
			dt++;
 800102c:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a31      	ldr	r2, [pc, #196]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001034:	6013      	str	r3, [r2, #0]
		}
	}

	if (htim->Instance == htim3.Instance)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <HAL_TIM_PeriodElapsedCallback+0xec>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d151      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0xd6>
	{
		// Handle Motor 2
		if (countPulseL2 > 0) {
 8001042:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd1f      	ble.n	800108a <HAL_TIM_PeriodElapsedCallback+0x7a>
			softCounter2++;  // Increment soft counter for motor 2
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a2c      	ldr	r2, [pc, #176]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001052:	6013      	str	r3, [r2, #0]
			if (softCounter2 >= periodMotor2)
 8001054:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	db19      	blt.n	8001094 <HAL_TIM_PeriodElapsedCallback+0x84>
			{  // If soft counter reaches the desired period
				HAL_GPIO_TogglePin(GPIOA, PUL2_Pin);  // Toggle Motor 2 pin (generate pulse)
 8001060:	2108      	movs	r1, #8
 8001062:	482a      	ldr	r0, [pc, #168]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001064:	f002 fbcf 	bl	8003806 <HAL_GPIO_TogglePin>
				softCounter2 = 0;  // Reset the soft counter for motor 2
 8001068:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
				countPulseL2--;    // Decrement the pulse count
 800106e:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001076:	6013      	str	r3, [r2, #0]
				update_current_angle(2,1.0,dir2);
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001082:	2002      	movs	r0, #2
 8001084:	f000 fa00 	bl	8001488 <update_current_angle>
 8001088:	e004      	b.n	8001094 <HAL_TIM_PeriodElapsedCallback+0x84>
			}
		} else {
			HAL_GPIO_WritePin(GPIOA, PUL2_Pin, GPIO_PIN_RESET);  // Stop Motor 2
 800108a:	2200      	movs	r2, #0
 800108c:	2108      	movs	r1, #8
 800108e:	481f      	ldr	r0, [pc, #124]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001090:	f002 fba1 	bl	80037d6 <HAL_GPIO_WritePin>
		}
		// Handle Motor 3
		if (countPulseL3 > 0) {
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd1f      	ble.n	80010dc <HAL_TIM_PeriodElapsedCallback+0xcc>
			softCounter3++;  // Increment soft counter for motor 3
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010a4:	6013      	str	r3, [r2, #0]
			if (softCounter3 >= periodMotor3)
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	db19      	blt.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0xd6>
			{  // If soft counter reaches the desired period
				HAL_GPIO_TogglePin(GPIOA, PUL3_Pin);  // Toggle Motor 3 pin (generate pulse)
 80010b2:	2102      	movs	r1, #2
 80010b4:	4815      	ldr	r0, [pc, #84]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010b6:	f002 fba6 	bl	8003806 <HAL_GPIO_TogglePin>
				softCounter3 = 0;  // Reset the soft counter for motor 3
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
				countPulseL3--;    // Decrement the pulse count
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010c8:	6013      	str	r3, [r2, #0]
				update_current_angle(3,1.0, dir3);
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f9d7 	bl	8001488 <update_current_angle>
			}
		} else {
			HAL_GPIO_WritePin(GPIOA, PUL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
		}
	}
}
 80010da:	e004      	b.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0xd6>
			HAL_GPIO_WritePin(GPIOA, PUL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
 80010dc:	2200      	movs	r2, #0
 80010de:	2102      	movs	r1, #2
 80010e0:	480a      	ldr	r0, [pc, #40]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010e2:	f002 fb78 	bl	80037d6 <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000007c 	.word	0x2000007c
 80010f4:	200001ac 	.word	0x200001ac
 80010f8:	200001d0 	.word	0x200001d0
 80010fc:	200000c4 	.word	0x200000c4
 8001100:	200001b0 	.word	0x200001b0
 8001104:	20000270 	.word	0x20000270
 8001108:	20000278 	.word	0x20000278
 800110c:	40010800 	.word	0x40010800
 8001110:	200001cc 	.word	0x200001cc
 8001114:	200001b4 	.word	0x200001b4
 8001118:	20000274 	.word	0x20000274
 800111c:	2000027c 	.word	0x2000027c
 8001120:	20000000 	.word	0x20000000

08001124 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	uint16_t counter = __HAL_TIM_GET_COUNTER(htim);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001132:	81fb      	strh	r3, [r7, #14]
	count = (int16_t)counter;
 8001134:	4a3e      	ldr	r2, [pc, #248]	@ (8001230 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	8013      	strh	r3, [r2, #0]

	// Kiểm tra nếu cần đặt lại "home"
	if (need_to_set_home) {
 800113a:	4b3e      	ldr	r3, [pc, #248]	@ (8001234 <HAL_TIM_IC_CaptureCallback+0x110>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <HAL_TIM_IC_CaptureCallback+0x24>

		need_to_set_home = 0; // Đặt lại flag
 8001142:	4b3c      	ldr	r3, [pc, #240]	@ (8001234 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
	}
	delta = count - prev_count;
 8001148:	4b39      	ldr	r3, [pc, #228]	@ (8001230 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800114a:	881a      	ldrh	r2, [r3, #0]
 800114c:	4b3a      	ldr	r3, [pc, #232]	@ (8001238 <HAL_TIM_IC_CaptureCallback+0x114>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	b21b      	sxth	r3, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b38      	ldr	r3, [pc, #224]	@ (800123c <HAL_TIM_IC_CaptureCallback+0x118>)
 800115c:	801a      	strh	r2, [r3, #0]

	// Xử lý trường hợp tràn
	if (delta > (MAX_COUNT / 2)) {
 800115e:	4b37      	ldr	r3, [pc, #220]	@ (800123c <HAL_TIM_IC_CaptureCallback+0x118>)
 8001160:	881b      	ldrh	r3, [r3, #0]
	    delta -= (MAX_COUNT + 1); // Tràn ngược
	} else if (delta < -(MAX_COUNT / 2)) {
 8001162:	4b36      	ldr	r3, [pc, #216]	@ (800123c <HAL_TIM_IC_CaptureCallback+0x118>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	b21b      	sxth	r3, r3
 8001168:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800116c:	d104      	bne.n	8001178 <HAL_TIM_IC_CaptureCallback+0x54>
	    delta += (MAX_COUNT + 1); // Tràn thuận
 800116e:	4b33      	ldr	r3, [pc, #204]	@ (800123c <HAL_TIM_IC_CaptureCallback+0x118>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b31      	ldr	r3, [pc, #196]	@ (800123c <HAL_TIM_IC_CaptureCallback+0x118>)
 8001176:	801a      	strh	r2, [r3, #0]
	}

	// Cập nhật tổng số xung
	total_count += delta;
 8001178:	4b30      	ldr	r3, [pc, #192]	@ (800123c <HAL_TIM_IC_CaptureCallback+0x118>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b21b      	sxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4413      	add	r3, r2
 8001186:	4a2e      	ldr	r2, [pc, #184]	@ (8001240 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001188:	6013      	str	r3, [r2, #0]
	// Tính góc quay (đếm cả cạnh lên và xuống, chia 2 để ra số xung thực tế)
	angle1 = (float)total_count * 360.0f / PULSES_PER_REV/4.0;
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fcde 	bl	8000b50 <__aeabi_i2f>
 8001194:	4603      	mov	r3, r0
 8001196:	492b      	ldr	r1, [pc, #172]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd2d 	bl	8000bf8 <__aeabi_fmul>
 800119e:	4603      	mov	r3, r0
 80011a0:	4929      	ldr	r1, [pc, #164]	@ (8001248 <HAL_TIM_IC_CaptureCallback+0x124>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fddc 	bl	8000d60 <__aeabi_fdiv>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f934 	bl	8000418 <__aeabi_f2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <HAL_TIM_IC_CaptureCallback+0x128>)
 80011b6:	f7ff fab1 	bl	800071c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fbbb 	bl	800093c <__aeabi_d2f>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a21      	ldr	r2, [pc, #132]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011ca:	6013      	str	r3, [r2, #0]
	// Cập nhật giá trị bộ đếm trước đó
	prev_count = count;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_TIM_IC_CaptureCallback+0x114>)
 80011d4:	801a      	strh	r2, [r3, #0]
	// Đảm bảo góc quay trong khoảng [-180, 180)
	if (angle1 < -180.0f) {
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	491e      	ldr	r1, [pc, #120]	@ (8001254 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fea9 	bl	8000f34 <__aeabi_fcmplt>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00a      	beq.n	80011fe <HAL_TIM_IC_CaptureCallback+0xda>
	    angle1 += 360.0f;
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4915      	ldr	r1, [pc, #84]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbfa 	bl	80009e8 <__addsf3>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011fa:	601a      	str	r2, [r3, #0]
	} else if (angle1 >= 180.0f) {
	    angle1 -= 360.0f;
	}
}
 80011fc:	e013      	b.n	8001226 <HAL_TIM_IC_CaptureCallback+0x102>
	} else if (angle1 >= 180.0f) {
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4915      	ldr	r1, [pc, #84]	@ (8001258 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fea9 	bl	8000f5c <__aeabi_fcmpge>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d100      	bne.n	8001212 <HAL_TIM_IC_CaptureCallback+0xee>
}
 8001210:	e009      	b.n	8001226 <HAL_TIM_IC_CaptureCallback+0x102>
	    angle1 -= 360.0f;
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	490b      	ldr	r1, [pc, #44]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fbe3 	bl	80009e4 <__aeabi_fsub>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000310 	.word	0x20000310
 8001234:	20000320 	.word	0x20000320
 8001238:	20000312 	.word	0x20000312
 800123c:	20000314 	.word	0x20000314
 8001240:	20000318 	.word	0x20000318
 8001244:	43b40000 	.word	0x43b40000
 8001248:	460b3800 	.word	0x460b3800
 800124c:	40100000 	.word	0x40100000
 8001250:	2000019c 	.word	0x2000019c
 8001254:	c3340000 	.word	0xc3340000
 8001258:	43340000 	.word	0x43340000

0800125c <PID_Init>:

// Hàm khởi tạo PID
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd) {
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
    pid->Kp = Kp;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	609a      	str	r2, [r3, #8]
    pid->prev_error = 0.0f;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
	...

08001298 <PID_Compute>:

// Hàm tính toán PID
float PID_Compute(PIDController *pid, float setpoint, float current_angle, float delta_time) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
    // Tính toán lỗi
    float error = setpoint - current_angle;
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	68b8      	ldr	r0, [r7, #8]
 80012aa:	f7ff fb9b 	bl	80009e4 <__aeabi_fsub>
 80012ae:	4603      	mov	r3, r0
 80012b0:	61fb      	str	r3, [r7, #28]
    float Ki = 0;
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
    if (fabs(error) > 5.0){
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012be:	494d      	ldr	r1, [pc, #308]	@ (80013f4 <PID_Compute+0x15c>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe55 	bl	8000f70 <__aeabi_fcmpgt>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <PID_Compute+0x46>
    	Ki = pid->Ki/100.0;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4949      	ldr	r1, [pc, #292]	@ (80013f8 <PID_Compute+0x160>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fd44 	bl	8000d60 <__aeabi_fdiv>
 80012d8:	4603      	mov	r3, r0
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	e002      	b.n	80012e4 <PID_Compute+0x4c>
    }else{
    	Ki = pid->Ki;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61bb      	str	r3, [r7, #24]
    }

    // Đảm bảo lỗi nằm trong khoảng [-180, 180] (xử lý vòng tròn 360 độ)
    if (error > 180.0f) {
 80012e4:	4945      	ldr	r1, [pc, #276]	@ (80013fc <PID_Compute+0x164>)
 80012e6:	69f8      	ldr	r0, [r7, #28]
 80012e8:	f7ff fe42 	bl	8000f70 <__aeabi_fcmpgt>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <PID_Compute+0x68>
        error -= 360.0f;
 80012f2:	4943      	ldr	r1, [pc, #268]	@ (8001400 <PID_Compute+0x168>)
 80012f4:	69f8      	ldr	r0, [r7, #28]
 80012f6:	f7ff fb75 	bl	80009e4 <__aeabi_fsub>
 80012fa:	4603      	mov	r3, r0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e00c      	b.n	800131a <PID_Compute+0x82>
    } else if (error < -180.0f) {
 8001300:	4940      	ldr	r1, [pc, #256]	@ (8001404 <PID_Compute+0x16c>)
 8001302:	69f8      	ldr	r0, [r7, #28]
 8001304:	f7ff fe16 	bl	8000f34 <__aeabi_fcmplt>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <PID_Compute+0x82>
        error += 360.0f;
 800130e:	493c      	ldr	r1, [pc, #240]	@ (8001400 <PID_Compute+0x168>)
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f7ff fb69 	bl	80009e8 <__addsf3>
 8001316:	4603      	mov	r3, r0
 8001318:	61fb      	str	r3, [r7, #28]
    }

    // Tích phân lỗi (chỉ tích lũy khi delta_time > 0)
    if (delta_time > 0) {
 800131a:	f04f 0100 	mov.w	r1, #0
 800131e:	6838      	ldr	r0, [r7, #0]
 8001320:	f7ff fe26 	bl	8000f70 <__aeabi_fcmpgt>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00e      	beq.n	8001348 <PID_Compute+0xb0>
        pid->integral += error * delta_time;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	691c      	ldr	r4, [r3, #16]
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	69f8      	ldr	r0, [r7, #28]
 8001332:	f7ff fc61 	bl	8000bf8 <__aeabi_fmul>
 8001336:	4603      	mov	r3, r0
 8001338:	4619      	mov	r1, r3
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fb54 	bl	80009e8 <__addsf3>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	611a      	str	r2, [r3, #16]
    }

    // Đạo hàm lỗi (chỉ tính khi delta_time > 0)
    float derivative = 0.0f;
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
    if (delta_time > 0) {
 800134e:	f04f 0100 	mov.w	r1, #0
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f7ff fe0c 	bl	8000f70 <__aeabi_fcmpgt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <PID_Compute+0xe0>
        derivative = (error - pid->prev_error) / delta_time;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	4619      	mov	r1, r3
 8001364:	69f8      	ldr	r0, [r7, #28]
 8001366:	f7ff fb3d 	bl	80009e4 <__aeabi_fsub>
 800136a:	4603      	mov	r3, r0
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fcf6 	bl	8000d60 <__aeabi_fdiv>
 8001374:	4603      	mov	r3, r0
 8001376:	617b      	str	r3, [r7, #20]
    }

    // Tính tín hiệu điều khiển
    float output = pid->Kp * error + Ki * pid->integral + pid->Kd * derivative;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	69f9      	ldr	r1, [r7, #28]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fc3a 	bl	8000bf8 <__aeabi_fmul>
 8001384:	4603      	mov	r3, r0
 8001386:	461c      	mov	r4, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	69b9      	ldr	r1, [r7, #24]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fc32 	bl	8000bf8 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fb25 	bl	80009e8 <__addsf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	461c      	mov	r4, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	6979      	ldr	r1, [r7, #20]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fc25 	bl	8000bf8 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff fb18 	bl	80009e8 <__addsf3>
 80013b8:	4603      	mov	r3, r0
 80013ba:	613b      	str	r3, [r7, #16]

    // Lưu lỗi hiện tại cho lần tính sau
    pid->prev_error = error;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	60da      	str	r2, [r3, #12]

    if (output > 115.0f) {
 80013c2:	4911      	ldr	r1, [pc, #68]	@ (8001408 <PID_Compute+0x170>)
 80013c4:	6938      	ldr	r0, [r7, #16]
 80013c6:	f7ff fdd3 	bl	8000f70 <__aeabi_fcmpgt>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <PID_Compute+0x13e>
		output = 115.0f;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <PID_Compute+0x170>)
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	e008      	b.n	80013e8 <PID_Compute+0x150>
	} else if (output < -115.0f) {
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <PID_Compute+0x174>)
 80013d8:	6938      	ldr	r0, [r7, #16]
 80013da:	f7ff fdab 	bl	8000f34 <__aeabi_fcmplt>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <PID_Compute+0x150>
		output =-115.0f;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <PID_Compute+0x174>)
 80013e6:	613b      	str	r3, [r7, #16]
	}

    return output;
 80013e8:	693b      	ldr	r3, [r7, #16]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40a00000 	.word	0x40a00000
 80013f8:	42c80000 	.word	0x42c80000
 80013fc:	43340000 	.word	0x43340000
 8001400:	43b40000 	.word	0x43b40000
 8001404:	c3340000 	.word	0xc3340000
 8001408:	42e60000 	.word	0x42e60000
 800140c:	c2e60000 	.word	0xc2e60000

08001410 <Motor1_SetSpeed>:

void Motor1_SetSpeed(float output) {
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    if (output > 0) {
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fda7 	bl	8000f70 <__aeabi_fcmpgt>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d011      	beq.n	800144c <Motor1_SetSpeed+0x3c>
        // Quay thuận
    	HAL_GPIO_WritePin(GPIOA, DIR1A_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2140      	movs	r1, #64	@ 0x40
 800142c:	4813      	ldr	r0, [pc, #76]	@ (800147c <Motor1_SetSpeed+0x6c>)
 800142e:	f002 f9d2 	bl	80037d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DIR1B_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2180      	movs	r1, #128	@ 0x80
 8001436:	4811      	ldr	r0, [pc, #68]	@ (800147c <Motor1_SetSpeed+0x6c>)
 8001438:	f002 f9cd 	bl	80037d6 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,output);
 800143c:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <Motor1_SetSpeed+0x70>)
 800143e:	681c      	ldr	r4, [r3, #0]
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fdc5 	bl	8000fd0 <__aeabi_f2uiz>
 8001446:	4603      	mov	r3, r0
 8001448:	6423      	str	r3, [r4, #64]	@ 0x40
        // Quay ngược
    	HAL_GPIO_WritePin(GPIOA, DIR1A_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, DIR1B_Pin, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,fabs(output));
    }
}
 800144a:	e013      	b.n	8001474 <Motor1_SetSpeed+0x64>
    	HAL_GPIO_WritePin(GPIOA, DIR1A_Pin, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2140      	movs	r1, #64	@ 0x40
 8001450:	480a      	ldr	r0, [pc, #40]	@ (800147c <Motor1_SetSpeed+0x6c>)
 8001452:	f002 f9c0 	bl	80037d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DIR1B_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	4808      	ldr	r0, [pc, #32]	@ (800147c <Motor1_SetSpeed+0x6c>)
 800145c:	f002 f9bb 	bl	80037d6 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,fabs(output));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001466:	4a06      	ldr	r2, [pc, #24]	@ (8001480 <Motor1_SetSpeed+0x70>)
 8001468:	6814      	ldr	r4, [r2, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fdb0 	bl	8000fd0 <__aeabi_f2uiz>
 8001470:	4603      	mov	r3, r0
 8001472:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	40010800 	.word	0x40010800
 8001480:	20000034 	.word	0x20000034
 8001484:	00000000 	.word	0x00000000

08001488 <update_current_angle>:

void update_current_angle(int motor_index, float steps, int direction) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
    float angle_change = steps * 360.0 / (43840.0 * 2.0); // Calculate the change in angle
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f7fe ffbf 	bl	8000418 <__aeabi_f2d>
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <update_current_angle+0xb0>)
 80014a0:	f7ff f812 	bl	80004c8 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	a320      	add	r3, pc, #128	@ (adr r3, 8001530 <update_current_angle+0xa8>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f933 	bl	800071c <__aeabi_ddiv>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fa3d 	bl	800093c <__aeabi_d2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	617b      	str	r3, [r7, #20]

    // If direction is negative, reverse the angle change
    if (direction < 0) {
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da03      	bge.n	80014d4 <update_current_angle+0x4c>
        angle_change = -angle_change;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014d2:	617b      	str	r3, [r7, #20]
    }
    switch (motor_index){
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d003      	beq.n	80014e2 <update_current_angle+0x5a>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d015      	beq.n	800150c <update_current_angle+0x84>
            break;
        case 3:
            angle3 += angle_change; // Update current angle for motor 3
            break;
    }
}
 80014e0:	e01f      	b.n	8001522 <update_current_angle+0x9a>
            angle2 += angle_change; // Update current angle for motor 2
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <update_current_angle+0xb4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6979      	ldr	r1, [r7, #20]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fa7d 	bl	80009e8 <__addsf3>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <update_current_angle+0xb4>)
 80014f4:	601a      	str	r2, [r3, #0]
            angle3 -= angle_change;
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <update_current_angle+0xb8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6979      	ldr	r1, [r7, #20]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fa71 	bl	80009e4 <__aeabi_fsub>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <update_current_angle+0xb8>)
 8001508:	601a      	str	r2, [r3, #0]
            break;
 800150a:	e00a      	b.n	8001522 <update_current_angle+0x9a>
            angle3 += angle_change; // Update current angle for motor 3
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <update_current_angle+0xb8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6979      	ldr	r1, [r7, #20]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fa68 	bl	80009e8 <__addsf3>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <update_current_angle+0xb8>)
 800151e:	601a      	str	r2, [r3, #0]
            break;
 8001520:	bf00      	nop
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	00000000 	.word	0x00000000
 8001534:	40f56800 	.word	0x40f56800
 8001538:	40768000 	.word	0x40768000
 800153c:	200001a0 	.word	0x200001a0
 8001540:	200001a4 	.word	0x200001a4
 8001544:	00000000 	.word	0x00000000

08001548 <calculate_steps>:

int calculate_steps(float current_angle, float target_angle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
    // Calculate the angular difference
    float angular_difference ;
    float temp;

    temp = target_angle - current_angle;
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f7ff fa45 	bl	80009e4 <__aeabi_fsub>
 800155a:	4603      	mov	r3, r0
 800155c:	613b      	str	r3, [r7, #16]
    if (temp > 0){
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	6938      	ldr	r0, [r7, #16]
 8001564:	f7ff fd04 	bl	8000f70 <__aeabi_fcmpgt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <calculate_steps+0x30>
    	i = 1;
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <calculate_steps+0xb0>)
 8001570:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e002      	b.n	800157e <calculate_steps+0x36>
    }else{
    	i = -1;
 8001578:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <calculate_steps+0xb0>)
 800157a:	4a20      	ldr	r2, [pc, #128]	@ (80015fc <calculate_steps+0xb4>)
 800157c:	601a      	str	r2, [r3, #0]
    }
	if (fabs(temp) == 0){
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	6938      	ldr	r0, [r7, #16]
 8001584:	f7ff fccc 	bl	8000f20 <__aeabi_fcmpeq>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <calculate_steps+0x4e>
		angular_difference = 0;
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e005      	b.n	80015a2 <calculate_steps+0x5a>
	}else{
		angular_difference = (target_angle) - current_angle;
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f7ff fa23 	bl	80009e4 <__aeabi_fsub>
 800159e:	4603      	mov	r3, r0
 80015a0:	617b      	str	r3, [r7, #20]
	}

    // Convert angular difference to steps
	int steps_needed = (((angular_difference) / 360.0) * 43840.0 * 2.0);
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7fe ff38 	bl	8000418 <__aeabi_f2d>
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <calculate_steps+0xb8>)
 80015ae:	f7ff f8b5 	bl	800071c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	a30d      	add	r3, pc, #52	@ (adr r3, 80015f0 <calculate_steps+0xa8>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe ff82 	bl	80004c8 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	f7fe fdc4 	bl	800015c <__adddf3>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff f986 	bl	80008ec <__aeabi_d2iz>
 80015e0:	4603      	mov	r3, r0
 80015e2:	60fb      	str	r3, [r7, #12]
    // Return the absolute number of steps (stepper motors can't move negative steps)
    return steps_needed;
 80015e4:	68fb      	ldr	r3, [r7, #12]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	00000000 	.word	0x00000000
 80015f4:	40e56800 	.word	0x40e56800
 80015f8:	200001c8 	.word	0x200001c8
 80015fc:	bf800000 	.word	0xbf800000
 8001600:	40768000 	.word	0x40768000

08001604 <maxSteps>:

int maxSteps(int steps_motor_2, int steps_motor_3)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
    int max_value = steps_motor_2;  // Assume motor 1 has the maximum steps
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	60fb      	str	r3, [r7, #12]

    if (steps_motor_2 > max_value) {
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	429a      	cmp	r2, r3
 8001618:	dd01      	ble.n	800161e <maxSteps+0x1a>
        max_value = steps_motor_2;  // Update if motor 2 has more steps
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]
    }

    if (steps_motor_3 > max_value) {
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	429a      	cmp	r2, r3
 8001624:	dd01      	ble.n	800162a <maxSteps+0x26>
        max_value = steps_motor_3;  // Update if motor 3 has more steps
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	60fb      	str	r3, [r7, #12]
    }

    return max_value;  // Return the largest number of steps
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
	...

08001638 <angleControl>:

void angleControl(PIDController *pid, float target_angle_1, float target_angle_2, float target_angle_3) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
	// Calculate the required steps for each motor based on current and target angles
	int steps_motor_2 = calculate_steps(angle2, target_angle_2);
 8001646:	4b77      	ldr	r3, [pc, #476]	@ (8001824 <angleControl+0x1ec>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff7b 	bl	8001548 <calculate_steps>
 8001652:	61b8      	str	r0, [r7, #24]
	int steps_motor_3 = calculate_steps(angle3, target_angle_3);
 8001654:	4b74      	ldr	r3, [pc, #464]	@ (8001828 <angleControl+0x1f0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff74 	bl	8001548 <calculate_steps>
 8001660:	61f8      	str	r0, [r7, #28]

	// Set the pulse counts for each motor
	countPulseL2 = abs(steps_motor_2) ;
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	bfb8      	it	lt
 8001668:	425b      	neglt	r3, r3
 800166a:	4a70      	ldr	r2, [pc, #448]	@ (800182c <angleControl+0x1f4>)
 800166c:	6013      	str	r3, [r2, #0]
	error = angle3 - target_angle_3;
 800166e:	4b6e      	ldr	r3, [pc, #440]	@ (8001828 <angleControl+0x1f0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6839      	ldr	r1, [r7, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff f9b5 	bl	80009e4 <__aeabi_fsub>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b6c      	ldr	r3, [pc, #432]	@ (8001830 <angleControl+0x1f8>)
 8001680:	601a      	str	r2, [r3, #0]

	float output = PID_Compute(pid, target_angle_1, angle1, 0.01);
 8001682:	4b6c      	ldr	r3, [pc, #432]	@ (8001834 <angleControl+0x1fc>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <angleControl+0x200>)
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff fe04 	bl	8001298 <PID_Compute>
 8001690:	6178      	str	r0, [r7, #20]
	Motor1_SetSpeed(output);
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff febc 	bl	8001410 <Motor1_SetSpeed>

	if (target_angle_2 >= angle2) {
 8001698:	4b62      	ldr	r3, [pc, #392]	@ (8001824 <angleControl+0x1ec>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fc5c 	bl	8000f5c <__aeabi_fcmpge>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <angleControl+0x84>
		dir2 = 1;
 80016aa:	4b64      	ldr	r3, [pc, #400]	@ (800183c <angleControl+0x204>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2110      	movs	r1, #16
 80016b4:	4862      	ldr	r0, [pc, #392]	@ (8001840 <angleControl+0x208>)
 80016b6:	f002 f88e 	bl	80037d6 <HAL_GPIO_WritePin>
 80016ba:	e008      	b.n	80016ce <angleControl+0x96>
	} else {
		dir2 = -1;
 80016bc:	4b5f      	ldr	r3, [pc, #380]	@ (800183c <angleControl+0x204>)
 80016be:	f04f 32ff 	mov.w	r2, #4294967295
 80016c2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2110      	movs	r1, #16
 80016c8:	485d      	ldr	r0, [pc, #372]	@ (8001840 <angleControl+0x208>)
 80016ca:	f002 f884 	bl	80037d6 <HAL_GPIO_WritePin>
	}

	if (steps_motor_2 == 0){
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d103      	bne.n	80016dc <angleControl+0xa4>
		dir2 =1;
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <angleControl+0x204>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e007      	b.n	80016ec <angleControl+0xb4>
	}else if (steps_motor_1 == 0){
 80016dc:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <angleControl+0x20c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <angleControl+0xb4>
		dir3 = -1;
 80016e4:	4b58      	ldr	r3, [pc, #352]	@ (8001848 <angleControl+0x210>)
 80016e6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ea:	601a      	str	r2, [r3, #0]
	}

	if (target_angle_3 > angle3 && dir2 == 1) {
 80016ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001828 <angleControl+0x1f0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	6838      	ldr	r0, [r7, #0]
 80016f4:	f7ff fc3c 	bl	8000f70 <__aeabi_fcmpgt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01f      	beq.n	800173e <angleControl+0x106>
 80016fe:	4b4f      	ldr	r3, [pc, #316]	@ (800183c <angleControl+0x204>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d11b      	bne.n	800173e <angleControl+0x106>
		h = 1;
 8001706:	4b51      	ldr	r3, [pc, #324]	@ (800184c <angleControl+0x214>)
 8001708:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800170c:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 800170e:	4b4e      	ldr	r3, [pc, #312]	@ (8001848 <angleControl+0x210>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 8001714:	69f8      	ldr	r0, [r7, #28]
 8001716:	f7ff fa1b 	bl	8000b50 <__aeabi_i2f>
 800171a:	4603      	mov	r3, r0
 800171c:	4a4c      	ldr	r2, [pc, #304]	@ (8001850 <angleControl+0x218>)
 800171e:	6013      	str	r3, [r2, #0]
		countPulseL3 = abs(steps_motor_3);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	bfb8      	it	lt
 8001726:	425b      	neglt	r3, r3
 8001728:	4a4a      	ldr	r2, [pc, #296]	@ (8001854 <angleControl+0x21c>)
 800172a:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 800172c:	4b49      	ldr	r3, [pc, #292]	@ (8001854 <angleControl+0x21c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2104      	movs	r1, #4
 8001736:	4842      	ldr	r0, [pc, #264]	@ (8001840 <angleControl+0x208>)
 8001738:	f002 f84d 	bl	80037d6 <HAL_GPIO_WritePin>
 800173c:	e0a1      	b.n	8001882 <angleControl+0x24a>
	}
	else if (target_angle_3 < angle3 && dir2 == 1) {
 800173e:	4b3a      	ldr	r3, [pc, #232]	@ (8001828 <angleControl+0x1f0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f7ff fbf5 	bl	8000f34 <__aeabi_fcmplt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01a      	beq.n	8001786 <angleControl+0x14e>
 8001750:	4b3a      	ldr	r3, [pc, #232]	@ (800183c <angleControl+0x204>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d116      	bne.n	8001786 <angleControl+0x14e>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 2;
 8001758:	4b3c      	ldr	r3, [pc, #240]	@ (800184c <angleControl+0x214>)
 800175a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800175e:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 8001760:	4b39      	ldr	r3, [pc, #228]	@ (8001848 <angleControl+0x210>)
 8001762:	f04f 32ff 	mov.w	r2, #4294967295
 8001766:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	bfb8      	it	lt
 800176e:	425b      	neglt	r3, r3
 8001770:	4a38      	ldr	r2, [pc, #224]	@ (8001854 <angleControl+0x21c>)
 8001772:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <angleControl+0x21c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	2104      	movs	r1, #4
 800177e:	4830      	ldr	r0, [pc, #192]	@ (8001840 <angleControl+0x208>)
 8001780:	f002 f829 	bl	80037d6 <HAL_GPIO_WritePin>
 8001784:	e07d      	b.n	8001882 <angleControl+0x24a>
	} else if (target_angle_3 < angle3 && dir2 == -1) {
 8001786:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <angleControl+0x1f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	6838      	ldr	r0, [r7, #0]
 800178e:	f7ff fbd1 	bl	8000f34 <__aeabi_fcmplt>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01a      	beq.n	80017ce <angleControl+0x196>
 8001798:	4b28      	ldr	r3, [pc, #160]	@ (800183c <angleControl+0x204>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d115      	bne.n	80017ce <angleControl+0x196>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 3;
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <angleControl+0x214>)
 80017a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001858 <angleControl+0x220>)
 80017a6:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 80017a8:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <angleControl+0x210>)
 80017aa:	f04f 32ff 	mov.w	r2, #4294967295
 80017ae:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bfb8      	it	lt
 80017b6:	425b      	neglt	r3, r3
 80017b8:	4a26      	ldr	r2, [pc, #152]	@ (8001854 <angleControl+0x21c>)
 80017ba:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 80017bc:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <angleControl+0x21c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2104      	movs	r1, #4
 80017c6:	481e      	ldr	r0, [pc, #120]	@ (8001840 <angleControl+0x208>)
 80017c8:	f002 f805 	bl	80037d6 <HAL_GPIO_WritePin>
 80017cc:	e059      	b.n	8001882 <angleControl+0x24a>
	}
	else if (target_angle_3 > angle3 && dir2 == -1) {
 80017ce:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <angleControl+0x1f0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	6838      	ldr	r0, [r7, #0]
 80017d6:	f7ff fbcb 	bl	8000f70 <__aeabi_fcmpgt>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d03d      	beq.n	800185c <angleControl+0x224>
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <angleControl+0x204>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d138      	bne.n	800185c <angleControl+0x224>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 4;
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <angleControl+0x214>)
 80017ec:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80017f0:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <angleControl+0x210>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 80017f8:	69f8      	ldr	r0, [r7, #28]
 80017fa:	f7ff f9a9 	bl	8000b50 <__aeabi_i2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a13      	ldr	r2, [pc, #76]	@ (8001850 <angleControl+0x218>)
 8001802:	6013      	str	r3, [r2, #0]
		countPulseL3 = abs( steps_motor_3);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	bfb8      	it	lt
 800180a:	425b      	neglt	r3, r3
 800180c:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <angleControl+0x21c>)
 800180e:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8001810:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <angleControl+0x21c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2104      	movs	r1, #4
 800181a:	4809      	ldr	r0, [pc, #36]	@ (8001840 <angleControl+0x208>)
 800181c:	f001 ffdb 	bl	80037d6 <HAL_GPIO_WritePin>
 8001820:	e02f      	b.n	8001882 <angleControl+0x24a>
 8001822:	bf00      	nop
 8001824:	200001a0 	.word	0x200001a0
 8001828:	200001a4 	.word	0x200001a4
 800182c:	200001b0 	.word	0x200001b0
 8001830:	200001a8 	.word	0x200001a8
 8001834:	2000019c 	.word	0x2000019c
 8001838:	3c23d70a 	.word	0x3c23d70a
 800183c:	200001cc 	.word	0x200001cc
 8001840:	40010800 	.word	0x40010800
 8001844:	20000284 	.word	0x20000284
 8001848:	20000000 	.word	0x20000000
 800184c:	200001c4 	.word	0x200001c4
 8001850:	200001bc 	.word	0x200001bc
 8001854:	200001b4 	.word	0x200001b4
 8001858:	40400000 	.word	0x40400000
	} else {
		// Maintain angle3 in sync with angle2’s direction
		h =5;
 800185c:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <angleControl+0x2e4>)
 800185e:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <angleControl+0x2e8>)
 8001860:	601a      	str	r2, [r3, #0]
		dir3 = dir2;
 8001862:	4b30      	ldr	r3, [pc, #192]	@ (8001924 <angleControl+0x2ec>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a30      	ldr	r2, [pc, #192]	@ (8001928 <angleControl+0x2f0>)
 8001868:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, DIR3_Pin, dir3 == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800186a:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <angleControl+0x2f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	2104      	movs	r1, #4
 800187c:	482b      	ldr	r0, [pc, #172]	@ (800192c <angleControl+0x2f4>)
 800187e:	f001 ffaa 	bl	80037d6 <HAL_GPIO_WritePin>
	}

	// Determine the maximum steps needed to synchronize the motors
	int max_steps = maxSteps(abs(steps_motor_2), abs(steps_motor_3));
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001888:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	bfb8      	it	lt
 8001892:	425b      	neglt	r3, r3
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f7ff feb4 	bl	8001604 <maxSteps>
 800189c:	6138      	str	r0, [r7, #16]

	// Calculate the pulse periods for each motor based on the maximum steps
	periodMotor2 = (int)(((float)max_steps / abs(steps_motor_2)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS)) + 2;
 800189e:	6938      	ldr	r0, [r7, #16]
 80018a0:	f7ff f956 	bl	8000b50 <__aeabi_i2f>
 80018a4:	4604      	mov	r4, r0
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bfb8      	it	lt
 80018ac:	425b      	neglt	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f94e 	bl	8000b50 <__aeabi_i2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff fa51 	bl	8000d60 <__aeabi_fdiv>
 80018be:	4603      	mov	r3, r0
 80018c0:	491b      	ldr	r1, [pc, #108]	@ (8001930 <angleControl+0x2f8>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f998 	bl	8000bf8 <__aeabi_fmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fb5a 	bl	8000f84 <__aeabi_f2iz>
 80018d0:	4603      	mov	r3, r0
 80018d2:	3302      	adds	r3, #2
 80018d4:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <angleControl+0x2fc>)
 80018d6:	6013      	str	r3, [r2, #0]
	periodMotor3 = (int)(((float)max_steps / abs(steps_motor_3)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS)) + 2;
 80018d8:	6938      	ldr	r0, [r7, #16]
 80018da:	f7ff f939 	bl	8000b50 <__aeabi_i2f>
 80018de:	4604      	mov	r4, r0
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bfb8      	it	lt
 80018e6:	425b      	neglt	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f931 	bl	8000b50 <__aeabi_i2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4620      	mov	r0, r4
 80018f4:	f7ff fa34 	bl	8000d60 <__aeabi_fdiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	490d      	ldr	r1, [pc, #52]	@ (8001930 <angleControl+0x2f8>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f97b 	bl	8000bf8 <__aeabi_fmul>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fb3d 	bl	8000f84 <__aeabi_f2iz>
 800190a:	4603      	mov	r3, r0
 800190c:	3302      	adds	r3, #2
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <angleControl+0x300>)
 8001910:	6013      	str	r3, [r2, #0]

}
 8001912:	bf00      	nop
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	bf00      	nop
 800191c:	200001c4 	.word	0x200001c4
 8001920:	40a00000 	.word	0x40a00000
 8001924:	200001cc 	.word	0x200001cc
 8001928:	20000000 	.word	0x20000000
 800192c:	40010800 	.word	0x40010800
 8001930:	40c00000 	.word	0x40c00000
 8001934:	20000278 	.word	0x20000278
 8001938:	2000027c 	.word	0x2000027c

0800193c <autoHomeMotors>:

void autoHomeMotors(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
    // Set initial movement direction for homing (assumes motors move towards the limit switches)
    HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_SET); // Move Motor 2 in the homing direction
 8001942:	2201      	movs	r2, #1
 8001944:	2110      	movs	r1, #16
 8001946:	4849      	ldr	r0, [pc, #292]	@ (8001a6c <autoHomeMotors+0x130>)
 8001948:	f001 ff45 	bl	80037d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET); // Move Motor 3 in the homing direction
 800194c:	2201      	movs	r2, #1
 800194e:	2104      	movs	r1, #4
 8001950:	4846      	ldr	r0, [pc, #280]	@ (8001a6c <autoHomeMotors+0x130>)
 8001952:	f001 ff40 	bl	80037d6 <HAL_GPIO_WritePin>

    // Start moving the motors
    m1speed = -20;
 8001956:	4b46      	ldr	r3, [pc, #280]	@ (8001a70 <autoHomeMotors+0x134>)
 8001958:	f06f 0213 	mvn.w	r2, #19
 800195c:	601a      	str	r2, [r3, #0]
    countPulseL2 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 800195e:	4b45      	ldr	r3, [pc, #276]	@ (8001a74 <autoHomeMotors+0x138>)
 8001960:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001964:	601a      	str	r2, [r3, #0]
    countPulseL3 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8001966:	4b44      	ldr	r3, [pc, #272]	@ (8001a78 <autoHomeMotors+0x13c>)
 8001968:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800196c:	601a      	str	r2, [r3, #0]

	periodMotor2 = 10;
 800196e:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <autoHomeMotors+0x140>)
 8001970:	220a      	movs	r2, #10
 8001972:	601a      	str	r2, [r3, #0]
	periodMotor3 = 10;
 8001974:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <autoHomeMotors+0x144>)
 8001976:	220a      	movs	r2, #10
 8001978:	601a      	str	r2, [r3, #0]
	int i = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]

    // Wait until all limit switches are triggered
    while (a == 0 || b == 0 || c == 0 || home_count < 1)
 800197e:	e001      	b.n	8001984 <autoHomeMotors+0x48>
    {
        checkLimitSwitches(); // Continuously check the limit switches
 8001980:	f000 f8ba 	bl	8001af8 <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0 || home_count < 1)
 8001984:	4b3f      	ldr	r3, [pc, #252]	@ (8001a84 <autoHomeMotors+0x148>)
 8001986:	f993 3000 	ldrsb.w	r3, [r3]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f8      	beq.n	8001980 <autoHomeMotors+0x44>
 800198e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <autoHomeMotors+0x14c>)
 8001990:	f993 3000 	ldrsb.w	r3, [r3]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f3      	beq.n	8001980 <autoHomeMotors+0x44>
 8001998:	4b3c      	ldr	r3, [pc, #240]	@ (8001a8c <autoHomeMotors+0x150>)
 800199a:	f993 3000 	ldrsb.w	r3, [r3]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0ee      	beq.n	8001980 <autoHomeMotors+0x44>
 80019a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001a90 <autoHomeMotors+0x154>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	ddea      	ble.n	8001980 <autoHomeMotors+0x44>
    }
    while (home_count == 1){
 80019aa:	e028      	b.n	80019fe <autoHomeMotors+0xc2>
    	HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2104      	movs	r1, #4
 80019b0:	482e      	ldr	r0, [pc, #184]	@ (8001a6c <autoHomeMotors+0x130>)
 80019b2:	f001 ff10 	bl	80037d6 <HAL_GPIO_WritePin>

    	if (countPulseL3 == 0 && i == 0){
 80019b6:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <autoHomeMotors+0x13c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d108      	bne.n	80019d0 <autoHomeMotors+0x94>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <autoHomeMotors+0x94>
    		countPulseL3 = 5000;
 80019c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <autoHomeMotors+0x13c>)
 80019c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ca:	601a      	str	r2, [r3, #0]
    		i = 1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	607b      	str	r3, [r7, #4]
    	}

    	if (countPulseL3 == 0 && i == 1){
 80019d0:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <autoHomeMotors+0x13c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d112      	bne.n	80019fe <autoHomeMotors+0xc2>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d10f      	bne.n	80019fe <autoHomeMotors+0xc2>
			home_count = 2;
 80019de:	4b2c      	ldr	r3, [pc, #176]	@ (8001a90 <autoHomeMotors+0x154>)
 80019e0:	2202      	movs	r2, #2
 80019e2:	601a      	str	r2, [r3, #0]
			a = 0;
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <autoHomeMotors+0x148>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
			b=0;
 80019ea:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <autoHomeMotors+0x14c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
			c=0;
 80019f0:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <autoHomeMotors+0x150>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
			countPulseL3 = 50000;
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <autoHomeMotors+0x13c>)
 80019f8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80019fc:	601a      	str	r2, [r3, #0]
    while (home_count == 1){
 80019fe:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <autoHomeMotors+0x154>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d0d2      	beq.n	80019ac <autoHomeMotors+0x70>
		}
    }
    while (a == 0 || b == 0 || c == 0 ) {
 8001a06:	e001      	b.n	8001a0c <autoHomeMotors+0xd0>
		checkLimitSwitches(); // Continuously check the limit switches
 8001a08:	f000 f876 	bl	8001af8 <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0 ) {
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <autoHomeMotors+0x148>)
 8001a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f8      	beq.n	8001a08 <autoHomeMotors+0xcc>
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <autoHomeMotors+0x14c>)
 8001a18:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f3      	beq.n	8001a08 <autoHomeMotors+0xcc>
 8001a20:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <autoHomeMotors+0x150>)
 8001a22:	f993 3000 	ldrsb.w	r3, [r3]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0ee      	beq.n	8001a08 <autoHomeMotors+0xcc>
	}

    // Set the home angle once all limit switches are activated

    setHomeAngles();
 8001a2a:	f000 f83d 	bl	8001aa8 <setHomeAngles>
    while (fabs(angle1) > 1.0){
 8001a2e:	e009      	b.n	8001a44 <autoHomeMotors+0x108>
		angleControl(&pid, 	0.0, 87.0, -149.0);
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <autoHomeMotors+0x158>)
 8001a32:	4a19      	ldr	r2, [pc, #100]	@ (8001a98 <autoHomeMotors+0x15c>)
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	4818      	ldr	r0, [pc, #96]	@ (8001a9c <autoHomeMotors+0x160>)
 8001a3a:	f7ff fdfd 	bl	8001638 <angleControl>
		HAL_Delay(0.01);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f001 fb4a 	bl	80030d8 <HAL_Delay>
    while (fabs(angle1) > 1.0){
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <autoHomeMotors+0x164>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a4c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fa8d 	bl	8000f70 <__aeabi_fcmpgt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e9      	bne.n	8001a30 <autoHomeMotors+0xf4>
	}
	HOME = 1;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <autoHomeMotors+0x168>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	2000030c 	.word	0x2000030c
 8001a74:	200001b0 	.word	0x200001b0
 8001a78:	200001b4 	.word	0x200001b4
 8001a7c:	20000278 	.word	0x20000278
 8001a80:	2000027c 	.word	0x2000027c
 8001a84:	200001b8 	.word	0x200001b8
 8001a88:	200001b9 	.word	0x200001b9
 8001a8c:	200001ba 	.word	0x200001ba
 8001a90:	2000031c 	.word	0x2000031c
 8001a94:	c3150000 	.word	0xc3150000
 8001a98:	42ae0000 	.word	0x42ae0000
 8001a9c:	2000032c 	.word	0x2000032c
 8001aa0:	2000019c 	.word	0x2000019c
 8001aa4:	200001ac 	.word	0x200001ac

08001aa8 <setHomeAngles>:

void setHomeAngles(void) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    // Set the current angle to zero or a specific home angle as needed
	need_to_set_home = 1;
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <setHomeAngles+0x2c>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
	TIM4->CNT = (int16_t)((HOME_M1 * 2.0 * PULSES_PER_REV * 2.0f) / 360.0f);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <setHomeAngles+0x30>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <setHomeAngles+0x34>)
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24
	angle1 = (HOME_M1);
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <setHomeAngles+0x38>)
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <setHomeAngles+0x3c>)
 8001abc:	601a      	str	r2, [r3, #0]
    angle2 = 88.0; // Home position for Motor 2
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <setHomeAngles+0x40>)
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <setHomeAngles+0x44>)
 8001ac2:	601a      	str	r2, [r3, #0]
    angle3 = -149.0; // Home position for Motor 3
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <setHomeAngles+0x48>)
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8001af4 <setHomeAngles+0x4c>)
 8001ac8:	601a      	str	r2, [r3, #0]

}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000320 	.word	0x20000320
 8001ad8:	40000800 	.word	0x40000800
 8001adc:	ffffdf53 	.word	0xffffdf53
 8001ae0:	2000019c 	.word	0x2000019c
 8001ae4:	c2a90000 	.word	0xc2a90000
 8001ae8:	200001a0 	.word	0x200001a0
 8001aec:	42b00000 	.word	0x42b00000
 8001af0:	200001a4 	.word	0x200001a4
 8001af4:	c3150000 	.word	0xc3150000

08001af8 <checkLimitSwitches>:

void checkLimitSwitches(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    // Check and handle limit switch 1
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET) {
 8001afc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b00:	4839      	ldr	r0, [pc, #228]	@ (8001be8 <checkLimitSwitches+0xf0>)
 8001b02:	f001 fe51 	bl	80037a8 <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <checkLimitSwitches+0x20>
        a = 1;
 8001b0c:	4b37      	ldr	r3, [pc, #220]	@ (8001bec <checkLimitSwitches+0xf4>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
        m1speed = 0;
 8001b12:	4b37      	ldr	r3, [pc, #220]	@ (8001bf0 <checkLimitSwitches+0xf8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
    }
    curstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001b18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b1c:	4832      	ldr	r0, [pc, #200]	@ (8001be8 <checkLimitSwitches+0xf0>)
 8001b1e:	f001 fe43 	bl	80037a8 <HAL_GPIO_ReadPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <checkLimitSwitches+0xfc>)
 8001b28:	601a      	str	r2, [r3, #0]
    if ( curstate == 1 && prvstate == 0)
 8001b2a:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <checkLimitSwitches+0xfc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d109      	bne.n	8001b46 <checkLimitSwitches+0x4e>
 8001b32:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <checkLimitSwitches+0x100>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <checkLimitSwitches+0x4e>
	{
		TIM4->CNT = (int16_t)((HOME_M1 * 2.0 * PULSES_PER_REV * 2.0f) / 360.0f);
 8001b3a:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <checkLimitSwitches+0x104>)
 8001b3c:	4a30      	ldr	r2, [pc, #192]	@ (8001c00 <checkLimitSwitches+0x108>)
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
		angle1 = (HOME_M1);
 8001b40:	4b30      	ldr	r3, [pc, #192]	@ (8001c04 <checkLimitSwitches+0x10c>)
 8001b42:	4a31      	ldr	r2, [pc, #196]	@ (8001c08 <checkLimitSwitches+0x110>)
 8001b44:	601a      	str	r2, [r3, #0]
	}

    prvstate = curstate;
 8001b46:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <checkLimitSwitches+0xfc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf8 <checkLimitSwitches+0x100>)
 8001b4c:	6013      	str	r3, [r2, #0]
    Motor1_SetSpeed(m1speed);
 8001b4e:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <checkLimitSwitches+0xf8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fffc 	bl	8000b50 <__aeabi_i2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fc58 	bl	8001410 <Motor1_SetSpeed>
    // Check and handle limit switch 2, ensuring that it only works if limit switch 3 is not active
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8001b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b64:	4820      	ldr	r0, [pc, #128]	@ (8001be8 <checkLimitSwitches+0xf0>)
 8001b66:	f001 fe1f 	bl	80037a8 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <checkLimitSwitches+0x84>
        b = 1;
 8001b70:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <checkLimitSwitches+0x114>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
        countPulseL2 = 0;  // Stop Motor 2 if limit switch 2 is triggered
 8001b76:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <checkLimitSwitches+0x118>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
    }

    if (a == 1 && b == 1 && c == 1 && home_count != 1){
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <checkLimitSwitches+0xf4>)
 8001b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d110      	bne.n	8001ba8 <checkLimitSwitches+0xb0>
 8001b86:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <checkLimitSwitches+0x114>)
 8001b88:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d10b      	bne.n	8001ba8 <checkLimitSwitches+0xb0>
 8001b90:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <checkLimitSwitches+0x11c>)
 8001b92:	f993 3000 	ldrsb.w	r3, [r3]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d106      	bne.n	8001ba8 <checkLimitSwitches+0xb0>
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <checkLimitSwitches+0x120>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d002      	beq.n	8001ba8 <checkLimitSwitches+0xb0>
    	home_count = 1;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <checkLimitSwitches+0x120>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

	}

    // Check and handle limit switch 3
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 8001ba8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bac:	480e      	ldr	r0, [pc, #56]	@ (8001be8 <checkLimitSwitches+0xf0>)
 8001bae:	f001 fdfb 	bl	80037a8 <HAL_GPIO_ReadPin>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d110      	bne.n	8001bda <checkLimitSwitches+0xe2>
        c = 1;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <checkLimitSwitches+0x11c>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]

		periodMotor3 = periodMotor2;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <checkLimitSwitches+0x124>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <checkLimitSwitches+0x128>)
 8001bc4:	6013      	str	r3, [r2, #0]
		countPulseL3 = countPulseL2;  // Stop Motor 3 if limit switch 3 is triggered
 8001bc6:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <checkLimitSwitches+0x118>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a16      	ldr	r2, [pc, #88]	@ (8001c24 <checkLimitSwitches+0x12c>)
 8001bcc:	6013      	str	r3, [r2, #0]

        HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET);  // Stop motor direction for M3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <checkLimitSwitches+0xf0>)
 8001bd4:	f001 fdff 	bl	80037d6 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);  // Set motor direction for M3
    }

}
 8001bd8:	e004      	b.n	8001be4 <checkLimitSwitches+0xec>
        HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);  // Set motor direction for M3
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <checkLimitSwitches+0xf0>)
 8001be0:	f001 fdf9 	bl	80037d6 <HAL_GPIO_WritePin>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40010800 	.word	0x40010800
 8001bec:	200001b8 	.word	0x200001b8
 8001bf0:	2000030c 	.word	0x2000030c
 8001bf4:	20000328 	.word	0x20000328
 8001bf8:	20000324 	.word	0x20000324
 8001bfc:	40000800 	.word	0x40000800
 8001c00:	ffffdf53 	.word	0xffffdf53
 8001c04:	2000019c 	.word	0x2000019c
 8001c08:	c2a90000 	.word	0xc2a90000
 8001c0c:	200001b9 	.word	0x200001b9
 8001c10:	200001b0 	.word	0x200001b0
 8001c14:	200001ba 	.word	0x200001ba
 8001c18:	2000031c 	.word	0x2000031c
 8001c1c:	20000278 	.word	0x20000278
 8001c20:	2000027c 	.word	0x2000027c
 8001c24:	200001b4 	.word	0x200001b4

08001c28 <decode_angles_auto>:
	    int sign3 = (input[14] == '1') ? 1 : -1;  // Check sign at position 14
	    *angle3 = sign3 * ((input[15] - '0') * 100 + (input[16] - '0') * 10 + (input[17] - '0')
	                      + (input[18] - '0') * 0.1 + (input[19] - '0') * 0.01);
}

void decode_angles_auto(const char *input, float *angles) {
 8001c28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
     * Giải mã 18 góc từ chuỗi mã hóa.
     * `input` là chuỗi chứa dữ liệu mã hóa.
     * `angles` là mảng float để lưu giá trị góc đã giải mã.
     */

    for (int i = 0; i < 18; i++) {
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e08e      	b.n	8001d58 <decode_angles_auto+0x130>
        int offset = i * 7;  // Mỗi góc chiếm 7 ký tự
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        int sign = (input[offset] == '1') ? 1 : -1;  // Xác định dấu (1: dương, 0: âm)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b31      	cmp	r3, #49	@ 0x31
 8001c4e:	d101      	bne.n	8001c54 <decode_angles_auto+0x2c>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e001      	b.n	8001c58 <decode_angles_auto+0x30>
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295
 8001c58:	60fb      	str	r3, [r7, #12]

        // Tính góc bằng cách giải mã phần nguyên và phần thập phân
        angles[i] = sign * ((input[offset + 1] - '0') * 100 +
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7fe fbca 	bl	80003f4 <__aeabi_i2d>
 8001c60:	4604      	mov	r4, r0
 8001c62:	460d      	mov	r5, r1
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	3301      	adds	r3, #1
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3b30      	subs	r3, #48	@ 0x30
 8001c70:	2264      	movs	r2, #100	@ 0x64
 8001c72:	fb02 f103 	mul.w	r1, r2, r3
                            (input[offset + 2] - '0') * 10 +
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	3302      	adds	r3, #2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
        angles[i] = sign * ((input[offset + 1] - '0') * 100 +
 8001c8c:	18ca      	adds	r2, r1, r3
                            (input[offset + 3] - '0') +
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	3303      	adds	r3, #3
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	440b      	add	r3, r1
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3b30      	subs	r3, #48	@ 0x30
                            (input[offset + 2] - '0') * 10 +
 8001c9a:	4413      	add	r3, r2
                            (input[offset + 3] - '0') +
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fba9 	bl	80003f4 <__aeabi_i2d>
 8001ca2:	4680      	mov	r8, r0
 8001ca4:	4689      	mov	r9, r1
                            (input[offset + 4] - '0') * 0.1 +
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3b30      	subs	r3, #48	@ 0x30
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fb9e 	bl	80003f4 <__aeabi_i2d>
 8001cb8:	a32d      	add	r3, pc, #180	@ (adr r3, 8001d70 <decode_angles_auto+0x148>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fc03 	bl	80004c8 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
                            (input[offset + 3] - '0') +
 8001cc6:	4640      	mov	r0, r8
 8001cc8:	4649      	mov	r1, r9
 8001cca:	f7fe fa47 	bl	800015c <__adddf3>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4690      	mov	r8, r2
 8001cd4:	4699      	mov	r9, r3
                            (input[offset + 5] - '0') * 0.01 +
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	3305      	adds	r3, #5
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	3b30      	subs	r3, #48	@ 0x30
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fb86 	bl	80003f4 <__aeabi_i2d>
 8001ce8:	a323      	add	r3, pc, #140	@ (adr r3, 8001d78 <decode_angles_auto+0x150>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fbeb 	bl	80004c8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
                            (input[offset + 4] - '0') * 0.1 +
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe fa2f 	bl	800015c <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4690      	mov	r8, r2
 8001d04:	4699      	mov	r9, r3
                            (input[offset + 6] - '0') * 0.001);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	3306      	adds	r3, #6
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3b30      	subs	r3, #48	@ 0x30
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb6e 	bl	80003f4 <__aeabi_i2d>
 8001d18:	a319      	add	r3, pc, #100	@ (adr r3, 8001d80 <decode_angles_auto+0x158>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fbd3 	bl	80004c8 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
                            (input[offset + 5] - '0') * 0.01 +
 8001d26:	4640      	mov	r0, r8
 8001d28:	4649      	mov	r1, r9
 8001d2a:	f7fe fa17 	bl	800015c <__adddf3>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
        angles[i] = sign * ((input[offset + 1] - '0') * 100 +
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f7fe fbc7 	bl	80004c8 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	18d4      	adds	r4, r2, r3
 8001d4a:	f7fe fdf7 	bl	800093c <__aeabi_d2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 18; i++) {
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b11      	cmp	r3, #17
 8001d5c:	f77f af6d 	ble.w	8001c3a <decode_angles_auto+0x12>
    }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d6c:	f3af 8000 	nop.w
 8001d70:	9999999a 	.word	0x9999999a
 8001d74:	3fb99999 	.word	0x3fb99999
 8001d78:	47ae147b 	.word	0x47ae147b
 8001d7c:	3f847ae1 	.word	0x3f847ae1
 8001d80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d84:	3f50624d 	.word	0x3f50624d

08001d88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  if (huart->Instance == huart3.Instance){
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b2f      	ldr	r3, [pc, #188]	@ (8001e54 <HAL_UART_RxCpltCallback+0xcc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d157      	bne.n	8001e4c <HAL_UART_RxCpltCallback+0xc4>

	  //rx_data[29] = '\0';

	  // Ensure the received data is null-terminated
	  // Set the flag indicating data is ready for use
	  receiveComplete = 1;
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <HAL_UART_RxCpltCallback+0xd0>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

	  // Restart reception for the next incoming data
	  HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_data, 127);
 8001da2:	227f      	movs	r2, #127	@ 0x7f
 8001da4:	492d      	ldr	r1, [pc, #180]	@ (8001e5c <HAL_UART_RxCpltCallback+0xd4>)
 8001da6:	482b      	ldr	r0, [pc, #172]	@ (8001e54 <HAL_UART_RxCpltCallback+0xcc>)
 8001da8:	f003 fa97 	bl	80052da <HAL_UART_Receive_IT>
	  decode_angles_auto(rx_data,&angles);
 8001dac:	492c      	ldr	r1, [pc, #176]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001dae:	482b      	ldr	r0, [pc, #172]	@ (8001e5c <HAL_UART_RxCpltCallback+0xd4>)
 8001db0:	f7ff ff3a 	bl	8001c28 <decode_angles_auto>
		angle1p1 = angles[0];
 8001db4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e64 <HAL_UART_RxCpltCallback+0xdc>)
 8001dba:	6013      	str	r3, [r2, #0]
		angle2p1 = angles[1];
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a29      	ldr	r2, [pc, #164]	@ (8001e68 <HAL_UART_RxCpltCallback+0xe0>)
 8001dc2:	6013      	str	r3, [r2, #0]
		angle3p1 = angles[2];
 8001dc4:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a28      	ldr	r2, [pc, #160]	@ (8001e6c <HAL_UART_RxCpltCallback+0xe4>)
 8001dca:	6013      	str	r3, [r2, #0]

		angle1p2 = angles[3];
 8001dcc:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a27      	ldr	r2, [pc, #156]	@ (8001e70 <HAL_UART_RxCpltCallback+0xe8>)
 8001dd2:	6013      	str	r3, [r2, #0]
		angle2p2 = angles[4];
 8001dd4:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4a26      	ldr	r2, [pc, #152]	@ (8001e74 <HAL_UART_RxCpltCallback+0xec>)
 8001dda:	6013      	str	r3, [r2, #0]
		angle3p2 = angles[5];
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	4a25      	ldr	r2, [pc, #148]	@ (8001e78 <HAL_UART_RxCpltCallback+0xf0>)
 8001de2:	6013      	str	r3, [r2, #0]

		angle1p3 = angles[6];
 8001de4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a24      	ldr	r2, [pc, #144]	@ (8001e7c <HAL_UART_RxCpltCallback+0xf4>)
 8001dea:	6013      	str	r3, [r2, #0]
		angle2p3 = angles[7];
 8001dec:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	4a23      	ldr	r2, [pc, #140]	@ (8001e80 <HAL_UART_RxCpltCallback+0xf8>)
 8001df2:	6013      	str	r3, [r2, #0]
		angle3p3 = angles[8];
 8001df4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a22      	ldr	r2, [pc, #136]	@ (8001e84 <HAL_UART_RxCpltCallback+0xfc>)
 8001dfa:	6013      	str	r3, [r2, #0]

		angle1p4 = angles[9];
 8001dfc:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <HAL_UART_RxCpltCallback+0x100>)
 8001e02:	6013      	str	r3, [r2, #0]
		angle2p4 = angles[10];
 8001e04:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	4a20      	ldr	r2, [pc, #128]	@ (8001e8c <HAL_UART_RxCpltCallback+0x104>)
 8001e0a:	6013      	str	r3, [r2, #0]
		angle3p4 = angles[11];
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	4a1f      	ldr	r2, [pc, #124]	@ (8001e90 <HAL_UART_RxCpltCallback+0x108>)
 8001e12:	6013      	str	r3, [r2, #0]

		angle1p5 = angles[12];
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	4a1e      	ldr	r2, [pc, #120]	@ (8001e94 <HAL_UART_RxCpltCallback+0x10c>)
 8001e1a:	6013      	str	r3, [r2, #0]
		angle2p5 = angles[13];
 8001e1c:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e20:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <HAL_UART_RxCpltCallback+0x110>)
 8001e22:	6013      	str	r3, [r2, #0]
		angle3p5 = angles[14];
 8001e24:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e28:	4a1c      	ldr	r2, [pc, #112]	@ (8001e9c <HAL_UART_RxCpltCallback+0x114>)
 8001e2a:	6013      	str	r3, [r2, #0]

		angle1pt = angles[15];
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_UART_RxCpltCallback+0x118>)
 8001e32:	6013      	str	r3, [r2, #0]
		angle2pt = angles[16];
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea4 <HAL_UART_RxCpltCallback+0x11c>)
 8001e3a:	6013      	str	r3, [r2, #0]
		angle3pt = angles[17];
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <HAL_UART_RxCpltCallback+0xd8>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e40:	4a19      	ldr	r2, [pc, #100]	@ (8001ea8 <HAL_UART_RxCpltCallback+0x120>)
 8001e42:	6013      	str	r3, [r2, #0]
		g = 0;
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_UART_RxCpltCallback+0x124>)
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

//	  decode_angles(rx_data, &rx_angle1, &rx_angle2, &rx_angle3);

  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000154 	.word	0x20000154
 8001e58:	20000308 	.word	0x20000308
 8001e5c:	20000288 	.word	0x20000288
 8001e60:	200001d4 	.word	0x200001d4
 8001e64:	2000021c 	.word	0x2000021c
 8001e68:	20000220 	.word	0x20000220
 8001e6c:	20000224 	.word	0x20000224
 8001e70:	20000228 	.word	0x20000228
 8001e74:	2000022c 	.word	0x2000022c
 8001e78:	20000230 	.word	0x20000230
 8001e7c:	20000234 	.word	0x20000234
 8001e80:	20000238 	.word	0x20000238
 8001e84:	2000023c 	.word	0x2000023c
 8001e88:	20000240 	.word	0x20000240
 8001e8c:	20000244 	.word	0x20000244
 8001e90:	20000248 	.word	0x20000248
 8001e94:	2000024c 	.word	0x2000024c
 8001e98:	20000250 	.word	0x20000250
 8001e9c:	20000254 	.word	0x20000254
 8001ea0:	20000258 	.word	0x20000258
 8001ea4:	2000025c 	.word	0x2000025c
 8001ea8:	20000260 	.word	0x20000260
 8001eac:	200001c0 	.word	0x200001c0

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb4:	f001 f8ae 	bl	8003014 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb8:	f000 fc64 	bl	8002784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ebc:	f000 fe5e 	bl	8002b7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ec0:	f000 fd44 	bl	800294c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ec4:	f000 fd8e 	bl	80029e4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001ec8:	f000 fe2e 	bl	8002b28 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001ecc:	f000 fca0 	bl	8002810 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001ed0:	f000 fdd6 	bl	8002a80 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001ed4:	48a1      	ldr	r0, [pc, #644]	@ (800215c <main+0x2ac>)
 8001ed6:	f002 f90f 	bl	80040f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001eda:	48a1      	ldr	r0, [pc, #644]	@ (8002160 <main+0x2b0>)
 8001edc:	f002 f90c 	bl	80040f8 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_data, 127);
 8001ee0:	227f      	movs	r2, #127	@ 0x7f
 8001ee2:	49a0      	ldr	r1, [pc, #640]	@ (8002164 <main+0x2b4>)
 8001ee4:	48a0      	ldr	r0, [pc, #640]	@ (8002168 <main+0x2b8>)
 8001ee6:	f003 f9f8 	bl	80052da <HAL_UART_Receive_IT>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001eea:	213c      	movs	r1, #60	@ 0x3c
 8001eec:	489f      	ldr	r0, [pc, #636]	@ (800216c <main+0x2bc>)
 8001eee:	f002 faf1 	bl	80044d4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ef2:	210c      	movs	r1, #12
 8001ef4:	489e      	ldr	r0, [pc, #632]	@ (8002170 <main+0x2c0>)
 8001ef6:	f002 f9a9 	bl	800424c <HAL_TIM_PWM_Start>

  // Biến góc đích và góc hiện tại

//  PID_Init(&pid, 70.0f, 0.0f, 15.0f);  // Tùy chỉnh các hệ số Kp, Ki, Kd
  PID_Init(&pid, 2.0f, 0.0f, 0.0f);
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f06:	489b      	ldr	r0, [pc, #620]	@ (8002174 <main+0x2c4>)
 8001f08:	f7ff f9a8 	bl	800125c <PID_Init>
  autoHomeMotors();
 8001f0c:	f7ff fd16 	bl	800193c <autoHomeMotors>
  PID_Init(&pid, 70.0f, 1.0f, 15.0f);
 8001f10:	4b99      	ldr	r3, [pc, #612]	@ (8002178 <main+0x2c8>)
 8001f12:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f16:	4999      	ldr	r1, [pc, #612]	@ (800217c <main+0x2cc>)
 8001f18:	4896      	ldr	r0, [pc, #600]	@ (8002174 <main+0x2c4>)
 8001f1a:	f7ff f99f 	bl	800125c <PID_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if (dt > 10)
 8001f1e:	4b98      	ldr	r3, [pc, #608]	@ (8002180 <main+0x2d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b0a      	cmp	r3, #10
 8001f24:	f340 83fc 	ble.w	8002720 <main+0x870>
	   {

		   if (receiveComplete == 1){
 8001f28:	4b96      	ldr	r3, [pc, #600]	@ (8002184 <main+0x2d4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	f040 83f4 	bne.w	800271a <main+0x86a>
			   g+=10;
 8001f32:	4b95      	ldr	r3, [pc, #596]	@ (8002188 <main+0x2d8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4995      	ldr	r1, [pc, #596]	@ (800218c <main+0x2dc>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fd55 	bl	80009e8 <__addsf3>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b91      	ldr	r3, [pc, #580]	@ (8002188 <main+0x2d8>)
 8001f44:	601a      	str	r2, [r3, #0]

			   if ( g >= 76000){
 8001f46:	4b90      	ldr	r3, [pc, #576]	@ (8002188 <main+0x2d8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4991      	ldr	r1, [pc, #580]	@ (8002190 <main+0x2e0>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f805 	bl	8000f5c <__aeabi_fcmpge>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <main+0xbe>
				   target_angle_1 = 0.0;
 8001f58:	4b8e      	ldr	r3, [pc, #568]	@ (8002194 <main+0x2e4>)
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
					target_angle_2 = 80.0;
 8001f60:	4b8d      	ldr	r3, [pc, #564]	@ (8002198 <main+0x2e8>)
 8001f62:	4a8e      	ldr	r2, [pc, #568]	@ (800219c <main+0x2ec>)
 8001f64:	601a      	str	r2, [r3, #0]
					target_angle_3 = -135.0;
 8001f66:	4b8e      	ldr	r3, [pc, #568]	@ (80021a0 <main+0x2f0>)
 8001f68:	4a8e      	ldr	r2, [pc, #568]	@ (80021a4 <main+0x2f4>)
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e3a5      	b.n	80026ba <main+0x80a>
				}

			   else if (g > 73000){
 8001f6e:	4b86      	ldr	r3, [pc, #536]	@ (8002188 <main+0x2d8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	498d      	ldr	r1, [pc, #564]	@ (80021a8 <main+0x2f8>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fffb 	bl	8000f70 <__aeabi_fcmpgt>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d04d      	beq.n	800201c <main+0x16c>
					target_angle_1 = angle1pt;
 8001f80:	4b8a      	ldr	r3, [pc, #552]	@ (80021ac <main+0x2fc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a83      	ldr	r2, [pc, #524]	@ (8002194 <main+0x2e4>)
 8001f86:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2pt;
 8001f88:	4b89      	ldr	r3, [pc, #548]	@ (80021b0 <main+0x300>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a82      	ldr	r2, [pc, #520]	@ (8002198 <main+0x2e8>)
 8001f8e:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3pt;
 8001f90:	4b88      	ldr	r3, [pc, #544]	@ (80021b4 <main+0x304>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a82      	ldr	r2, [pc, #520]	@ (80021a0 <main+0x2f0>)
 8001f96:	6013      	str	r3, [r2, #0]
					if (fabs(angle1 - target_angle_1) < 0.5 &&
 8001f98:	4b87      	ldr	r3, [pc, #540]	@ (80021b8 <main+0x308>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a7d      	ldr	r2, [pc, #500]	@ (8002194 <main+0x2e4>)
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fd1e 	bl	80009e4 <__aeabi_fsub>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe ffbe 	bl	8000f34 <__aeabi_fcmplt>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 837d 	beq.w	80026ba <main+0x80a>
					   fabs(angle2 - target_angle_2) < 0.5 &&
 8001fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80021bc <main+0x30c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a74      	ldr	r2, [pc, #464]	@ (8002198 <main+0x2e8>)
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fd0a 	bl	80009e4 <__aeabi_fsub>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
					if (fabs(angle1 - target_angle_1) < 0.5 &&
 8001fd6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe ffaa 	bl	8000f34 <__aeabi_fcmplt>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8369 	beq.w	80026ba <main+0x80a>
					   fabs(angle3 - target_angle_3) < 0.5) {
 8001fe8:	4b75      	ldr	r3, [pc, #468]	@ (80021c0 <main+0x310>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a6c      	ldr	r2, [pc, #432]	@ (80021a0 <main+0x2f0>)
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fcf6 	bl	80009e4 <__aeabi_fsub>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
					   fabs(angle2 - target_angle_2) < 0.5 &&
 8001ffe:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe ff96 	bl	8000f34 <__aeabi_fcmplt>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8355 	beq.w	80026ba <main+0x80a>
					   HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_RESET);} // Thả vật
 8002010:	2200      	movs	r2, #0
 8002012:	2101      	movs	r1, #1
 8002014:	486b      	ldr	r0, [pc, #428]	@ (80021c4 <main+0x314>)
 8002016:	f001 fbde 	bl	80037d6 <HAL_GPIO_WritePin>
 800201a:	e34e      	b.n	80026ba <main+0x80a>

				}else if (g > 69000){
 800201c:	4b5a      	ldr	r3, [pc, #360]	@ (8002188 <main+0x2d8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4969      	ldr	r1, [pc, #420]	@ (80021c8 <main+0x318>)
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe ffa4 	bl	8000f70 <__aeabi_fcmpgt>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00f      	beq.n	800204e <main+0x19e>
					target_angle_1 = 0.0;
 800202e:	4b59      	ldr	r3, [pc, #356]	@ (8002194 <main+0x2e4>)
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 8002036:	4b58      	ldr	r3, [pc, #352]	@ (8002198 <main+0x2e8>)
 8002038:	4a64      	ldr	r2, [pc, #400]	@ (80021cc <main+0x31c>)
 800203a:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 800203c:	4b58      	ldr	r3, [pc, #352]	@ (80021a0 <main+0x2f0>)
 800203e:	4a64      	ldr	r2, [pc, #400]	@ (80021d0 <main+0x320>)
 8002040:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2101      	movs	r1, #1
 8002046:	485f      	ldr	r0, [pc, #380]	@ (80021c4 <main+0x314>)
 8002048:	f001 fbc5 	bl	80037d6 <HAL_GPIO_WritePin>
 800204c:	e335      	b.n	80026ba <main+0x80a>

				}else if (g > 65000){
 800204e:	4b4e      	ldr	r3, [pc, #312]	@ (8002188 <main+0x2d8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4960      	ldr	r1, [pc, #384]	@ (80021d4 <main+0x324>)
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe ff8b 	bl	8000f70 <__aeabi_fcmpgt>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d011      	beq.n	8002084 <main+0x1d4>
					target_angle_1 = angle1p5;
 8002060:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <main+0x328>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a4b      	ldr	r2, [pc, #300]	@ (8002194 <main+0x2e4>)
 8002066:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2p5;
 8002068:	4b5c      	ldr	r3, [pc, #368]	@ (80021dc <main+0x32c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a4a      	ldr	r2, [pc, #296]	@ (8002198 <main+0x2e8>)
 800206e:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3p5;
 8002070:	4b5b      	ldr	r3, [pc, #364]	@ (80021e0 <main+0x330>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a4a      	ldr	r2, [pc, #296]	@ (80021a0 <main+0x2f0>)
 8002076:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2101      	movs	r1, #1
 800207c:	4851      	ldr	r0, [pc, #324]	@ (80021c4 <main+0x314>)
 800207e:	f001 fbaa 	bl	80037d6 <HAL_GPIO_WritePin>
 8002082:	e31a      	b.n	80026ba <main+0x80a>

				}else if (g > 61000){
 8002084:	4b40      	ldr	r3, [pc, #256]	@ (8002188 <main+0x2d8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4956      	ldr	r1, [pc, #344]	@ (80021e4 <main+0x334>)
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe ff70 	bl	8000f70 <__aeabi_fcmpgt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <main+0x1fc>
					target_angle_1 = 0.0;
 8002096:	4b3f      	ldr	r3, [pc, #252]	@ (8002194 <main+0x2e4>)
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 800209e:	4b3e      	ldr	r3, [pc, #248]	@ (8002198 <main+0x2e8>)
 80020a0:	4a4a      	ldr	r2, [pc, #296]	@ (80021cc <main+0x31c>)
 80020a2:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 80020a4:	4b3e      	ldr	r3, [pc, #248]	@ (80021a0 <main+0x2f0>)
 80020a6:	4a4a      	ldr	r2, [pc, #296]	@ (80021d0 <main+0x320>)
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e306      	b.n	80026ba <main+0x80a>


				}else if (g > 57000){
 80020ac:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <main+0x2d8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	494d      	ldr	r1, [pc, #308]	@ (80021e8 <main+0x338>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe ff5c 	bl	8000f70 <__aeabi_fcmpgt>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8096 	beq.w	80021ec <main+0x33c>
						target_angle_1 = angle1pt;
 80020c0:	4b3a      	ldr	r3, [pc, #232]	@ (80021ac <main+0x2fc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a33      	ldr	r2, [pc, #204]	@ (8002194 <main+0x2e4>)
 80020c6:	6013      	str	r3, [r2, #0]
						target_angle_2 = angle2pt;
 80020c8:	4b39      	ldr	r3, [pc, #228]	@ (80021b0 <main+0x300>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a32      	ldr	r2, [pc, #200]	@ (8002198 <main+0x2e8>)
 80020ce:	6013      	str	r3, [r2, #0]
						target_angle_3 = angle3pt;
 80020d0:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <main+0x304>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a32      	ldr	r2, [pc, #200]	@ (80021a0 <main+0x2f0>)
 80020d6:	6013      	str	r3, [r2, #0]
						if (fabs(angle1 - target_angle_1) < 0.5 &&
 80020d8:	4b37      	ldr	r3, [pc, #220]	@ (80021b8 <main+0x308>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002194 <main+0x2e4>)
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fc7e 	bl	80009e4 <__aeabi_fsub>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ee:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe ff1e 	bl	8000f34 <__aeabi_fcmplt>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 82dd 	beq.w	80026ba <main+0x80a>
						   fabs(angle2 - target_angle_2) < 0.5 &&
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <main+0x30c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <main+0x2e8>)
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fc6a 	bl	80009e4 <__aeabi_fsub>
 8002110:	4603      	mov	r3, r0
 8002112:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
						if (fabs(angle1 - target_angle_1) < 0.5 &&
 8002116:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe ff0a 	bl	8000f34 <__aeabi_fcmplt>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 82c9 	beq.w	80026ba <main+0x80a>
						   fabs(angle3 - target_angle_3) < 0.5) {
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <main+0x310>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <main+0x2f0>)
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fc56 	bl	80009e4 <__aeabi_fsub>
 8002138:	4603      	mov	r3, r0
 800213a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
						   fabs(angle2 - target_angle_2) < 0.5 &&
 800213e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fef6 	bl	8000f34 <__aeabi_fcmplt>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 82b5 	beq.w	80026ba <main+0x80a>
						   HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_RESET);} // Thả vật
 8002150:	2200      	movs	r2, #0
 8002152:	2101      	movs	r1, #1
 8002154:	481b      	ldr	r0, [pc, #108]	@ (80021c4 <main+0x314>)
 8002156:	f001 fb3e 	bl	80037d6 <HAL_GPIO_WritePin>
 800215a:	e2ae      	b.n	80026ba <main+0x80a>
 800215c:	2000007c 	.word	0x2000007c
 8002160:	200000c4 	.word	0x200000c4
 8002164:	20000288 	.word	0x20000288
 8002168:	20000154 	.word	0x20000154
 800216c:	2000010c 	.word	0x2000010c
 8002170:	20000034 	.word	0x20000034
 8002174:	2000032c 	.word	0x2000032c
 8002178:	41700000 	.word	0x41700000
 800217c:	428c0000 	.word	0x428c0000
 8002180:	200001d0 	.word	0x200001d0
 8002184:	20000308 	.word	0x20000308
 8002188:	200001c0 	.word	0x200001c0
 800218c:	41200000 	.word	0x41200000
 8002190:	47947000 	.word	0x47947000
 8002194:	20000280 	.word	0x20000280
 8002198:	20000004 	.word	0x20000004
 800219c:	42a00000 	.word	0x42a00000
 80021a0:	20000008 	.word	0x20000008
 80021a4:	c3070000 	.word	0xc3070000
 80021a8:	478e9400 	.word	0x478e9400
 80021ac:	20000258 	.word	0x20000258
 80021b0:	2000025c 	.word	0x2000025c
 80021b4:	20000260 	.word	0x20000260
 80021b8:	2000019c 	.word	0x2000019c
 80021bc:	200001a0 	.word	0x200001a0
 80021c0:	200001a4 	.word	0x200001a4
 80021c4:	40010800 	.word	0x40010800
 80021c8:	4786c400 	.word	0x4786c400
 80021cc:	429a0000 	.word	0x429a0000
 80021d0:	c2d40000 	.word	0xc2d40000
 80021d4:	477de800 	.word	0x477de800
 80021d8:	2000024c 	.word	0x2000024c
 80021dc:	20000250 	.word	0x20000250
 80021e0:	20000254 	.word	0x20000254
 80021e4:	476e4800 	.word	0x476e4800
 80021e8:	475ea800 	.word	0x475ea800

			   	}else if (g > 53000){
 80021ec:	4b73      	ldr	r3, [pc, #460]	@ (80023bc <main+0x50c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4973      	ldr	r1, [pc, #460]	@ (80023c0 <main+0x510>)
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe febc 	bl	8000f70 <__aeabi_fcmpgt>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00f      	beq.n	800221e <main+0x36e>
			   		target_angle_1 = 0.0;
 80021fe:	4b71      	ldr	r3, [pc, #452]	@ (80023c4 <main+0x514>)
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 8002206:	4b70      	ldr	r3, [pc, #448]	@ (80023c8 <main+0x518>)
 8002208:	4a70      	ldr	r2, [pc, #448]	@ (80023cc <main+0x51c>)
 800220a:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 800220c:	4b70      	ldr	r3, [pc, #448]	@ (80023d0 <main+0x520>)
 800220e:	4a71      	ldr	r2, [pc, #452]	@ (80023d4 <main+0x524>)
 8002210:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 8002212:	2201      	movs	r2, #1
 8002214:	2101      	movs	r1, #1
 8002216:	4870      	ldr	r0, [pc, #448]	@ (80023d8 <main+0x528>)
 8002218:	f001 fadd 	bl	80037d6 <HAL_GPIO_WritePin>
 800221c:	e24d      	b.n	80026ba <main+0x80a>

			   	}else if (g > 49000){
 800221e:	4b67      	ldr	r3, [pc, #412]	@ (80023bc <main+0x50c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	496e      	ldr	r1, [pc, #440]	@ (80023dc <main+0x52c>)
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fea3 	bl	8000f70 <__aeabi_fcmpgt>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d011      	beq.n	8002254 <main+0x3a4>
					target_angle_1 = angle1p4;
 8002230:	4b6b      	ldr	r3, [pc, #428]	@ (80023e0 <main+0x530>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a63      	ldr	r2, [pc, #396]	@ (80023c4 <main+0x514>)
 8002236:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2p4;
 8002238:	4b6a      	ldr	r3, [pc, #424]	@ (80023e4 <main+0x534>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a62      	ldr	r2, [pc, #392]	@ (80023c8 <main+0x518>)
 800223e:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3p4;
 8002240:	4b69      	ldr	r3, [pc, #420]	@ (80023e8 <main+0x538>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a62      	ldr	r2, [pc, #392]	@ (80023d0 <main+0x520>)
 8002246:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	2101      	movs	r1, #1
 800224c:	4862      	ldr	r0, [pc, #392]	@ (80023d8 <main+0x528>)
 800224e:	f001 fac2 	bl	80037d6 <HAL_GPIO_WritePin>
 8002252:	e232      	b.n	80026ba <main+0x80a>

			   	}else if (g > 45000){
 8002254:	4b59      	ldr	r3, [pc, #356]	@ (80023bc <main+0x50c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4964      	ldr	r1, [pc, #400]	@ (80023ec <main+0x53c>)
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fe88 	bl	8000f70 <__aeabi_fcmpgt>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <main+0x3cc>
					target_angle_1 = 0.0;
 8002266:	4b57      	ldr	r3, [pc, #348]	@ (80023c4 <main+0x514>)
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 800226e:	4b56      	ldr	r3, [pc, #344]	@ (80023c8 <main+0x518>)
 8002270:	4a56      	ldr	r2, [pc, #344]	@ (80023cc <main+0x51c>)
 8002272:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 8002274:	4b56      	ldr	r3, [pc, #344]	@ (80023d0 <main+0x520>)
 8002276:	4a57      	ldr	r2, [pc, #348]	@ (80023d4 <main+0x524>)
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e21e      	b.n	80026ba <main+0x80a>


				}else if (g > 41000){
 800227c:	4b4f      	ldr	r3, [pc, #316]	@ (80023bc <main+0x50c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	495b      	ldr	r1, [pc, #364]	@ (80023f0 <main+0x540>)
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fe74 	bl	8000f70 <__aeabi_fcmpgt>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d04d      	beq.n	800232a <main+0x47a>
					target_angle_1 = angle1pt;
 800228e:	4b59      	ldr	r3, [pc, #356]	@ (80023f4 <main+0x544>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a4c      	ldr	r2, [pc, #304]	@ (80023c4 <main+0x514>)
 8002294:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2pt;
 8002296:	4b58      	ldr	r3, [pc, #352]	@ (80023f8 <main+0x548>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a4b      	ldr	r2, [pc, #300]	@ (80023c8 <main+0x518>)
 800229c:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3pt;
 800229e:	4b57      	ldr	r3, [pc, #348]	@ (80023fc <main+0x54c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a4b      	ldr	r2, [pc, #300]	@ (80023d0 <main+0x520>)
 80022a4:	6013      	str	r3, [r2, #0]
					if (fabs(angle1 - target_angle_1) < 0.5 &&
 80022a6:	4b56      	ldr	r3, [pc, #344]	@ (8002400 <main+0x550>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a46      	ldr	r2, [pc, #280]	@ (80023c4 <main+0x514>)
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fb97 	bl	80009e4 <__aeabi_fsub>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022bc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fe37 	bl	8000f34 <__aeabi_fcmplt>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 81f6 	beq.w	80026ba <main+0x80a>
					   fabs(angle2 - target_angle_2) < 0.5 &&
 80022ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002404 <main+0x554>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <main+0x518>)
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fb83 	bl	80009e4 <__aeabi_fsub>
 80022de:	4603      	mov	r3, r0
 80022e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
					if (fabs(angle1 - target_angle_1) < 0.5 &&
 80022e4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fe23 	bl	8000f34 <__aeabi_fcmplt>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 81e2 	beq.w	80026ba <main+0x80a>
					   fabs(angle3 - target_angle_3) < 0.5) {
 80022f6:	4b44      	ldr	r3, [pc, #272]	@ (8002408 <main+0x558>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a35      	ldr	r2, [pc, #212]	@ (80023d0 <main+0x520>)
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fb6f 	bl	80009e4 <__aeabi_fsub>
 8002306:	4603      	mov	r3, r0
 8002308:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
					   fabs(angle2 - target_angle_2) < 0.5 &&
 800230c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fe0f 	bl	8000f34 <__aeabi_fcmplt>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 81ce 	beq.w	80026ba <main+0x80a>
					   HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_RESET);} // Thả vật
 800231e:	2200      	movs	r2, #0
 8002320:	2101      	movs	r1, #1
 8002322:	482d      	ldr	r0, [pc, #180]	@ (80023d8 <main+0x528>)
 8002324:	f001 fa57 	bl	80037d6 <HAL_GPIO_WritePin>
 8002328:	e1c7      	b.n	80026ba <main+0x80a>

				}else if (g > 37000){
 800232a:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <main+0x50c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4937      	ldr	r1, [pc, #220]	@ (800240c <main+0x55c>)
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fe1d 	bl	8000f70 <__aeabi_fcmpgt>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00f      	beq.n	800235c <main+0x4ac>
					target_angle_1 = 0.0;
 800233c:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <main+0x514>)
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 8002344:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <main+0x518>)
 8002346:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <main+0x51c>)
 8002348:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 800234a:	4b21      	ldr	r3, [pc, #132]	@ (80023d0 <main+0x520>)
 800234c:	4a21      	ldr	r2, [pc, #132]	@ (80023d4 <main+0x524>)
 800234e:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 8002350:	2201      	movs	r2, #1
 8002352:	2101      	movs	r1, #1
 8002354:	4820      	ldr	r0, [pc, #128]	@ (80023d8 <main+0x528>)
 8002356:	f001 fa3e 	bl	80037d6 <HAL_GPIO_WritePin>
 800235a:	e1ae      	b.n	80026ba <main+0x80a>

				}else if (g > 33000){
 800235c:	4b17      	ldr	r3, [pc, #92]	@ (80023bc <main+0x50c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	492b      	ldr	r1, [pc, #172]	@ (8002410 <main+0x560>)
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fe04 	bl	8000f70 <__aeabi_fcmpgt>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d011      	beq.n	8002392 <main+0x4e2>
					target_angle_1 = angle1p3;
 800236e:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <main+0x564>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <main+0x514>)
 8002374:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2p3;
 8002376:	4b28      	ldr	r3, [pc, #160]	@ (8002418 <main+0x568>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <main+0x518>)
 800237c:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3p3;
 800237e:	4b27      	ldr	r3, [pc, #156]	@ (800241c <main+0x56c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a13      	ldr	r2, [pc, #76]	@ (80023d0 <main+0x520>)
 8002384:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	2101      	movs	r1, #1
 800238a:	4813      	ldr	r0, [pc, #76]	@ (80023d8 <main+0x528>)
 800238c:	f001 fa23 	bl	80037d6 <HAL_GPIO_WritePin>
 8002390:	e193      	b.n	80026ba <main+0x80a>

				}else if (g > 29000){
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <main+0x50c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4922      	ldr	r1, [pc, #136]	@ (8002420 <main+0x570>)
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fde9 	bl	8000f70 <__aeabi_fcmpgt>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d03f      	beq.n	8002424 <main+0x574>
					target_angle_1 = 0.0;
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <main+0x514>)
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <main+0x518>)
 80023ae:	4a07      	ldr	r2, [pc, #28]	@ (80023cc <main+0x51c>)
 80023b0:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 80023b2:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <main+0x520>)
 80023b4:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <main+0x524>)
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e17f      	b.n	80026ba <main+0x80a>
 80023ba:	bf00      	nop
 80023bc:	200001c0 	.word	0x200001c0
 80023c0:	474f0800 	.word	0x474f0800
 80023c4:	20000280 	.word	0x20000280
 80023c8:	20000004 	.word	0x20000004
 80023cc:	429a0000 	.word	0x429a0000
 80023d0:	20000008 	.word	0x20000008
 80023d4:	c2d40000 	.word	0xc2d40000
 80023d8:	40010800 	.word	0x40010800
 80023dc:	473f6800 	.word	0x473f6800
 80023e0:	20000240 	.word	0x20000240
 80023e4:	20000244 	.word	0x20000244
 80023e8:	20000248 	.word	0x20000248
 80023ec:	472fc800 	.word	0x472fc800
 80023f0:	47202800 	.word	0x47202800
 80023f4:	20000258 	.word	0x20000258
 80023f8:	2000025c 	.word	0x2000025c
 80023fc:	20000260 	.word	0x20000260
 8002400:	2000019c 	.word	0x2000019c
 8002404:	200001a0 	.word	0x200001a0
 8002408:	200001a4 	.word	0x200001a4
 800240c:	47108800 	.word	0x47108800
 8002410:	4700e800 	.word	0x4700e800
 8002414:	20000234 	.word	0x20000234
 8002418:	20000238 	.word	0x20000238
 800241c:	2000023c 	.word	0x2000023c
 8002420:	46e29000 	.word	0x46e29000


				}else if (g > 25000){
 8002424:	4b86      	ldr	r3, [pc, #536]	@ (8002640 <main+0x790>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4986      	ldr	r1, [pc, #536]	@ (8002644 <main+0x794>)
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fda0 	bl	8000f70 <__aeabi_fcmpgt>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d04d      	beq.n	80024d2 <main+0x622>
					target_angle_1 = angle1pt;
 8002436:	4b84      	ldr	r3, [pc, #528]	@ (8002648 <main+0x798>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a84      	ldr	r2, [pc, #528]	@ (800264c <main+0x79c>)
 800243c:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2pt;
 800243e:	4b84      	ldr	r3, [pc, #528]	@ (8002650 <main+0x7a0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a84      	ldr	r2, [pc, #528]	@ (8002654 <main+0x7a4>)
 8002444:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3pt;
 8002446:	4b84      	ldr	r3, [pc, #528]	@ (8002658 <main+0x7a8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a84      	ldr	r2, [pc, #528]	@ (800265c <main+0x7ac>)
 800244c:	6013      	str	r3, [r2, #0]
					// Kiểm tra nếu đã đạt góc mục tiêu
				   if (fabs(angle1 - target_angle_1) < 0.5 &&
 800244e:	4b84      	ldr	r3, [pc, #528]	@ (8002660 <main+0x7b0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7e      	ldr	r2, [pc, #504]	@ (800264c <main+0x79c>)
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fac3 	bl	80009e4 <__aeabi_fsub>
 800245e:	4603      	mov	r3, r0
 8002460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002464:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fd63 	bl	8000f34 <__aeabi_fcmplt>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8122 	beq.w	80026ba <main+0x80a>
					   fabs(angle2 - target_angle_2) < 0.5 &&
 8002476:	4b7b      	ldr	r3, [pc, #492]	@ (8002664 <main+0x7b4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a76      	ldr	r2, [pc, #472]	@ (8002654 <main+0x7a4>)
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe faaf 	bl	80009e4 <__aeabi_fsub>
 8002486:	4603      	mov	r3, r0
 8002488:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
				   if (fabs(angle1 - target_angle_1) < 0.5 &&
 800248c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fd4f 	bl	8000f34 <__aeabi_fcmplt>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 810e 	beq.w	80026ba <main+0x80a>
					   fabs(angle3 - target_angle_3) < 0.5) {
 800249e:	4b72      	ldr	r3, [pc, #456]	@ (8002668 <main+0x7b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	@ (800265c <main+0x7ac>)
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fa9b 	bl	80009e4 <__aeabi_fsub>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
					   fabs(angle2 - target_angle_2) < 0.5 &&
 80024b4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fd3b 	bl	8000f34 <__aeabi_fcmplt>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80fa 	beq.w	80026ba <main+0x80a>
					   HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_RESET);} // Thả vật
 80024c6:	2200      	movs	r2, #0
 80024c8:	2101      	movs	r1, #1
 80024ca:	4868      	ldr	r0, [pc, #416]	@ (800266c <main+0x7bc>)
 80024cc:	f001 f983 	bl	80037d6 <HAL_GPIO_WritePin>
 80024d0:	e0f3      	b.n	80026ba <main+0x80a>

				}else if (g > 21000){
 80024d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002640 <main+0x790>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4966      	ldr	r1, [pc, #408]	@ (8002670 <main+0x7c0>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fd49 	bl	8000f70 <__aeabi_fcmpgt>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00f      	beq.n	8002504 <main+0x654>
					target_angle_1 = 0.0;
 80024e4:	4b59      	ldr	r3, [pc, #356]	@ (800264c <main+0x79c>)
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 80024ec:	4b59      	ldr	r3, [pc, #356]	@ (8002654 <main+0x7a4>)
 80024ee:	4a61      	ldr	r2, [pc, #388]	@ (8002674 <main+0x7c4>)
 80024f0:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 80024f2:	4b5a      	ldr	r3, [pc, #360]	@ (800265c <main+0x7ac>)
 80024f4:	4a60      	ldr	r2, [pc, #384]	@ (8002678 <main+0x7c8>)
 80024f6:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	2101      	movs	r1, #1
 80024fc:	485b      	ldr	r0, [pc, #364]	@ (800266c <main+0x7bc>)
 80024fe:	f001 f96a 	bl	80037d6 <HAL_GPIO_WritePin>
 8002502:	e0da      	b.n	80026ba <main+0x80a>

				}else if (g > 17000){
 8002504:	4b4e      	ldr	r3, [pc, #312]	@ (8002640 <main+0x790>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	495c      	ldr	r1, [pc, #368]	@ (800267c <main+0x7cc>)
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fd30 	bl	8000f70 <__aeabi_fcmpgt>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d011      	beq.n	800253a <main+0x68a>
					target_angle_1 = angle1p2;
 8002516:	4b5a      	ldr	r3, [pc, #360]	@ (8002680 <main+0x7d0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4c      	ldr	r2, [pc, #304]	@ (800264c <main+0x79c>)
 800251c:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2p2;
 800251e:	4b59      	ldr	r3, [pc, #356]	@ (8002684 <main+0x7d4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a4c      	ldr	r2, [pc, #304]	@ (8002654 <main+0x7a4>)
 8002524:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3p2;
 8002526:	4b58      	ldr	r3, [pc, #352]	@ (8002688 <main+0x7d8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4c      	ldr	r2, [pc, #304]	@ (800265c <main+0x7ac>)
 800252c:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2101      	movs	r1, #1
 8002532:	484e      	ldr	r0, [pc, #312]	@ (800266c <main+0x7bc>)
 8002534:	f001 f94f 	bl	80037d6 <HAL_GPIO_WritePin>
 8002538:	e0bf      	b.n	80026ba <main+0x80a>

				}else if (g > 13000){
 800253a:	4b41      	ldr	r3, [pc, #260]	@ (8002640 <main+0x790>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4953      	ldr	r1, [pc, #332]	@ (800268c <main+0x7dc>)
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fd15 	bl	8000f70 <__aeabi_fcmpgt>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <main+0x6b2>
					target_angle_1 = 0.0;
 800254c:	4b3f      	ldr	r3, [pc, #252]	@ (800264c <main+0x79c>)
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 8002554:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <main+0x7a4>)
 8002556:	4a47      	ldr	r2, [pc, #284]	@ (8002674 <main+0x7c4>)
 8002558:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 800255a:	4b40      	ldr	r3, [pc, #256]	@ (800265c <main+0x7ac>)
 800255c:	4a46      	ldr	r2, [pc, #280]	@ (8002678 <main+0x7c8>)
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e0ab      	b.n	80026ba <main+0x80a>


				}else if (g > 9000){
 8002562:	4b37      	ldr	r3, [pc, #220]	@ (8002640 <main+0x790>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	494a      	ldr	r1, [pc, #296]	@ (8002690 <main+0x7e0>)
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fd01 	bl	8000f70 <__aeabi_fcmpgt>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d04b      	beq.n	800260c <main+0x75c>
					target_angle_1 = angle1pt;
 8002574:	4b34      	ldr	r3, [pc, #208]	@ (8002648 <main+0x798>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a34      	ldr	r2, [pc, #208]	@ (800264c <main+0x79c>)
 800257a:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2pt;
 800257c:	4b34      	ldr	r3, [pc, #208]	@ (8002650 <main+0x7a0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a34      	ldr	r2, [pc, #208]	@ (8002654 <main+0x7a4>)
 8002582:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3pt;
 8002584:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <main+0x7a8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a34      	ldr	r2, [pc, #208]	@ (800265c <main+0x7ac>)
 800258a:	6013      	str	r3, [r2, #0]
					if (fabs(angle1 - target_angle_1) < 0.5 &&
 800258c:	4b34      	ldr	r3, [pc, #208]	@ (8002660 <main+0x7b0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2e      	ldr	r2, [pc, #184]	@ (800264c <main+0x79c>)
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fa24 	bl	80009e4 <__aeabi_fsub>
 800259c:	4603      	mov	r3, r0
 800259e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025a2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fcc4 	bl	8000f34 <__aeabi_fcmplt>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8083 	beq.w	80026ba <main+0x80a>
					   fabs(angle2 - target_angle_2) < 0.5 &&
 80025b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002664 <main+0x7b4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a26      	ldr	r2, [pc, #152]	@ (8002654 <main+0x7a4>)
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fa10 	bl	80009e4 <__aeabi_fsub>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
					if (fabs(angle1 - target_angle_1) < 0.5 &&
 80025ca:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fcb0 	bl	8000f34 <__aeabi_fcmplt>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d06f      	beq.n	80026ba <main+0x80a>
					   fabs(angle3 - target_angle_3) < 0.5) {
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <main+0x7b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <main+0x7ac>)
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe f9fd 	bl	80009e4 <__aeabi_fsub>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
					   fabs(angle2 - target_angle_2) < 0.5 &&
 80025f0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fc9d 	bl	8000f34 <__aeabi_fcmplt>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d05c      	beq.n	80026ba <main+0x80a>
					   HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_RESET);} // Thả vật
 8002600:	2200      	movs	r2, #0
 8002602:	2101      	movs	r1, #1
 8002604:	4819      	ldr	r0, [pc, #100]	@ (800266c <main+0x7bc>)
 8002606:	f001 f8e6 	bl	80037d6 <HAL_GPIO_WritePin>
 800260a:	e056      	b.n	80026ba <main+0x80a>
				}else if (g > 5000){
 800260c:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <main+0x790>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4920      	ldr	r1, [pc, #128]	@ (8002694 <main+0x7e4>)
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fcac 	bl	8000f70 <__aeabi_fcmpgt>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03c      	beq.n	8002698 <main+0x7e8>
					target_angle_1 = 0.0;
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <main+0x79c>)
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
					target_angle_2 = 77.0;
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <main+0x7a4>)
 8002628:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <main+0x7c4>)
 800262a:	601a      	str	r2, [r3, #0]
					target_angle_3 = -106.0;
 800262c:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <main+0x7ac>)
 800262e:	4a12      	ldr	r2, [pc, #72]	@ (8002678 <main+0x7c8>)
 8002630:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	2101      	movs	r1, #1
 8002636:	480d      	ldr	r0, [pc, #52]	@ (800266c <main+0x7bc>)
 8002638:	f001 f8cd 	bl	80037d6 <HAL_GPIO_WritePin>
 800263c:	e03d      	b.n	80026ba <main+0x80a>
 800263e:	bf00      	nop
 8002640:	200001c0 	.word	0x200001c0
 8002644:	46c35000 	.word	0x46c35000
 8002648:	20000258 	.word	0x20000258
 800264c:	20000280 	.word	0x20000280
 8002650:	2000025c 	.word	0x2000025c
 8002654:	20000004 	.word	0x20000004
 8002658:	20000260 	.word	0x20000260
 800265c:	20000008 	.word	0x20000008
 8002660:	2000019c 	.word	0x2000019c
 8002664:	200001a0 	.word	0x200001a0
 8002668:	200001a4 	.word	0x200001a4
 800266c:	40010800 	.word	0x40010800
 8002670:	46a41000 	.word	0x46a41000
 8002674:	429a0000 	.word	0x429a0000
 8002678:	c2d40000 	.word	0xc2d40000
 800267c:	4684d000 	.word	0x4684d000
 8002680:	20000228 	.word	0x20000228
 8002684:	2000022c 	.word	0x2000022c
 8002688:	20000230 	.word	0x20000230
 800268c:	464b2000 	.word	0x464b2000
 8002690:	460ca000 	.word	0x460ca000
 8002694:	459c4000 	.word	0x459c4000

				}else {
					target_angle_1 = angle1p1;
 8002698:	4b28      	ldr	r3, [pc, #160]	@ (800273c <main+0x88c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a28      	ldr	r2, [pc, #160]	@ (8002740 <main+0x890>)
 800269e:	6013      	str	r3, [r2, #0]
					target_angle_2 = angle2p1;
 80026a0:	4b28      	ldr	r3, [pc, #160]	@ (8002744 <main+0x894>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a28      	ldr	r2, [pc, #160]	@ (8002748 <main+0x898>)
 80026a6:	6013      	str	r3, [r2, #0]
					target_angle_3 = angle3p1;
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <main+0x89c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a28      	ldr	r2, [pc, #160]	@ (8002750 <main+0x8a0>)
 80026ae:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOA, MAG_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	2101      	movs	r1, #1
 80026b4:	4827      	ldr	r0, [pc, #156]	@ (8002754 <main+0x8a4>)
 80026b6:	f001 f88e 	bl	80037d6 <HAL_GPIO_WritePin>
				}

		   angleControl(&pid, target_angle_1, target_angle_2, target_angle_3);
 80026ba:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <main+0x890>)
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <main+0x898>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <main+0x8a0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4824      	ldr	r0, [pc, #144]	@ (8002758 <main+0x8a8>)
 80026c8:	f7fe ffb6 	bl	8001638 <angleControl>
		   angle1err = fabs(angle1 - target_angle_1);
 80026cc:	4b23      	ldr	r3, [pc, #140]	@ (800275c <main+0x8ac>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002740 <main+0x890>)
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f984 	bl	80009e4 <__aeabi_fsub>
 80026dc:	4603      	mov	r3, r0
 80026de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002760 <main+0x8b0>)
 80026e4:	6013      	str	r3, [r2, #0]
		   angle2err = fabs(angle2 - target_angle_2);
 80026e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <main+0x8b4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <main+0x898>)
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe f977 	bl	80009e4 <__aeabi_fsub>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002768 <main+0x8b8>)
 80026fe:	6013      	str	r3, [r2, #0]
		   angle3err = fabs(angle3 - target_angle_3);
 8002700:	4b1a      	ldr	r3, [pc, #104]	@ (800276c <main+0x8bc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <main+0x8a0>)
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe f96a 	bl	80009e4 <__aeabi_fsub>
 8002710:	4603      	mov	r3, r0
 8002712:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002716:	4a16      	ldr	r2, [pc, #88]	@ (8002770 <main+0x8c0>)
 8002718:	6013      	str	r3, [r2, #0]
		   }

//		   HAL_UART_Transmit(&huart3, tx_data, sizeof(tx_data), 10);
		   dt = 0;
 800271a:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <main+0x8c4>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
	   }
	   if (HOME == 0){
 8002720:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <main+0x8c8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f47f abfa 	bne.w	8001f1e <main+0x6e>
		   angleControl(&pid, 	0.0, 87.0, -149.0);
 800272a:	4b14      	ldr	r3, [pc, #80]	@ (800277c <main+0x8cc>)
 800272c:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <main+0x8d0>)
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	4809      	ldr	r0, [pc, #36]	@ (8002758 <main+0x8a8>)
 8002734:	f7fe ff80 	bl	8001638 <angleControl>
	   if (dt > 10)
 8002738:	f7ff bbf1 	b.w	8001f1e <main+0x6e>
 800273c:	2000021c 	.word	0x2000021c
 8002740:	20000280 	.word	0x20000280
 8002744:	20000220 	.word	0x20000220
 8002748:	20000004 	.word	0x20000004
 800274c:	20000224 	.word	0x20000224
 8002750:	20000008 	.word	0x20000008
 8002754:	40010800 	.word	0x40010800
 8002758:	2000032c 	.word	0x2000032c
 800275c:	2000019c 	.word	0x2000019c
 8002760:	20000264 	.word	0x20000264
 8002764:	200001a0 	.word	0x200001a0
 8002768:	20000268 	.word	0x20000268
 800276c:	200001a4 	.word	0x200001a4
 8002770:	2000026c 	.word	0x2000026c
 8002774:	200001d0 	.word	0x200001d0
 8002778:	200001ac 	.word	0x200001ac
 800277c:	c3150000 	.word	0xc3150000
 8002780:	42ae0000 	.word	0x42ae0000

08002784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b090      	sub	sp, #64	@ 0x40
 8002788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278a:	f107 0318 	add.w	r3, r7, #24
 800278e:	2228      	movs	r2, #40	@ 0x28
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fad8 	bl	8005d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b8:	2302      	movs	r3, #2
 80027ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80027c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 f833 	bl	8003838 <HAL_RCC_OscConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80027d8:	f000 fa42 	bl	8002c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027dc:	230f      	movs	r3, #15
 80027de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e0:	2302      	movs	r3, #2
 80027e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2102      	movs	r1, #2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 faa0 	bl	8003d3c <HAL_RCC_ClockConfig>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002802:	f000 fa2d 	bl	8002c60 <Error_Handler>
  }
}
 8002806:	bf00      	nop
 8002808:	3740      	adds	r7, #64	@ 0x40
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b096      	sub	sp, #88	@ 0x58
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002816:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800282e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2220      	movs	r2, #32
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fa7d 	bl	8005d48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800284e:	4b3d      	ldr	r3, [pc, #244]	@ (8002944 <MX_TIM1_Init+0x134>)
 8002850:	4a3d      	ldr	r2, [pc, #244]	@ (8002948 <MX_TIM1_Init+0x138>)
 8002852:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8002854:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <MX_TIM1_Init+0x134>)
 8002856:	2203      	movs	r2, #3
 8002858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285a:	4b3a      	ldr	r3, [pc, #232]	@ (8002944 <MX_TIM1_Init+0x134>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002860:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <MX_TIM1_Init+0x134>)
 8002862:	22ff      	movs	r2, #255	@ 0xff
 8002864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002866:	4b37      	ldr	r3, [pc, #220]	@ (8002944 <MX_TIM1_Init+0x134>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 255;
 800286c:	4b35      	ldr	r3, [pc, #212]	@ (8002944 <MX_TIM1_Init+0x134>)
 800286e:	22ff      	movs	r2, #255	@ 0xff
 8002870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <MX_TIM1_Init+0x134>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002878:	4832      	ldr	r0, [pc, #200]	@ (8002944 <MX_TIM1_Init+0x134>)
 800287a:	f001 fbed 	bl	8004058 <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002884:	f000 f9ec 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800288c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800288e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002892:	4619      	mov	r1, r3
 8002894:	482b      	ldr	r0, [pc, #172]	@ (8002944 <MX_TIM1_Init+0x134>)
 8002896:	f002 f87d 	bl	8004994 <HAL_TIM_ConfigClockSource>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80028a0:	f000 f9de 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028a4:	4827      	ldr	r0, [pc, #156]	@ (8002944 <MX_TIM1_Init+0x134>)
 80028a6:	f001 fc79 	bl	800419c <HAL_TIM_PWM_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80028b0:	f000 f9d6 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028c0:	4619      	mov	r1, r3
 80028c2:	4820      	ldr	r0, [pc, #128]	@ (8002944 <MX_TIM1_Init+0x134>)
 80028c4:	f002 fbf8 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80028ce:	f000 f9c7 	bl	8002c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028d2:	2360      	movs	r3, #96	@ 0x60
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ee:	220c      	movs	r2, #12
 80028f0:	4619      	mov	r1, r3
 80028f2:	4814      	ldr	r0, [pc, #80]	@ (8002944 <MX_TIM1_Init+0x134>)
 80028f4:	f001 ff8c 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80028fe:	f000 f9af 	bl	8002c60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002916:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800291a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4807      	ldr	r0, [pc, #28]	@ (8002944 <MX_TIM1_Init+0x134>)
 8002926:	f002 fc25 	bl	8005174 <HAL_TIMEx_ConfigBreakDeadTime>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002930:	f000 f996 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002934:	4803      	ldr	r0, [pc, #12]	@ (8002944 <MX_TIM1_Init+0x134>)
 8002936:	f000 fa65 	bl	8002e04 <HAL_TIM_MspPostInit>

}
 800293a:	bf00      	nop
 800293c:	3758      	adds	r7, #88	@ 0x58
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000034 	.word	0x20000034
 8002948:	40012c00 	.word	0x40012c00

0800294c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002960:	463b      	mov	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002968:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <MX_TIM2_Init+0x94>)
 800296a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800296e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <MX_TIM2_Init+0x94>)
 8002972:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8002976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002978:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <MX_TIM2_Init+0x94>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <MX_TIM2_Init+0x94>)
 8002980:	2202      	movs	r2, #2
 8002982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <MX_TIM2_Init+0x94>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <MX_TIM2_Init+0x94>)
 800298c:	2280      	movs	r2, #128	@ 0x80
 800298e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002990:	4813      	ldr	r0, [pc, #76]	@ (80029e0 <MX_TIM2_Init+0x94>)
 8002992:	f001 fb61 	bl	8004058 <HAL_TIM_Base_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800299c:	f000 f960 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029a6:	f107 0308 	add.w	r3, r7, #8
 80029aa:	4619      	mov	r1, r3
 80029ac:	480c      	ldr	r0, [pc, #48]	@ (80029e0 <MX_TIM2_Init+0x94>)
 80029ae:	f001 fff1 	bl	8004994 <HAL_TIM_ConfigClockSource>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029b8:	f000 f952 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <MX_TIM2_Init+0x94>)
 80029ca:	f002 fb75 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029d4:	f000 f944 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000007c 	.word	0x2000007c

080029e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f8:	463b      	mov	r3, r7
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a02:	4a1e      	ldr	r2, [pc, #120]	@ (8002a7c <MX_TIM3_Init+0x98>)
 8002a04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002a06:	4b1c      	ldr	r3, [pc, #112]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a08:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002a0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3;
 8002a14:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a16:	2203      	movs	r2, #3
 8002a18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1a:	4b17      	ldr	r3, [pc, #92]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a20:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a26:	4814      	ldr	r0, [pc, #80]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a28:	f001 fb16 	bl	8004058 <HAL_TIM_Base_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a32:	f000 f915 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a3c:	f107 0308 	add.w	r3, r7, #8
 8002a40:	4619      	mov	r1, r3
 8002a42:	480d      	ldr	r0, [pc, #52]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a44:	f001 ffa6 	bl	8004994 <HAL_TIM_ConfigClockSource>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a4e:	f000 f907 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4806      	ldr	r0, [pc, #24]	@ (8002a78 <MX_TIM3_Init+0x94>)
 8002a60:	f002 fb2a 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a6a:	f000 f8f9 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200000c4 	.word	0x200000c4
 8002a7c:	40000400 	.word	0x40000400

08002a80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	@ 0x30
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	2224      	movs	r2, #36	@ 0x24
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 f95a 	bl	8005d48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a9c:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <MX_TIM4_Init+0xa0>)
 8002a9e:	4a21      	ldr	r2, [pc, #132]	@ (8002b24 <MX_TIM4_Init+0xa4>)
 8002aa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <MX_TIM4_Init+0xa0>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <MX_TIM4_Init+0xa0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002aae:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <MX_TIM4_Init+0xa0>)
 8002ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ab4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <MX_TIM4_Init+0xa0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <MX_TIM4_Init+0xa0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aca:	2301      	movs	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ada:	2301      	movs	r3, #1
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ae6:	f107 030c 	add.w	r3, r7, #12
 8002aea:	4619      	mov	r1, r3
 8002aec:	480c      	ldr	r0, [pc, #48]	@ (8002b20 <MX_TIM4_Init+0xa0>)
 8002aee:	f001 fc4f 	bl	8004390 <HAL_TIM_Encoder_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002af8:	f000 f8b2 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4805      	ldr	r0, [pc, #20]	@ (8002b20 <MX_TIM4_Init+0xa0>)
 8002b0a:	f002 fad5 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002b14:	f000 f8a4 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	3730      	adds	r7, #48	@ 0x30
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000010c 	.word	0x2000010c
 8002b24:	40000800 	.word	0x40000800

08002b28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <MX_USART3_UART_Init+0x50>)
 8002b30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b4e:	220c      	movs	r2, #12
 8002b50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b5e:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <MX_USART3_UART_Init+0x4c>)
 8002b60:	f002 fb6b 	bl	800523a <HAL_UART_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b6a:	f000 f879 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000154 	.word	0x20000154
 8002b78:	40004800 	.word	0x40004800

08002b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b90:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a30      	ldr	r2, [pc, #192]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002b96:	f043 0320 	orr.w	r3, r3, #32
 8002b9a:	6193      	str	r3, [r2, #24]
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a2a      	ldr	r2, [pc, #168]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b28      	ldr	r3, [pc, #160]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc0:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4a24      	ldr	r2, [pc, #144]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002bc6:	f043 0308 	orr.w	r3, r3, #8
 8002bca:	6193      	str	r3, [r2, #24]
 8002bcc:	4b22      	ldr	r3, [pc, #136]	@ (8002c58 <MX_GPIO_Init+0xdc>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAG_Pin|PUL3_Pin|DIR3_Pin|PUL2_Pin
 8002bd8:	2200      	movs	r2, #0
 8002bda:	21ff      	movs	r1, #255	@ 0xff
 8002bdc:	481f      	ldr	r0, [pc, #124]	@ (8002c5c <MX_GPIO_Init+0xe0>)
 8002bde:	f000 fdfa 	bl	80037d6 <HAL_GPIO_WritePin>
                          |DIR2_Pin|GPIO_PIN_5|DIR1A_Pin|DIR1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MAG_Pin PA5 DIR1B_Pin */
  GPIO_InitStruct.Pin = MAG_Pin|GPIO_PIN_5|DIR1B_Pin;
 8002be2:	23a1      	movs	r3, #161	@ 0xa1
 8002be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be6:	2301      	movs	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	f107 0310 	add.w	r3, r7, #16
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4818      	ldr	r0, [pc, #96]	@ (8002c5c <MX_GPIO_Init+0xe0>)
 8002bfa:	f000 fc51 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUL3_Pin DIR3_Pin PUL2_Pin DIR2_Pin
                           DIR1A_Pin */
  GPIO_InitStruct.Pin = PUL3_Pin|DIR3_Pin|PUL2_Pin|DIR2_Pin
 8002bfe:	235e      	movs	r3, #94	@ 0x5e
 8002c00:	613b      	str	r3, [r7, #16]
                          |DIR1A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	4619      	mov	r1, r3
 8002c14:	4811      	ldr	r0, [pc, #68]	@ (8002c5c <MX_GPIO_Init+0xe0>)
 8002c16:	f000 fc43 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_LINK3_Pin LIMIT_LINK2_Pin */
  GPIO_InitStruct.Pin = LIMIT_LINK3_Pin|LIMIT_LINK2_Pin;
 8002c1a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c24:	2302      	movs	r3, #2
 8002c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	480b      	ldr	r0, [pc, #44]	@ (8002c5c <MX_GPIO_Init+0xe0>)
 8002c30:	f000 fc36 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	4619      	mov	r1, r3
 8002c48:	4804      	ldr	r0, [pc, #16]	@ (8002c5c <MX_GPIO_Init+0xe0>)
 8002c4a:	f000 fc29 	bl	80034a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c4e:	bf00      	nop
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40010800 	.word	0x40010800

08002c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <Error_Handler+0x8>

08002c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_MspInit+0x5c>)
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <HAL_MspInit+0x5c>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6193      	str	r3, [r2, #24]
 8002c7e:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <HAL_MspInit+0x5c>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <HAL_MspInit+0x5c>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc8 <HAL_MspInit+0x5c>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	61d3      	str	r3, [r2, #28]
 8002c96:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <HAL_MspInit+0x5c>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_MspInit+0x60>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <HAL_MspInit+0x60>)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010000 	.word	0x40010000

08002cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a23      	ldr	r2, [pc, #140]	@ (8002d6c <HAL_TIM_Base_MspInit+0x9c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10c      	bne.n	8002cfc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ce2:	4b23      	ldr	r3, [pc, #140]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	4a22      	ldr	r2, [pc, #136]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002ce8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cec:	6193      	str	r3, [r2, #24]
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cfa:	e032      	b.n	8002d62 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d04:	d114      	bne.n	8002d30 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d06:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	61d3      	str	r3, [r2, #28]
 8002d12:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2105      	movs	r1, #5
 8002d22:	201c      	movs	r0, #28
 8002d24:	f000 fad3 	bl	80032ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d28:	201c      	movs	r0, #28
 8002d2a:	f000 faec 	bl	8003306 <HAL_NVIC_EnableIRQ>
}
 8002d2e:	e018      	b.n	8002d62 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0f      	ldr	r2, [pc, #60]	@ (8002d74 <HAL_TIM_Base_MspInit+0xa4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d113      	bne.n	8002d62 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	61d3      	str	r3, [r2, #28]
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_TIM_Base_MspInit+0xa0>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2105      	movs	r1, #5
 8002d56:	201d      	movs	r0, #29
 8002d58:	f000 fab9 	bl	80032ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d5c:	201d      	movs	r0, #29
 8002d5e:	f000 fad2 	bl	8003306 <HAL_NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40000400 	.word	0x40000400

08002d78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a19      	ldr	r2, [pc, #100]	@ (8002df8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d12b      	bne.n	8002df0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <HAL_TIM_Encoder_MspInit+0x84>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <HAL_TIM_Encoder_MspInit+0x84>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	61d3      	str	r3, [r2, #28]
 8002da4:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <HAL_TIM_Encoder_MspInit+0x84>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <HAL_TIM_Encoder_MspInit+0x84>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	4a11      	ldr	r2, [pc, #68]	@ (8002dfc <HAL_TIM_Encoder_MspInit+0x84>)
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	6193      	str	r3, [r2, #24]
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <HAL_TIM_Encoder_MspInit+0x84>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dc8:	23c0      	movs	r3, #192	@ 0xc0
 8002dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4809      	ldr	r0, [pc, #36]	@ (8002e00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ddc:	f000 fb60 	bl	80034a0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	201e      	movs	r0, #30
 8002de6:	f000 fa72 	bl	80032ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dea:	201e      	movs	r0, #30
 8002dec:	f000 fa8b 	bl	8003306 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010c00 	.word	0x40010c00

08002e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a10      	ldr	r2, [pc, #64]	@ (8002e60 <HAL_TIM_MspPostInit+0x5c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d118      	bne.n	8002e56 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <HAL_TIM_MspPostInit+0x60>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a0e      	ldr	r2, [pc, #56]	@ (8002e64 <HAL_TIM_MspPostInit+0x60>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <HAL_TIM_MspPostInit+0x60>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e46:	2303      	movs	r3, #3
 8002e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <HAL_TIM_MspPostInit+0x64>)
 8002e52:	f000 fb25 	bl	80034a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e56:	bf00      	nop
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40010800 	.word	0x40010800

08002e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a20      	ldr	r2, [pc, #128]	@ (8002f08 <HAL_UART_MspInit+0x9c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d139      	bne.n	8002f00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f0c <HAL_UART_MspInit+0xa0>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4a1e      	ldr	r2, [pc, #120]	@ (8002f0c <HAL_UART_MspInit+0xa0>)
 8002e92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e96:	61d3      	str	r3, [r2, #28]
 8002e98:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <HAL_UART_MspInit+0xa0>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea4:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_UART_MspInit+0xa0>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a18      	ldr	r2, [pc, #96]	@ (8002f0c <HAL_UART_MspInit+0xa0>)
 8002eaa:	f043 0308 	orr.w	r3, r3, #8
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b16      	ldr	r3, [pc, #88]	@ (8002f0c <HAL_UART_MspInit+0xa0>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480f      	ldr	r0, [pc, #60]	@ (8002f10 <HAL_UART_MspInit+0xa4>)
 8002ed2:	f000 fae5 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ed6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4809      	ldr	r0, [pc, #36]	@ (8002f10 <HAL_UART_MspInit+0xa4>)
 8002eec:	f000 fad8 	bl	80034a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	2027      	movs	r0, #39	@ 0x27
 8002ef6:	f000 f9ea 	bl	80032ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002efa:	2027      	movs	r0, #39	@ 0x27
 8002efc:	f000 fa03 	bl	8003306 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002f00:	bf00      	nop
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40004800 	.word	0x40004800
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010c00 	.word	0x40010c00

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <NMI_Handler+0x4>

08002f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <HardFault_Handler+0x4>

08002f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <MemManage_Handler+0x4>

08002f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <BusFault_Handler+0x4>

08002f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <UsageFault_Handler+0x4>

08002f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f64:	f000 f89c 	bl	80030a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f70:	4802      	ldr	r0, [pc, #8]	@ (8002f7c <TIM2_IRQHandler+0x10>)
 8002f72:	f001 fb5d 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000007c 	.word	0x2000007c

08002f80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f84:	4802      	ldr	r0, [pc, #8]	@ (8002f90 <TIM3_IRQHandler+0x10>)
 8002f86:	f001 fb53 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200000c4 	.word	0x200000c4

08002f94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <TIM4_IRQHandler+0x10>)
 8002f9a:	f001 fb49 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000010c 	.word	0x2000010c

08002fa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <USART3_IRQHandler+0x10>)
 8002fae:	f002 f9b9 	bl	8005324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000154 	.word	0x20000154

08002fbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc8:	f7ff fff8 	bl	8002fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fcc:	480b      	ldr	r0, [pc, #44]	@ (8002ffc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fce:	490c      	ldr	r1, [pc, #48]	@ (8003000 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003004 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002fe4:	4c09      	ldr	r4, [pc, #36]	@ (800300c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f002 feb1 	bl	8005d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ff6:	f7fe ff5b 	bl	8001eb0 <main>
  bx lr
 8002ffa:	4770      	bx	lr
  ldr r0, =_sdata
 8002ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003000:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003004:	08005dec 	.word	0x08005dec
  ldr r2, =_sbss
 8003008:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800300c:	20000344 	.word	0x20000344

08003010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003010:	e7fe      	b.n	8003010 <ADC1_2_IRQHandler>
	...

08003014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <HAL_Init+0x28>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a07      	ldr	r2, [pc, #28]	@ (800303c <HAL_Init+0x28>)
 800301e:	f043 0310 	orr.w	r3, r3, #16
 8003022:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003024:	2003      	movs	r0, #3
 8003026:	f000 f947 	bl	80032b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800302a:	200f      	movs	r0, #15
 800302c:	f000 f808 	bl	8003040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003030:	f7ff fe1c 	bl	8002c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40022000 	.word	0x40022000

08003040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003048:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_InitTick+0x54>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_InitTick+0x58>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003056:	fbb3 f3f1 	udiv	r3, r3, r1
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f95f 	bl	8003322 <HAL_SYSTICK_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e00e      	b.n	800308c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d80a      	bhi.n	800308a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003074:	2200      	movs	r2, #0
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	f000 f927 	bl	80032ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003080:	4a06      	ldr	r2, [pc, #24]	@ (800309c <HAL_InitTick+0x5c>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2000000c 	.word	0x2000000c
 8003098:	20000014 	.word	0x20000014
 800309c:	20000010 	.word	0x20000010

080030a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_IncTick+0x1c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_IncTick+0x20>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	4a03      	ldr	r2, [pc, #12]	@ (80030c0 <HAL_IncTick+0x20>)
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	20000014 	.word	0x20000014
 80030c0:	20000340 	.word	0x20000340

080030c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return uwTick;
 80030c8:	4b02      	ldr	r3, [pc, #8]	@ (80030d4 <HAL_GetTick+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	20000340 	.word	0x20000340

080030d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d005      	beq.n	80030fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_Delay+0x44>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030fe:	bf00      	nop
 8003100:	f7ff ffe0 	bl	80030c4 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	429a      	cmp	r2, r3
 800310e:	d8f7      	bhi.n	8003100 <HAL_Delay+0x28>
  {
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000014 	.word	0x20000014

08003120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <__NVIC_SetPriorityGrouping+0x44>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800313c:	4013      	ands	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003148:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800314c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003152:	4a04      	ldr	r2, [pc, #16]	@ (8003164 <__NVIC_SetPriorityGrouping+0x44>)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	60d3      	str	r3, [r2, #12]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800316c:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <__NVIC_GetPriorityGrouping+0x18>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	f003 0307 	and.w	r3, r3, #7
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db0b      	blt.n	80031ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	4906      	ldr	r1, [pc, #24]	@ (80031b8 <__NVIC_EnableIRQ+0x34>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2001      	movs	r0, #1
 80031a6:	fa00 f202 	lsl.w	r2, r0, r2
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100

080031bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	@ (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	@ (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	@ 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	@ 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003284:	d301      	bcc.n	800328a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003286:	2301      	movs	r3, #1
 8003288:	e00f      	b.n	80032aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328a:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <SysTick_Config+0x40>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003292:	210f      	movs	r1, #15
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f7ff ff90 	bl	80031bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800329c:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <SysTick_Config+0x40>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a2:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <SysTick_Config+0x40>)
 80032a4:	2207      	movs	r2, #7
 80032a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	e000e010 	.word	0xe000e010

080032b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff2d 	bl	8003120 <__NVIC_SetPriorityGrouping>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e0:	f7ff ff42 	bl	8003168 <__NVIC_GetPriorityGrouping>
 80032e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f7ff ff90 	bl	8003210 <NVIC_EncodePriority>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff5f 	bl	80031bc <__NVIC_SetPriority>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff35 	bl	8003184 <__NVIC_EnableIRQ>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ffa2 	bl	8003274 <SysTick_Config>
 8003330:	4603      	mov	r3, r0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d008      	beq.n	8003364 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2204      	movs	r2, #4
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e020      	b.n	80033a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 020e 	bic.w	r2, r2, #14
 8003372:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d005      	beq.n	80033d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
 80033d2:	e051      	b.n	8003478 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 020e 	bic.w	r2, r2, #14
 80033e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_DMA_Abort_IT+0xd4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d029      	beq.n	8003452 <HAL_DMA_Abort_IT+0xa2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	@ (8003488 <HAL_DMA_Abort_IT+0xd8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <HAL_DMA_Abort_IT+0x9e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <HAL_DMA_Abort_IT+0xdc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01a      	beq.n	8003448 <HAL_DMA_Abort_IT+0x98>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1e      	ldr	r2, [pc, #120]	@ (8003490 <HAL_DMA_Abort_IT+0xe0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d012      	beq.n	8003442 <HAL_DMA_Abort_IT+0x92>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_DMA_Abort_IT+0xe4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00a      	beq.n	800343c <HAL_DMA_Abort_IT+0x8c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_DMA_Abort_IT+0xe8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d102      	bne.n	8003436 <HAL_DMA_Abort_IT+0x86>
 8003430:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003434:	e00e      	b.n	8003454 <HAL_DMA_Abort_IT+0xa4>
 8003436:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800343a:	e00b      	b.n	8003454 <HAL_DMA_Abort_IT+0xa4>
 800343c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003440:	e008      	b.n	8003454 <HAL_DMA_Abort_IT+0xa4>
 8003442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003446:	e005      	b.n	8003454 <HAL_DMA_Abort_IT+0xa4>
 8003448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800344c:	e002      	b.n	8003454 <HAL_DMA_Abort_IT+0xa4>
 800344e:	2310      	movs	r3, #16
 8003450:	e000      	b.n	8003454 <HAL_DMA_Abort_IT+0xa4>
 8003452:	2301      	movs	r3, #1
 8003454:	4a11      	ldr	r2, [pc, #68]	@ (800349c <HAL_DMA_Abort_IT+0xec>)
 8003456:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
    } 
  }
  return status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40020008 	.word	0x40020008
 8003488:	4002001c 	.word	0x4002001c
 800348c:	40020030 	.word	0x40020030
 8003490:	40020044 	.word	0x40020044
 8003494:	40020058 	.word	0x40020058
 8003498:	4002006c 	.word	0x4002006c
 800349c:	40020000 	.word	0x40020000

080034a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b08b      	sub	sp, #44	@ 0x2c
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034ae:	2300      	movs	r3, #0
 80034b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b2:	e169      	b.n	8003788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034b4:	2201      	movs	r2, #1
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	f040 8158 	bne.w	8003782 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4a9a      	ldr	r2, [pc, #616]	@ (8003740 <HAL_GPIO_Init+0x2a0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d05e      	beq.n	800359a <HAL_GPIO_Init+0xfa>
 80034dc:	4a98      	ldr	r2, [pc, #608]	@ (8003740 <HAL_GPIO_Init+0x2a0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d875      	bhi.n	80035ce <HAL_GPIO_Init+0x12e>
 80034e2:	4a98      	ldr	r2, [pc, #608]	@ (8003744 <HAL_GPIO_Init+0x2a4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d058      	beq.n	800359a <HAL_GPIO_Init+0xfa>
 80034e8:	4a96      	ldr	r2, [pc, #600]	@ (8003744 <HAL_GPIO_Init+0x2a4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d86f      	bhi.n	80035ce <HAL_GPIO_Init+0x12e>
 80034ee:	4a96      	ldr	r2, [pc, #600]	@ (8003748 <HAL_GPIO_Init+0x2a8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d052      	beq.n	800359a <HAL_GPIO_Init+0xfa>
 80034f4:	4a94      	ldr	r2, [pc, #592]	@ (8003748 <HAL_GPIO_Init+0x2a8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d869      	bhi.n	80035ce <HAL_GPIO_Init+0x12e>
 80034fa:	4a94      	ldr	r2, [pc, #592]	@ (800374c <HAL_GPIO_Init+0x2ac>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d04c      	beq.n	800359a <HAL_GPIO_Init+0xfa>
 8003500:	4a92      	ldr	r2, [pc, #584]	@ (800374c <HAL_GPIO_Init+0x2ac>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d863      	bhi.n	80035ce <HAL_GPIO_Init+0x12e>
 8003506:	4a92      	ldr	r2, [pc, #584]	@ (8003750 <HAL_GPIO_Init+0x2b0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d046      	beq.n	800359a <HAL_GPIO_Init+0xfa>
 800350c:	4a90      	ldr	r2, [pc, #576]	@ (8003750 <HAL_GPIO_Init+0x2b0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d85d      	bhi.n	80035ce <HAL_GPIO_Init+0x12e>
 8003512:	2b12      	cmp	r3, #18
 8003514:	d82a      	bhi.n	800356c <HAL_GPIO_Init+0xcc>
 8003516:	2b12      	cmp	r3, #18
 8003518:	d859      	bhi.n	80035ce <HAL_GPIO_Init+0x12e>
 800351a:	a201      	add	r2, pc, #4	@ (adr r2, 8003520 <HAL_GPIO_Init+0x80>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	0800359b 	.word	0x0800359b
 8003524:	08003575 	.word	0x08003575
 8003528:	08003587 	.word	0x08003587
 800352c:	080035c9 	.word	0x080035c9
 8003530:	080035cf 	.word	0x080035cf
 8003534:	080035cf 	.word	0x080035cf
 8003538:	080035cf 	.word	0x080035cf
 800353c:	080035cf 	.word	0x080035cf
 8003540:	080035cf 	.word	0x080035cf
 8003544:	080035cf 	.word	0x080035cf
 8003548:	080035cf 	.word	0x080035cf
 800354c:	080035cf 	.word	0x080035cf
 8003550:	080035cf 	.word	0x080035cf
 8003554:	080035cf 	.word	0x080035cf
 8003558:	080035cf 	.word	0x080035cf
 800355c:	080035cf 	.word	0x080035cf
 8003560:	080035cf 	.word	0x080035cf
 8003564:	0800357d 	.word	0x0800357d
 8003568:	08003591 	.word	0x08003591
 800356c:	4a79      	ldr	r2, [pc, #484]	@ (8003754 <HAL_GPIO_Init+0x2b4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003572:	e02c      	b.n	80035ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	623b      	str	r3, [r7, #32]
          break;
 800357a:	e029      	b.n	80035d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	3304      	adds	r3, #4
 8003582:	623b      	str	r3, [r7, #32]
          break;
 8003584:	e024      	b.n	80035d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	3308      	adds	r3, #8
 800358c:	623b      	str	r3, [r7, #32]
          break;
 800358e:	e01f      	b.n	80035d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	330c      	adds	r3, #12
 8003596:	623b      	str	r3, [r7, #32]
          break;
 8003598:	e01a      	b.n	80035d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035a2:	2304      	movs	r3, #4
 80035a4:	623b      	str	r3, [r7, #32]
          break;
 80035a6:	e013      	b.n	80035d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035b0:	2308      	movs	r3, #8
 80035b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	611a      	str	r2, [r3, #16]
          break;
 80035ba:	e009      	b.n	80035d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035bc:	2308      	movs	r3, #8
 80035be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	615a      	str	r2, [r3, #20]
          break;
 80035c6:	e003      	b.n	80035d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035c8:	2300      	movs	r3, #0
 80035ca:	623b      	str	r3, [r7, #32]
          break;
 80035cc:	e000      	b.n	80035d0 <HAL_GPIO_Init+0x130>
          break;
 80035ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2bff      	cmp	r3, #255	@ 0xff
 80035d4:	d801      	bhi.n	80035da <HAL_GPIO_Init+0x13a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_Init+0x13e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2bff      	cmp	r3, #255	@ 0xff
 80035e4:	d802      	bhi.n	80035ec <HAL_GPIO_Init+0x14c>
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	e002      	b.n	80035f2 <HAL_GPIO_Init+0x152>
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	3b08      	subs	r3, #8
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	210f      	movs	r1, #15
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	401a      	ands	r2, r3
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	431a      	orrs	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80b1 	beq.w	8003782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003620:	4b4d      	ldr	r3, [pc, #308]	@ (8003758 <HAL_GPIO_Init+0x2b8>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	4a4c      	ldr	r2, [pc, #304]	@ (8003758 <HAL_GPIO_Init+0x2b8>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6193      	str	r3, [r2, #24]
 800362c:	4b4a      	ldr	r3, [pc, #296]	@ (8003758 <HAL_GPIO_Init+0x2b8>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003638:	4a48      	ldr	r2, [pc, #288]	@ (800375c <HAL_GPIO_Init+0x2bc>)
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	089b      	lsrs	r3, r3, #2
 800363e:	3302      	adds	r3, #2
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	220f      	movs	r2, #15
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a40      	ldr	r2, [pc, #256]	@ (8003760 <HAL_GPIO_Init+0x2c0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_GPIO_Init+0x1ec>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3f      	ldr	r2, [pc, #252]	@ (8003764 <HAL_GPIO_Init+0x2c4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00d      	beq.n	8003688 <HAL_GPIO_Init+0x1e8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3e      	ldr	r2, [pc, #248]	@ (8003768 <HAL_GPIO_Init+0x2c8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <HAL_GPIO_Init+0x1e4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3d      	ldr	r2, [pc, #244]	@ (800376c <HAL_GPIO_Init+0x2cc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_GPIO_Init+0x1e0>
 800367c:	2303      	movs	r3, #3
 800367e:	e006      	b.n	800368e <HAL_GPIO_Init+0x1ee>
 8003680:	2304      	movs	r3, #4
 8003682:	e004      	b.n	800368e <HAL_GPIO_Init+0x1ee>
 8003684:	2302      	movs	r3, #2
 8003686:	e002      	b.n	800368e <HAL_GPIO_Init+0x1ee>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_GPIO_Init+0x1ee>
 800368c:	2300      	movs	r3, #0
 800368e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003690:	f002 0203 	and.w	r2, r2, #3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4093      	lsls	r3, r2
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800369e:	492f      	ldr	r1, [pc, #188]	@ (800375c <HAL_GPIO_Init+0x2bc>)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d006      	beq.n	80036c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	492c      	ldr	r1, [pc, #176]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
 80036c4:	e006      	b.n	80036d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	4928      	ldr	r1, [pc, #160]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d006      	beq.n	80036ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036e0:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	4922      	ldr	r1, [pc, #136]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60cb      	str	r3, [r1, #12]
 80036ec:	e006      	b.n	80036fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	491e      	ldr	r1, [pc, #120]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d006      	beq.n	8003716 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	4918      	ldr	r1, [pc, #96]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
 8003714:	e006      	b.n	8003724 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003716:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	43db      	mvns	r3, r3
 800371e:	4914      	ldr	r1, [pc, #80]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 8003720:	4013      	ands	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d021      	beq.n	8003774 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003730:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	490e      	ldr	r1, [pc, #56]	@ (8003770 <HAL_GPIO_Init+0x2d0>)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]
 800373c:	e021      	b.n	8003782 <HAL_GPIO_Init+0x2e2>
 800373e:	bf00      	nop
 8003740:	10320000 	.word	0x10320000
 8003744:	10310000 	.word	0x10310000
 8003748:	10220000 	.word	0x10220000
 800374c:	10210000 	.word	0x10210000
 8003750:	10120000 	.word	0x10120000
 8003754:	10110000 	.word	0x10110000
 8003758:	40021000 	.word	0x40021000
 800375c:	40010000 	.word	0x40010000
 8003760:	40010800 	.word	0x40010800
 8003764:	40010c00 	.word	0x40010c00
 8003768:	40011000 	.word	0x40011000
 800376c:	40011400 	.word	0x40011400
 8003770:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003774:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <HAL_GPIO_Init+0x304>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	43db      	mvns	r3, r3
 800377c:	4909      	ldr	r1, [pc, #36]	@ (80037a4 <HAL_GPIO_Init+0x304>)
 800377e:	4013      	ands	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	3301      	adds	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	f47f ae8e 	bne.w	80034b4 <HAL_GPIO_Init+0x14>
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	372c      	adds	r7, #44	@ 0x2c
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40010400 	.word	0x40010400

080037a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e001      	b.n	80037ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	807b      	strh	r3, [r7, #2]
 80037e2:	4613      	mov	r3, r2
 80037e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e6:	787b      	ldrb	r3, [r7, #1]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ec:	887a      	ldrh	r2, [r7, #2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037f2:	e003      	b.n	80037fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	041a      	lsls	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	611a      	str	r2, [r3, #16]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003818:	887a      	ldrh	r2, [r7, #2]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4013      	ands	r3, r2
 800381e:	041a      	lsls	r2, r3, #16
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	43d9      	mvns	r1, r3
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	400b      	ands	r3, r1
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	611a      	str	r2, [r3, #16]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e272      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8087 	beq.w	8003966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003858:	4b92      	ldr	r3, [pc, #584]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b04      	cmp	r3, #4
 8003862:	d00c      	beq.n	800387e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003864:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d112      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
 8003870:	4b8c      	ldr	r3, [pc, #560]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387c:	d10b      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387e:	4b89      	ldr	r3, [pc, #548]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06c      	beq.n	8003964 <HAL_RCC_OscConfig+0x12c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d168      	bne.n	8003964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e24c      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x76>
 80038a0:	4b80      	ldr	r3, [pc, #512]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7f      	ldr	r2, [pc, #508]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e02e      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x98>
 80038b6:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7a      	ldr	r2, [pc, #488]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b78      	ldr	r3, [pc, #480]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a77      	ldr	r2, [pc, #476]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0xbc>
 80038da:	4b72      	ldr	r3, [pc, #456]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a71      	ldr	r2, [pc, #452]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038f4:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b68      	ldr	r3, [pc, #416]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a67      	ldr	r2, [pc, #412]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800390a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7ff fbd6 	bl	80030c4 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7ff fbd2 	bl	80030c4 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	@ 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e200      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0xe4>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7ff fbc2 	bl	80030c4 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7ff fbbe 	bl	80030c4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	@ 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e1ec      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x10c>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d063      	beq.n	8003a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003972:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800397e:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b08      	cmp	r3, #8
 8003988:	d11c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x18c>
 800398a:	4b46      	ldr	r3, [pc, #280]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d116      	bne.n	80039c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	4b43      	ldr	r3, [pc, #268]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_RCC_OscConfig+0x176>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e1c0      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b3d      	ldr	r3, [pc, #244]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4939      	ldr	r1, [pc, #228]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	e03a      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039cc:	4b36      	ldr	r3, [pc, #216]	@ (8003aa8 <HAL_RCC_OscConfig+0x270>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7ff fb77 	bl	80030c4 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039da:	f7ff fb73 	bl	80030c4 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e1a1      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ec:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4927      	ldr	r1, [pc, #156]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]
 8003a0c:	e015      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0e:	4b26      	ldr	r3, [pc, #152]	@ (8003aa8 <HAL_RCC_OscConfig+0x270>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7ff fb56 	bl	80030c4 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1c:	f7ff fb52 	bl	80030c4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e180      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d03a      	beq.n	8003abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d019      	beq.n	8003a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4e:	4b17      	ldr	r3, [pc, #92]	@ (8003aac <HAL_RCC_OscConfig+0x274>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a54:	f7ff fb36 	bl	80030c4 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7ff fb32 	bl	80030c4 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e160      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f000 face 	bl	800401c <RCC_Delay>
 8003a80:	e01c      	b.n	8003abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a82:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <HAL_RCC_OscConfig+0x274>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a88:	f7ff fb1c 	bl	80030c4 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8e:	e00f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a90:	f7ff fb18 	bl	80030c4 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d908      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e146      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	42420000 	.word	0x42420000
 8003aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	4b92      	ldr	r3, [pc, #584]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e9      	bne.n	8003a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a6 	beq.w	8003c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ace:	4b8b      	ldr	r3, [pc, #556]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	4b88      	ldr	r3, [pc, #544]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a87      	ldr	r2, [pc, #540]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]
 8003ae6:	4b85      	ldr	r3, [pc, #532]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	4b82      	ldr	r3, [pc, #520]	@ (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d118      	bne.n	8003b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b02:	4b7f      	ldr	r3, [pc, #508]	@ (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7e      	ldr	r2, [pc, #504]	@ (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0e:	f7ff fad9 	bl	80030c4 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b16:	f7ff fad5 	bl	80030c4 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	@ 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e103      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	4b75      	ldr	r3, [pc, #468]	@ (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x312>
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6213      	str	r3, [r2, #32]
 8003b48:	e02d      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x334>
 8003b52:	4b6a      	ldr	r3, [pc, #424]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4a69      	ldr	r2, [pc, #420]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6213      	str	r3, [r2, #32]
 8003b5e:	4b67      	ldr	r3, [pc, #412]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a66      	ldr	r2, [pc, #408]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	e01c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_OscConfig+0x356>
 8003b74:	4b61      	ldr	r3, [pc, #388]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4a60      	ldr	r2, [pc, #384]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	6213      	str	r3, [r2, #32]
 8003b80:	4b5e      	ldr	r3, [pc, #376]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a5d      	ldr	r2, [pc, #372]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	e00b      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a5a      	ldr	r2, [pc, #360]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	4b58      	ldr	r3, [pc, #352]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a57      	ldr	r2, [pc, #348]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7ff fa89 	bl	80030c4 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7ff fa85 	bl	80030c4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0b1      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ee      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x37e>
 8003bd8:	e014      	b.n	8003c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7ff fa73 	bl	80030c4 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7ff fa6f 	bl	80030c4 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e09b      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf8:	4b40      	ldr	r3, [pc, #256]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ee      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8087 	beq.w	8003d2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c20:	4b36      	ldr	r3, [pc, #216]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d061      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d146      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b33      	ldr	r3, [pc, #204]	@ (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7ff fa43 	bl	80030c4 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7ff fa3f 	bl	80030c4 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e06d      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c54:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c68:	d108      	bne.n	8003c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4921      	ldr	r1, [pc, #132]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a19      	ldr	r1, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	491b      	ldr	r1, [pc, #108]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c94:	4b1b      	ldr	r3, [pc, #108]	@ (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9a:	f7ff fa13 	bl	80030c4 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca2:	f7ff fa0f 	bl	80030c4 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e03d      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb4:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x46a>
 8003cc0:	e035      	b.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b10      	ldr	r3, [pc, #64]	@ (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7ff f9fc 	bl	80030c4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7ff f9f8 	bl	80030c4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e026      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x498>
 8003cee:	e01e      	b.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e019      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
 8003d04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d08:	4b0b      	ldr	r3, [pc, #44]	@ (8003d38 <HAL_RCC_OscConfig+0x500>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000

08003d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0d0      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	4b6a      	ldr	r3, [pc, #424]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d910      	bls.n	8003d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b67      	ldr	r3, [pc, #412]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4965      	ldr	r1, [pc, #404]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b63      	ldr	r3, [pc, #396]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0b8      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d98:	4b59      	ldr	r3, [pc, #356]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a58      	ldr	r2, [pc, #352]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003da2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db0:	4b53      	ldr	r3, [pc, #332]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a52      	ldr	r2, [pc, #328]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b50      	ldr	r3, [pc, #320]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	494d      	ldr	r1, [pc, #308]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d040      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	4b47      	ldr	r3, [pc, #284]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d115      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e07f      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d107      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfa:	4b41      	ldr	r3, [pc, #260]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e073      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e06b      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1a:	4b39      	ldr	r3, [pc, #228]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f023 0203 	bic.w	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4936      	ldr	r1, [pc, #216]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e2c:	f7ff f94a 	bl	80030c4 <HAL_GetTick>
 8003e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e34:	f7ff f946 	bl	80030c4 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e053      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 020c 	and.w	r2, r3, #12
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d1eb      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b27      	ldr	r3, [pc, #156]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d210      	bcs.n	8003e8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 0207 	bic.w	r2, r3, #7
 8003e72:	4922      	ldr	r1, [pc, #136]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e032      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e98:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4916      	ldr	r1, [pc, #88]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eb6:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	490e      	ldr	r1, [pc, #56]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eca:	f000 f821 	bl	8003f10 <HAL_RCC_GetSysClockFreq>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	490a      	ldr	r1, [pc, #40]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	5ccb      	ldrb	r3, [r1, r3]
 8003ede:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee2:	4a09      	ldr	r2, [pc, #36]	@ (8003f08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ee6:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff f8a8 	bl	8003040 <HAL_InitTick>

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40022000 	.word	0x40022000
 8003f00:	40021000 	.word	0x40021000
 8003f04:	08005db8 	.word	0x08005db8
 8003f08:	2000000c 	.word	0x2000000c
 8003f0c:	20000010 	.word	0x20000010

08003f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d002      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x30>
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x36>
 8003f3e:	e027      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f40:	4b19      	ldr	r3, [pc, #100]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f42:	613b      	str	r3, [r7, #16]
      break;
 8003f44:	e027      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	0c9b      	lsrs	r3, r3, #18
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	4a17      	ldr	r2, [pc, #92]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f5e:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	0c5b      	lsrs	r3, r3, #17
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	4a11      	ldr	r2, [pc, #68]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f72:	fb03 f202 	mul.w	r2, r3, r2
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e004      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	613b      	str	r3, [r7, #16]
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f90:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f92:	613b      	str	r3, [r7, #16]
      break;
 8003f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f96:	693b      	ldr	r3, [r7, #16]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	08005dd0 	.word	0x08005dd0
 8003fb0:	08005de0 	.word	0x08005de0
 8003fb4:	003d0900 	.word	0x003d0900

08003fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b02      	ldr	r3, [pc, #8]	@ (8003fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	2000000c 	.word	0x2000000c

08003fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd0:	f7ff fff2 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	@ (8003ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	08005dc8 	.word	0x08005dc8

08003ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff8:	f7ff ffde 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	0adb      	lsrs	r3, r3, #11
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4903      	ldr	r1, [pc, #12]	@ (8004018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	08005dc8 	.word	0x08005dc8

0800401c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004024:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <RCC_Delay+0x34>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a0a      	ldr	r2, [pc, #40]	@ (8004054 <RCC_Delay+0x38>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0a5b      	lsrs	r3, r3, #9
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004038:	bf00      	nop
  }
  while (Delay --);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	60fa      	str	r2, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f9      	bne.n	8004038 <RCC_Delay+0x1c>
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	2000000c 	.word	0x2000000c
 8004054:	10624dd3 	.word	0x10624dd3

08004058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e041      	b.n	80040ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe fe26 	bl	8002cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f000 fd5e 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e03a      	b.n	8004186 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a18      	ldr	r2, [pc, #96]	@ (8004190 <HAL_TIM_Base_Start_IT+0x98>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_TIM_Base_Start_IT+0x58>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413a:	d009      	beq.n	8004150 <HAL_TIM_Base_Start_IT+0x58>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a14      	ldr	r2, [pc, #80]	@ (8004194 <HAL_TIM_Base_Start_IT+0x9c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_TIM_Base_Start_IT+0x58>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a13      	ldr	r2, [pc, #76]	@ (8004198 <HAL_TIM_Base_Start_IT+0xa0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d111      	bne.n	8004174 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b06      	cmp	r3, #6
 8004160:	d010      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004172:	e007      	b.n	8004184 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800

0800419c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e041      	b.n	8004232 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f839 	bl	800423a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 fcbc 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_TIM_PWM_Start+0x24>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e022      	b.n	80042b6 <HAL_TIM_PWM_Start+0x6a>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b04      	cmp	r3, #4
 8004274:	d109      	bne.n	800428a <HAL_TIM_PWM_Start+0x3e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	bf14      	ite	ne
 8004282:	2301      	movne	r3, #1
 8004284:	2300      	moveq	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	e015      	b.n	80042b6 <HAL_TIM_PWM_Start+0x6a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d109      	bne.n	80042a4 <HAL_TIM_PWM_Start+0x58>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e008      	b.n	80042b6 <HAL_TIM_PWM_Start+0x6a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e05e      	b.n	800437c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0x82>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042cc:	e013      	b.n	80042f6 <HAL_TIM_PWM_Start+0xaa>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0x92>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042dc:	e00b      	b.n	80042f6 <HAL_TIM_PWM_Start+0xaa>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0xa2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ec:	e003      	b.n	80042f6 <HAL_TIM_PWM_Start+0xaa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2201      	movs	r2, #1
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 feb6 	bl	8005070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <HAL_TIM_PWM_Start+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d107      	bne.n	800431e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a18      	ldr	r2, [pc, #96]	@ (8004384 <HAL_TIM_PWM_Start+0x138>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIM_PWM_Start+0xfa>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004330:	d009      	beq.n	8004346 <HAL_TIM_PWM_Start+0xfa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a14      	ldr	r2, [pc, #80]	@ (8004388 <HAL_TIM_PWM_Start+0x13c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIM_PWM_Start+0xfa>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a12      	ldr	r2, [pc, #72]	@ (800438c <HAL_TIM_PWM_Start+0x140>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d111      	bne.n	800436a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b06      	cmp	r3, #6
 8004356:	d010      	beq.n	800437a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	e007      	b.n	800437a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800

08004390 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e093      	b.n	80044cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fe fcdd 	bl	8002d78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043d4:	f023 0307 	bic.w	r3, r3, #7
 80043d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f000 fbb7 	bl	8004b58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	4313      	orrs	r3, r2
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004430:	f023 030c 	bic.w	r3, r3, #12
 8004434:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800443c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	4313      	orrs	r3, r2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	011a      	lsls	r2, r3, #4
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	031b      	lsls	r3, r3, #12
 8004460:	4313      	orrs	r3, r2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800446e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4313      	orrs	r3, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d110      	bne.n	8004526 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800450a:	7b7b      	ldrb	r3, [r7, #13]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e089      	b.n	8004628 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004524:	e031      	b.n	800458a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d110      	bne.n	800454e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800452c:	7bbb      	ldrb	r3, [r7, #14]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d102      	bne.n	8004538 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004532:	7b3b      	ldrb	r3, [r7, #12]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e075      	b.n	8004628 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800454c:	e01d      	b.n	800458a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d108      	bne.n	8004566 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004554:	7bbb      	ldrb	r3, [r7, #14]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d105      	bne.n	8004566 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800455a:	7b7b      	ldrb	r3, [r7, #13]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d102      	bne.n	8004566 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004560:	7b3b      	ldrb	r3, [r7, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e05e      	b.n	8004628 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d010      	beq.n	80045b8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004596:	e01f      	b.n	80045d8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fd65 	bl	8005070 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0202 	orr.w	r2, r2, #2
 80045b4:	60da      	str	r2, [r3, #12]
      break;
 80045b6:	e02e      	b.n	8004616 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	2104      	movs	r1, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fd55 	bl	8005070 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0204 	orr.w	r2, r2, #4
 80045d4:	60da      	str	r2, [r3, #12]
      break;
 80045d6:	e01e      	b.n	8004616 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fd45 	bl	8005070 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	2104      	movs	r1, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fd3e 	bl	8005070 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0202 	orr.w	r2, r2, #2
 8004602:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0204 	orr.w	r2, r2, #4
 8004612:	60da      	str	r2, [r3, #12]
      break;
 8004614:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0202 	mvn.w	r2, #2
 8004664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fd52 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 8004680:	e005      	b.n	800468e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa4d 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fa53 	bl	8004b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d020      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0204 	mvn.w	r2, #4
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc fd2c 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa27 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fa2d 	bl	8004b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d020      	beq.n	800472c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0208 	mvn.w	r2, #8
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fd06 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa01 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fa07 	bl	8004b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	d020      	beq.n	8004778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01b      	beq.n	8004778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0210 	mvn.w	r2, #16
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2208      	movs	r2, #8
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fc fce0 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9db 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f9e1 	bl	8004b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0201 	mvn.w	r2, #1
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fc3a 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fd34 	bl	8005228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00c      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f9b1 	bl	8004b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0220 	mvn.w	r2, #32
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fd07 	bl	8005216 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800482a:	2302      	movs	r3, #2
 800482c:	e0ae      	b.n	800498c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b0c      	cmp	r3, #12
 800483a:	f200 809f 	bhi.w	800497c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800483e:	a201      	add	r2, pc, #4	@ (adr r2, 8004844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004879 	.word	0x08004879
 8004848:	0800497d 	.word	0x0800497d
 800484c:	0800497d 	.word	0x0800497d
 8004850:	0800497d 	.word	0x0800497d
 8004854:	080048b9 	.word	0x080048b9
 8004858:	0800497d 	.word	0x0800497d
 800485c:	0800497d 	.word	0x0800497d
 8004860:	0800497d 	.word	0x0800497d
 8004864:	080048fb 	.word	0x080048fb
 8004868:	0800497d 	.word	0x0800497d
 800486c:	0800497d 	.word	0x0800497d
 8004870:	0800497d 	.word	0x0800497d
 8004874:	0800493b 	.word	0x0800493b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f9d8 	bl	8004c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0208 	orr.w	r2, r2, #8
 8004892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0204 	bic.w	r2, r2, #4
 80048a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6999      	ldr	r1, [r3, #24]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	619a      	str	r2, [r3, #24]
      break;
 80048b6:	e064      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fa1e 	bl	8004d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6999      	ldr	r1, [r3, #24]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	021a      	lsls	r2, r3, #8
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	619a      	str	r2, [r3, #24]
      break;
 80048f8:	e043      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fa67 	bl	8004dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0208 	orr.w	r2, r2, #8
 8004914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0204 	bic.w	r2, r2, #4
 8004924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69d9      	ldr	r1, [r3, #28]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	61da      	str	r2, [r3, #28]
      break;
 8004938:	e023      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fab1 	bl	8004ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69d9      	ldr	r1, [r3, #28]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	61da      	str	r2, [r3, #28]
      break;
 800497a:	e002      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]
      break;
 8004980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIM_ConfigClockSource+0x1c>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e0b4      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x186>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e8:	d03e      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0xd4>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ee:	f200 8087 	bhi.w	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f6:	f000 8086 	beq.w	8004b06 <HAL_TIM_ConfigClockSource+0x172>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fe:	d87f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b70      	cmp	r3, #112	@ 0x70
 8004a02:	d01a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0xa6>
 8004a04:	2b70      	cmp	r3, #112	@ 0x70
 8004a06:	d87b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b60      	cmp	r3, #96	@ 0x60
 8004a0a:	d050      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x11a>
 8004a0c:	2b60      	cmp	r3, #96	@ 0x60
 8004a0e:	d877      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b50      	cmp	r3, #80	@ 0x50
 8004a12:	d03c      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0xfa>
 8004a14:	2b50      	cmp	r3, #80	@ 0x50
 8004a16:	d873      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a18:	2b40      	cmp	r3, #64	@ 0x40
 8004a1a:	d058      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x13a>
 8004a1c:	2b40      	cmp	r3, #64	@ 0x40
 8004a1e:	d86f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a20:	2b30      	cmp	r3, #48	@ 0x30
 8004a22:	d064      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a24:	2b30      	cmp	r3, #48	@ 0x30
 8004a26:	d86b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d060      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d867      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d05a      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a38:	e062      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a4a:	f000 faf2 	bl	8005032 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	609a      	str	r2, [r3, #8]
      break;
 8004a66:	e04f      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a78:	f000 fadb 	bl	8005032 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a8a:	609a      	str	r2, [r3, #8]
      break;
 8004a8c:	e03c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fa52 	bl	8004f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2150      	movs	r1, #80	@ 0x50
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 faa9 	bl	8004ffe <TIM_ITRx_SetConfig>
      break;
 8004aac:	e02c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fa70 	bl	8004fa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2160      	movs	r1, #96	@ 0x60
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fa99 	bl	8004ffe <TIM_ITRx_SetConfig>
      break;
 8004acc:	e01c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fa32 	bl	8004f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2140      	movs	r1, #64	@ 0x40
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fa89 	bl	8004ffe <TIM_ITRx_SetConfig>
      break;
 8004aec:	e00c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 fa80 	bl	8004ffe <TIM_ITRx_SetConfig>
      break;
 8004afe:	e003      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      break;
 8004b04:	e000      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c28 <TIM_Base_SetConfig+0xd0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <TIM_Base_SetConfig+0x30>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b76:	d007      	beq.n	8004b88 <TIM_Base_SetConfig+0x30>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c2c <TIM_Base_SetConfig+0xd4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_Base_SetConfig+0x30>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a2b      	ldr	r2, [pc, #172]	@ (8004c30 <TIM_Base_SetConfig+0xd8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <TIM_Base_SetConfig+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00b      	beq.n	8004bba <TIM_Base_SetConfig+0x62>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba8:	d007      	beq.n	8004bba <TIM_Base_SetConfig+0x62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1f      	ldr	r2, [pc, #124]	@ (8004c2c <TIM_Base_SetConfig+0xd4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_Base_SetConfig+0x62>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c30 <TIM_Base_SetConfig+0xd8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d108      	bne.n	8004bcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8004c28 <TIM_Base_SetConfig+0xd0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d103      	bne.n	8004c00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f023 0201 	bic.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	611a      	str	r2, [r3, #16]
  }
}
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800

08004c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f023 0201 	bic.w	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f023 0302 	bic.w	r3, r3, #2
 8004c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cfc <TIM_OC1_SetConfig+0xc8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10c      	bne.n	8004caa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0308 	bic.w	r3, r3, #8
 8004c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 0304 	bic.w	r3, r3, #4
 8004ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a13      	ldr	r2, [pc, #76]	@ (8004cfc <TIM_OC1_SetConfig+0xc8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d111      	bne.n	8004cd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	621a      	str	r2, [r3, #32]
}
 8004cf0:	bf00      	nop
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40012c00 	.word	0x40012c00

08004d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f023 0210 	bic.w	r2, r3, #16
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 0320 	bic.w	r3, r3, #32
 8004d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <TIM_OC2_SetConfig+0xd0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10d      	bne.n	8004d7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <TIM_OC2_SetConfig+0xd0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d113      	bne.n	8004dac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00

08004dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea4 <TIM_OC3_SetConfig+0xd0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10d      	bne.n	8004e4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a14      	ldr	r2, [pc, #80]	@ (8004ea4 <TIM_OC3_SetConfig+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d113      	bne.n	8004e7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40012c00 	.word	0x40012c00

08004ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	031b      	lsls	r3, r3, #12
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a0f      	ldr	r2, [pc, #60]	@ (8004f40 <TIM_OC4_SetConfig+0x98>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d109      	bne.n	8004f1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	40012c00 	.word	0x40012c00

08004f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0201 	bic.w	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 030a 	bic.w	r3, r3, #10
 8004f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0210 	bic.w	r2, r3, #16
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	031b      	lsls	r3, r3, #12
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	621a      	str	r2, [r3, #32]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	f043 0307 	orr.w	r3, r3, #7
 8005020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	609a      	str	r2, [r3, #8]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005032:	b480      	push	{r7}
 8005034:	b087      	sub	sp, #28
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800504c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	021a      	lsls	r2, r3, #8
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	431a      	orrs	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4313      	orrs	r3, r2
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	609a      	str	r2, [r3, #8]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2201      	movs	r2, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1a      	ldr	r2, [r3, #32]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	43db      	mvns	r3, r3
 8005092:	401a      	ands	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	431a      	orrs	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e046      	b.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a16      	ldr	r2, [pc, #88]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00e      	beq.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511c:	d009      	beq.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a12      	ldr	r2, [pc, #72]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d004      	beq.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a10      	ldr	r2, [pc, #64]	@ (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10c      	bne.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	4313      	orrs	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800

08005174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800518c:	2302      	movs	r3, #2
 800518e:	e03d      	b.n	800520c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr

08005216 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e042      	b.n	80052d2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fd fe03 	bl	8002e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2224      	movs	r2, #36	@ 0x24
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800527c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fcd4 	bl	8005c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005292:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	4613      	mov	r3, r2
 80052e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d112      	bne.n	800531a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Receive_IT+0x26>
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e00b      	b.n	800531c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	461a      	mov	r2, r3
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fab6 	bl	8005882 <UART_Start_Receive_IT>
 8005316:	4603      	mov	r3, r0
 8005318:	e000      	b.n	800531c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b0ba      	sub	sp, #232	@ 0xe8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800534a:	2300      	movs	r3, #0
 800534c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005350:	2300      	movs	r3, #0
 8005352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <HAL_UART_IRQHandler+0x66>
 8005376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fb93 	bl	8005aae <UART_Receive_IT>
      return;
 8005388:	e25b      	b.n	8005842 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800538a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80de 	beq.w	8005550 <HAL_UART_IRQHandler+0x22c>
 8005394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80d1 	beq.w	8005550 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_UART_IRQHandler+0xae>
 80053ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_UART_IRQHandler+0xd2>
 80053de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ee:	f043 0202 	orr.w	r2, r3, #2
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <HAL_UART_IRQHandler+0xf6>
 8005402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d011      	beq.n	800544a <HAL_UART_IRQHandler+0x126>
 8005426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d105      	bne.n	800543e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	f043 0208 	orr.w	r2, r3, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 81f2 	beq.w	8005838 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_UART_IRQHandler+0x14e>
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fb1e 	bl	8005aae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <HAL_UART_IRQHandler+0x17a>
 8005496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d04f      	beq.n	800553e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa28 	bl	80058f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d041      	beq.n	8005536 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3314      	adds	r3, #20
 80054da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1d9      	bne.n	80054b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d013      	beq.n	800552e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550a:	4a7e      	ldr	r2, [pc, #504]	@ (8005704 <HAL_UART_IRQHandler+0x3e0>)
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd ff4c 	bl	80033b0 <HAL_DMA_Abort_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d016      	beq.n	800554c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005528:	4610      	mov	r0, r2
 800552a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552c:	e00e      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f993 	bl	800585a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	e00a      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f98f 	bl	800585a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	e006      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f98b 	bl	800585a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800554a:	e175      	b.n	8005838 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	bf00      	nop
    return;
 800554e:	e173      	b.n	8005838 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	2b01      	cmp	r3, #1
 8005556:	f040 814f 	bne.w	80057f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8148 	beq.w	80057f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8141 	beq.w	80057f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80b6 	beq.w	8005708 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8145 	beq.w	800583c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f080 813e 	bcs.w	800583c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	f000 8088 	beq.w	80056e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005600:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800560c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1d9      	bne.n	80055d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3314      	adds	r3, #20
 8005626:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005630:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3314      	adds	r3, #20
 8005640:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005644:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005648:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800564c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e1      	bne.n	8005620 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800566c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800566e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005680:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005682:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005686:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800568e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e3      	bne.n	800565c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056b4:	f023 0310 	bic.w	r3, r3, #16
 80056b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e3      	bne.n	80056a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fd fe2b 	bl	800333a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8b6 	bl	800586c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005700:	e09c      	b.n	800583c <HAL_UART_IRQHandler+0x518>
 8005702:	bf00      	nop
 8005704:	080059b9 	.word	0x080059b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005710:	b29b      	uxth	r3, r3
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 808e 	beq.w	8005840 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8089 	beq.w	8005840 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800573e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005744:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005752:	647a      	str	r2, [r7, #68]	@ 0x44
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005758:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e3      	bne.n	800572e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3314      	adds	r3, #20
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	623b      	str	r3, [r7, #32]
   return(result);
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3314      	adds	r3, #20
 8005786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800578a:	633a      	str	r2, [r7, #48]	@ 0x30
 800578c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e3      	bne.n	8005766 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0310 	bic.w	r3, r3, #16
 80057c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80057d0:	61fa      	str	r2, [r7, #28]
 80057d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	69b9      	ldr	r1, [r7, #24]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	617b      	str	r3, [r7, #20]
   return(result);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e3      	bne.n	80057ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f83b 	bl	800586c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057f6:	e023      	b.n	8005840 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <HAL_UART_IRQHandler+0x4f4>
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8e5 	bl	80059e0 <UART_Transmit_IT>
    return;
 8005816:	e014      	b.n	8005842 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00e      	beq.n	8005842 <HAL_UART_IRQHandler+0x51e>
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f924 	bl	8005a7e <UART_EndTransmit_IT>
    return;
 8005836:	e004      	b.n	8005842 <HAL_UART_IRQHandler+0x51e>
    return;
 8005838:	bf00      	nop
 800583a:	e002      	b.n	8005842 <HAL_UART_IRQHandler+0x51e>
      return;
 800583c:	bf00      	nop
 800583e:	e000      	b.n	8005842 <HAL_UART_IRQHandler+0x51e>
      return;
 8005840:	bf00      	nop
  }
}
 8005842:	37e8      	adds	r7, #232	@ 0xe8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr

0800585a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr

08005882 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	4613      	mov	r3, r2
 800588e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	88fa      	ldrh	r2, [r7, #6]
 800589a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	88fa      	ldrh	r2, [r7, #6]
 80058a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2222      	movs	r2, #34	@ 0x22
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058c6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0220 	orr.w	r2, r2, #32
 80058e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b095      	sub	sp, #84	@ 0x54
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	330c      	adds	r3, #12
 800591a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800591c:	643a      	str	r2, [r7, #64]	@ 0x40
 800591e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e5      	bne.n	80058fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3314      	adds	r3, #20
 800594e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005968:	2b01      	cmp	r3, #1
 800596a:	d119      	bne.n	80059a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	60bb      	str	r3, [r7, #8]
   return(result);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f023 0310 	bic.w	r3, r3, #16
 8005982:	647b      	str	r3, [r7, #68]	@ 0x44
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800598c:	61ba      	str	r2, [r7, #24]
 800598e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6979      	ldr	r1, [r7, #20]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	613b      	str	r3, [r7, #16]
   return(result);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e5      	bne.n	800596c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059ae:	bf00      	nop
 80059b0:	3754      	adds	r7, #84	@ 0x54
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff ff41 	bl	800585a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b21      	cmp	r3, #33	@ 0x21
 80059f2:	d13e      	bne.n	8005a72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fc:	d114      	bne.n	8005a28 <UART_Transmit_IT+0x48>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d110      	bne.n	8005a28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	1c9a      	adds	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	621a      	str	r2, [r3, #32]
 8005a26:	e008      	b.n	8005a3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	1c59      	adds	r1, r3, #1
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6211      	str	r1, [r2, #32]
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4619      	mov	r1, r3
 8005a48:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fed2 	bl	8005848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b08c      	sub	sp, #48	@ 0x30
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b22      	cmp	r3, #34	@ 0x22
 8005ac0:	f040 80ae 	bne.w	8005c20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005acc:	d117      	bne.n	8005afe <UART_Receive_IT+0x50>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d113      	bne.n	8005afe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005afc:	e026      	b.n	8005b4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b10:	d007      	beq.n	8005b22 <UART_Receive_IT+0x74>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <UART_Receive_IT+0x82>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	e008      	b.n	8005b42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d15d      	bne.n	8005c1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0220 	bic.w	r2, r2, #32
 8005b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d135      	bne.n	8005c12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	613b      	str	r3, [r7, #16]
   return(result);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f023 0310 	bic.w	r3, r3, #16
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bcc:	623a      	str	r2, [r7, #32]
 8005bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	69f9      	ldr	r1, [r7, #28]
 8005bd2:	6a3a      	ldr	r2, [r7, #32]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d10a      	bne.n	8005c04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fe2e 	bl	800586c <HAL_UARTEx_RxEventCallback>
 8005c10:	e002      	b.n	8005c18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fc f8b8 	bl	8001d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e002      	b.n	8005c22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3730      	adds	r7, #48	@ 0x30
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c66:	f023 030c 	bic.w	r3, r3, #12
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d40 <UART_SetConfig+0x114>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d103      	bne.n	8005c9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fe f9ae 	bl	8003ff4 <HAL_RCC_GetPCLK2Freq>
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	e002      	b.n	8005ca2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c9c:	f7fe f996 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 8005ca0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009a      	lsls	r2, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	4a22      	ldr	r2, [pc, #136]	@ (8005d44 <UART_SetConfig+0x118>)
 8005cba:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	0119      	lsls	r1, r3, #4
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009a      	lsls	r2, r3, #2
 8005ccc:	441a      	add	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d44 <UART_SetConfig+0x118>)
 8005cda:	fba3 0302 	umull	r0, r3, r3, r2
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	2064      	movs	r0, #100	@ 0x64
 8005ce2:	fb00 f303 	mul.w	r3, r0, r3
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	3332      	adds	r3, #50	@ 0x32
 8005cec:	4a15      	ldr	r2, [pc, #84]	@ (8005d44 <UART_SetConfig+0x118>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cf8:	4419      	add	r1, r3
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009a      	lsls	r2, r3, #2
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d10:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <UART_SetConfig+0x118>)
 8005d12:	fba3 0302 	umull	r0, r3, r3, r2
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	2064      	movs	r0, #100	@ 0x64
 8005d1a:	fb00 f303 	mul.w	r3, r0, r3
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	3332      	adds	r3, #50	@ 0x32
 8005d24:	4a07      	ldr	r2, [pc, #28]	@ (8005d44 <UART_SetConfig+0x118>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	f003 020f 	and.w	r2, r3, #15
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	440a      	add	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d38:	bf00      	nop
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40013800 	.word	0x40013800
 8005d44:	51eb851f 	.word	0x51eb851f

08005d48 <memset>:
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4402      	add	r2, r0
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d100      	bne.n	8005d52 <memset+0xa>
 8005d50:	4770      	bx	lr
 8005d52:	f803 1b01 	strb.w	r1, [r3], #1
 8005d56:	e7f9      	b.n	8005d4c <memset+0x4>

08005d58 <__libc_init_array>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	4d0c      	ldr	r5, [pc, #48]	@ (8005d90 <__libc_init_array+0x38>)
 8005d5e:	4c0d      	ldr	r4, [pc, #52]	@ (8005d94 <__libc_init_array+0x3c>)
 8005d60:	1b64      	subs	r4, r4, r5
 8005d62:	10a4      	asrs	r4, r4, #2
 8005d64:	42a6      	cmp	r6, r4
 8005d66:	d109      	bne.n	8005d7c <__libc_init_array+0x24>
 8005d68:	f000 f81a 	bl	8005da0 <_init>
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	4d0a      	ldr	r5, [pc, #40]	@ (8005d98 <__libc_init_array+0x40>)
 8005d70:	4c0a      	ldr	r4, [pc, #40]	@ (8005d9c <__libc_init_array+0x44>)
 8005d72:	1b64      	subs	r4, r4, r5
 8005d74:	10a4      	asrs	r4, r4, #2
 8005d76:	42a6      	cmp	r6, r4
 8005d78:	d105      	bne.n	8005d86 <__libc_init_array+0x2e>
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d80:	4798      	blx	r3
 8005d82:	3601      	adds	r6, #1
 8005d84:	e7ee      	b.n	8005d64 <__libc_init_array+0xc>
 8005d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8a:	4798      	blx	r3
 8005d8c:	3601      	adds	r6, #1
 8005d8e:	e7f2      	b.n	8005d76 <__libc_init_array+0x1e>
 8005d90:	08005de4 	.word	0x08005de4
 8005d94:	08005de4 	.word	0x08005de4
 8005d98:	08005de4 	.word	0x08005de4
 8005d9c:	08005de8 	.word	0x08005de8

08005da0 <_init>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr

08005dac <_fini>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr
