
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080052d8  080052d8  000062d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080052e8  080052e8  000062e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080052ec  080052ec  000062ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  080052f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000220  24000020  08005310  00007020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000240  08005310  00007240  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011dfa  00000000  00000000  0000704e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000021dc  00000000  00000000  00018e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001028  00000000  00000000  0001b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ca2  00000000  00000000  0001c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000272d  00000000  00000000  0001ccf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001415e  00000000  00000000  0001f41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00145233  00000000  00000000  0003357d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001787b0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044e8  00000000  00000000  001787f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  0017ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000020 	.word	0x24000020
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080052c0 	.word	0x080052c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000024 	.word	0x24000024
 800030c:	080052c0 	.word	0x080052c0

08000310 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//----------------------Ngat Sensor----------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

	//------------
	if (htim->Instance==htim2.Instance)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4ba1      	ldr	r3, [pc, #644]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	f040 80bb 	bne.w	800049c <HAL_TIM_PeriodElapsedCallback+0x18c>
	{
		if (HOME == 1){
 8000326:	4ba0      	ldr	r3, [pc, #640]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	f040 80b6 	bne.w	800049c <HAL_TIM_PeriodElapsedCallback+0x18c>
			g+=1;
 8000330:	4b9e      	ldr	r3, [pc, #632]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000332:	edd3 7a00 	vldr	s15, [r3]
 8000336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800033a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800033e:	4b9b      	ldr	r3, [pc, #620]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000340:	edc3 7a00 	vstr	s15, [r3]
//				target_angle_1 = 0;
//				target_angle_2 = 90;
//				target_angle_3 = -90;
//			}

			if (g > 24000){
 8000344:	4b99      	ldr	r3, [pc, #612]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000346:	edd3 7a00 	vldr	s15, [r3]
 800034a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80005b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800034e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000356:	dd02      	ble.n	800035e <HAL_TIM_PeriodElapsedCallback+0x4e>
				g = 14000;
 8000358:	4b94      	ldr	r3, [pc, #592]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800035a:	4a96      	ldr	r2, [pc, #600]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800035c:	601a      	str	r2, [r3, #0]
			}

			if ( g >22000){
 800035e:	4b93      	ldr	r3, [pc, #588]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000360:	edd3 7a00 	vldr	s15, [r3]
 8000364:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80005b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8000368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800036c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000370:	dd0a      	ble.n	8000388 <HAL_TIM_PeriodElapsedCallback+0x78>
				target_angle_1 = 0;
 8000372:	4b92      	ldr	r3, [pc, #584]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000374:	f04f 0200 	mov.w	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
				target_angle_2 = 43.2;
 800037a:	4b91      	ldr	r3, [pc, #580]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800037c:	4a91      	ldr	r2, [pc, #580]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800037e:	601a      	str	r2, [r3, #0]
				target_angle_3 = -118;
 8000380:	4b91      	ldr	r3, [pc, #580]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000382:	4a92      	ldr	r2, [pc, #584]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	e031      	b.n	80003ec <HAL_TIM_PeriodElapsedCallback+0xdc>
			}else if (g > 19000){
 8000388:	4b88      	ldr	r3, [pc, #544]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800038a:	edd3 7a00 	vldr	s15, [r3]
 800038e:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80005d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8000392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800039a:	dd09      	ble.n	80003b0 <HAL_TIM_PeriodElapsedCallback+0xa0>
				target_angle_1 = -45;
 800039c:	4b87      	ldr	r3, [pc, #540]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800039e:	4a8d      	ldr	r2, [pc, #564]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80003a0:	601a      	str	r2, [r3, #0]
				target_angle_2 = 50;
 80003a2:	4b87      	ldr	r3, [pc, #540]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80003a4:	4a8c      	ldr	r2, [pc, #560]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80003a6:	601a      	str	r2, [r3, #0]
				target_angle_3 = -100;
 80003a8:	4b87      	ldr	r3, [pc, #540]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80003aa:	4a8c      	ldr	r2, [pc, #560]	@ (80005dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	e01d      	b.n	80003ec <HAL_TIM_PeriodElapsedCallback+0xdc>

			}else if (g > 14000){
 80003b0:	4b7e      	ldr	r3, [pc, #504]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80003b2:	edd3 7a00 	vldr	s15, [r3]
 80003b6:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80005e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 80003ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c2:	dd0a      	ble.n	80003da <HAL_TIM_PeriodElapsedCallback+0xca>
				target_angle_1 = 0;
 80003c4:	4b7d      	ldr	r3, [pc, #500]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80003c6:	f04f 0200 	mov.w	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
				target_angle_2 = 43.2;
 80003cc:	4b7c      	ldr	r3, [pc, #496]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80003ce:	4a7d      	ldr	r2, [pc, #500]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80003d0:	601a      	str	r2, [r3, #0]
				target_angle_3 = -118;
 80003d2:	4b7d      	ldr	r3, [pc, #500]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80003d4:	4a7d      	ldr	r2, [pc, #500]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	e008      	b.n	80003ec <HAL_TIM_PeriodElapsedCallback+0xdc>

			}
			else{
				target_angle_1 = 45;
 80003da:	4b78      	ldr	r3, [pc, #480]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80003dc:	4a81      	ldr	r2, [pc, #516]	@ (80005e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80003de:	601a      	str	r2, [r3, #0]
				target_angle_2 = 50;
 80003e0:	4b77      	ldr	r3, [pc, #476]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80003e2:	4a7d      	ldr	r2, [pc, #500]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80003e4:	601a      	str	r2, [r3, #0]
				target_angle_3 = -100;
 80003e6:	4b78      	ldr	r3, [pc, #480]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80003e8:	4a7c      	ldr	r2, [pc, #496]	@ (80005dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80003ea:	601a      	str	r2, [r3, #0]
			}

			if ((target_angle_1 != target_angle_1_temp)||(target_angle_2 != target_angle_2_temp)||(target_angle_3 != target_angle_3_temp)){
 80003ec:	4b73      	ldr	r3, [pc, #460]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80003ee:	ed93 7a00 	vldr	s14, [r3]
 80003f2:	4b7d      	ldr	r3, [pc, #500]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80003f4:	edd3 7a00 	vldr	s15, [r3]
 80003f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80003fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000400:	d115      	bne.n	800042e <HAL_TIM_PeriodElapsedCallback+0x11e>
 8000402:	4b6f      	ldr	r3, [pc, #444]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000404:	ed93 7a00 	vldr	s14, [r3]
 8000408:	4b78      	ldr	r3, [pc, #480]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800040a:	edd3 7a00 	vldr	s15, [r3]
 800040e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000416:	d10a      	bne.n	800042e <HAL_TIM_PeriodElapsedCallback+0x11e>
 8000418:	4b6b      	ldr	r3, [pc, #428]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800041a:	ed93 7a00 	vldr	s14, [r3]
 800041e:	4b74      	ldr	r3, [pc, #464]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000420:	edd3 7a00 	vldr	s15, [r3]
 8000424:	eeb4 7a67 	vcmp.f32	s14, s15
 8000428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800042c:	d025      	beq.n	800047a <HAL_TIM_PeriodElapsedCallback+0x16a>

				target_angle_1_temp = target_angle_1;
 800042e:	4b63      	ldr	r3, [pc, #396]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a6d      	ldr	r2, [pc, #436]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000434:	6013      	str	r3, [r2, #0]
				target_angle_2_temp = target_angle_2;
 8000436:	4b62      	ldr	r3, [pc, #392]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a6c      	ldr	r2, [pc, #432]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800043c:	6013      	str	r3, [r2, #0]
				target_angle_3_temp = target_angle_3;
 800043e:	4b62      	ldr	r3, [pc, #392]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a6b      	ldr	r2, [pc, #428]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000444:	6013      	str	r3, [r2, #0]
				countPulseL1 = 0;
 8000446:	4b6b      	ldr	r3, [pc, #428]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
				countPulseL2 = 0;
 800044c:	4b6a      	ldr	r3, [pc, #424]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
				countPulseL3 = 0;
 8000452:	4b6a      	ldr	r3, [pc, #424]	@ (80005fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]

				angleControl(target_angle_1,target_angle_2,target_angle_3);
 8000458:	4b58      	ldr	r3, [pc, #352]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800045a:	edd3 7a00 	vldr	s15, [r3]
 800045e:	4b58      	ldr	r3, [pc, #352]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000460:	ed93 7a00 	vldr	s14, [r3]
 8000464:	4b58      	ldr	r3, [pc, #352]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000466:	edd3 6a00 	vldr	s13, [r3]
 800046a:	eeb0 1a66 	vmov.f32	s2, s13
 800046e:	eef0 0a47 	vmov.f32	s1, s14
 8000472:	eeb0 0a67 	vmov.f32	s0, s15
 8000476:	f000 f9b7 	bl	80007e8 <angleControl>

			}
			//angle3 = - angle2+ angle3;
			angleControl(target_angle_1,target_angle_2,target_angle_3);
 800047a:	4b50      	ldr	r3, [pc, #320]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800047c:	edd3 7a00 	vldr	s15, [r3]
 8000480:	4b4f      	ldr	r3, [pc, #316]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000482:	ed93 7a00 	vldr	s14, [r3]
 8000486:	4b50      	ldr	r3, [pc, #320]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000488:	edd3 6a00 	vldr	s13, [r3]
 800048c:	eeb0 1a66 	vmov.f32	s2, s13
 8000490:	eef0 0a47 	vmov.f32	s1, s14
 8000494:	eeb0 0a67 	vmov.f32	s0, s15
 8000498:	f000 f9a6 	bl	80007e8 <angleControl>

		}
	}

	if (htim->Instance == TIM4)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a57      	ldr	r2, [pc, #348]	@ (8000600 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d17a      	bne.n	800059c <HAL_TIM_PeriodElapsedCallback+0x28c>
	{  // Ensure the correct timer is being checked
		// Handle Motor 1
		if (countPulseL1 > 0) {
 80004a6:	4b53      	ldr	r3, [pc, #332]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	dd1f      	ble.n	80004ee <HAL_TIM_PeriodElapsedCallback+0x1de>
			softCounter1++;  // Increment soft counter for motor 1
 80004ae:	4b55      	ldr	r3, [pc, #340]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	4a53      	ldr	r2, [pc, #332]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80004b6:	6013      	str	r3, [r2, #0]
			if (softCounter1 >= periodMotor1) {  // If soft counter reaches the desired period
 80004b8:	4b52      	ldr	r3, [pc, #328]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b52      	ldr	r3, [pc, #328]	@ (8000608 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	db19      	blt.n	80004f8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
				HAL_GPIO_TogglePin(GPIOB, motorL1_Pin);  // Toggle Motor 1 pin (generate pulse)
 80004c4:	2101      	movs	r1, #1
 80004c6:	4851      	ldr	r0, [pc, #324]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80004c8:	f001 fd8d 	bl	8001fe6 <HAL_GPIO_TogglePin>
				softCounter1 = 0;  // Reset the soft counter for motor 1
 80004cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
				countPulseL1--;    // Decrement the pulse count
 80004d2:	4b48      	ldr	r3, [pc, #288]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a46      	ldr	r2, [pc, #280]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80004da:	6013      	str	r3, [r2, #0]
				//e = 360/(44800*2);
				update_current_angle(1,1.0,dir1);
 80004dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 f8a2 	bl	8000630 <update_current_angle>
 80004ec:	e004      	b.n	80004f8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL1_Pin, GPIO_PIN_RESET);  // Stop Motor 1
 80004ee:	2200      	movs	r2, #0
 80004f0:	2101      	movs	r1, #1
 80004f2:	4846      	ldr	r0, [pc, #280]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80004f4:	f001 fd5e 	bl	8001fb4 <HAL_GPIO_WritePin>
		}

		// Handle Motor 2
		if (countPulseL2 > 0) {
 80004f8:	4b3f      	ldr	r3, [pc, #252]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	dd1f      	ble.n	8000540 <HAL_TIM_PeriodElapsedCallback+0x230>
			softCounter2++;  // Increment soft counter for motor 2
 8000500:	4b44      	ldr	r3, [pc, #272]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	4a43      	ldr	r2, [pc, #268]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000508:	6013      	str	r3, [r2, #0]
			if (softCounter2 >= periodMotor2) {  // If soft counter reaches the desired period
 800050a:	4b42      	ldr	r3, [pc, #264]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b42      	ldr	r3, [pc, #264]	@ (8000618 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	429a      	cmp	r2, r3
 8000514:	db19      	blt.n	800054a <HAL_TIM_PeriodElapsedCallback+0x23a>
				HAL_GPIO_TogglePin(GPIOB, motorL2_Pin);  // Toggle Motor 2 pin (generate pulse)
 8000516:	2102      	movs	r1, #2
 8000518:	483c      	ldr	r0, [pc, #240]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800051a:	f001 fd64 	bl	8001fe6 <HAL_GPIO_TogglePin>
				softCounter2 = 0;  // Reset the soft counter for motor 2
 800051e:	4b3d      	ldr	r3, [pc, #244]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
				countPulseL2--;    // Decrement the pulse count
 8000524:	4b34      	ldr	r3, [pc, #208]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	4a33      	ldr	r2, [pc, #204]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800052c:	6013      	str	r3, [r2, #0]
				update_current_angle(2,1.0,dir2);
 800052e:	4b3b      	ldr	r3, [pc, #236]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000538:	2002      	movs	r0, #2
 800053a:	f000 f879 	bl	8000630 <update_current_angle>
 800053e:	e004      	b.n	800054a <HAL_TIM_PeriodElapsedCallback+0x23a>

			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL2_Pin, GPIO_PIN_RESET);  // Stop Motor 2
 8000540:	2200      	movs	r2, #0
 8000542:	2102      	movs	r1, #2
 8000544:	4831      	ldr	r0, [pc, #196]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000546:	f001 fd35 	bl	8001fb4 <HAL_GPIO_WritePin>
		}

		// Handle Motor 3
		if (countPulseL3 > 0) {
 800054a:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	dd1f      	ble.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x282>
			softCounter3++;  // Increment soft counter for motor 3
 8000552:	4b33      	ldr	r3, [pc, #204]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	4a31      	ldr	r2, [pc, #196]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800055a:	6013      	str	r3, [r2, #0]
			if (softCounter3 >= periodMotor3) {  // If soft counter reaches the desired period
 800055c:	4b30      	ldr	r3, [pc, #192]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	db19      	blt.n	800059c <HAL_TIM_PeriodElapsedCallback+0x28c>
				HAL_GPIO_TogglePin(GPIOB, motorL3_Pin);  // Toggle Motor 3 pin (generate pulse)
 8000568:	2104      	movs	r1, #4
 800056a:	4828      	ldr	r0, [pc, #160]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800056c:	f001 fd3b 	bl	8001fe6 <HAL_GPIO_TogglePin>
				softCounter3 = 0;  // Reset the soft counter for motor 3
 8000570:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
				countPulseL3--;    // Decrement the pulse count
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3b01      	subs	r3, #1
 800057c:	4a1f      	ldr	r2, [pc, #124]	@ (80005fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800057e:	6013      	str	r3, [r2, #0]
				update_current_angle(3,1.0, dir3);
 8000580:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f850 	bl	8000630 <update_current_angle>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
		}
	}
}
 8000590:	e004      	b.n	800059c <HAL_TIM_PeriodElapsedCallback+0x28c>
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
 8000592:	2200      	movs	r2, #0
 8000594:	2104      	movs	r1, #4
 8000596:	481d      	ldr	r0, [pc, #116]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000598:	f001 fd0c 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	24000138 	.word	0x24000138
 80005a8:	240001e0 	.word	0x240001e0
 80005ac:	24000204 	.word	0x24000204
 80005b0:	46bb8000 	.word	0x46bb8000
 80005b4:	465ac000 	.word	0x465ac000
 80005b8:	46abe000 	.word	0x46abe000
 80005bc:	24000230 	.word	0x24000230
 80005c0:	24000234 	.word	0x24000234
 80005c4:	422ccccd 	.word	0x422ccccd
 80005c8:	24000238 	.word	0x24000238
 80005cc:	c2ec0000 	.word	0xc2ec0000
 80005d0:	46947000 	.word	0x46947000
 80005d4:	c2340000 	.word	0xc2340000
 80005d8:	42480000 	.word	0x42480000
 80005dc:	c2c80000 	.word	0xc2c80000
 80005e0:	465ac000 	.word	0x465ac000
 80005e4:	42340000 	.word	0x42340000
 80005e8:	24000004 	.word	0x24000004
 80005ec:	24000008 	.word	0x24000008
 80005f0:	2400000c 	.word	0x2400000c
 80005f4:	240001e4 	.word	0x240001e4
 80005f8:	240001e8 	.word	0x240001e8
 80005fc:	240001ec 	.word	0x240001ec
 8000600:	40000800 	.word	0x40000800
 8000604:	24000218 	.word	0x24000218
 8000608:	24000224 	.word	0x24000224
 800060c:	58020400 	.word	0x58020400
 8000610:	2400020c 	.word	0x2400020c
 8000614:	2400021c 	.word	0x2400021c
 8000618:	24000228 	.word	0x24000228
 800061c:	24000210 	.word	0x24000210
 8000620:	24000220 	.word	0x24000220
 8000624:	2400022c 	.word	0x2400022c
 8000628:	24000000 	.word	0x24000000
 800062c:	00000000 	.word	0x00000000

08000630 <update_current_angle>:
    // Read raw angle from angleL3 sensor
    AS5600_GetRawAngle(angleL3, &angle3);

}

void update_current_angle(int motor_index, float steps, int direction) {
 8000630:	b480      	push	{r7}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	ed87 0a02 	vstr	s0, [r7, #8]
 800063c:	6079      	str	r1, [r7, #4]
    float angle_change = steps * 360.0 / (43840.0 * 2.0); // Calculate the change in angle
 800063e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000642:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000646:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80006f0 <update_current_angle+0xc0>
 800064a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800064e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 80006f8 <update_current_angle+0xc8>
 8000652:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000656:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800065a:	edc7 7a05 	vstr	s15, [r7, #20]

    // If direction is negative, reverse the angle change
    if (direction < 0) {
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	da05      	bge.n	8000670 <update_current_angle+0x40>
        angle_change = -angle_change;
 8000664:	edd7 7a05 	vldr	s15, [r7, #20]
 8000668:	eef1 7a67 	vneg.f32	s15, s15
 800066c:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    switch (motor_index){
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d029      	beq.n	80006ca <update_current_angle+0x9a>
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b03      	cmp	r3, #3
 800067a:	dc31      	bgt.n	80006e0 <update_current_angle+0xb0>
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d003      	beq.n	800068a <update_current_angle+0x5a>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d00b      	beq.n	80006a0 <update_current_angle+0x70>
            break;
        case 3:
            angle3 += angle_change; // Update current angle for motor 3
            break;
    }
}
 8000688:	e02a      	b.n	80006e0 <update_current_angle+0xb0>
            angle1 += angle_change; // Update current angle for motor 1
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <update_current_angle+0xd0>)
 800068c:	ed93 7a00 	vldr	s14, [r3]
 8000690:	edd7 7a05 	vldr	s15, [r7, #20]
 8000694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <update_current_angle+0xd0>)
 800069a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800069e:	e01f      	b.n	80006e0 <update_current_angle+0xb0>
            angle2 += angle_change; // Update current angle for motor 2
 80006a0:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <update_current_angle+0xd4>)
 80006a2:	ed93 7a00 	vldr	s14, [r3]
 80006a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80006aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <update_current_angle+0xd4>)
 80006b0:	edc3 7a00 	vstr	s15, [r3]
            angle3 -= angle_change;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <update_current_angle+0xd8>)
 80006b6:	ed93 7a00 	vldr	s14, [r3]
 80006ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80006be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <update_current_angle+0xd8>)
 80006c4:	edc3 7a00 	vstr	s15, [r3]
            break;
 80006c8:	e00a      	b.n	80006e0 <update_current_angle+0xb0>
            angle3 += angle_change; // Update current angle for motor 3
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <update_current_angle+0xd8>)
 80006cc:	ed93 7a00 	vldr	s14, [r3]
 80006d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80006d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <update_current_angle+0xd8>)
 80006da:	edc3 7a00 	vstr	s15, [r3]
            break;
 80006de:	bf00      	nop
}
 80006e0:	bf00      	nop
 80006e2:	371c      	adds	r7, #28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	f3af 8000 	nop.w
 80006f0:	00000000 	.word	0x00000000
 80006f4:	40768000 	.word	0x40768000
 80006f8:	00000000 	.word	0x00000000
 80006fc:	40f56800 	.word	0x40f56800
 8000700:	240001d0 	.word	0x240001d0
 8000704:	240001d4 	.word	0x240001d4
 8000708:	240001d8 	.word	0x240001d8
 800070c:	00000000 	.word	0x00000000

08000710 <calculate_steps>:

int calculate_steps(float current_angle, float target_angle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	ed87 0a01 	vstr	s0, [r7, #4]
 800071a:	edc7 0a00 	vstr	s1, [r7]
    // Calculate the angular difference

    float angular_difference ;
    int temp;

    temp = target_angle - current_angle;
 800071e:	ed97 7a00 	vldr	s14, [r7]
 8000722:	edd7 7a01 	vldr	s15, [r7, #4]
 8000726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800072a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800072e:	ee17 3a90 	vmov	r3, s15
 8000732:	613b      	str	r3, [r7, #16]
	if (abs(temp) == 0){
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d103      	bne.n	8000742 <calculate_steps+0x32>
		angular_difference = 0;
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e007      	b.n	8000752 <calculate_steps+0x42>
	}else{
		angular_difference = target_angle - current_angle;
 8000742:	ed97 7a00 	vldr	s14, [r7]
 8000746:	edd7 7a01 	vldr	s15, [r7, #4]
 800074a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800074e:	edc7 7a05 	vstr	s15, [r7, #20]
	}


    // Convert angular difference to steps
	int steps_needed = (int)round((angular_difference / 360.0) * 43840.0 * 2);
 8000752:	edd7 7a05 	vldr	s15, [r7, #20]
 8000756:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800075a:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 8000798 <calculate_steps+0x88>
 800075e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000762:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80007a0 <calculate_steps+0x90>
 8000766:	ee27 7b06 	vmul.f64	d7, d7, d6
 800076a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800076e:	eeb0 0b47 	vmov.f64	d0, d7
 8000772:	f004 fd61 	bl	8005238 <round>
 8000776:	eeb0 7b40 	vmov.f64	d7, d0
 800077a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800077e:	ee17 3a90 	vmov	r3, s15
 8000782:	60fb      	str	r3, [r7, #12]
	d = (int)round((0.98 / 360.0) * 44800 * 2);
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <calculate_steps+0x98>)
 8000786:	4a09      	ldr	r2, [pc, #36]	@ (80007ac <calculate_steps+0x9c>)
 8000788:	601a      	str	r2, [r3, #0]
    // Return the absolute number of steps (stepper motors can't move negative steps)
    return steps_needed;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	40768000 	.word	0x40768000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	40e56800 	.word	0x40e56800
 80007a8:	240001fc 	.word	0x240001fc
 80007ac:	43740000 	.word	0x43740000

080007b0 <maxSteps>:

int maxSteps(int steps_motor_1, int steps_motor_2, int steps_motor_3)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
    int max_value = steps_motor_1;  // Assume motor 1 has the maximum steps
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	617b      	str	r3, [r7, #20]

    if (steps_motor_2 > max_value) {
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dd01      	ble.n	80007cc <maxSteps+0x1c>
        max_value = steps_motor_2;  // Update if motor 2 has more steps
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	617b      	str	r3, [r7, #20]
    }

    if (steps_motor_3 > max_value) {
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	dd01      	ble.n	80007d8 <maxSteps+0x28>
        max_value = steps_motor_3;  // Update if motor 3 has more steps
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	617b      	str	r3, [r7, #20]
    }

    return max_value;  // Return the largest number of steps
 80007d8:	697b      	ldr	r3, [r7, #20]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <angleControl>:


void angleControl(float target_angle_1, float target_angle_2, float target_angle_3) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80007f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80007f6:	ed87 1a01 	vstr	s2, [r7, #4]
	// Read the current angles from the sensors
	//Read_Angles();

	// Calculate the required steps for each motor based on current and target angles
	int steps_motor_1 = calculate_steps(angle1, (target_angle_1));
 80007fa:	4b92      	ldr	r3, [pc, #584]	@ (8000a44 <angleControl+0x25c>)
 80007fc:	edd3 7a00 	vldr	s15, [r3]
 8000800:	edd7 0a03 	vldr	s1, [r7, #12]
 8000804:	eeb0 0a67 	vmov.f32	s0, s15
 8000808:	f7ff ff82 	bl	8000710 <calculate_steps>
 800080c:	61b8      	str	r0, [r7, #24]
	int steps_motor_2 = calculate_steps(angle2, (target_angle_2));
 800080e:	4b8e      	ldr	r3, [pc, #568]	@ (8000a48 <angleControl+0x260>)
 8000810:	edd3 7a00 	vldr	s15, [r3]
 8000814:	edd7 0a02 	vldr	s1, [r7, #8]
 8000818:	eeb0 0a67 	vmov.f32	s0, s15
 800081c:	f7ff ff78 	bl	8000710 <calculate_steps>
 8000820:	6178      	str	r0, [r7, #20]
	//f = steps_motor_2;
	int steps_motor_3 = calculate_steps(angle3, target_angle_3);
 8000822:	4b8a      	ldr	r3, [pc, #552]	@ (8000a4c <angleControl+0x264>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	edd7 0a01 	vldr	s1, [r7, #4]
 800082c:	eeb0 0a67 	vmov.f32	s0, s15
 8000830:	f7ff ff6e 	bl	8000710 <calculate_steps>
 8000834:	61f8      	str	r0, [r7, #28]

	// Set the pulse counts for each motor
	countPulseL1 = abs(steps_motor_1);
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	2b00      	cmp	r3, #0
 800083a:	bfb8      	it	lt
 800083c:	425b      	neglt	r3, r3
 800083e:	4a84      	ldr	r2, [pc, #528]	@ (8000a50 <angleControl+0x268>)
 8000840:	6013      	str	r3, [r2, #0]
	countPulseL2 = abs(steps_motor_2) ;
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	2b00      	cmp	r3, #0
 8000846:	bfb8      	it	lt
 8000848:	425b      	neglt	r3, r3
 800084a:	4a82      	ldr	r2, [pc, #520]	@ (8000a54 <angleControl+0x26c>)
 800084c:	6013      	str	r3, [r2, #0]
	error = angle3 - target_angle_3;
 800084e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a4c <angleControl+0x264>)
 8000850:	ed93 7a00 	vldr	s14, [r3]
 8000854:	edd7 7a01 	vldr	s15, [r7, #4]
 8000858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800085c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a58 <angleControl+0x270>)
 800085e:	edc3 7a00 	vstr	s15, [r3]




	// Determine the direction for each motor and set control pins accordingly
	if (target_angle_1 > angle1) {
 8000862:	4b78      	ldr	r3, [pc, #480]	@ (8000a44 <angleControl+0x25c>)
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	ed97 7a03 	vldr	s14, [r7, #12]
 800086c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000874:	dd09      	ble.n	800088a <angleControl+0xa2>
		// Move motor 1 clockwise
		dir1 = 1;
 8000876:	4b79      	ldr	r3, [pc, #484]	@ (8000a5c <angleControl+0x274>)
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000882:	4877      	ldr	r0, [pc, #476]	@ (8000a60 <angleControl+0x278>)
 8000884:	f001 fb96 	bl	8001fb4 <HAL_GPIO_WritePin>
 8000888:	e009      	b.n	800089e <angleControl+0xb6>

	} else {
		dir1 = -1;
 800088a:	4b74      	ldr	r3, [pc, #464]	@ (8000a5c <angleControl+0x274>)
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	601a      	str	r2, [r3, #0]
		// Move motor 1 counterclockwise
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000898:	4871      	ldr	r0, [pc, #452]	@ (8000a60 <angleControl+0x278>)
 800089a:	f001 fb8b 	bl	8001fb4 <HAL_GPIO_WritePin>
	}

	if (target_angle_2 >= angle2) {
 800089e:	4b6a      	ldr	r3, [pc, #424]	@ (8000a48 <angleControl+0x260>)
 80008a0:	edd3 7a00 	vldr	s15, [r3]
 80008a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80008a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b0:	db09      	blt.n	80008c6 <angleControl+0xde>
		// Move motor 2 clockwise
		dir2 = 1;
 80008b2:	4b6c      	ldr	r3, [pc, #432]	@ (8000a64 <angleControl+0x27c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008be:	4868      	ldr	r0, [pc, #416]	@ (8000a60 <angleControl+0x278>)
 80008c0:	f001 fb78 	bl	8001fb4 <HAL_GPIO_WritePin>
 80008c4:	e009      	b.n	80008da <angleControl+0xf2>
	} else {
		// Move motor 2 counterclockwise
		dir2 = -1;
 80008c6:	4b67      	ldr	r3, [pc, #412]	@ (8000a64 <angleControl+0x27c>)
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295
 80008cc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d4:	4862      	ldr	r0, [pc, #392]	@ (8000a60 <angleControl+0x278>)
 80008d6:	f001 fb6d 	bl	8001fb4 <HAL_GPIO_WritePin>
	}

	if (steps_motor_2 == 0){
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d103      	bne.n	80008e8 <angleControl+0x100>
		dir2 =1;
 80008e0:	4b60      	ldr	r3, [pc, #384]	@ (8000a64 <angleControl+0x27c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	e006      	b.n	80008f6 <angleControl+0x10e>
	}else if (steps_motor_1 == 0){
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d103      	bne.n	80008f6 <angleControl+0x10e>
		dir3 = -1;
 80008ee:	4b5e      	ldr	r3, [pc, #376]	@ (8000a68 <angleControl+0x280>)
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	601a      	str	r2, [r3, #0]
	}

	if (target_angle_3 > angle3 && dir2 == 1) {
 80008f6:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <angleControl+0x264>)
 80008f8:	edd3 7a00 	vldr	s15, [r3]
 80008fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000908:	dd22      	ble.n	8000950 <angleControl+0x168>
 800090a:	4b56      	ldr	r3, [pc, #344]	@ (8000a64 <angleControl+0x27c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d11e      	bne.n	8000950 <angleControl+0x168>
		// Motor 3 moves clockwise when Motor 2 is moving clockwise
		h = 1;
 8000912:	4b56      	ldr	r3, [pc, #344]	@ (8000a6c <angleControl+0x284>)
 8000914:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000918:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 800091a:	4b53      	ldr	r3, [pc, #332]	@ (8000a68 <angleControl+0x280>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092a:	4b51      	ldr	r3, [pc, #324]	@ (8000a70 <angleControl+0x288>)
 800092c:	edc3 7a00 	vstr	s15, [r3]
		countPulseL3 = abs(steps_motor_3);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	2b00      	cmp	r3, #0
 8000934:	bfb8      	it	lt
 8000936:	425b      	neglt	r3, r3
 8000938:	4a4e      	ldr	r2, [pc, #312]	@ (8000a74 <angleControl+0x28c>)
 800093a:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 800093c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a74 <angleControl+0x28c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000948:	4845      	ldr	r0, [pc, #276]	@ (8000a60 <angleControl+0x278>)
 800094a:	f001 fb33 	bl	8001fb4 <HAL_GPIO_WritePin>
 800094e:	e0a9      	b.n	8000aa4 <angleControl+0x2bc>
	}
	else if (target_angle_3 < angle3 && dir2 == 1) {
 8000950:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <angleControl+0x264>)
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	ed97 7a01 	vldr	s14, [r7, #4]
 800095a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000962:	d51b      	bpl.n	800099c <angleControl+0x1b4>
 8000964:	4b3f      	ldr	r3, [pc, #252]	@ (8000a64 <angleControl+0x27c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d117      	bne.n	800099c <angleControl+0x1b4>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 2;
 800096c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a6c <angleControl+0x284>)
 800096e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000972:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 8000974:	4b3c      	ldr	r3, [pc, #240]	@ (8000a68 <angleControl+0x280>)
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	2b00      	cmp	r3, #0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	4a3b      	ldr	r2, [pc, #236]	@ (8000a74 <angleControl+0x28c>)
 8000986:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8000988:	4b3a      	ldr	r3, [pc, #232]	@ (8000a74 <angleControl+0x28c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000994:	4832      	ldr	r0, [pc, #200]	@ (8000a60 <angleControl+0x278>)
 8000996:	f001 fb0d 	bl	8001fb4 <HAL_GPIO_WritePin>
 800099a:	e083      	b.n	8000aa4 <angleControl+0x2bc>
	} else if (target_angle_3 < angle3 && dir2 == -1) {
 800099c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <angleControl+0x264>)
 800099e:	edd3 7a00 	vldr	s15, [r3]
 80009a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80009a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ae:	d51b      	bpl.n	80009e8 <angleControl+0x200>
 80009b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <angleControl+0x27c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d116      	bne.n	80009e8 <angleControl+0x200>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 3;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <angleControl+0x284>)
 80009bc:	4a2e      	ldr	r2, [pc, #184]	@ (8000a78 <angleControl+0x290>)
 80009be:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 80009c0:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <angleControl+0x280>)
 80009c2:	f04f 32ff 	mov.w	r2, #4294967295
 80009c6:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bfb8      	it	lt
 80009ce:	425b      	neglt	r3, r3
 80009d0:	4a28      	ldr	r2, [pc, #160]	@ (8000a74 <angleControl+0x28c>)
 80009d2:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <angleControl+0x28c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009e0:	481f      	ldr	r0, [pc, #124]	@ (8000a60 <angleControl+0x278>)
 80009e2:	f001 fae7 	bl	8001fb4 <HAL_GPIO_WritePin>
 80009e6:	e05d      	b.n	8000aa4 <angleControl+0x2bc>
	}
	else if (target_angle_3 > angle3 && dir2 == -1) {
 80009e8:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <angleControl+0x264>)
 80009ea:	edd3 7a00 	vldr	s15, [r3]
 80009ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80009f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fa:	dd3f      	ble.n	8000a7c <angleControl+0x294>
 80009fc:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <angleControl+0x27c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d13a      	bne.n	8000a7c <angleControl+0x294>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 4;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <angleControl+0x284>)
 8000a08:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8000a0c:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <angleControl+0x280>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <angleControl+0x288>)
 8000a20:	edc3 7a00 	vstr	s15, [r3]
		countPulseL3 = abs( steps_motor_3);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bfb8      	it	lt
 8000a2a:	425b      	neglt	r3, r3
 8000a2c:	4a11      	ldr	r2, [pc, #68]	@ (8000a74 <angleControl+0x28c>)
 8000a2e:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <angleControl+0x28c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a3c:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <angleControl+0x278>)
 8000a3e:	f001 fab9 	bl	8001fb4 <HAL_GPIO_WritePin>
 8000a42:	e02f      	b.n	8000aa4 <angleControl+0x2bc>
 8000a44:	240001d0 	.word	0x240001d0
 8000a48:	240001d4 	.word	0x240001d4
 8000a4c:	240001d8 	.word	0x240001d8
 8000a50:	240001e4 	.word	0x240001e4
 8000a54:	240001e8 	.word	0x240001e8
 8000a58:	240001dc 	.word	0x240001dc
 8000a5c:	2400020c 	.word	0x2400020c
 8000a60:	58021400 	.word	0x58021400
 8000a64:	24000210 	.word	0x24000210
 8000a68:	24000000 	.word	0x24000000
 8000a6c:	24000208 	.word	0x24000208
 8000a70:	24000200 	.word	0x24000200
 8000a74:	240001ec 	.word	0x240001ec
 8000a78:	40400000 	.word	0x40400000
	} else {
		// Maintain angle3 in sync with angle2’s direction
		h =5;
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b68 <angleControl+0x380>)
 8000a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8000b6c <angleControl+0x384>)
 8000a80:	601a      	str	r2, [r3, #0]
		dir3 = dir2;
 8000a82:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <angleControl+0x388>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a3b      	ldr	r2, [pc, #236]	@ (8000b74 <angleControl+0x38c>)
 8000a88:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, dir3 == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b74 <angleControl+0x38c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	bf14      	ite	ne
 8000a92:	2301      	movne	r3, #1
 8000a94:	2300      	moveq	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a9e:	4836      	ldr	r0, [pc, #216]	@ (8000b78 <angleControl+0x390>)
 8000aa0:	f001 fa88 	bl	8001fb4 <HAL_GPIO_WritePin>
	}


	// Determine the maximum steps needed to synchronize the motors
	int max_steps = maxSteps(abs(steps_motor_1), abs(steps_motor_2), abs(steps_motor_3));
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8000aaa:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000ab4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f7ff fe75 	bl	80007b0 <maxSteps>
 8000ac6:	6138      	str	r0, [r7, #16]

	// Calculate the pulse periods for each motor based on the maximum steps
	periodMotor1 = (int)(((float)max_steps / abs(steps_motor_1)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bfb8      	it	lt
 8000ad8:	425b      	neglt	r3, r3
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ae6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af2:	ee17 2a90 	vmov	r2, s15
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <angleControl+0x394>)
 8000af8:	601a      	str	r2, [r3, #0]
	periodMotor2 = (int)(((float)max_steps / abs(steps_motor_2)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	ee07 3a90 	vmov	s15, r3
 8000b00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bfb8      	it	lt
 8000b0a:	425b      	neglt	r3, r3
 8000b0c:	ee07 3a90 	vmov	s15, r3
 8000b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b18:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b24:	ee17 2a90 	vmov	r2, s15
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <angleControl+0x398>)
 8000b2a:	601a      	str	r2, [r3, #0]
	periodMotor3 = (int)(((float)max_steps / abs(steps_motor_3)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	ee07 3a90 	vmov	s15, r3
 8000b32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bfb8      	it	lt
 8000b3c:	425b      	neglt	r3, r3
 8000b3e:	ee07 3a90 	vmov	s15, r3
 8000b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b4a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b56:	ee17 2a90 	vmov	r2, s15
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <angleControl+0x39c>)
 8000b5c:	601a      	str	r2, [r3, #0]

	// Start the timer if it is not already running (ensure the timer has been initialized)
	//HAL_TIM_Base_Start_IT(&htim4);
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	24000208 	.word	0x24000208
 8000b6c:	40a00000 	.word	0x40a00000
 8000b70:	24000210 	.word	0x24000210
 8000b74:	24000000 	.word	0x24000000
 8000b78:	58021400 	.word	0x58021400
 8000b7c:	24000224 	.word	0x24000224
 8000b80:	24000228 	.word	0x24000228
 8000b84:	2400022c 	.word	0x2400022c

08000b88 <autoHomeMotors>:

void autoHomeMotors(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
    // Set initial movement direction for homing (assumes motors move towards the limit switches)
    HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET); // Move Motor 1 in the homing direction
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b94:	483f      	ldr	r0, [pc, #252]	@ (8000c94 <autoHomeMotors+0x10c>)
 8000b96:	f001 fa0d 	bl	8001fb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET); // Move Motor 2 in the homing direction
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba0:	483c      	ldr	r0, [pc, #240]	@ (8000c94 <autoHomeMotors+0x10c>)
 8000ba2:	f001 fa07 	bl	8001fb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET); // Move Motor 3 in the homing direction
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bac:	4839      	ldr	r0, [pc, #228]	@ (8000c94 <autoHomeMotors+0x10c>)
 8000bae:	f001 fa01 	bl	8001fb4 <HAL_GPIO_WritePin>


    // Start moving the motors
    countPulseL1 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000bb2:	4b39      	ldr	r3, [pc, #228]	@ (8000c98 <autoHomeMotors+0x110>)
 8000bb4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000bb8:	601a      	str	r2, [r3, #0]
    countPulseL2 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000bba:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <autoHomeMotors+0x114>)
 8000bbc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000bc0:	601a      	str	r2, [r3, #0]
    countPulseL3 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000bc2:	4b37      	ldr	r3, [pc, #220]	@ (8000ca0 <autoHomeMotors+0x118>)
 8000bc4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000bc8:	601a      	str	r2, [r3, #0]

    periodMotor1 = 4;
 8000bca:	4b36      	ldr	r3, [pc, #216]	@ (8000ca4 <autoHomeMotors+0x11c>)
 8000bcc:	2204      	movs	r2, #4
 8000bce:	601a      	str	r2, [r3, #0]
	periodMotor2 = 4;
 8000bd0:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <autoHomeMotors+0x120>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	601a      	str	r2, [r3, #0]
	periodMotor3 = 10;
 8000bd6:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <autoHomeMotors+0x124>)
 8000bd8:	220a      	movs	r2, #10
 8000bda:	601a      	str	r2, [r3, #0]
	int i = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]

    // Wait until all limit switches are triggered
    while (a == 0 || b == 0 || c == 0 || count <1) {
 8000be0:	e001      	b.n	8000be6 <autoHomeMotors+0x5e>
        checkLimitSwitches(); // Continuously check the limit switches
 8000be2:	f000 f88b 	bl	8000cfc <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0 || count <1) {
 8000be6:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <autoHomeMotors+0x128>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f9      	beq.n	8000be2 <autoHomeMotors+0x5a>
 8000bee:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <autoHomeMotors+0x12c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f5      	beq.n	8000be2 <autoHomeMotors+0x5a>
 8000bf6:	4b30      	ldr	r3, [pc, #192]	@ (8000cb8 <autoHomeMotors+0x130>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f1      	beq.n	8000be2 <autoHomeMotors+0x5a>
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <autoHomeMotors+0x134>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	dded      	ble.n	8000be2 <autoHomeMotors+0x5a>
    }
    while (count == 1){
 8000c06:	e029      	b.n	8000c5c <autoHomeMotors+0xd4>
    	HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c0e:	4821      	ldr	r0, [pc, #132]	@ (8000c94 <autoHomeMotors+0x10c>)
 8000c10:	f001 f9d0 	bl	8001fb4 <HAL_GPIO_WritePin>

    	if (countPulseL3 == 0 && i == 0){
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <autoHomeMotors+0x118>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d108      	bne.n	8000c2e <autoHomeMotors+0xa6>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d105      	bne.n	8000c2e <autoHomeMotors+0xa6>
    		countPulseL3 = 10060;
 8000c22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <autoHomeMotors+0x118>)
 8000c24:	f242 724c 	movw	r2, #10060	@ 0x274c
 8000c28:	601a      	str	r2, [r3, #0]
    		i = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
    	}

    	if (countPulseL3 == 0 && i == 1){
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <autoHomeMotors+0x118>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d112      	bne.n	8000c5c <autoHomeMotors+0xd4>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d10f      	bne.n	8000c5c <autoHomeMotors+0xd4>
			count = 2;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <autoHomeMotors+0x134>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	601a      	str	r2, [r3, #0]
			a = 0;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <autoHomeMotors+0x128>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
			b=0;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <autoHomeMotors+0x12c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
			c=0;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <autoHomeMotors+0x130>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
			countPulseL3 = 50000;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <autoHomeMotors+0x118>)
 8000c56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000c5a:	601a      	str	r2, [r3, #0]
    while (count == 1){
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <autoHomeMotors+0x134>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d0d1      	beq.n	8000c08 <autoHomeMotors+0x80>
		}
    }

    while (a == 0 || b == 0 || c == 0 ) {
 8000c64:	e001      	b.n	8000c6a <autoHomeMotors+0xe2>
		checkLimitSwitches(); // Continuously check the limit switches
 8000c66:	f000 f849 	bl	8000cfc <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0 ) {
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <autoHomeMotors+0x128>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <autoHomeMotors+0xde>
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <autoHomeMotors+0x12c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f5      	beq.n	8000c66 <autoHomeMotors+0xde>
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <autoHomeMotors+0x130>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f1      	beq.n	8000c66 <autoHomeMotors+0xde>
	}

    // Set the home angle once all limit switches are activated
    HOME = 1;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <autoHomeMotors+0x138>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
    setHomeAngles();
 8000c88:	f000 f81c 	bl	8000cc4 <setHomeAngles>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58021400 	.word	0x58021400
 8000c98:	240001e4 	.word	0x240001e4
 8000c9c:	240001e8 	.word	0x240001e8
 8000ca0:	240001ec 	.word	0x240001ec
 8000ca4:	24000224 	.word	0x24000224
 8000ca8:	24000228 	.word	0x24000228
 8000cac:	2400022c 	.word	0x2400022c
 8000cb0:	240001f0 	.word	0x240001f0
 8000cb4:	240001f4 	.word	0x240001f4
 8000cb8:	240001f8 	.word	0x240001f8
 8000cbc:	24000214 	.word	0x24000214
 8000cc0:	240001e0 	.word	0x240001e0

08000cc4 <setHomeAngles>:

void setHomeAngles(void) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
    // Set the current angle to zero or a specific home angle as needed
    angle1 = 0.0; // Home position for Motor 1
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <setHomeAngles+0x24>)
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
    angle2 = 90.0; // Home position for Motor 2
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <setHomeAngles+0x28>)
 8000cd2:	4a07      	ldr	r2, [pc, #28]	@ (8000cf0 <setHomeAngles+0x2c>)
 8000cd4:	601a      	str	r2, [r3, #0]
    angle3 = -160.0; // Home position for Motor 3
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <setHomeAngles+0x30>)
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <setHomeAngles+0x34>)
 8000cda:	601a      	str	r2, [r3, #0]

}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	240001d0 	.word	0x240001d0
 8000cec:	240001d4 	.word	0x240001d4
 8000cf0:	42b40000 	.word	0x42b40000
 8000cf4:	240001d8 	.word	0x240001d8
 8000cf8:	c3200000 	.word	0xc3200000

08000cfc <checkLimitSwitches>:

void checkLimitSwitches(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
    // Check and handle limit switch 1
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 8000d00:	2120      	movs	r1, #32
 8000d02:	482c      	ldr	r0, [pc, #176]	@ (8000db4 <checkLimitSwitches+0xb8>)
 8000d04:	f001 f93e 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d106      	bne.n	8000d1c <checkLimitSwitches+0x20>
        a = 1;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <checkLimitSwitches+0xbc>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
        countPulseL1 = 0;  // Stop Motor 1 if limit switch 1 is triggered
 8000d14:	4b29      	ldr	r3, [pc, #164]	@ (8000dbc <checkLimitSwitches+0xc0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e002      	b.n	8000d22 <checkLimitSwitches+0x26>
    } else {
        a = 0;
 8000d1c:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <checkLimitSwitches+0xbc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
    }

    // Check and handle limit switch 2, ensuring that it only works if limit switch 3 is not active
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 8000d22:	2110      	movs	r1, #16
 8000d24:	4823      	ldr	r0, [pc, #140]	@ (8000db4 <checkLimitSwitches+0xb8>)
 8000d26:	f001 f92d 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d106      	bne.n	8000d3e <checkLimitSwitches+0x42>
        b = 1;
 8000d30:	4b23      	ldr	r3, [pc, #140]	@ (8000dc0 <checkLimitSwitches+0xc4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
        countPulseL2 = 0;  // Stop Motor 2 if limit switch 2 is triggered
 8000d36:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <checkLimitSwitches+0xc8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e002      	b.n	8000d44 <checkLimitSwitches+0x48>
    } else {
        b = 0;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <checkLimitSwitches+0xc4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
    }


    if (a == 1 && b == 1 && c == 1 && count != 1){
 8000d44:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <checkLimitSwitches+0xbc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d10e      	bne.n	8000d6a <checkLimitSwitches+0x6e>
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <checkLimitSwitches+0xc4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10a      	bne.n	8000d6a <checkLimitSwitches+0x6e>
 8000d54:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <checkLimitSwitches+0xcc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d106      	bne.n	8000d6a <checkLimitSwitches+0x6e>
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <checkLimitSwitches+0xd0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d002      	beq.n	8000d6a <checkLimitSwitches+0x6e>
      count = 1;
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <checkLimitSwitches+0xd0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

	}

    // Check and handle limit switch 3
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8000d6a:	2140      	movs	r1, #64	@ 0x40
 8000d6c:	4811      	ldr	r0, [pc, #68]	@ (8000db4 <checkLimitSwitches+0xb8>)
 8000d6e:	f001 f909 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d111      	bne.n	8000d9c <checkLimitSwitches+0xa0>
        c = 1;
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <checkLimitSwitches+0xcc>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]

		periodMotor3 = periodMotor2;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <checkLimitSwitches+0xd4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <checkLimitSwitches+0xd8>)
 8000d84:	6013      	str	r3, [r2, #0]
		countPulseL3 = countPulseL2;  // Stop Motor 3 if limit switch 3 is triggered
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <checkLimitSwitches+0xc8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <checkLimitSwitches+0xdc>)
 8000d8c:	6013      	str	r3, [r2, #0]

        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);  // Stop motor direction for M3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d94:	4811      	ldr	r0, [pc, #68]	@ (8000ddc <checkLimitSwitches+0xe0>)
 8000d96:	f001 f90d 	bl	8001fb4 <HAL_GPIO_WritePin>
    } else {
        c = 0;
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
    }

}
 8000d9a:	e008      	b.n	8000dae <checkLimitSwitches+0xb2>
        c = 0;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <checkLimitSwitches+0xcc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <checkLimitSwitches+0xe0>)
 8000daa:	f001 f903 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58020000 	.word	0x58020000
 8000db8:	240001f0 	.word	0x240001f0
 8000dbc:	240001e4 	.word	0x240001e4
 8000dc0:	240001f4 	.word	0x240001f4
 8000dc4:	240001e8 	.word	0x240001e8
 8000dc8:	240001f8 	.word	0x240001f8
 8000dcc:	24000214 	.word	0x24000214
 8000dd0:	24000228 	.word	0x24000228
 8000dd4:	2400022c 	.word	0x2400022c
 8000dd8:	240001ec 	.word	0x240001ec
 8000ddc:	58021400 	.word	0x58021400

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     HAL_Init();
 8000de4:	f000 fd78 	bl	80018d8 <HAL_Init>
//	angleL3->i2cHandle= &hi2c3;
//	AS5600_Init(angleL3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f81a 	bl	8000e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f000 fa1c 	bl	8001228 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000df0:	f000 f97e 	bl	80010f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000df4:	f000 f8bc 	bl	8000f70 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000df8:	f000 f8fa 	bl	8000ff0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000dfc:	f000 f938 	bl	8001070 <MX_I2C3_Init>
  MX_TIM4_Init();
 8000e00:	f000 f9c4 	bl	800118c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e04:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <main+0x38>)
 8000e06:	f003 fd33 	bl	8004870 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e0a:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <main+0x3c>)
 8000e0c:	f003 fd30 	bl	8004870 <HAL_TIM_Base_Start_IT>



  autoHomeMotors();
 8000e10:	f7ff feba 	bl	8000b88 <autoHomeMotors>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <main+0x34>
 8000e18:	24000138 	.word	0x24000138
 8000e1c:	24000184 	.word	0x24000184

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0a4      	sub	sp, #144	@ 0x90
 8000e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e2a:	224c      	movs	r2, #76	@ 0x4c
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 f9d6 	bl	80051e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e38:	2220      	movs	r2, #32
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 f9cf 	bl	80051e0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f001 fa15 	bl	8002284 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b41      	ldr	r3, [pc, #260]	@ (8000f64 <SystemClock_Config+0x144>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e66:	4a3f      	ldr	r2, [pc, #252]	@ (8000f64 <SystemClock_Config+0x144>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f64 <SystemClock_Config+0x144>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e7a:	bf00      	nop
 8000e7c:	4b39      	ldr	r3, [pc, #228]	@ (8000f64 <SystemClock_Config+0x144>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e88:	d1f8      	bne.n	8000e7c <SystemClock_Config+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000e8a:	2330      	movs	r3, #48	@ 0x30
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000e96:	2310      	movs	r3, #16
 8000e98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ea6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000eaa:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fa11 	bl	80022f8 <HAL_RCC_OscConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000edc:	f000 fa80 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	233f      	movs	r3, #63	@ 0x3f
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000ee8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ef2:	2340      	movs	r3, #64	@ 0x40
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ef6:	2340      	movs	r3, #64	@ 0x40
 8000ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f00:	2340      	movs	r3, #64	@ 0x40
 8000f02:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fdce 	bl	8002aac <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000f16:	f000 fa63 	bl	80013e0 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000f1a:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <SystemClock_Config+0x148>)
 8000f1c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000f20:	4a11      	ldr	r2, [pc, #68]	@ (8000f68 <SystemClock_Config+0x148>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <SystemClock_Config+0x148>)
 8000f2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB1;
 8000f3c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <SystemClock_Config+0x14c>)
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000f4a:	2322      	movs	r3, #34	@ 0x22
 8000f4c:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000f4e:	2320      	movs	r3, #32
 8000f50:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fa78 	bl	800444c <HAL_RCCEx_CRSConfig>
}
 8000f5c:	bf00      	nop
 8000f5e:	3790      	adds	r7, #144	@ 0x90
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	58024800 	.word	0x58024800
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	02dc6bff 	.word	0x02dc6bff

08000f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000f76:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe8 <MX_I2C1_Init+0x78>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <MX_I2C1_Init+0x7c>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f86:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000faa:	480e      	ldr	r0, [pc, #56]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000fac:	f001 f836 	bl	800201c <HAL_I2C_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fb6:	f000 fa13 	bl	80013e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4809      	ldr	r0, [pc, #36]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000fbe:	f001 f8c9 	bl	8002154 <HAL_I2CEx_ConfigAnalogFilter>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fc8:	f000 fa0a 	bl	80013e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_I2C1_Init+0x74>)
 8000fd0:	f001 f90b 	bl	80021ea <HAL_I2CEx_ConfigDigitalFilter>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f000 fa01 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2400003c 	.word	0x2400003c
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	00a0a3f7 	.word	0x00a0a3f7

08000ff0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <MX_I2C2_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <MX_I2C2_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A0A3F7;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <MX_I2C2_Init+0x74>)
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800106c <MX_I2C2_Init+0x7c>)
 8000ffe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <MX_I2C2_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_I2C2_Init+0x74>)
 8001008:	2201      	movs	r2, #1
 800100a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <MX_I2C2_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_I2C2_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_I2C2_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_I2C2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800102a:	480e      	ldr	r0, [pc, #56]	@ (8001064 <MX_I2C2_Init+0x74>)
 800102c:	f000 fff6 	bl	800201c <HAL_I2C_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001036:	f000 f9d3 	bl	80013e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4809      	ldr	r0, [pc, #36]	@ (8001064 <MX_I2C2_Init+0x74>)
 800103e:	f001 f889 	bl	8002154 <HAL_I2CEx_ConfigAnalogFilter>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 f9ca 	bl	80013e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_I2C2_Init+0x74>)
 8001050:	f001 f8cb 	bl	80021ea <HAL_I2CEx_ConfigDigitalFilter>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 f9c1 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000090 	.word	0x24000090
 8001068:	40005800 	.word	0x40005800
 800106c:	00a0a3f7 	.word	0x00a0a3f7

08001070 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <MX_I2C3_Init+0x74>)
 8001076:	4a1c      	ldr	r2, [pc, #112]	@ (80010e8 <MX_I2C3_Init+0x78>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00A0A3F7;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_I2C3_Init+0x74>)
 800107c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <MX_I2C3_Init+0x7c>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_I2C3_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_I2C3_Init+0x74>)
 8001088:	2201      	movs	r2, #1
 800108a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_I2C3_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_I2C3_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_I2C3_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_I2C3_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_I2C3_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010aa:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <MX_I2C3_Init+0x74>)
 80010ac:	f000 ffb6 	bl	800201c <HAL_I2C_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010b6:	f000 f993 	bl	80013e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <MX_I2C3_Init+0x74>)
 80010be:	f001 f849 	bl	8002154 <HAL_I2CEx_ConfigAnalogFilter>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010c8:	f000 f98a 	bl	80013e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010cc:	2100      	movs	r1, #0
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_I2C3_Init+0x74>)
 80010d0:	f001 f88b 	bl	80021ea <HAL_I2CEx_ConfigDigitalFilter>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010da:	f000 f981 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	240000e4 	.word	0x240000e4
 80010e8:	40005c00 	.word	0x40005c00
 80010ec:	00a0a3f7 	.word	0x00a0a3f7

080010f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001110:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001114:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001118:	f24a 4210 	movw	r2, #42000	@ 0xa410
 800111c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001126:	2201      	movs	r2, #1
 8001128:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_TIM2_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001136:	4814      	ldr	r0, [pc, #80]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001138:	f003 fb42 	bl	80047c0 <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001142:	f000 f94d 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001154:	f003 fd1a 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800115e:	f000 f93f 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001170:	f003 ff7c 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800117a:	f000 f931 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	24000138 	.word	0x24000138

0800118c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_TIM4_Init+0x94>)
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_TIM4_Init+0x98>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <MX_TIM4_Init+0x94>)
 80011b2:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80011b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <MX_TIM4_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_TIM4_Init+0x94>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <MX_TIM4_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <MX_TIM4_Init+0x94>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011d0:	4813      	ldr	r0, [pc, #76]	@ (8001220 <MX_TIM4_Init+0x94>)
 80011d2:	f003 faf5 	bl	80047c0 <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80011dc:	f000 f900 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <MX_TIM4_Init+0x94>)
 80011ee:	f003 fccd 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80011f8:	f000 f8f2 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_TIM4_Init+0x94>)
 800120a:	f003 ff2f 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001214:	f000 f8e4 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000184 	.word	0x24000184
 8001224:	40000800 	.word	0x40000800

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	4b63      	ldr	r3, [pc, #396]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	4a61      	ldr	r2, [pc, #388]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124e:	4b5f      	ldr	r3, [pc, #380]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001254:	f003 0320 	and.w	r3, r3, #32
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001262:	4a5a      	ldr	r2, [pc, #360]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126c:	4b57      	ldr	r3, [pc, #348]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b54      	ldr	r3, [pc, #336]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001280:	4a52      	ldr	r2, [pc, #328]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128a:	4b50      	ldr	r3, [pc, #320]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001298:	4b4c      	ldr	r3, [pc, #304]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129e:	4a4b      	ldr	r2, [pc, #300]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 80012a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a8:	4b48      	ldr	r3, [pc, #288]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b45      	ldr	r3, [pc, #276]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012bc:	4a43      	ldr	r2, [pc, #268]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c6:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Mag_GPIO_Port, Mag_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2180      	movs	r1, #128	@ 0x80
 80012d8:	483d      	ldr	r0, [pc, #244]	@ (80013d0 <MX_GPIO_Init+0x1a8>)
 80012da:	f000 fe6b 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorL1_Pin|motorL2_Pin|motorL3_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2107      	movs	r1, #7
 80012e2:	483c      	ldr	r0, [pc, #240]	@ (80013d4 <MX_GPIO_Init+0x1ac>)
 80012e4:	f000 fe66 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M1dir_Pin|M2dir_Pin|M3dir_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80012ee:	483a      	ldr	r0, [pc, #232]	@ (80013d8 <MX_GPIO_Init+0x1b0>)
 80012f0:	f000 fe60 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2180      	movs	r1, #128	@ 0x80
 80012f8:	4838      	ldr	r0, [pc, #224]	@ (80013dc <MX_GPIO_Init+0x1b4>)
 80012fa:	f000 fe5b 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LimL1_Pin LimL2_Pin LimL3_Pin */
  GPIO_InitStruct.Pin = LimL1_Pin|LimL2_Pin|LimL3_Pin;
 80012fe:	2370      	movs	r3, #112	@ 0x70
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	482f      	ldr	r0, [pc, #188]	@ (80013d0 <MX_GPIO_Init+0x1a8>)
 8001312:	f000 fc8f 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mag_Pin */
  GPIO_InitStruct.Pin = Mag_Pin;
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Mag_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4828      	ldr	r0, [pc, #160]	@ (80013d0 <MX_GPIO_Init+0x1a8>)
 800132e:	f000 fc81 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : motorL1_Pin motorL2_Pin */
  GPIO_InitStruct.Pin = motorL1_Pin|motorL2_Pin;
 8001332:	2303      	movs	r3, #3
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4822      	ldr	r0, [pc, #136]	@ (80013d4 <MX_GPIO_Init+0x1ac>)
 800134a:	f000 fc73 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : motorL3_Pin */
  GPIO_InitStruct.Pin = motorL3_Pin;
 800134e:	2304      	movs	r3, #4
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(motorL3_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	481b      	ldr	r0, [pc, #108]	@ (80013d4 <MX_GPIO_Init+0x1ac>)
 8001366:	f000 fc65 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1dir_Pin M2dir_Pin M3dir_Pin */
  GPIO_InitStruct.Pin = M1dir_Pin|M2dir_Pin|M3dir_Pin;
 800136a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4815      	ldr	r0, [pc, #84]	@ (80013d8 <MX_GPIO_Init+0x1b0>)
 8001384:	f000 fc56 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	480f      	ldr	r0, [pc, #60]	@ (80013dc <MX_GPIO_Init+0x1b4>)
 80013a0:	f000 fc48 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a4:	2308      	movs	r3, #8
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_CRS_SYNC;
 80013b4:	230a      	movs	r3, #10
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_GPIO_Init+0x1ac>)
 80013c0:	f000 fc38 	bl	8001c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	@ 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020000 	.word	0x58020000
 80013d4:	58020400 	.word	0x58020400
 80013d8:	58021400 	.word	0x58021400
 80013dc:	58021800 	.word	0x58021800

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_MspInit+0x30>)
 80013f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f8:	4a08      	ldr	r2, [pc, #32]	@ (800141c <HAL_MspInit+0x30>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_MspInit+0x30>)
 8001404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	58024400 	.word	0x58024400

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0be      	sub	sp, #248	@ 0xf8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143c:	22b8      	movs	r2, #184	@ 0xb8
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f003 fecd 	bl	80051e0 <memset>
  if(hi2c->Instance==I2C1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a85      	ldr	r2, [pc, #532]	@ (8001660 <HAL_I2C_MspInit+0x240>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d146      	bne.n	80014de <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001450:	f04f 0208 	mov.w	r2, #8
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001462:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fe50 	bl	800310c <HAL_RCCEx_PeriphCLKConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001472:	f7ff ffb5 	bl	80013e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b7b      	ldr	r3, [pc, #492]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147c:	4a79      	ldr	r2, [pc, #484]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001486:	4b77      	ldr	r3, [pc, #476]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001494:	23c0      	movs	r3, #192	@ 0xc0
 8001496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ac:	2304      	movs	r3, #4
 80014ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014b6:	4619      	mov	r1, r3
 80014b8:	486b      	ldr	r0, [pc, #428]	@ (8001668 <HAL_I2C_MspInit+0x248>)
 80014ba:	f000 fbbb 	bl	8001c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014be:	4b69      	ldr	r3, [pc, #420]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80014c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014c4:	4a67      	ldr	r2, [pc, #412]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80014c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014ce:	4b65      	ldr	r3, [pc, #404]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80014d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d8:	623b      	str	r3, [r7, #32]
 80014da:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014dc:	e0bc      	b.n	8001658 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a62      	ldr	r2, [pc, #392]	@ (800166c <HAL_I2C_MspInit+0x24c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d146      	bne.n	8001576 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014e8:	f04f 0208 	mov.w	r2, #8
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fe04 	bl	800310c <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800150a:	f7ff ff69 	bl	80013e0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800150e:	4b55      	ldr	r3, [pc, #340]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001514:	4a53      	ldr	r2, [pc, #332]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 8001516:	f043 0320 	orr.w	r3, r3, #32
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151e:	4b51      	ldr	r3, [pc, #324]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800152c:	2303      	movs	r3, #3
 800152e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001532:	2312      	movs	r3, #18
 8001534:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001544:	2304      	movs	r3, #4
 8001546:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800154a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800154e:	4619      	mov	r1, r3
 8001550:	4847      	ldr	r0, [pc, #284]	@ (8001670 <HAL_I2C_MspInit+0x250>)
 8001552:	f000 fb6f 	bl	8001c34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001556:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 8001558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800155c:	4a41      	ldr	r2, [pc, #260]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 800155e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001562:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001566:	4b3f      	ldr	r3, [pc, #252]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800156c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	69bb      	ldr	r3, [r7, #24]
}
 8001574:	e070      	b.n	8001658 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C3)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a3e      	ldr	r2, [pc, #248]	@ (8001674 <HAL_I2C_MspInit+0x254>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d16b      	bne.n	8001658 <HAL_I2C_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001580:	f04f 0208 	mov.w	r2, #8
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fdb8 	bl	800310c <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_MspInit+0x186>
      Error_Handler();
 80015a2:	f7ff ff1d 	bl	80013e0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	4a26      	ldr	r2, [pc, #152]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d4:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ea:	2312      	movs	r3, #18
 80015ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015fc:	2304      	movs	r3, #4
 80015fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001606:	4619      	mov	r1, r3
 8001608:	481b      	ldr	r0, [pc, #108]	@ (8001678 <HAL_I2C_MspInit+0x258>)
 800160a:	f000 fb13 	bl	8001c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800160e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001628:	2304      	movs	r3, #4
 800162a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001632:	4619      	mov	r1, r3
 8001634:	4811      	ldr	r0, [pc, #68]	@ (800167c <HAL_I2C_MspInit+0x25c>)
 8001636:	f000 fafd 	bl	8001c34 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001640:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 8001642:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001646:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_I2C_MspInit+0x244>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	bf00      	nop
 800165a:	37f8      	adds	r7, #248	@ 0xf8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40005400 	.word	0x40005400
 8001664:	58024400 	.word	0x58024400
 8001668:	58020400 	.word	0x58020400
 800166c:	40005800 	.word	0x40005800
 8001670:	58021400 	.word	0x58021400
 8001674:	40005c00 	.word	0x40005c00
 8001678:	58020800 	.word	0x58020800
 800167c:	58020000 	.word	0x58020000

08001680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001690:	d117      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 8001694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001698:	4a1a      	ldr	r2, [pc, #104]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 80016a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	201c      	movs	r0, #28
 80016b6:	f000 fa88 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ba:	201c      	movs	r0, #28
 80016bc:	f000 fa9f 	bl	8001bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016c0:	e01b      	b.n	80016fa <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <HAL_TIM_Base_MspInit+0x88>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d116      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 80016ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 80016de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	201e      	movs	r0, #30
 80016f0:	f000 fa6b 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016f4:	201e      	movs	r0, #30
 80016f6:	f000 fa82 	bl	8001bfe <HAL_NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	58024400 	.word	0x58024400
 8001708:	40000800 	.word	0x40000800

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f000 f92b 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <TIM2_IRQHandler+0x10>)
 8001772:	f003 f903 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	24000138 	.word	0x24000138

08001780 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <TIM4_IRQHandler+0x10>)
 8001786:	f003 f8f9 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	24000184 	.word	0x24000184

08001794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001798:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <SystemInit+0xd0>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179e:	4a31      	ldr	r2, [pc, #196]	@ (8001864 <SystemInit+0xd0>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <SystemInit+0xd4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	2b06      	cmp	r3, #6
 80017b2:	d807      	bhi.n	80017c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <SystemInit+0xd4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 030f 	bic.w	r3, r3, #15
 80017bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001868 <SystemInit+0xd4>)
 80017be:	f043 0307 	orr.w	r3, r3, #7
 80017c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017c4:	4b29      	ldr	r3, [pc, #164]	@ (800186c <SystemInit+0xd8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a28      	ldr	r2, [pc, #160]	@ (800186c <SystemInit+0xd8>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017d0:	4b26      	ldr	r3, [pc, #152]	@ (800186c <SystemInit+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017d6:	4b25      	ldr	r3, [pc, #148]	@ (800186c <SystemInit+0xd8>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4924      	ldr	r1, [pc, #144]	@ (800186c <SystemInit+0xd8>)
 80017dc:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <SystemInit+0xdc>)
 80017de:	4013      	ands	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <SystemInit+0xd4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <SystemInit+0xd4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 030f 	bic.w	r3, r3, #15
 80017f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <SystemInit+0xd4>)
 80017f8:	f043 0307 	orr.w	r3, r3, #7
 80017fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017fe:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <SystemInit+0xd8>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001804:	4b19      	ldr	r3, [pc, #100]	@ (800186c <SystemInit+0xd8>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800180a:	4b18      	ldr	r3, [pc, #96]	@ (800186c <SystemInit+0xd8>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <SystemInit+0xd8>)
 8001812:	4a18      	ldr	r2, [pc, #96]	@ (8001874 <SystemInit+0xe0>)
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <SystemInit+0xd8>)
 8001818:	4a17      	ldr	r2, [pc, #92]	@ (8001878 <SystemInit+0xe4>)
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800181c:	4b13      	ldr	r3, [pc, #76]	@ (800186c <SystemInit+0xd8>)
 800181e:	4a17      	ldr	r2, [pc, #92]	@ (800187c <SystemInit+0xe8>)
 8001820:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <SystemInit+0xd8>)
 8001824:	2200      	movs	r2, #0
 8001826:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001828:	4b10      	ldr	r3, [pc, #64]	@ (800186c <SystemInit+0xd8>)
 800182a:	4a14      	ldr	r2, [pc, #80]	@ (800187c <SystemInit+0xe8>)
 800182c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <SystemInit+0xd8>)
 8001830:	2200      	movs	r2, #0
 8001832:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001834:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <SystemInit+0xd8>)
 8001836:	4a11      	ldr	r2, [pc, #68]	@ (800187c <SystemInit+0xe8>)
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800183a:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <SystemInit+0xd8>)
 800183c:	2200      	movs	r2, #0
 800183e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001840:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <SystemInit+0xd8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a09      	ldr	r2, [pc, #36]	@ (800186c <SystemInit+0xd8>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800184a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <SystemInit+0xd8>)
 800184e:	2200      	movs	r2, #0
 8001850:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <SystemInit+0xec>)
 8001854:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001858:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00
 8001868:	52002000 	.word	0x52002000
 800186c:	58024400 	.word	0x58024400
 8001870:	eaf6ed7f 	.word	0xeaf6ed7f
 8001874:	02020200 	.word	0x02020200
 8001878:	01ff0000 	.word	0x01ff0000
 800187c:	01010280 	.word	0x01010280
 8001880:	52004000 	.word	0x52004000

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001888:	f7ff ff84 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188e:	490d      	ldr	r1, [pc, #52]	@ (80018c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a4:	4c0a      	ldr	r4, [pc, #40]	@ (80018d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f003 fc9d 	bl	80051f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff fa93 	bl	8000de0 <main>
  bx  lr
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80018c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c4:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 80018c8:	080052f0 	.word	0x080052f0
  ldr r2, =_sbss
 80018cc:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 80018d0:	24000240 	.word	0x24000240

080018d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC3_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018de:	2003      	movs	r0, #3
 80018e0:	f000 f968 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018e4:	f001 fa98 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_Init+0x68>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	4913      	ldr	r1, [pc, #76]	@ (8001944 <HAL_Init+0x6c>)
 80018f6:	5ccb      	ldrb	r3, [r1, r3]
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001900:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_Init+0x68>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <HAL_Init+0x6c>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
 8001918:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <HAL_Init+0x70>)
 800191a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800191c:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <HAL_Init+0x74>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001922:	200f      	movs	r0, #15
 8001924:	f000 f814 	bl	8001950 <HAL_InitTick>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e002      	b.n	8001938 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001932:	f7ff fd5b 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	58024400 	.word	0x58024400
 8001944:	080052d8 	.word	0x080052d8
 8001948:	24000014 	.word	0x24000014
 800194c:	24000010 	.word	0x24000010

08001950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_InitTick+0x60>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e021      	b.n	80019a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <HAL_InitTick+0x64>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_InitTick+0x60>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f94d 	bl	8001c1a <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 f917 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	@ (80019b8 <HAL_InitTick+0x68>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2400001c 	.word	0x2400001c
 80019b4:	24000010 	.word	0x24000010
 80019b8:	24000018 	.word	0x24000018

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	2400001c 	.word	0x2400001c
 80019e0:	2400023c 	.word	0x2400023c

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2400023c 	.word	0x2400023c

080019fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_GetREVID+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0c1b      	lsrs	r3, r3, #16
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	5c001000 	.word	0x5c001000

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x40>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x40>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	05fa0000 	.word	0x05fa0000

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	@ (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	@ (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	@ (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff40 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff90 	bl	8001b08 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5f 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff33 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa4 	bl	8001b70 <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c42:	4b86      	ldr	r3, [pc, #536]	@ (8001e5c <HAL_GPIO_Init+0x228>)
 8001c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c46:	e18c      	b.n	8001f62 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 817e 	beq.w	8001f5c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d005      	beq.n	8001c78 <HAL_GPIO_Init+0x44>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d130      	bne.n	8001cda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cae:	2201      	movs	r2, #1
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 0201 	and.w	r2, r3, #1
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d017      	beq.n	8001d16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d123      	bne.n	8001d6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	69b9      	ldr	r1, [r7, #24]
 8001d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0203 	and.w	r2, r3, #3
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80d8 	beq.w	8001f5c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dac:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <HAL_GPIO_Init+0x22c>)
 8001dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001db2:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <HAL_GPIO_Init+0x22c>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_GPIO_Init+0x22c>)
 8001dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a26      	ldr	r2, [pc, #152]	@ (8001e64 <HAL_GPIO_Init+0x230>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <HAL_GPIO_Init+0x234>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d04a      	beq.n	8001e8c <HAL_GPIO_Init+0x258>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e6c <HAL_GPIO_Init+0x238>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02b      	beq.n	8001e56 <HAL_GPIO_Init+0x222>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1b      	ldr	r2, [pc, #108]	@ (8001e70 <HAL_GPIO_Init+0x23c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d025      	beq.n	8001e52 <HAL_GPIO_Init+0x21e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	@ (8001e74 <HAL_GPIO_Init+0x240>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01f      	beq.n	8001e4e <HAL_GPIO_Init+0x21a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a19      	ldr	r2, [pc, #100]	@ (8001e78 <HAL_GPIO_Init+0x244>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x216>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a18      	ldr	r2, [pc, #96]	@ (8001e7c <HAL_GPIO_Init+0x248>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_GPIO_Init+0x24c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x20e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <HAL_GPIO_Init+0x250>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x20a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a15      	ldr	r2, [pc, #84]	@ (8001e88 <HAL_GPIO_Init+0x254>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x206>
 8001e36:	2309      	movs	r3, #9
 8001e38:	e029      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	e027      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e3e:	2307      	movs	r3, #7
 8001e40:	e025      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e42:	2306      	movs	r3, #6
 8001e44:	e023      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e46:	2305      	movs	r3, #5
 8001e48:	e021      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e01f      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e01d      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e01b      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e019      	b.n	8001e8e <HAL_GPIO_Init+0x25a>
 8001e5a:	bf00      	nop
 8001e5c:	58000080 	.word	0x58000080
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58000400 	.word	0x58000400
 8001e68:	58020000 	.word	0x58020000
 8001e6c:	58020400 	.word	0x58020400
 8001e70:	58020800 	.word	0x58020800
 8001e74:	58020c00 	.word	0x58020c00
 8001e78:	58021000 	.word	0x58021000
 8001e7c:	58021400 	.word	0x58021400
 8001e80:	58021800 	.word	0x58021800
 8001e84:	58021c00 	.word	0x58021c00
 8001e88:	58022400 	.word	0x58022400
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	f002 0203 	and.w	r2, r2, #3
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	4093      	lsls	r3, r2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e9e:	4938      	ldr	r1, [pc, #224]	@ (8001f80 <HAL_GPIO_Init+0x34c>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ed2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f47f ae6b 	bne.w	8001c48 <HAL_GPIO_Init+0x14>
  }
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	3724      	adds	r7, #36	@ 0x24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	58000400 	.word	0x58000400

08001f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e001      	b.n	8001fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff8:	887a      	ldrh	r2, [r7, #2]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	041a      	lsls	r2, r3, #16
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43d9      	mvns	r1, r3
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	400b      	ands	r3, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	619a      	str	r2, [r3, #24]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e08b      	b.n	8002146 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff f9ec 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2224      	movs	r2, #36	@ 0x24
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800206c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800207c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e006      	b.n	80020a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d108      	bne.n	80020be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	e007      	b.n	80020ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_I2C_Init+0x134>)
 80020da:	430b      	orrs	r3, r1
 80020dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69d9      	ldr	r1, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	02008000 	.word	0x02008000

08002154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	d138      	bne.n	80021dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002174:	2302      	movs	r3, #2
 8002176:	e032      	b.n	80021de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	@ 0x24
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d139      	bne.n	8002274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800220a:	2302      	movs	r3, #2
 800220c:	e033      	b.n	8002276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2224      	movs	r2, #36	@ 0x24
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800223c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <HAL_PWREx_ConfigSupply+0x70>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d00a      	beq.n	80022ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002298:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <HAL_PWREx_ConfigSupply+0x70>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d001      	beq.n	80022aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e01f      	b.n	80022ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e01d      	b.n	80022ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_PWREx_ConfigSupply+0x70>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	490f      	ldr	r1, [pc, #60]	@ (80022f4 <HAL_PWREx_ConfigSupply+0x70>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022be:	f7ff fb91 	bl	80019e4 <HAL_GetTick>
 80022c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022c4:	e009      	b.n	80022da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022c6:	f7ff fb8d 	bl	80019e4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022d4:	d901      	bls.n	80022da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_PWREx_ConfigSupply+0x70>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022e6:	d1ee      	bne.n	80022c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	58024800 	.word	0x58024800

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	@ 0x30
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e3c8      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8087 	beq.w	8002426 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002318:	4b88      	ldr	r3, [pc, #544]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002322:	4b86      	ldr	r3, [pc, #536]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232a:	2b10      	cmp	r3, #16
 800232c:	d007      	beq.n	800233e <HAL_RCC_OscConfig+0x46>
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	2b18      	cmp	r3, #24
 8002332:	d110      	bne.n	8002356 <HAL_RCC_OscConfig+0x5e>
 8002334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d10b      	bne.n	8002356 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233e:	4b7f      	ldr	r3, [pc, #508]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d06c      	beq.n	8002424 <HAL_RCC_OscConfig+0x12c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d168      	bne.n	8002424 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e3a2      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x76>
 8002360:	4b76      	ldr	r3, [pc, #472]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a75      	ldr	r2, [pc, #468]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e02e      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x98>
 8002376:	4b71      	ldr	r3, [pc, #452]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a70      	ldr	r2, [pc, #448]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 800237c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b6e      	ldr	r3, [pc, #440]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6d      	ldr	r2, [pc, #436]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002388:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e01d      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0xbc>
 800239a:	4b68      	ldr	r3, [pc, #416]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a67      	ldr	r2, [pc, #412]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b65      	ldr	r3, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a64      	ldr	r2, [pc, #400]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 80023b4:	4b61      	ldr	r3, [pc, #388]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a60      	ldr	r2, [pc, #384]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b5e      	ldr	r3, [pc, #376]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff fb06 	bl	80019e4 <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7ff fb02 	bl	80019e4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	@ 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e356      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ee:	4b53      	ldr	r3, [pc, #332]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0xe4>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff faf2 	bl	80019e4 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7ff faee 	bl	80019e4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	@ 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e342      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002416:	4b49      	ldr	r3, [pc, #292]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x10c>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 808c 	beq.w	800254c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002434:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800243c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800243e:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <HAL_RCC_OscConfig+0x162>
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	2b18      	cmp	r3, #24
 800244e:	d137      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1c8>
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d132      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245a:	4b38      	ldr	r3, [pc, #224]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_OscConfig+0x17a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e314      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002472:	4b32      	ldr	r3, [pc, #200]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0219 	bic.w	r2, r3, #25
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	492f      	ldr	r1, [pc, #188]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff faae 	bl	80019e4 <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7ff faaa 	bl	80019e4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e2fe      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249e:	4b27      	ldr	r3, [pc, #156]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	4920      	ldr	r1, [pc, #128]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024be:	e045      	b.n	800254c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d026      	beq.n	8002516 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c8:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 0219 	bic.w	r2, r3, #25
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4919      	ldr	r1, [pc, #100]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff fa83 	bl	80019e4 <HAL_GetTick>
 80024de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff fa7f 	bl	80019e4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e2d3      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f4:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	490b      	ldr	r1, [pc, #44]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e01a      	b.n	800254c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a08      	ldr	r2, [pc, #32]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff fa5f 	bl	80019e4 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252a:	f7ff fa5b 	bl	80019e4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d903      	bls.n	8002540 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e2af      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
 800253c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002540:	4b96      	ldr	r3, [pc, #600]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ee      	bne.n	800252a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d06a      	beq.n	800262e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002558:	4b90      	ldr	r3, [pc, #576]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002560:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002562:	4b8e      	ldr	r3, [pc, #568]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b08      	cmp	r3, #8
 800256c:	d007      	beq.n	800257e <HAL_RCC_OscConfig+0x286>
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b18      	cmp	r3, #24
 8002572:	d11b      	bne.n	80025ac <HAL_RCC_OscConfig+0x2b4>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d116      	bne.n	80025ac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800257e:	4b87      	ldr	r3, [pc, #540]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x29e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b80      	cmp	r3, #128	@ 0x80
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e282      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002596:	4b81      	ldr	r3, [pc, #516]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	061b      	lsls	r3, r3, #24
 80025a4:	497d      	ldr	r1, [pc, #500]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025aa:	e040      	b.n	800262e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025b4:	4b79      	ldr	r3, [pc, #484]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a78      	ldr	r2, [pc, #480]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80025ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff fa10 	bl	80019e4 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025c8:	f7ff fa0c 	bl	80019e4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e260      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025da:	4b70      	ldr	r3, [pc, #448]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025e6:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	4969      	ldr	r1, [pc, #420]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60cb      	str	r3, [r1, #12]
 80025fa:	e018      	b.n	800262e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025fc:	4b67      	ldr	r3, [pc, #412]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a66      	ldr	r2, [pc, #408]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7ff f9ec 	bl	80019e4 <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002610:	f7ff f9e8 	bl	80019e4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e23c      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002622:	4b5e      	ldr	r3, [pc, #376]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d036      	beq.n	80026a8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d019      	beq.n	8002676 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b56      	ldr	r3, [pc, #344]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	4a55      	ldr	r2, [pc, #340]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff f9c9 	bl	80019e4 <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff f9c5 	bl	80019e4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e219      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002668:	4b4c      	ldr	r3, [pc, #304]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x35e>
 8002674:	e018      	b.n	80026a8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b49      	ldr	r3, [pc, #292]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267a:	4a48      	ldr	r2, [pc, #288]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7ff f9af 	bl	80019e4 <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268a:	f7ff f9ab 	bl	80019e4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1ff      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800269c:	4b3f      	ldr	r3, [pc, #252]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 800269e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d036      	beq.n	8002722 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d019      	beq.n	80026f0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026bc:	4b37      	ldr	r3, [pc, #220]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a36      	ldr	r2, [pc, #216]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80026c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026c8:	f7ff f98c 	bl	80019e4 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026d0:	f7ff f988 	bl	80019e4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1dc      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026e2:	4b2e      	ldr	r3, [pc, #184]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x3d8>
 80026ee:	e018      	b.n	8002722 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026f0:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a29      	ldr	r2, [pc, #164]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 80026f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026fc:	f7ff f972 	bl	80019e4 <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002704:	f7ff f96e 	bl	80019e4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1c2      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002716:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8086 	beq.w	800283c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002730:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <HAL_RCC_OscConfig+0x4a8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1a      	ldr	r2, [pc, #104]	@ (80027a0 <HAL_RCC_OscConfig+0x4a8>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800273c:	f7ff f952 	bl	80019e4 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002744:	f7ff f94e 	bl	80019e4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1a2      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002756:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <HAL_RCC_OscConfig+0x4a8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0x480>
 800276a:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	4a0b      	ldr	r2, [pc, #44]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6713      	str	r3, [r2, #112]	@ 0x70
 8002776:	e032      	b.n	80027de <HAL_RCC_OscConfig+0x4e6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4ac>
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	4a05      	ldr	r2, [pc, #20]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	@ 0x70
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a02      	ldr	r2, [pc, #8]	@ (800279c <HAL_RCC_OscConfig+0x4a4>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	e021      	b.n	80027de <HAL_RCC_OscConfig+0x4e6>
 800279a:	bf00      	nop
 800279c:	58024400 	.word	0x58024400
 80027a0:	58024800 	.word	0x58024800
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4ce>
 80027ac:	4b83      	ldr	r3, [pc, #524]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	4a82      	ldr	r2, [pc, #520]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b8:	4b80      	ldr	r3, [pc, #512]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	4a7f      	ldr	r2, [pc, #508]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x4e6>
 80027c6:	4b7d      	ldr	r3, [pc, #500]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	4a7c      	ldr	r2, [pc, #496]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d2:	4b7a      	ldr	r3, [pc, #488]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a79      	ldr	r2, [pc, #484]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7ff f8fd 	bl	80019e4 <HAL_GetTick>
 80027ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7ff f8f9 	bl	80019e4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e14b      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002804:	4b6d      	ldr	r3, [pc, #436]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCC_OscConfig+0x4f6>
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7ff f8e7 	bl	80019e4 <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7ff f8e3 	bl	80019e4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e135      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002830:	4b62      	ldr	r3, [pc, #392]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 812a 	beq.w	8002a9a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002846:	4b5d      	ldr	r3, [pc, #372]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800284e:	2b18      	cmp	r3, #24
 8002850:	f000 80ba 	beq.w	80029c8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	2b02      	cmp	r3, #2
 800285a:	f040 8095 	bne.w	8002988 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b57      	ldr	r3, [pc, #348]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a56      	ldr	r2, [pc, #344]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002864:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7ff f8bb 	bl	80019e4 <HAL_GetTick>
 800286e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f7ff f8b7 	bl	80019e4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e10b      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002884:	4b4d      	ldr	r3, [pc, #308]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002890:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002892:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002894:	4b4a      	ldr	r3, [pc, #296]	@ (80029c0 <HAL_RCC_OscConfig+0x6c8>)
 8002896:	4013      	ands	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	430a      	orrs	r2, r1
 80028a4:	4945      	ldr	r1, [pc, #276]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	628b      	str	r3, [r1, #40]	@ 0x28
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	3b01      	subs	r3, #1
 80028b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b8:	3b01      	subs	r3, #1
 80028ba:	025b      	lsls	r3, r3, #9
 80028bc:	b29b      	uxth	r3, r3
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d2:	3b01      	subs	r3, #1
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028da:	4938      	ldr	r1, [pc, #224]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028e0:	4b36      	ldr	r3, [pc, #216]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	4a35      	ldr	r2, [pc, #212]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028ec:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80028ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f0:	4b34      	ldr	r3, [pc, #208]	@ (80029c4 <HAL_RCC_OscConfig+0x6cc>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028f8:	00d2      	lsls	r2, r2, #3
 80028fa:	4930      	ldr	r1, [pc, #192]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002900:	4b2e      	ldr	r3, [pc, #184]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	f023 020c 	bic.w	r2, r3, #12
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	492b      	ldr	r1, [pc, #172]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002912:	4b2a      	ldr	r3, [pc, #168]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	f023 0202 	bic.w	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	4927      	ldr	r1, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002924:	4b25      	ldr	r3, [pc, #148]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	4a24      	ldr	r2, [pc, #144]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800292a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002930:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800293c:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	4a1e      	ldr	r2, [pc, #120]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002942:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002948:	4b1c      	ldr	r3, [pc, #112]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	4a1b      	ldr	r2, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7ff f840 	bl	80019e4 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7ff f83c 	bl	80019e4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e090      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800297a:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x670>
 8002986:	e088      	b.n	8002a9a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0b      	ldr	r2, [pc, #44]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 800298e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7ff f826 	bl	80019e4 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7ff f822 	bl	80019e4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e076      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ae:	4b03      	ldr	r3, [pc, #12]	@ (80029bc <HAL_RCC_OscConfig+0x6c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x6a4>
 80029ba:	e06e      	b.n	8002a9a <HAL_RCC_OscConfig+0x7a2>
 80029bc:	58024400 	.word	0x58024400
 80029c0:	fffffc0c 	.word	0xfffffc0c
 80029c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029c8:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029ce:	4b35      	ldr	r3, [pc, #212]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d031      	beq.n	8002a40 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0203 	and.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d12a      	bne.n	8002a40 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d122      	bne.n	8002a40 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d11a      	bne.n	8002a40 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	0a5b      	lsrs	r3, r3, #9
 8002a0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d111      	bne.n	8002a40 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d108      	bne.n	8002a40 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e02b      	b.n	8002a9c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a44:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 8002a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d01f      	beq.n	8002a9a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a5a:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	4a11      	ldr	r2, [pc, #68]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a66:	f7fe ffbd 	bl	80019e4 <HAL_GetTick>
 8002a6a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a6c:	bf00      	nop
 8002a6e:	f7fe ffb9 	bl	80019e4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d0f9      	beq.n	8002a6e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 8002a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b0>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a86:	00d2      	lsls	r2, r2, #3
 8002a88:	4906      	ldr	r1, [pc, #24]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a8e:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	4a04      	ldr	r2, [pc, #16]	@ (8002aa4 <HAL_RCC_OscConfig+0x7ac>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3730      	adds	r7, #48	@ 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	ffff0007 	.word	0xffff0007

08002aac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e19c      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b8a      	ldr	r3, [pc, #552]	@ (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b87      	ldr	r3, [pc, #540]	@ (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 020f 	bic.w	r2, r3, #15
 8002ad6:	4985      	ldr	r1, [pc, #532]	@ (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b83      	ldr	r3, [pc, #524]	@ (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e184      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d908      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b0c:	4b78      	ldr	r3, [pc, #480]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	4975      	ldr	r1, [pc, #468]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	4b70      	ldr	r3, [pc, #448]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d908      	bls.n	8002b4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	496a      	ldr	r1, [pc, #424]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	4b64      	ldr	r3, [pc, #400]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d908      	bls.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b68:	4b61      	ldr	r3, [pc, #388]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	495e      	ldr	r1, [pc, #376]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	4b59      	ldr	r3, [pc, #356]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d908      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b96:	4b56      	ldr	r3, [pc, #344]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4953      	ldr	r1, [pc, #332]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d010      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d908      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f023 020f 	bic.w	r2, r3, #15
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4947      	ldr	r1, [pc, #284]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d055      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002be2:	4b43      	ldr	r3, [pc, #268]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4940      	ldr	r1, [pc, #256]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0f6      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c14:	4b36      	ldr	r3, [pc, #216]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d115      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0ea      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c2c:	4b30      	ldr	r3, [pc, #192]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0de      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0d6      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c4c:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f023 0207 	bic.w	r2, r3, #7
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4925      	ldr	r1, [pc, #148]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5e:	f7fe fec1 	bl	80019e4 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c66:	f7fe febd 	bl	80019e4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0be      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d1eb      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d208      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002caa:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f023 020f 	bic.w	r2, r3, #15
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	490e      	ldr	r1, [pc, #56]	@ (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d214      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 020f 	bic.w	r2, r3, #15
 8002cd2:	4906      	ldr	r1, [pc, #24]	@ (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e086      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
 8002cec:	52002000 	.word	0x52002000
 8002cf0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	4b3f      	ldr	r3, [pc, #252]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d208      	bcs.n	8002d22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d10:	4b3c      	ldr	r3, [pc, #240]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4939      	ldr	r1, [pc, #228]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	4b34      	ldr	r3, [pc, #208]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d208      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d3e:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	492e      	ldr	r1, [pc, #184]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	4b28      	ldr	r3, [pc, #160]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d208      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4922      	ldr	r1, [pc, #136]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d208      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4917      	ldr	r1, [pc, #92]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dac:	f000 f834 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	4912      	ldr	r1, [pc, #72]	@ (8002e08 <HAL_RCC_ClockConfig+0x35c>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dca:	4b0e      	ldr	r3, [pc, #56]	@ (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002e08 <HAL_RCC_ClockConfig+0x35c>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_RCC_ClockConfig+0x360>)
 8002de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002de4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <HAL_RCC_ClockConfig+0x364>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_RCC_ClockConfig+0x368>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fdae 	bl	8001950 <HAL_InitTick>
 8002df4:	4603      	mov	r3, r0
 8002df6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	58024400 	.word	0x58024400
 8002e08:	080052d8 	.word	0x080052d8
 8002e0c:	24000014 	.word	0x24000014
 8002e10:	24000010 	.word	0x24000010
 8002e14:	24000018 	.word	0x24000018

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e1e:	4bb3      	ldr	r3, [pc, #716]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e26:	2b18      	cmp	r3, #24
 8002e28:	f200 8155 	bhi.w	80030d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e99 	.word	0x08002e99
 8002e38:	080030d7 	.word	0x080030d7
 8002e3c:	080030d7 	.word	0x080030d7
 8002e40:	080030d7 	.word	0x080030d7
 8002e44:	080030d7 	.word	0x080030d7
 8002e48:	080030d7 	.word	0x080030d7
 8002e4c:	080030d7 	.word	0x080030d7
 8002e50:	080030d7 	.word	0x080030d7
 8002e54:	08002ebf 	.word	0x08002ebf
 8002e58:	080030d7 	.word	0x080030d7
 8002e5c:	080030d7 	.word	0x080030d7
 8002e60:	080030d7 	.word	0x080030d7
 8002e64:	080030d7 	.word	0x080030d7
 8002e68:	080030d7 	.word	0x080030d7
 8002e6c:	080030d7 	.word	0x080030d7
 8002e70:	080030d7 	.word	0x080030d7
 8002e74:	08002ec5 	.word	0x08002ec5
 8002e78:	080030d7 	.word	0x080030d7
 8002e7c:	080030d7 	.word	0x080030d7
 8002e80:	080030d7 	.word	0x080030d7
 8002e84:	080030d7 	.word	0x080030d7
 8002e88:	080030d7 	.word	0x080030d7
 8002e8c:	080030d7 	.word	0x080030d7
 8002e90:	080030d7 	.word	0x080030d7
 8002e94:	08002ecb 	.word	0x08002ecb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e98:	4b94      	ldr	r3, [pc, #592]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ea4:	4b91      	ldr	r3, [pc, #580]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	4a90      	ldr	r2, [pc, #576]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002eb6:	e111      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002eb8:	4b8d      	ldr	r3, [pc, #564]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eba:	61bb      	str	r3, [r7, #24]
      break;
 8002ebc:	e10e      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ec0:	61bb      	str	r3, [r7, #24]
      break;
 8002ec2:	e10b      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ec4:	4b8c      	ldr	r3, [pc, #560]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ec6:	61bb      	str	r3, [r7, #24]
      break;
 8002ec8:	e108      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eca:	4b88      	ldr	r3, [pc, #544]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ed4:	4b85      	ldr	r3, [pc, #532]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ede:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ee0:	4b82      	ldr	r3, [pc, #520]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002eea:	4b80      	ldr	r3, [pc, #512]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eee:	08db      	lsrs	r3, r3, #3
 8002ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80e1 	beq.w	80030d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f000 8083 	beq.w	800301c <HAL_RCC_GetSysClockFreq+0x204>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	f200 80a1 	bhi.w	8003060 <HAL_RCC_GetSysClockFreq+0x248>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x114>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d056      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f2a:	e099      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f38:	4b6c      	ldr	r3, [pc, #432]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	4a6b      	ldr	r2, [pc, #428]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f62:	4b62      	ldr	r3, [pc, #392]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f76:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f92:	e087      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003100 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa6:	4b51      	ldr	r3, [pc, #324]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fd6:	e065      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003104 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fea:	4b40      	ldr	r3, [pc, #256]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800301a:	e043      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003108 <HAL_RCC_GetSysClockFreq+0x2f0>
 800302a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302e:	4b2f      	ldr	r3, [pc, #188]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003042:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800304a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800305e:	e021      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003104 <HAL_RCC_GetSysClockFreq+0x2ec>
 800306e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003072:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003082:	ed97 6a02 	vldr	s12, [r7, #8]
 8003086:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800308a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030a4:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	0a5b      	lsrs	r3, r3, #9
 80030aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030ae:	3301      	adds	r3, #1
 80030b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80030c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c8:	ee17 3a90 	vmov	r3, s15
 80030cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030ce:	e005      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
      break;
 80030d4:	e002      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030d6:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d8:	61bb      	str	r3, [r7, #24]
      break;
 80030da:	bf00      	nop
  }

  return sysclockfreq;
 80030dc:	69bb      	ldr	r3, [r7, #24]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	@ 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
 80030f0:	03d09000 	.word	0x03d09000
 80030f4:	003d0900 	.word	0x003d0900
 80030f8:	007a1200 	.word	0x007a1200
 80030fc:	46000000 	.word	0x46000000
 8003100:	4c742400 	.word	0x4c742400
 8003104:	4a742400 	.word	0x4a742400
 8003108:	4af42400 	.word	0x4af42400

0800310c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b0c6      	sub	sp, #280	@ 0x118
 8003112:	af00      	add	r7, sp, #0
 8003114:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800311e:	2300      	movs	r3, #0
 8003120:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003130:	2500      	movs	r5, #0
 8003132:	ea54 0305 	orrs.w	r3, r4, r5
 8003136:	d049      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800313c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800313e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003142:	d02f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003144:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003148:	d828      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800314a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800314e:	d01a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003150:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003154:	d822      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800315a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800315e:	d007      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003160:	e01c      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003162:	4bab      	ldr	r3, [pc, #684]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	4aaa      	ldr	r2, [pc, #680]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800316c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800316e:	e01a      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003174:	3308      	adds	r3, #8
 8003176:	2102      	movs	r1, #2
 8003178:	4618      	mov	r0, r3
 800317a:	f001 f9bd 	bl	80044f8 <RCCEx_PLL2_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003184:	e00f      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800318a:	3328      	adds	r3, #40	@ 0x28
 800318c:	2102      	movs	r1, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f001 fa64 	bl	800465c <RCCEx_PLL3_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800319a:	e004      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80031a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031ae:	4b98      	ldr	r3, [pc, #608]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80031b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031bc:	4a94      	ldr	r2, [pc, #592]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031be:	430b      	orrs	r3, r1
 80031c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80031c2:	e003      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80031d8:	f04f 0900 	mov.w	r9, #0
 80031dc:	ea58 0309 	orrs.w	r3, r8, r9
 80031e0:	d047      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d82a      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031ec:	a201      	add	r2, pc, #4	@ (adr r2, 80031f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003209 	.word	0x08003209
 80031f8:	08003217 	.word	0x08003217
 80031fc:	0800322d 	.word	0x0800322d
 8003200:	0800324b 	.word	0x0800324b
 8003204:	0800324b 	.word	0x0800324b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003208:	4b81      	ldr	r3, [pc, #516]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	4a80      	ldr	r2, [pc, #512]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800320e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003214:	e01a      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321a:	3308      	adds	r3, #8
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f001 f96a 	bl	80044f8 <RCCEx_PLL2_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800322a:	e00f      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800322c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003230:	3328      	adds	r3, #40	@ 0x28
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f001 fa11 	bl	800465c <RCCEx_PLL3_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003240:	e004      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003248:	e000      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800324a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003254:	4b6e      	ldr	r3, [pc, #440]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003258:	f023 0107 	bic.w	r1, r3, #7
 800325c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	4a6b      	ldr	r2, [pc, #428]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003264:	430b      	orrs	r3, r1
 8003266:	6513      	str	r3, [r2, #80]	@ 0x50
 8003268:	e003      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800326e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800327e:	f04f 0b00 	mov.w	fp, #0
 8003282:	ea5a 030b 	orrs.w	r3, sl, fp
 8003286:	d05b      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800328c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003290:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003294:	d03b      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003296:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800329a:	d834      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800329c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032a0:	d037      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80032a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032a6:	d82e      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80032ac:	d033      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80032ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80032b2:	d828      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032b8:	d01a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80032ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032be:	d822      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80032c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032c8:	d007      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80032ca:	e01c      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032cc:	4b50      	ldr	r3, [pc, #320]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032d8:	e01e      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032de:	3308      	adds	r3, #8
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 f908 	bl	80044f8 <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032ee:	e013      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f4:	3328      	adds	r3, #40	@ 0x28
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 f9af 	bl	800465c <RCCEx_PLL3_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003304:	e008      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800330c:	e004      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003320:	4b3b      	ldr	r3, [pc, #236]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003324:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800332c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003330:	4a37      	ldr	r2, [pc, #220]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003332:	430b      	orrs	r3, r1
 8003334:	6593      	str	r3, [r2, #88]	@ 0x58
 8003336:	e003      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800333c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800334c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003350:	2300      	movs	r3, #0
 8003352:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003356:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800335a:	460b      	mov	r3, r1
 800335c:	4313      	orrs	r3, r2
 800335e:	d05d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003364:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003368:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800336c:	d03b      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800336e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003372:	d834      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003374:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003378:	d037      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800337a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800337e:	d82e      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003380:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003384:	d033      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800338a:	d828      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800338c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003390:	d01a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003396:	d822      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800339c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a0:	d007      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033a2:	e01c      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b0:	e01e      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b6:	3308      	adds	r3, #8
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 f89c 	bl	80044f8 <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033c6:	e013      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033cc:	3328      	adds	r3, #40	@ 0x28
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 f943 	bl	800465c <RCCEx_PLL3_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033dc:	e008      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033e4:	e004      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10d      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003404:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003408:	4a01      	ldr	r2, [pc, #4]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6593      	str	r3, [r2, #88]	@ 0x58
 800340e:	e005      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003428:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003432:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003436:	460b      	mov	r3, r1
 8003438:	4313      	orrs	r3, r2
 800343a:	d03a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800343c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003442:	2b30      	cmp	r3, #48	@ 0x30
 8003444:	d01f      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003446:	2b30      	cmp	r3, #48	@ 0x30
 8003448:	d819      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800344a:	2b20      	cmp	r3, #32
 800344c:	d00c      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800344e:	2b20      	cmp	r3, #32
 8003450:	d815      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d019      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003456:	2b10      	cmp	r3, #16
 8003458:	d111      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345a:	4baa      	ldr	r3, [pc, #680]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800345c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345e:	4aa9      	ldr	r2, [pc, #676]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003466:	e011      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346c:	3308      	adds	r3, #8
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f841 	bl	80044f8 <RCCEx_PLL2_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003484:	e002      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800348a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003494:	4b9b      	ldr	r3, [pc, #620]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003498:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800349c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a2:	4a98      	ldr	r2, [pc, #608]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80034c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80034cc:	460b      	mov	r3, r1
 80034ce:	4313      	orrs	r3, r2
 80034d0:	d051      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034dc:	d035      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80034de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e2:	d82e      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034e8:	d031      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80034ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034ee:	d828      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f4:	d01a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80034f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fa:	d822      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003504:	d007      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003506:	e01c      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4b7e      	ldr	r3, [pc, #504]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4a7d      	ldr	r2, [pc, #500]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003514:	e01c      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800351a:	3308      	adds	r3, #8
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f000 ffea 	bl	80044f8 <RCCEx_PLL2_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800352a:	e011      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003530:	3328      	adds	r3, #40	@ 0x28
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f001 f891 	bl	800465c <RCCEx_PLL3_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003540:	e006      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003548:	e002      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800354e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003558:	4b6a      	ldr	r3, [pc, #424]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800355a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	4a67      	ldr	r2, [pc, #412]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003568:	430b      	orrs	r3, r1
 800356a:	6513      	str	r3, [r2, #80]	@ 0x50
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003572:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003582:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800358c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003590:	460b      	mov	r3, r1
 8003592:	4313      	orrs	r3, r2
 8003594:	d053      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a0:	d033      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80035a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a6:	d82c      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035ac:	d02f      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80035ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035b2:	d826      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035b8:	d02b      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80035ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035be:	d820      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035c4:	d012      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80035c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ca:	d81a      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d022      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d4:	d115      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035da:	3308      	adds	r3, #8
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ff8a 	bl	80044f8 <RCCEx_PLL2_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035ea:	e015      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f0:	3328      	adds	r3, #40	@ 0x28
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 f831 	bl	800465c <RCCEx_PLL3_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003600:	e00a      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003608:	e006      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800360a:	bf00      	nop
 800360c:	e004      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003620:	4b38      	ldr	r3, [pc, #224]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003624:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362e:	4a35      	ldr	r2, [pc, #212]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003630:	430b      	orrs	r3, r1
 8003632:	6513      	str	r3, [r2, #80]	@ 0x50
 8003634:	e003      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800363a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800363e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003654:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003658:	460b      	mov	r3, r1
 800365a:	4313      	orrs	r3, r2
 800365c:	d058      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800365e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800366a:	d033      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003670:	d82c      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d02f      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367c:	d826      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800367e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003682:	d02b      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003684:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003688:	d820      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800368a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800368e:	d012      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003694:	d81a      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d022      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800369a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800369e:	d115      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a4:	3308      	adds	r3, #8
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 ff25 	bl	80044f8 <RCCEx_PLL2_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036b4:	e015      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ba:	3328      	adds	r3, #40	@ 0x28
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 ffcc 	bl	800465c <RCCEx_PLL3_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036ca:	e00a      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036d2:	e006      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036d4:	bf00      	nop
 80036d6:	e004      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036d8:	bf00      	nop
 80036da:	e002      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10e      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80036f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036fa:	4a02      	ldr	r2, [pc, #8]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003700:	e006      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003702:	bf00      	nop
 8003704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800370c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800371c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003726:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800372a:	460b      	mov	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	d037      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800373a:	d00e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800373c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003740:	d816      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d018      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800374a:	d111      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374c:	4bc4      	ldr	r3, [pc, #784]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	4ac3      	ldr	r2, [pc, #780]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003758:	e00f      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800375a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375e:	3308      	adds	r3, #8
 8003760:	2101      	movs	r1, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fec8 	bl	80044f8 <RCCEx_PLL2_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800376e:	e004      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003776:	e000      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003782:	4bb7      	ldr	r3, [pc, #732]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003786:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800378a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800378e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003790:	4ab3      	ldr	r2, [pc, #716]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003792:	430b      	orrs	r3, r1
 8003794:	6513      	str	r3, [r2, #80]	@ 0x50
 8003796:	e003      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800379c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80037ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d039      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d81c      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	0800380d 	.word	0x0800380d
 80037d4:	080037e1 	.word	0x080037e1
 80037d8:	080037ef 	.word	0x080037ef
 80037dc:	0800380d 	.word	0x0800380d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e0:	4b9f      	ldr	r3, [pc, #636]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	4a9e      	ldr	r2, [pc, #632]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037ec:	e00f      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f2:	3308      	adds	r3, #8
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fe7e 	bl	80044f8 <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003802:	e004      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003816:	4b92      	ldr	r3, [pc, #584]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381a:	f023 0103 	bic.w	r1, r3, #3
 800381e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003824:	4a8e      	ldr	r2, [pc, #568]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003826:	430b      	orrs	r3, r1
 8003828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800382a:	e003      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003840:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800384a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	f000 8099 	beq.w	8003988 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003856:	4b83      	ldr	r3, [pc, #524]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a82      	ldr	r2, [pc, #520]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800385c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003862:	f7fe f8bf 	bl	80019e4 <HAL_GetTick>
 8003866:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386a:	e00b      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386c:	f7fe f8ba 	bl	80019e4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	@ 0x64
 800387a:	d903      	bls.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003882:	e005      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003884:	4b77      	ldr	r3, [pc, #476]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ed      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003894:	2b00      	cmp	r3, #0
 8003896:	d173      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003898:	4b71      	ldr	r3, [pc, #452]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800389a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800389c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038a4:	4053      	eors	r3, r2
 80038a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ba:	4b69      	ldr	r3, [pc, #420]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	4a68      	ldr	r2, [pc, #416]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038c6:	4b66      	ldr	r3, [pc, #408]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	4a65      	ldr	r2, [pc, #404]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038d2:	4a63      	ldr	r2, [pc, #396]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e6:	d118      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fe f87c 	bl	80019e4 <HAL_GetTick>
 80038ec:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038f0:	e00d      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fe f877 	bl	80019e4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038fc:	1ad2      	subs	r2, r2, r3
 80038fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003902:	429a      	cmp	r2, r3
 8003904:	d903      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800390c:	e005      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800390e:	4b54      	ldr	r3, [pc, #336]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0eb      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800391a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800391e:	2b00      	cmp	r3, #0
 8003920:	d129      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800392a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800392e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003932:	d10e      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003934:	4b4a      	ldr	r3, [pc, #296]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800393c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003944:	091a      	lsrs	r2, r3, #4
 8003946:	4b48      	ldr	r3, [pc, #288]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003948:	4013      	ands	r3, r2
 800394a:	4a45      	ldr	r2, [pc, #276]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800394c:	430b      	orrs	r3, r1
 800394e:	6113      	str	r3, [r2, #16]
 8003950:	e005      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003952:	4b43      	ldr	r3, [pc, #268]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	4a42      	ldr	r2, [pc, #264]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003958:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800395c:	6113      	str	r3, [r2, #16]
 800395e:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003960:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800396a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6713      	str	r3, [r2, #112]	@ 0x70
 8003974:	e008      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800397a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800397e:	e003      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003984:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f002 0301 	and.w	r3, r2, #1
 8003994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800399e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80039a2:	460b      	mov	r3, r1
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f000 808f 	beq.w	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039b0:	2b28      	cmp	r3, #40	@ 0x28
 80039b2:	d871      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80039b4:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	08003aa1 	.word	0x08003aa1
 80039c0:	08003a99 	.word	0x08003a99
 80039c4:	08003a99 	.word	0x08003a99
 80039c8:	08003a99 	.word	0x08003a99
 80039cc:	08003a99 	.word	0x08003a99
 80039d0:	08003a99 	.word	0x08003a99
 80039d4:	08003a99 	.word	0x08003a99
 80039d8:	08003a99 	.word	0x08003a99
 80039dc:	08003a6d 	.word	0x08003a6d
 80039e0:	08003a99 	.word	0x08003a99
 80039e4:	08003a99 	.word	0x08003a99
 80039e8:	08003a99 	.word	0x08003a99
 80039ec:	08003a99 	.word	0x08003a99
 80039f0:	08003a99 	.word	0x08003a99
 80039f4:	08003a99 	.word	0x08003a99
 80039f8:	08003a99 	.word	0x08003a99
 80039fc:	08003a83 	.word	0x08003a83
 8003a00:	08003a99 	.word	0x08003a99
 8003a04:	08003a99 	.word	0x08003a99
 8003a08:	08003a99 	.word	0x08003a99
 8003a0c:	08003a99 	.word	0x08003a99
 8003a10:	08003a99 	.word	0x08003a99
 8003a14:	08003a99 	.word	0x08003a99
 8003a18:	08003a99 	.word	0x08003a99
 8003a1c:	08003aa1 	.word	0x08003aa1
 8003a20:	08003a99 	.word	0x08003a99
 8003a24:	08003a99 	.word	0x08003a99
 8003a28:	08003a99 	.word	0x08003a99
 8003a2c:	08003a99 	.word	0x08003a99
 8003a30:	08003a99 	.word	0x08003a99
 8003a34:	08003a99 	.word	0x08003a99
 8003a38:	08003a99 	.word	0x08003a99
 8003a3c:	08003aa1 	.word	0x08003aa1
 8003a40:	08003a99 	.word	0x08003a99
 8003a44:	08003a99 	.word	0x08003a99
 8003a48:	08003a99 	.word	0x08003a99
 8003a4c:	08003a99 	.word	0x08003a99
 8003a50:	08003a99 	.word	0x08003a99
 8003a54:	08003a99 	.word	0x08003a99
 8003a58:	08003a99 	.word	0x08003a99
 8003a5c:	08003aa1 	.word	0x08003aa1
 8003a60:	58024400 	.word	0x58024400
 8003a64:	58024800 	.word	0x58024800
 8003a68:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a70:	3308      	adds	r3, #8
 8003a72:	2101      	movs	r1, #1
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fd3f 	bl	80044f8 <RCCEx_PLL2_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a80:	e00f      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a86:	3328      	adds	r3, #40	@ 0x28
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fde6 	bl	800465c <RCCEx_PLL3_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003aaa:	4bbf      	ldr	r3, [pc, #764]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ab8:	4abb      	ldr	r2, [pc, #748]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 0302 	and.w	r3, r2, #2
 8003ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ade:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d041      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d824      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003af2:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b45 	.word	0x08003b45
 8003afc:	08003b11 	.word	0x08003b11
 8003b00:	08003b27 	.word	0x08003b27
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b45 	.word	0x08003b45
 8003b0c:	08003b45 	.word	0x08003b45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b14:	3308      	adds	r3, #8
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fced 	bl	80044f8 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b24:	e00f      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2a:	3328      	adds	r3, #40	@ 0x28
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fd94 	bl	800465c <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b3a:	e004      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b4e:	4b96      	ldr	r3, [pc, #600]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b52:	f023 0107 	bic.w	r1, r3, #7
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5c:	4a92      	ldr	r2, [pc, #584]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f002 0304 	and.w	r3, r2, #4
 8003b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b82:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d044      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d825      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003b98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bed 	.word	0x08003bed
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003bcf 	.word	0x08003bcf
 8003bac:	08003bed 	.word	0x08003bed
 8003bb0:	08003bed 	.word	0x08003bed
 8003bb4:	08003bed 	.word	0x08003bed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fc99 	bl	80044f8 <RCCEx_PLL2_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bcc:	e00f      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd2:	3328      	adds	r3, #40	@ 0x28
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fd40 	bl	800465c <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003be2:	e004      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	f023 0107 	bic.w	r1, r3, #7
 8003bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	4a68      	ldr	r2, [pc, #416]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f002 0320 	and.w	r3, r2, #32
 8003c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4313      	orrs	r3, r2
 8003c34:	d055      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c42:	d033      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c48:	d82c      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4e:	d02f      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c54:	d826      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c5a:	d02b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c60:	d820      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c66:	d012      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c6c:	d81a      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d022      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003c72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c76:	d115      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fc39 	bl	80044f8 <RCCEx_PLL2_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c8c:	e015      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c92:	3328      	adds	r3, #40	@ 0x28
 8003c94:	2102      	movs	r1, #2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fce0 	bl	800465c <RCCEx_PLL3_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ca2:	e00a      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003caa:	e006      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003cac:	bf00      	nop
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003cb0:	bf00      	nop
 8003cb2:	e002      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4b39      	ldr	r3, [pc, #228]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cd2:	4a35      	ldr	r2, [pc, #212]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003cee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cf8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	d058      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d0e:	d033      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003d10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d14:	d82c      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1a:	d02f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d20:	d826      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d26:	d02b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d2c:	d820      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d32:	d012      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d38:	d81a      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d022      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d42:	d115      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d48:	3308      	adds	r3, #8
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fbd3 	bl	80044f8 <RCCEx_PLL2_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d58:	e015      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5e:	3328      	adds	r3, #40	@ 0x28
 8003d60:	2102      	movs	r1, #2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fc7a 	bl	800465c <RCCEx_PLL3_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d76:	e006      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d78:	bf00      	nop
 8003d7a:	e004      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10e      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d9e:	4a02      	ldr	r2, [pc, #8]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003dc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d055      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ddc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003de0:	d033      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003de2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003de6:	d82c      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dec:	d02f      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df2:	d826      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003df4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003df8:	d02b      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003dfa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003dfe:	d820      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e04:	d012      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003e06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e0a:	d81a      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d022      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e14:	d115      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb6a 	bl	80044f8 <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e2a:	e015      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e30:	3328      	adds	r3, #40	@ 0x28
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fc11 	bl	800465c <RCCEx_PLL3_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e40:	e00a      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e48:	e006      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e004      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e60:	4ba0      	ldr	r3, [pc, #640]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e70:	4a9c      	ldr	r2, [pc, #624]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e72:	430b      	orrs	r3, r1
 8003e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e76:	e003      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e88:	f002 0308 	and.w	r3, r2, #8
 8003e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e96:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	d01e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb2:	3328      	adds	r3, #40	@ 0x28
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fbd0 	bl	800465c <RCCEx_PLL3_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003ec8:	4b86      	ldr	r3, [pc, #536]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed8:	4a82      	ldr	r2, [pc, #520]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f002 0310 	and.w	r3, r2, #16
 8003eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ef4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4313      	orrs	r3, r2
 8003efc:	d01e      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f10:	3328      	adds	r3, #40	@ 0x28
 8003f12:	2102      	movs	r1, #2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fba1 	bl	800465c <RCCEx_PLL3_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f26:	4b6f      	ldr	r3, [pc, #444]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f36:	4a6b      	ldr	r2, [pc, #428]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f4e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d03e      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f64:	d022      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f6a:	d81b      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f74:	d00b      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003f76:	e015      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fab9 	bl	80044f8 <RCCEx_PLL2_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f8c:	e00f      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f92:	3328      	adds	r3, #40	@ 0x28
 8003f94:	2102      	movs	r1, #2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fb60 	bl	800465c <RCCEx_PLL3_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fa2:	e004      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10b      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fc6:	4a47      	ldr	r2, [pc, #284]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fcc:	e003      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003fe2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fe8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003fec:	460b      	mov	r3, r1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	d03b      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ffe:	d01f      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004000:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004004:	d818      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800400a:	d003      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800400c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004010:	d007      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004012:	e011      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4b33      	ldr	r3, [pc, #204]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	4a32      	ldr	r2, [pc, #200]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004020:	e00f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004026:	3328      	adds	r3, #40	@ 0x28
 8004028:	2101      	movs	r1, #1
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fb16 	bl	800465c <RCCEx_PLL3_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404a:	4b26      	ldr	r3, [pc, #152]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800404c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800405a:	4a22      	ldr	r2, [pc, #136]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800405c:	430b      	orrs	r3, r1
 800405e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004066:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800406a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004076:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004078:	2300      	movs	r3, #0
 800407a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800407c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d034      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d007      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004096:	e011      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004098:	4b12      	ldr	r3, [pc, #72]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	4a11      	ldr	r2, [pc, #68]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800409e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040a4:	e00e      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040aa:	3308      	adds	r3, #8
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fa22 	bl	80044f8 <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10d      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040da:	4a02      	ldr	r2, [pc, #8]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80040e2:	bf00      	nop
 80040e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80040fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80040fe:	2300      	movs	r3, #0
 8004100:	667b      	str	r3, [r7, #100]	@ 0x64
 8004102:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d00c      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800410c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004110:	3328      	adds	r3, #40	@ 0x28
 8004112:	2102      	movs	r1, #2
 8004114:	4618      	mov	r0, r3
 8004116:	f000 faa1 	bl	800465c <RCCEx_PLL3_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004132:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004134:	2300      	movs	r3, #0
 8004136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004138:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800413c:	460b      	mov	r3, r1
 800413e:	4313      	orrs	r3, r2
 8004140:	d036      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800414c:	d018      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800414e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004152:	d811      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004158:	d014      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800415a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800415e:	d80b      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d011      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004168:	d106      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416a:	4bb7      	ldr	r3, [pc, #732]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	4ab6      	ldr	r2, [pc, #728]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004176:	e008      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800417e:	e004      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004180:	bf00      	nop
 8004182:	e002      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004192:	4bad      	ldr	r3, [pc, #692]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004196:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800419a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041a0:	4aa9      	ldr	r2, [pc, #676]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80041a6:	e003      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80041bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80041be:	2300      	movs	r3, #0
 80041c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80041c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80041c6:	460b      	mov	r3, r1
 80041c8:	4313      	orrs	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041cc:	4b9e      	ldr	r3, [pc, #632]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	4a9b      	ldr	r2, [pc, #620]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ee:	2300      	movs	r3, #0
 80041f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fc:	4b92      	ldr	r3, [pc, #584]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004200:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800420a:	4a8f      	ldr	r2, [pc, #572]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800420c:	430b      	orrs	r3, r1
 800420e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800421c:	643b      	str	r3, [r7, #64]	@ 0x40
 800421e:	2300      	movs	r3, #0
 8004220:	647b      	str	r3, [r7, #68]	@ 0x44
 8004222:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800422c:	4b86      	ldr	r3, [pc, #536]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	4a85      	ldr	r2, [pc, #532]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004232:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004236:	6113      	str	r3, [r2, #16]
 8004238:	4b83      	ldr	r3, [pc, #524]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800423a:	6919      	ldr	r1, [r3, #16]
 800423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004244:	4a80      	ldr	r2, [pc, #512]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004246:	430b      	orrs	r3, r1
 8004248:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004256:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004258:	2300      	movs	r3, #0
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800425c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004266:	4b78      	ldr	r3, [pc, #480]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800426e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004274:	4a74      	ldr	r2, [pc, #464]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004276:	430b      	orrs	r3, r1
 8004278:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004286:	633b      	str	r3, [r7, #48]	@ 0x30
 8004288:	2300      	movs	r3, #0
 800428a:	637b      	str	r3, [r7, #52]	@ 0x34
 800428c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004296:	4b6c      	ldr	r3, [pc, #432]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800429e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	4a68      	ldr	r2, [pc, #416]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80042ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	2100      	movs	r1, #0
 80042b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d011      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042cc:	3308      	adds	r3, #8
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f911 	bl	80044f8 <RCCEx_PLL2_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	2100      	movs	r1, #0
 80042f6:	6239      	str	r1, [r7, #32]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d011      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430c:	3308      	adds	r3, #8
 800430e:	2101      	movs	r1, #1
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f8f1 	bl	80044f8 <RCCEx_PLL2_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800431c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800432c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	2100      	movs	r1, #0
 8004336:	61b9      	str	r1, [r7, #24]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004342:	460b      	mov	r3, r1
 8004344:	4313      	orrs	r3, r2
 8004346:	d011      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434c:	3308      	adds	r3, #8
 800434e:	2102      	movs	r1, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f8d1 	bl	80044f8 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800435c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800436c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	2100      	movs	r1, #0
 8004376:	6139      	str	r1, [r7, #16]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004382:	460b      	mov	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	d011      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800438c:	3328      	adds	r3, #40	@ 0x28
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f963 	bl	800465c <RCCEx_PLL3_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800439c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80043ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	2100      	movs	r1, #0
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d011      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043cc:	3328      	adds	r3, #40	@ 0x28
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f943 	bl	800465c <RCCEx_PLL3_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	2100      	movs	r1, #0
 80043f6:	6039      	str	r1, [r7, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d011      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440c:	3328      	adds	r3, #40	@ 0x28
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f923 	bl	800465c <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800441c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800442c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
}
 800443a:	4618      	mov	r0, r3
 800443c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004440:	46bd      	mov	sp, r7
 8004442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400

0800444c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004454:	4b26      	ldr	r3, [pc, #152]	@ (80044f0 <HAL_RCCEx_CRSConfig+0xa4>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445a:	4a25      	ldr	r2, [pc, #148]	@ (80044f0 <HAL_RCCEx_CRSConfig+0xa4>)
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8004464:	4b22      	ldr	r3, [pc, #136]	@ (80044f0 <HAL_RCCEx_CRSConfig+0xa4>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446a:	4a21      	ldr	r2, [pc, #132]	@ (80044f0 <HAL_RCCEx_CRSConfig+0xa4>)
 800446c:	f023 0302 	bic.w	r3, r3, #2
 8004470:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8004474:	f7fd fac2 	bl	80019fc <HAL_GetREVID>
 8004478:	4603      	mov	r3, r0
 800447a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800447e:	4293      	cmp	r3, r2
 8004480:	d80b      	bhi.n	800449a <HAL_RCCEx_CRSConfig+0x4e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800448a:	d106      	bne.n	800449a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e008      	b.n	80044ac <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80044c2:	4a0c      	ldr	r2, [pc, #48]	@ (80044f4 <HAL_RCCEx_CRSConfig+0xa8>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80044c8:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <HAL_RCCEx_CRSConfig+0xa8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	4907      	ldr	r1, [pc, #28]	@ (80044f4 <HAL_RCCEx_CRSConfig+0xa8>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80044dc:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <HAL_RCCEx_CRSConfig+0xa8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <HAL_RCCEx_CRSConfig+0xa8>)
 80044e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80044e6:	6013      	str	r3, [r2, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	58024400 	.word	0x58024400
 80044f4:	40008400 	.word	0x40008400

080044f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004506:	4b53      	ldr	r3, [pc, #332]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b03      	cmp	r3, #3
 8004510:	d101      	bne.n	8004516 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e099      	b.n	800464a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004516:	4b4f      	ldr	r3, [pc, #316]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a4e      	ldr	r2, [pc, #312]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 800451c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004522:	f7fd fa5f 	bl	80019e4 <HAL_GetTick>
 8004526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004528:	e008      	b.n	800453c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800452a:	f7fd fa5b 	bl	80019e4 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e086      	b.n	800464a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800453c:	4b45      	ldr	r3, [pc, #276]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f0      	bne.n	800452a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004548:	4b42      	ldr	r3, [pc, #264]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	031b      	lsls	r3, r3, #12
 8004556:	493f      	ldr	r1, [pc, #252]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 8004558:	4313      	orrs	r3, r2
 800455a:	628b      	str	r3, [r1, #40]	@ 0x28
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	3b01      	subs	r3, #1
 8004562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	3b01      	subs	r3, #1
 800456c:	025b      	lsls	r3, r3, #9
 800456e:	b29b      	uxth	r3, r3
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	3b01      	subs	r3, #1
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	3b01      	subs	r3, #1
 8004586:	061b      	lsls	r3, r3, #24
 8004588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800458c:	4931      	ldr	r1, [pc, #196]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004592:	4b30      	ldr	r3, [pc, #192]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	492d      	ldr	r1, [pc, #180]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	f023 0220 	bic.w	r2, r3, #32
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	4928      	ldr	r1, [pc, #160]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045b6:	4b27      	ldr	r3, [pc, #156]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	4a26      	ldr	r2, [pc, #152]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045bc:	f023 0310 	bic.w	r3, r3, #16
 80045c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045c2:	4b24      	ldr	r3, [pc, #144]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045c6:	4b24      	ldr	r3, [pc, #144]	@ (8004658 <RCCEx_PLL2_Config+0x160>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	69d2      	ldr	r2, [r2, #28]
 80045ce:	00d2      	lsls	r2, r2, #3
 80045d0:	4920      	ldr	r1, [pc, #128]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045da:	4a1e      	ldr	r2, [pc, #120]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045dc:	f043 0310 	orr.w	r3, r3, #16
 80045e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80045e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ec:	4a19      	ldr	r2, [pc, #100]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045f4:	e00f      	b.n	8004616 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045fc:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	4a14      	ldr	r2, [pc, #80]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 8004602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004608:	e005      	b.n	8004616 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800460a:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	4a11      	ldr	r2, [pc, #68]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 8004610:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004614:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004616:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a0e      	ldr	r2, [pc, #56]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 800461c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004622:	f7fd f9df 	bl	80019e4 <HAL_GetTick>
 8004626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004628:	e008      	b.n	800463c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800462a:	f7fd f9db 	bl	80019e4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e006      	b.n	800464a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800463c:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <RCCEx_PLL2_Config+0x15c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
 8004658:	ffff0007 	.word	0xffff0007

0800465c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800466a:	4b53      	ldr	r3, [pc, #332]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b03      	cmp	r3, #3
 8004674:	d101      	bne.n	800467a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e099      	b.n	80047ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800467a:	4b4f      	ldr	r3, [pc, #316]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a4e      	ldr	r2, [pc, #312]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004686:	f7fd f9ad 	bl	80019e4 <HAL_GetTick>
 800468a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800468c:	e008      	b.n	80046a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800468e:	f7fd f9a9 	bl	80019e4 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e086      	b.n	80047ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046a0:	4b45      	ldr	r3, [pc, #276]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046ac:	4b42      	ldr	r3, [pc, #264]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	051b      	lsls	r3, r3, #20
 80046ba:	493f      	ldr	r1, [pc, #252]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	628b      	str	r3, [r1, #40]	@ 0x28
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	025b      	lsls	r3, r3, #9
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	3b01      	subs	r3, #1
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046f0:	4931      	ldr	r1, [pc, #196]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046f6:	4b30      	ldr	r3, [pc, #192]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	492d      	ldr	r1, [pc, #180]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004704:	4313      	orrs	r3, r2
 8004706:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004708:	4b2b      	ldr	r3, [pc, #172]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	4928      	ldr	r1, [pc, #160]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	4a26      	ldr	r2, [pc, #152]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004726:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472a:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <RCCEx_PLL3_Config+0x160>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	69d2      	ldr	r2, [r2, #28]
 8004732:	00d2      	lsls	r2, r2, #3
 8004734:	4920      	ldr	r1, [pc, #128]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800473a:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004744:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800474c:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004752:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004756:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004758:	e00f      	b.n	800477a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d106      	bne.n	800476e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004760:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4a14      	ldr	r2, [pc, #80]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004766:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800476a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800476c:	e005      	b.n	800477a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800476e:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	4a11      	ldr	r2, [pc, #68]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004774:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004778:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800477a:	4b0f      	ldr	r3, [pc, #60]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a0e      	ldr	r2, [pc, #56]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 8004780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004786:	f7fd f92d 	bl	80019e4 <HAL_GetTick>
 800478a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800478c:	e008      	b.n	80047a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800478e:	f7fd f929 	bl	80019e4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e006      	b.n	80047ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <RCCEx_PLL3_Config+0x15c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400
 80047bc:	ffff0007 	.word	0xffff0007

080047c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e049      	b.n	8004866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc ff4a 	bl	8001680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f000 fae4 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e05e      	b.n	8004946 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004954 <HAL_TIM_Base_Start_IT+0xe4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02c      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b2:	d027      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a27      	ldr	r2, [pc, #156]	@ (8004958 <HAL_TIM_Base_Start_IT+0xe8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d022      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a26      	ldr	r2, [pc, #152]	@ (800495c <HAL_TIM_Base_Start_IT+0xec>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01d      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a24      	ldr	r2, [pc, #144]	@ (8004960 <HAL_TIM_Base_Start_IT+0xf0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a23      	ldr	r2, [pc, #140]	@ (8004964 <HAL_TIM_Base_Start_IT+0xf4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a21      	ldr	r2, [pc, #132]	@ (8004968 <HAL_TIM_Base_Start_IT+0xf8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a20      	ldr	r2, [pc, #128]	@ (800496c <HAL_TIM_Base_Start_IT+0xfc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004970 <HAL_TIM_Base_Start_IT+0x100>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x94>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004974 <HAL_TIM_Base_Start_IT+0x104>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d115      	bne.n	8004930 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <HAL_TIM_Base_Start_IT+0x108>)
 800490c:	4013      	ands	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b06      	cmp	r3, #6
 8004914:	d015      	beq.n	8004942 <HAL_TIM_Base_Start_IT+0xd2>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491c:	d011      	beq.n	8004942 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492e:	e008      	b.n	8004942 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e000      	b.n	8004944 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40001800 	.word	0x40001800
 800496c:	40014000 	.word	0x40014000
 8004970:	4000e000 	.word	0x4000e000
 8004974:	4000e400 	.word	0x4000e400
 8004978:	00010007 	.word	0x00010007

0800497c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d020      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01b      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0202 	mvn.w	r2, #2
 80049b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9e2 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9d4 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f9e5 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d020      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01b      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0204 	mvn.w	r2, #4
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9bc 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f9ae 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f9bf 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d020      	beq.n	8004a78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0208 	mvn.w	r2, #8
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f996 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f988 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f999 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0210 	mvn.w	r2, #16
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2208      	movs	r2, #8
 8004a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f970 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f962 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f973 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0201 	mvn.w	r2, #1
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fb fc14 	bl	8000310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00c      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fb51 	bl	80051b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00c      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fb49 	bl	80051cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00c      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f92d 	bl	8004db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00c      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0220 	mvn.w	r2, #32
 8004b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb11 	bl	80051a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0dc      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x1d6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d6c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a64      	ldr	r2, [pc, #400]	@ (8004d70 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	f000 80a9 	beq.w	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004be4:	4a62      	ldr	r2, [pc, #392]	@ (8004d70 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	f200 80ae 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bec:	4a61      	ldr	r2, [pc, #388]	@ (8004d74 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	f000 80a1 	beq.w	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bf4:	4a5f      	ldr	r2, [pc, #380]	@ (8004d74 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	f200 80a6 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8004d78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	f000 8099 	beq.w	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c04:	4a5c      	ldr	r2, [pc, #368]	@ (8004d78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	f200 809e 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c10:	f000 8091 	beq.w	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c18:	f200 8096 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c20:	f000 8089 	beq.w	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c28:	f200 808e 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c30:	d03e      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0x124>
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c36:	f200 8087 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3e:	f000 8086 	beq.w	8004d4e <HAL_TIM_ConfigClockSource+0x1c2>
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c46:	d87f      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c48:	2b70      	cmp	r3, #112	@ 0x70
 8004c4a:	d01a      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xf6>
 8004c4c:	2b70      	cmp	r3, #112	@ 0x70
 8004c4e:	d87b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c50:	2b60      	cmp	r3, #96	@ 0x60
 8004c52:	d050      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16a>
 8004c54:	2b60      	cmp	r3, #96	@ 0x60
 8004c56:	d877      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c58:	2b50      	cmp	r3, #80	@ 0x50
 8004c5a:	d03c      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x14a>
 8004c5c:	2b50      	cmp	r3, #80	@ 0x50
 8004c5e:	d873      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c60:	2b40      	cmp	r3, #64	@ 0x40
 8004c62:	d058      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x18a>
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d86f      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c68:	2b30      	cmp	r3, #48	@ 0x30
 8004c6a:	d064      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c6c:	2b30      	cmp	r3, #48	@ 0x30
 8004c6e:	d86b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d060      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d867      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d05c      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d05a      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c80:	e062      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c92:	f000 f9cb 	bl	800502c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	609a      	str	r2, [r3, #8]
      break;
 8004cae:	e04f      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc0:	f000 f9b4 	bl	800502c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cd2:	609a      	str	r2, [r3, #8]
      break;
 8004cd4:	e03c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 f924 	bl	8004f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2150      	movs	r1, #80	@ 0x50
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f97e 	bl	8004ff0 <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e02c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	461a      	mov	r2, r3
 8004d04:	f000 f943 	bl	8004f8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2160      	movs	r1, #96	@ 0x60
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f96e 	bl	8004ff0 <TIM_ITRx_SetConfig>
      break;
 8004d14:	e01c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 f904 	bl	8004f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2140      	movs	r1, #64	@ 0x40
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f95e 	bl	8004ff0 <TIM_ITRx_SetConfig>
      break;
 8004d34:	e00c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f000 f955 	bl	8004ff0 <TIM_ITRx_SetConfig>
      break;
 8004d46:	e003      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4c:	e000      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	ffceff88 	.word	0xffceff88
 8004d70:	00100040 	.word	0x00100040
 8004d74:	00100030 	.word	0x00100030
 8004d78:	00100020 	.word	0x00100020

08004d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a4a      	ldr	r2, [pc, #296]	@ (8004f08 <TIM_Base_SetConfig+0x13c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dea:	d00f      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a47      	ldr	r2, [pc, #284]	@ (8004f0c <TIM_Base_SetConfig+0x140>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a46      	ldr	r2, [pc, #280]	@ (8004f10 <TIM_Base_SetConfig+0x144>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a45      	ldr	r2, [pc, #276]	@ (8004f14 <TIM_Base_SetConfig+0x148>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a44      	ldr	r2, [pc, #272]	@ (8004f18 <TIM_Base_SetConfig+0x14c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d108      	bne.n	8004e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a39      	ldr	r2, [pc, #228]	@ (8004f08 <TIM_Base_SetConfig+0x13c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d027      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2c:	d023      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a36      	ldr	r2, [pc, #216]	@ (8004f0c <TIM_Base_SetConfig+0x140>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01f      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a35      	ldr	r2, [pc, #212]	@ (8004f10 <TIM_Base_SetConfig+0x144>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01b      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a34      	ldr	r2, [pc, #208]	@ (8004f14 <TIM_Base_SetConfig+0x148>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d017      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a33      	ldr	r2, [pc, #204]	@ (8004f18 <TIM_Base_SetConfig+0x14c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a32      	ldr	r2, [pc, #200]	@ (8004f1c <TIM_Base_SetConfig+0x150>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00f      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a31      	ldr	r2, [pc, #196]	@ (8004f20 <TIM_Base_SetConfig+0x154>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a30      	ldr	r2, [pc, #192]	@ (8004f24 <TIM_Base_SetConfig+0x158>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2f      	ldr	r2, [pc, #188]	@ (8004f28 <TIM_Base_SetConfig+0x15c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_Base_SetConfig+0xaa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2e      	ldr	r2, [pc, #184]	@ (8004f2c <TIM_Base_SetConfig+0x160>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d108      	bne.n	8004e88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a16      	ldr	r2, [pc, #88]	@ (8004f08 <TIM_Base_SetConfig+0x13c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_Base_SetConfig+0x108>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <TIM_Base_SetConfig+0x14c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_Base_SetConfig+0x108>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	@ (8004f1c <TIM_Base_SetConfig+0x150>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0x108>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <TIM_Base_SetConfig+0x154>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0x108>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <TIM_Base_SetConfig+0x158>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d103      	bne.n	8004edc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]
  }
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40010400 	.word	0x40010400
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800
 8004f28:	4000e000 	.word	0x4000e000
 8004f2c:	4000e400 	.word	0x4000e400

08004f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f023 0201 	bic.w	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f023 030a 	bic.w	r3, r3, #10
 8004f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b087      	sub	sp, #28
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f023 0210 	bic.w	r2, r3, #16
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	031b      	lsls	r3, r3, #12
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <TIM_ITRx_SetConfig+0x38>)
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	f043 0307 	orr.w	r3, r3, #7
 8005012:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	609a      	str	r2, [r3, #8]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	ffcfff8f 	.word	0xffcfff8f

0800502c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	021a      	lsls	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	431a      	orrs	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4313      	orrs	r3, r2
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e077      	b.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a35      	ldr	r2, [pc, #212]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a34      	ldr	r2, [pc, #208]	@ (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a25      	ldr	r2, [pc, #148]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d02c      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f6:	d027      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a22      	ldr	r2, [pc, #136]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a21      	ldr	r2, [pc, #132]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01d      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1f      	ldr	r2, [pc, #124]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1a      	ldr	r2, [pc, #104]	@ (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1b      	ldr	r2, [pc, #108]	@ (8005194 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1a      	ldr	r2, [pc, #104]	@ (8005198 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a18      	ldr	r2, [pc, #96]	@ (800519c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a17      	ldr	r2, [pc, #92]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10c      	bne.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800514e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	4313      	orrs	r3, r2
 8005158:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40010000 	.word	0x40010000
 8005184:	40010400 	.word	0x40010400
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00
 8005194:	40001800 	.word	0x40001800
 8005198:	40014000 	.word	0x40014000
 800519c:	4000e000 	.word	0x4000e000
 80051a0:	4000e400 	.word	0x4000e400

080051a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <memset>:
 80051e0:	4402      	add	r2, r0
 80051e2:	4603      	mov	r3, r0
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d100      	bne.n	80051ea <memset+0xa>
 80051e8:	4770      	bx	lr
 80051ea:	f803 1b01 	strb.w	r1, [r3], #1
 80051ee:	e7f9      	b.n	80051e4 <memset+0x4>

080051f0 <__libc_init_array>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005228 <__libc_init_array+0x38>)
 80051f4:	4c0d      	ldr	r4, [pc, #52]	@ (800522c <__libc_init_array+0x3c>)
 80051f6:	1b64      	subs	r4, r4, r5
 80051f8:	10a4      	asrs	r4, r4, #2
 80051fa:	2600      	movs	r6, #0
 80051fc:	42a6      	cmp	r6, r4
 80051fe:	d109      	bne.n	8005214 <__libc_init_array+0x24>
 8005200:	4d0b      	ldr	r5, [pc, #44]	@ (8005230 <__libc_init_array+0x40>)
 8005202:	4c0c      	ldr	r4, [pc, #48]	@ (8005234 <__libc_init_array+0x44>)
 8005204:	f000 f85c 	bl	80052c0 <_init>
 8005208:	1b64      	subs	r4, r4, r5
 800520a:	10a4      	asrs	r4, r4, #2
 800520c:	2600      	movs	r6, #0
 800520e:	42a6      	cmp	r6, r4
 8005210:	d105      	bne.n	800521e <__libc_init_array+0x2e>
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	f855 3b04 	ldr.w	r3, [r5], #4
 8005218:	4798      	blx	r3
 800521a:	3601      	adds	r6, #1
 800521c:	e7ee      	b.n	80051fc <__libc_init_array+0xc>
 800521e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005222:	4798      	blx	r3
 8005224:	3601      	adds	r6, #1
 8005226:	e7f2      	b.n	800520e <__libc_init_array+0x1e>
 8005228:	080052e8 	.word	0x080052e8
 800522c:	080052e8 	.word	0x080052e8
 8005230:	080052e8 	.word	0x080052e8
 8005234:	080052ec 	.word	0x080052ec

08005238 <round>:
 8005238:	ee10 3a90 	vmov	r3, s1
 800523c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8005240:	f2a1 32ff 	subw	r2, r1, #1023	@ 0x3ff
 8005244:	2a13      	cmp	r2, #19
 8005246:	b510      	push	{r4, lr}
 8005248:	ee10 4a10 	vmov	r4, s0
 800524c:	dc1d      	bgt.n	800528a <round+0x52>
 800524e:	2a00      	cmp	r2, #0
 8005250:	da0d      	bge.n	800526e <round+0x36>
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005256:	3201      	adds	r2, #1
 8005258:	bf04      	itt	eq
 800525a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800525e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8005262:	2200      	movs	r2, #0
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	ec41 0b10 	vmov	d0, r0, r1
 800526c:	e014      	b.n	8005298 <round+0x60>
 800526e:	4813      	ldr	r0, [pc, #76]	@ (80052bc <round+0x84>)
 8005270:	4110      	asrs	r0, r2
 8005272:	ea00 0103 	and.w	r1, r0, r3
 8005276:	4321      	orrs	r1, r4
 8005278:	d00e      	beq.n	8005298 <round+0x60>
 800527a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800527e:	fa41 f202 	asr.w	r2, r1, r2
 8005282:	4413      	add	r3, r2
 8005284:	ea23 0300 	bic.w	r3, r3, r0
 8005288:	e7eb      	b.n	8005262 <round+0x2a>
 800528a:	2a33      	cmp	r2, #51	@ 0x33
 800528c:	dd05      	ble.n	800529a <round+0x62>
 800528e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005292:	d101      	bne.n	8005298 <round+0x60>
 8005294:	ee30 0b00 	vadd.f64	d0, d0, d0
 8005298:	bd10      	pop	{r4, pc}
 800529a:	f2a1 4113 	subw	r1, r1, #1043	@ 0x413
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	40c8      	lsrs	r0, r1
 80052a4:	4220      	tst	r0, r4
 80052a6:	d0f7      	beq.n	8005298 <round+0x60>
 80052a8:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80052ac:	2201      	movs	r2, #1
 80052ae:	408a      	lsls	r2, r1
 80052b0:	1912      	adds	r2, r2, r4
 80052b2:	bf28      	it	cs
 80052b4:	3301      	addcs	r3, #1
 80052b6:	ea22 0200 	bic.w	r2, r2, r0
 80052ba:	e7d3      	b.n	8005264 <round+0x2c>
 80052bc:	000fffff 	.word	0x000fffff

080052c0 <_init>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr

080052cc <_fini>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr
