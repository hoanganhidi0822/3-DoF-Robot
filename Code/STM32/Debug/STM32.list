
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca50  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800cd20  0800cd20  0000dd20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d184  0800d184  0000e184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d18c  0800d18c  0000e18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d190  0800d190  0000e190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  0800d194  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004ac  240001e8  0800d37c  0000f1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000694  0800d37c  0000f694  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019ab0  00000000  00000000  0000f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca9  00000000  00000000  00028cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  0002b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001056  00000000  00000000  0002ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004236  00000000  00000000  0002de7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cb2b  00000000  00000000  000320b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014f612  00000000  00000000  0004ebdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019e1f1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000695c  00000000  00000000  0019e234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004c  00000000  00000000  001a4b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cd08 	.word	0x0800cd08

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0800cd08 	.word	0x0800cd08

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a2 	b.w	8000a84 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	460c      	mov	r4, r1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d14e      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d4:	4694      	mov	ip, r2
 80007d6:	458c      	cmp	ip, r1
 80007d8:	4686      	mov	lr, r0
 80007da:	fab2 f282 	clz	r2, r2
 80007de:	d962      	bls.n	80008a6 <__udivmoddi4+0xde>
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	4091      	lsls	r1, r2
 80007e8:	fa20 f303 	lsr.w	r3, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	4319      	orrs	r1, r3
 80007f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fa:	fa1f f68c 	uxth.w	r6, ip
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000806:	fb07 1114 	mls	r1, r7, r4, r1
 800080a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080e:	fb04 f106 	mul.w	r1, r4, r6
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f104 30ff 	add.w	r0, r4, #4294967295
 800081e:	f080 8112 	bcs.w	8000a46 <__udivmoddi4+0x27e>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 810f 	bls.w	8000a46 <__udivmoddi4+0x27e>
 8000828:	3c02      	subs	r4, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	fa1f f38e 	uxth.w	r3, lr
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb00 f606 	mul.w	r6, r0, r6
 8000842:	429e      	cmp	r6, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f100 31ff 	add.w	r1, r0, #4294967295
 800084e:	f080 80fc 	bcs.w	8000a4a <__udivmoddi4+0x282>
 8000852:	429e      	cmp	r6, r3
 8000854:	f240 80f9 	bls.w	8000a4a <__udivmoddi4+0x282>
 8000858:	4463      	add	r3, ip
 800085a:	3802      	subs	r0, #2
 800085c:	1b9b      	subs	r3, r3, r6
 800085e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000862:	2100      	movs	r1, #0
 8000864:	b11d      	cbz	r5, 800086e <__udivmoddi4+0xa6>
 8000866:	40d3      	lsrs	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	e9c5 3200 	strd	r3, r2, [r5]
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d905      	bls.n	8000882 <__udivmoddi4+0xba>
 8000876:	b10d      	cbz	r5, 800087c <__udivmoddi4+0xb4>
 8000878:	e9c5 0100 	strd	r0, r1, [r5]
 800087c:	2100      	movs	r1, #0
 800087e:	4608      	mov	r0, r1
 8000880:	e7f5      	b.n	800086e <__udivmoddi4+0xa6>
 8000882:	fab3 f183 	clz	r1, r3
 8000886:	2900      	cmp	r1, #0
 8000888:	d146      	bne.n	8000918 <__udivmoddi4+0x150>
 800088a:	42a3      	cmp	r3, r4
 800088c:	d302      	bcc.n	8000894 <__udivmoddi4+0xcc>
 800088e:	4290      	cmp	r0, r2
 8000890:	f0c0 80f0 	bcc.w	8000a74 <__udivmoddi4+0x2ac>
 8000894:	1a86      	subs	r6, r0, r2
 8000896:	eb64 0303 	sbc.w	r3, r4, r3
 800089a:	2001      	movs	r0, #1
 800089c:	2d00      	cmp	r5, #0
 800089e:	d0e6      	beq.n	800086e <__udivmoddi4+0xa6>
 80008a0:	e9c5 6300 	strd	r6, r3, [r5]
 80008a4:	e7e3      	b.n	800086e <__udivmoddi4+0xa6>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	f040 8090 	bne.w	80009cc <__udivmoddi4+0x204>
 80008ac:	eba1 040c 	sub.w	r4, r1, ip
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa1f f78c 	uxth.w	r7, ip
 80008b8:	2101      	movs	r1, #1
 80008ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80008be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ca:	fb07 f006 	mul.w	r0, r7, r6
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x11c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x11a>
 80008dc:	4298      	cmp	r0, r3
 80008de:	f200 80cd 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008e2:	4626      	mov	r6, r4
 80008e4:	1a1c      	subs	r4, r3, r0
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008f6:	fb00 f707 	mul.w	r7, r0, r7
 80008fa:	429f      	cmp	r7, r3
 80008fc:	d908      	bls.n	8000910 <__udivmoddi4+0x148>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f100 34ff 	add.w	r4, r0, #4294967295
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x146>
 8000908:	429f      	cmp	r7, r3
 800090a:	f200 80b0 	bhi.w	8000a6e <__udivmoddi4+0x2a6>
 800090e:	4620      	mov	r0, r4
 8000910:	1bdb      	subs	r3, r3, r7
 8000912:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000916:	e7a5      	b.n	8000864 <__udivmoddi4+0x9c>
 8000918:	f1c1 0620 	rsb	r6, r1, #32
 800091c:	408b      	lsls	r3, r1
 800091e:	fa22 f706 	lsr.w	r7, r2, r6
 8000922:	431f      	orrs	r7, r3
 8000924:	fa20 fc06 	lsr.w	ip, r0, r6
 8000928:	fa04 f301 	lsl.w	r3, r4, r1
 800092c:	ea43 030c 	orr.w	r3, r3, ip
 8000930:	40f4      	lsrs	r4, r6
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	0c38      	lsrs	r0, r7, #16
 8000938:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800093c:	fbb4 fef0 	udiv	lr, r4, r0
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fb00 441e 	mls	r4, r0, lr, r4
 8000948:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800094c:	fb0e f90c 	mul.w	r9, lr, ip
 8000950:	45a1      	cmp	r9, r4
 8000952:	fa02 f201 	lsl.w	r2, r2, r1
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x1a6>
 8000958:	193c      	adds	r4, r7, r4
 800095a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800095e:	f080 8084 	bcs.w	8000a6a <__udivmoddi4+0x2a2>
 8000962:	45a1      	cmp	r9, r4
 8000964:	f240 8081 	bls.w	8000a6a <__udivmoddi4+0x2a2>
 8000968:	f1ae 0e02 	sub.w	lr, lr, #2
 800096c:	443c      	add	r4, r7
 800096e:	eba4 0409 	sub.w	r4, r4, r9
 8000972:	fa1f f983 	uxth.w	r9, r3
 8000976:	fbb4 f3f0 	udiv	r3, r4, r0
 800097a:	fb00 4413 	mls	r4, r0, r3, r4
 800097e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000982:	fb03 fc0c 	mul.w	ip, r3, ip
 8000986:	45a4      	cmp	ip, r4
 8000988:	d907      	bls.n	800099a <__udivmoddi4+0x1d2>
 800098a:	193c      	adds	r4, r7, r4
 800098c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000990:	d267      	bcs.n	8000a62 <__udivmoddi4+0x29a>
 8000992:	45a4      	cmp	ip, r4
 8000994:	d965      	bls.n	8000a62 <__udivmoddi4+0x29a>
 8000996:	3b02      	subs	r3, #2
 8000998:	443c      	add	r4, r7
 800099a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800099e:	fba0 9302 	umull	r9, r3, r0, r2
 80009a2:	eba4 040c 	sub.w	r4, r4, ip
 80009a6:	429c      	cmp	r4, r3
 80009a8:	46ce      	mov	lr, r9
 80009aa:	469c      	mov	ip, r3
 80009ac:	d351      	bcc.n	8000a52 <__udivmoddi4+0x28a>
 80009ae:	d04e      	beq.n	8000a4e <__udivmoddi4+0x286>
 80009b0:	b155      	cbz	r5, 80009c8 <__udivmoddi4+0x200>
 80009b2:	ebb8 030e 	subs.w	r3, r8, lr
 80009b6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ba:	fa04 f606 	lsl.w	r6, r4, r6
 80009be:	40cb      	lsrs	r3, r1
 80009c0:	431e      	orrs	r6, r3
 80009c2:	40cc      	lsrs	r4, r1
 80009c4:	e9c5 6400 	strd	r6, r4, [r5]
 80009c8:	2100      	movs	r1, #0
 80009ca:	e750      	b.n	800086e <__udivmoddi4+0xa6>
 80009cc:	f1c2 0320 	rsb	r3, r2, #32
 80009d0:	fa20 f103 	lsr.w	r1, r0, r3
 80009d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d8:	fa24 f303 	lsr.w	r3, r4, r3
 80009dc:	4094      	lsls	r4, r2
 80009de:	430c      	orrs	r4, r1
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3110 	mls	r1, r8, r0, r3
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x24c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29e>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29e>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x276>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x296>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x296>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e739      	b.n	80008ba <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f0      	b.n	800082c <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e706      	b.n	800085c <__udivmoddi4+0x94>
 8000a4e:	45c8      	cmp	r8, r9
 8000a50:	d2ae      	bcs.n	80009b0 <__udivmoddi4+0x1e8>
 8000a52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a8      	b.n	80009b0 <__udivmoddi4+0x1e8>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x276>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e799      	b.n	800099a <__udivmoddi4+0x1d2>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x24c>
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	e77f      	b.n	800096e <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74d      	b.n	8000910 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e70f      	b.n	800089c <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e730      	b.n	80008e4 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//----------------------Ngat Sensor----------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

	//------------
	if (htim->Instance==htim2.Instance)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b82      	ldr	r3, [pc, #520]	@ (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	f040 81a7 	bne.w	8000dec <HAL_TIM_PeriodElapsedCallback+0x364>
	{
		if (HOME == 1){
 8000a9e:	4b81      	ldr	r3, [pc, #516]	@ (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	f040 81a2 	bne.w	8000dec <HAL_TIM_PeriodElapsedCallback+0x364>
			g+=1;
 8000aa8:	4b7f      	ldr	r3, [pc, #508]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ab8:	edc3 7a00 	vstr	s15, [r3]
//				target_angle_1 = 0;
//				target_angle_2 = 90;
//				target_angle_3 = -90;
//			}

			if (g > 47000){
 8000abc:	4b7a      	ldr	r3, [pc, #488]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000abe:	edd3 7a00 	vldr	s15, [r3]
 8000ac2:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8000cac <HAL_TIM_PeriodElapsedCallback+0x224>
 8000ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ace:	dd03      	ble.n	8000ad8 <HAL_TIM_PeriodElapsedCallback+0x50>
				g = 0;
 8000ad0:	4b75      	ldr	r3, [pc, #468]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ad2:	f04f 0200 	mov.w	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
			}

			if(g > 43000){
 8000ad8:	4b73      	ldr	r3, [pc, #460]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ada:	edd3 7a00 	vldr	s15, [r3]
 8000ade:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8000cb0 <HAL_TIM_PeriodElapsedCallback+0x228>
 8000ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aea:	dd0a      	ble.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x7a>
				target_angle_1 = 0;
 8000aec:	4b71      	ldr	r3, [pc, #452]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
				target_angle_2 = 75;
 8000af4:	4b70      	ldr	r3, [pc, #448]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000af6:	4a71      	ldr	r2, [pc, #452]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000af8:	601a      	str	r2, [r3, #0]
				target_angle_3 = -90;
 8000afa:	4b71      	ldr	r3, [pc, #452]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000afc:	4a71      	ldr	r2, [pc, #452]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	e11c      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>
			}else if (g > 40000){
 8000b02:	4b69      	ldr	r3, [pc, #420]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b04:	edd3 7a00 	vldr	s15, [r3]
 8000b08:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8000cc8 <HAL_TIM_PeriodElapsedCallback+0x240>
 8000b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b14:	dd09      	ble.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0xa2>
				target_angle_1 = 14.04;
 8000b16:	4b67      	ldr	r3, [pc, #412]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000b18:	4a6c      	ldr	r2, [pc, #432]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000b1a:	601a      	str	r2, [r3, #0]
				target_angle_2 = 25.65;
 8000b1c:	4b66      	ldr	r3, [pc, #408]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000b1e:	4a6c      	ldr	r2, [pc, #432]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000b20:	601a      	str	r2, [r3, #0]
				target_angle_3 = -63.8;
 8000b22:	4b67      	ldr	r3, [pc, #412]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000b24:	4a6b      	ldr	r2, [pc, #428]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e108      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

			}
			else if (g > 37000){
 8000b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b2c:	edd3 7a00 	vldr	s15, [r3]
 8000b30:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8000cd8 <HAL_TIM_PeriodElapsedCallback+0x250>
 8000b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3c:	dd0a      	ble.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0xcc>
				target_angle_1 = 0;
 8000b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
				target_angle_2 = 75;
 8000b46:	4b5c      	ldr	r3, [pc, #368]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000b48:	4a5c      	ldr	r2, [pc, #368]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000b4a:	601a      	str	r2, [r3, #0]
				target_angle_3 = -90;
 8000b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e0f3      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

			}
			else if (g > 34000){
 8000b54:	4b54      	ldr	r3, [pc, #336]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b56:	edd3 7a00 	vldr	s15, [r3]
 8000b5a:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8000cdc <HAL_TIM_PeriodElapsedCallback+0x254>
 8000b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	dd09      	ble.n	8000b7c <HAL_TIM_PeriodElapsedCallback+0xf4>
				target_angle_1 = 8.13;
 8000b68:	4b52      	ldr	r3, [pc, #328]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000b6a:	4a5d      	ldr	r2, [pc, #372]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000b6c:	601a      	str	r2, [r3, #0]
				target_angle_2 = 37.36;
 8000b6e:	4b52      	ldr	r3, [pc, #328]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000b70:	4a5c      	ldr	r2, [pc, #368]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000b72:	601a      	str	r2, [r3, #0]
				target_angle_3 = -88.96;
 8000b74:	4b52      	ldr	r3, [pc, #328]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000b76:	4a5c      	ldr	r2, [pc, #368]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e0df      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

			}
			else if (g > 28000){
 8000b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b7e:	edd3 7a00 	vldr	s15, [r3]
 8000b82:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8000cec <HAL_TIM_PeriodElapsedCallback+0x264>
 8000b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8e:	dd0a      	ble.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x11e>
				target_angle_1 = 0;
 8000b90:	4b48      	ldr	r3, [pc, #288]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000b92:	f04f 0200 	mov.w	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
				target_angle_2 = 75;
 8000b98:	4b47      	ldr	r3, [pc, #284]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000b9a:	4a48      	ldr	r2, [pc, #288]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000b9c:	601a      	str	r2, [r3, #0]
				target_angle_3 = -90;
 8000b9e:	4b48      	ldr	r3, [pc, #288]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000ba0:	4a48      	ldr	r2, [pc, #288]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e0ca      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

			}
			else if (g > 25000){
 8000ba6:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8000cf0 <HAL_TIM_PeriodElapsedCallback+0x268>
 8000bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb8:	dd09      	ble.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x146>
				target_angle_1 = -9.462;
 8000bba:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000bbe:	601a      	str	r2, [r3, #0]
				target_angle_2 = 44.87;
 8000bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000bc4:	601a      	str	r2, [r3, #0]
				target_angle_3 = -106.3;
 8000bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8000cfc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	e0b6      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

			}else if (g > 21000){
 8000bce:	4b36      	ldr	r3, [pc, #216]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000bd0:	edd3 7a00 	vldr	s15, [r3]
 8000bd4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000d00 <HAL_TIM_PeriodElapsedCallback+0x278>
 8000bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be0:	dd0a      	ble.n	8000bf8 <HAL_TIM_PeriodElapsedCallback+0x170>
				target_angle_1 = 0;
 8000be2:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
				target_angle_2 = 75;
 8000bea:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000bec:	4a33      	ldr	r2, [pc, #204]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000bee:	601a      	str	r2, [r3, #0]
				target_angle_3 = -90;
 8000bf0:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000bf2:	4a34      	ldr	r2, [pc, #208]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e0a1      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

			}
			else if (g > 18000){
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000bfa:	edd3 7a00 	vldr	s15, [r3]
 8000bfe:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000d04 <HAL_TIM_PeriodElapsedCallback+0x27c>
 8000c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0a:	dd09      	ble.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x198>
				target_angle_1 = 18.43;
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d08 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000c10:	601a      	str	r2, [r3, #0]
				target_angle_2 = 41.98;
 8000c12:	4b29      	ldr	r3, [pc, #164]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c14:	4a3d      	ldr	r2, [pc, #244]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c16:	601a      	str	r2, [r3, #0]
				target_angle_3 = -101.9;
 8000c18:	4b29      	ldr	r3, [pc, #164]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000c1a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	e08d      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

			}
			else if (g > 12000){
 8000c20:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000c22:	edd3 7a00 	vldr	s15, [r3]
 8000c26:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000d14 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8000c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c32:	dd0a      	ble.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x1c2>
							target_angle_1 = 0;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
							target_angle_2 = 75;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000c40:	601a      	str	r2, [r3, #0]
							target_angle_3 = -90;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000c44:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e078      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

						}
			else if (g > 9000){
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000c4c:	edd3 7a00 	vldr	s15, [r3]
 8000c50:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000d18 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5c:	dd0a      	ble.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x1ec>
				target_angle_1 = 0;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000c60:	f04f 0200 	mov.w	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
				target_angle_2 = 45.43;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c68:	4a2c      	ldr	r2, [pc, #176]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000c6a:	601a      	str	r2, [r3, #0]
				target_angle_3 = -107.6;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e063      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>

			}
			else if (g > 6000){
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000c76:	edd3 7a00 	vldr	s15, [r3]
 8000c7a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000d24 <HAL_TIM_PeriodElapsedCallback+0x29c>
 8000c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c86:	dd4f      	ble.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				target_angle_1 = 0;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
				target_angle_2 = 75;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000c94:	601a      	str	r2, [r3, #0]
				target_angle_3 = -90;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e04e      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8000c9e:	bf00      	nop
 8000ca0:	24000300 	.word	0x24000300
 8000ca4:	240004b4 	.word	0x240004b4
 8000ca8:	240004d8 	.word	0x240004d8
 8000cac:	47379800 	.word	0x47379800
 8000cb0:	4727f800 	.word	0x4727f800
 8000cb4:	24000504 	.word	0x24000504
 8000cb8:	24000508 	.word	0x24000508
 8000cbc:	42960000 	.word	0x42960000
 8000cc0:	2400050c 	.word	0x2400050c
 8000cc4:	c2b40000 	.word	0xc2b40000
 8000cc8:	471c4000 	.word	0x471c4000
 8000ccc:	4160a3d7 	.word	0x4160a3d7
 8000cd0:	41cd3333 	.word	0x41cd3333
 8000cd4:	c27f3333 	.word	0xc27f3333
 8000cd8:	47108800 	.word	0x47108800
 8000cdc:	4704d000 	.word	0x4704d000
 8000ce0:	4102147b 	.word	0x4102147b
 8000ce4:	421570a4 	.word	0x421570a4
 8000ce8:	c2b1eb85 	.word	0xc2b1eb85
 8000cec:	46dac000 	.word	0x46dac000
 8000cf0:	46c35000 	.word	0x46c35000
 8000cf4:	c117645a 	.word	0xc117645a
 8000cf8:	42337ae1 	.word	0x42337ae1
 8000cfc:	c2d4999a 	.word	0xc2d4999a
 8000d00:	46a41000 	.word	0x46a41000
 8000d04:	468ca000 	.word	0x468ca000
 8000d08:	419370a4 	.word	0x419370a4
 8000d0c:	4227eb85 	.word	0x4227eb85
 8000d10:	c2cbcccd 	.word	0xc2cbcccd
 8000d14:	463b8000 	.word	0x463b8000
 8000d18:	460ca000 	.word	0x460ca000
 8000d1c:	4235b852 	.word	0x4235b852
 8000d20:	c2d73333 	.word	0xc2d73333
 8000d24:	45bb8000 	.word	0x45bb8000

			}

			else{
				target_angle_1 = 0;
 8000d28:	4b72      	ldr	r3, [pc, #456]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
				target_angle_2 = 55.39;
 8000d30:	4b71      	ldr	r3, [pc, #452]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000d32:	4a72      	ldr	r2, [pc, #456]	@ (8000efc <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d34:	601a      	str	r2, [r3, #0]
				target_angle_3 = -137.4;
 8000d36:	4b72      	ldr	r3, [pc, #456]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d38:	4a72      	ldr	r2, [pc, #456]	@ (8000f04 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8000d3a:	601a      	str	r2, [r3, #0]
			}

			if ((target_angle_1 != target_angle_1_temp)||(target_angle_2 != target_angle_2_temp)||(target_angle_3 != target_angle_3_temp)){
 8000d3c:	4b6d      	ldr	r3, [pc, #436]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000d3e:	ed93 7a00 	vldr	s14, [r3]
 8000d42:	4b71      	ldr	r3, [pc, #452]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8000d44:	edd3 7a00 	vldr	s15, [r3]
 8000d48:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	d115      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x2f6>
 8000d52:	4b69      	ldr	r3, [pc, #420]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000d54:	ed93 7a00 	vldr	s14, [r3]
 8000d58:	4b6c      	ldr	r3, [pc, #432]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x484>)
 8000d5a:	edd3 7a00 	vldr	s15, [r3]
 8000d5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d66:	d10a      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x2f6>
 8000d68:	4b65      	ldr	r3, [pc, #404]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d6a:	ed93 7a00 	vldr	s14, [r3]
 8000d6e:	4b68      	ldr	r3, [pc, #416]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000d70:	edd3 7a00 	vldr	s15, [r3]
 8000d74:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	d025      	beq.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x342>

				target_angle_1_temp = target_angle_1;
 8000d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a61      	ldr	r2, [pc, #388]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8000d84:	6013      	str	r3, [r2, #0]
				target_angle_2_temp = target_angle_2;
 8000d86:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a60      	ldr	r2, [pc, #384]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x484>)
 8000d8c:	6013      	str	r3, [r2, #0]
				target_angle_3_temp = target_angle_3;
 8000d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a5f      	ldr	r2, [pc, #380]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000d94:	6013      	str	r3, [r2, #0]
				countPulseL1 = 0;
 8000d96:	4b5f      	ldr	r3, [pc, #380]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
				countPulseL2 = 0;
 8000d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
				countPulseL3 = 0;
 8000da2:	4b5e      	ldr	r3, [pc, #376]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]

				angleControl(target_angle_1,target_angle_2,target_angle_3);
 8000da8:	4b52      	ldr	r3, [pc, #328]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	4b52      	ldr	r3, [pc, #328]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000db0:	ed93 7a00 	vldr	s14, [r3]
 8000db4:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000db6:	edd3 6a00 	vldr	s13, [r3]
 8000dba:	eeb0 1a66 	vmov.f32	s2, s13
 8000dbe:	eef0 0a47 	vmov.f32	s1, s14
 8000dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc6:	f000 fa05 	bl	80011d4 <angleControl>

			}
			//angle3 = - angle2+ angle3;
			angleControl(target_angle_1,target_angle_2,target_angle_3);
 8000dca:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000dcc:	edd3 7a00 	vldr	s15, [r3]
 8000dd0:	4b49      	ldr	r3, [pc, #292]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000dd2:	ed93 7a00 	vldr	s14, [r3]
 8000dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000dd8:	edd3 6a00 	vldr	s13, [r3]
 8000ddc:	eeb0 1a66 	vmov.f32	s2, s13
 8000de0:	eef0 0a47 	vmov.f32	s1, s14
 8000de4:	eeb0 0a67 	vmov.f32	s0, s15
 8000de8:	f000 f9f4 	bl	80011d4 <angleControl>

		}
	}

	if (htim->Instance == TIM4)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a4b      	ldr	r2, [pc, #300]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d17a      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x464>
	{  // Ensure the correct timer is being checked
		// Handle Motor 1
		if (countPulseL1 > 0) {
 8000df6:	4b47      	ldr	r3, [pc, #284]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dd1f      	ble.n	8000e3e <HAL_TIM_PeriodElapsedCallback+0x3b6>
			softCounter1++;  // Increment soft counter for motor 1
 8000dfe:	4b49      	ldr	r3, [pc, #292]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a47      	ldr	r2, [pc, #284]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8000e06:	6013      	str	r3, [r2, #0]
			if (softCounter1 >= periodMotor1) {  // If soft counter reaches the desired period
 8000e08:	4b46      	ldr	r3, [pc, #280]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b46      	ldr	r3, [pc, #280]	@ (8000f28 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	db19      	blt.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0x3c0>
				HAL_GPIO_TogglePin(GPIOB, motorL1_Pin);  // Toggle Motor 1 pin (generate pulse)
 8000e14:	2101      	movs	r1, #1
 8000e16:	4845      	ldr	r0, [pc, #276]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8000e18:	f004 f8a9 	bl	8004f6e <HAL_GPIO_TogglePin>
				softCounter1 = 0;  // Reset the soft counter for motor 1
 8000e1c:	4b41      	ldr	r3, [pc, #260]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
				countPulseL1--;    // Decrement the pulse count
 8000e22:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	4a3a      	ldr	r2, [pc, #232]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8000e2a:	6013      	str	r3, [r2, #0]
				//e = 360/(44800*2);
				update_current_angle(1,1.0,dir1);
 8000e2c:	4b40      	ldr	r3, [pc, #256]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e36:	2001      	movs	r0, #1
 8000e38:	f000 f8e6 	bl	8001008 <update_current_angle>
 8000e3c:	e004      	b.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0x3c0>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL1_Pin, GPIO_PIN_RESET);  // Stop Motor 1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2101      	movs	r1, #1
 8000e42:	483a      	ldr	r0, [pc, #232]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8000e44:	f004 f87a 	bl	8004f3c <HAL_GPIO_WritePin>
		}

		// Handle Motor 2
		if (countPulseL2 > 0) {
 8000e48:	4b33      	ldr	r3, [pc, #204]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dd1f      	ble.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0x408>
			softCounter2++;  // Increment soft counter for motor 2
 8000e50:	4b38      	ldr	r3, [pc, #224]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a37      	ldr	r2, [pc, #220]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8000e58:	6013      	str	r3, [r2, #0]
			if (softCounter2 >= periodMotor2) {  // If soft counter reaches the desired period
 8000e5a:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b36      	ldr	r3, [pc, #216]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	db19      	blt.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x412>
				HAL_GPIO_TogglePin(GPIOB, motorL2_Pin);  // Toggle Motor 2 pin (generate pulse)
 8000e66:	2102      	movs	r1, #2
 8000e68:	4830      	ldr	r0, [pc, #192]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8000e6a:	f004 f880 	bl	8004f6e <HAL_GPIO_TogglePin>
				softCounter2 = 0;  // Reset the soft counter for motor 2
 8000e6e:	4b31      	ldr	r3, [pc, #196]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
				countPulseL2--;    // Decrement the pulse count
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	4a27      	ldr	r2, [pc, #156]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8000e7c:	6013      	str	r3, [r2, #0]
				update_current_angle(2,1.0,dir2);
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f000 f8bd 	bl	8001008 <update_current_angle>
 8000e8e:	e004      	b.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x412>

			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL2_Pin, GPIO_PIN_RESET);  // Stop Motor 2
 8000e90:	2200      	movs	r2, #0
 8000e92:	2102      	movs	r1, #2
 8000e94:	4825      	ldr	r0, [pc, #148]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8000e96:	f004 f851 	bl	8004f3c <HAL_GPIO_WritePin>
		}

		// Handle Motor 3
		if (countPulseL3 > 0) {
 8000e9a:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dd1f      	ble.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x45a>
			softCounter3++;  // Increment soft counter for motor 3
 8000ea2:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a25      	ldr	r2, [pc, #148]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8000eaa:	6013      	str	r3, [r2, #0]
			if (softCounter3 >= periodMotor3) {  // If soft counter reaches the desired period
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	db19      	blt.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x464>
				HAL_GPIO_TogglePin(GPIOB, motorL3_Pin);  // Toggle Motor 3 pin (generate pulse)
 8000eb8:	2104      	movs	r1, #4
 8000eba:	481c      	ldr	r0, [pc, #112]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8000ebc:	f004 f857 	bl	8004f6e <HAL_GPIO_TogglePin>
				softCounter3 = 0;  // Reset the soft counter for motor 3
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
				countPulseL3--;    // Decrement the pulse count
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	4a13      	ldr	r2, [pc, #76]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8000ece:	6013      	str	r3, [r2, #0]
				update_current_angle(3,1.0, dir3);
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 f894 	bl	8001008 <update_current_angle>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
		}
	}
}
 8000ee0:	e004      	b.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x464>
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8000ee8:	f004 f828 	bl	8004f3c <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000504 	.word	0x24000504
 8000ef8:	24000508 	.word	0x24000508
 8000efc:	425d8f5c 	.word	0x425d8f5c
 8000f00:	2400050c 	.word	0x2400050c
 8000f04:	c3096666 	.word	0xc3096666
 8000f08:	24000004 	.word	0x24000004
 8000f0c:	24000008 	.word	0x24000008
 8000f10:	2400000c 	.word	0x2400000c
 8000f14:	240004b8 	.word	0x240004b8
 8000f18:	240004bc 	.word	0x240004bc
 8000f1c:	240004c0 	.word	0x240004c0
 8000f20:	40000800 	.word	0x40000800
 8000f24:	240004ec 	.word	0x240004ec
 8000f28:	240004f8 	.word	0x240004f8
 8000f2c:	58020400 	.word	0x58020400
 8000f30:	240004e0 	.word	0x240004e0
 8000f34:	240004f0 	.word	0x240004f0
 8000f38:	240004fc 	.word	0x240004fc
 8000f3c:	240004e4 	.word	0x240004e4
 8000f40:	240004f4 	.word	0x240004f4
 8000f44:	24000500 	.word	0x24000500
 8000f48:	24000000 	.word	0x24000000

08000f4c <HAL_UART_RxCpltCallback>:
{
	return (int)(c) - 48;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x9c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d140      	bne.n	8000fe0 <HAL_UART_RxCpltCallback+0x94>
	    {
	        // Ensure received data is null-terminated
	        rx_data[29] = '\0';
 8000f5e:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <HAL_UART_RxCpltCallback+0xa0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	775a      	strb	r2, [r3, #29]

	        // Parse the received string using strtok
	        char *token = strtok(rx_data, ",");  // Split by comma
 8000f64:	4922      	ldr	r1, [pc, #136]	@ (8000ff0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f66:	4821      	ldr	r0, [pc, #132]	@ (8000fec <HAL_UART_RxCpltCallback+0xa0>)
 8000f68:	f00a f870 	bl	800b04c <strtok>
 8000f6c:	60f8      	str	r0, [r7, #12]
	        if (token != NULL) rx_angle1 = atof(token);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d009      	beq.n	8000f88 <HAL_UART_RxCpltCallback+0x3c>
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f009 f8c5 	bl	800a104 <atof>
 8000f7a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <HAL_UART_RxCpltCallback+0xa8>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]

	        token = strtok(NULL, ",");
 8000f88:	4919      	ldr	r1, [pc, #100]	@ (8000ff0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f00a f85e 	bl	800b04c <strtok>
 8000f90:	60f8      	str	r0, [r7, #12]
	        if (token != NULL) rx_angle2 = atof(token);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d009      	beq.n	8000fac <HAL_UART_RxCpltCallback+0x60>
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f009 f8b3 	bl	800a104 <atof>
 8000f9e:	eeb0 7b40 	vmov.f64	d7, d0
 8000fa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_UART_RxCpltCallback+0xac>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]

	        token = strtok(NULL, ",");
 8000fac:	4910      	ldr	r1, [pc, #64]	@ (8000ff0 <HAL_UART_RxCpltCallback+0xa4>)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f00a f84c 	bl	800b04c <strtok>
 8000fb4:	60f8      	str	r0, [r7, #12]
	        if (token != NULL) rx_angle3 = atof(token);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d009      	beq.n	8000fd0 <HAL_UART_RxCpltCallback+0x84>
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f009 f8a1 	bl	800a104 <atof>
 8000fc2:	eeb0 7b40 	vmov.f64	d7, d0
 8000fc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HAL_UART_RxCpltCallback+0xb0>)
 8000fcc:	edc3 7a00 	vstr	s15, [r3]

	        // Restart reception
	        HAL_UART_Receive_DMA(&huart2, (uint8_t *)rx_data, 29);  // Adjust size based on expected length
 8000fd0:	221d      	movs	r2, #29
 8000fd2:	4906      	ldr	r1, [pc, #24]	@ (8000fec <HAL_UART_RxCpltCallback+0xa0>)
 8000fd4:	480a      	ldr	r0, [pc, #40]	@ (8001000 <HAL_UART_RxCpltCallback+0xb4>)
 8000fd6:	f007 fcbf 	bl	8008958 <HAL_UART_Receive_DMA>
	        receiveComplete = 1;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_UART_RxCpltCallback+0xb8>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
	    }
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	24000510 	.word	0x24000510
 8000ff0:	0800cd20 	.word	0x0800cd20
 8000ff4:	24000530 	.word	0x24000530
 8000ff8:	24000534 	.word	0x24000534
 8000ffc:	24000538 	.word	0x24000538
 8001000:	24000398 	.word	0x24000398
 8001004:	2400053c 	.word	0x2400053c

08001008 <update_current_angle>:
    // Read raw angle from angleL3 sensor
    AS5600_GetRawAngle(angleL3, &angle3);

}

void update_current_angle(int motor_index, float steps, int direction) {
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	ed87 0a02 	vstr	s0, [r7, #8]
 8001014:	6079      	str	r1, [r7, #4]
    float angle_change = steps * 360.0 / (43840.0 * 2.0); // Calculate the change in angle
 8001016:	edd7 7a02 	vldr	s15, [r7, #8]
 800101a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101e:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80010c8 <update_current_angle+0xc0>
 8001022:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001026:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 80010d0 <update_current_angle+0xc8>
 800102a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800102e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001032:	edc7 7a05 	vstr	s15, [r7, #20]

    // If direction is negative, reverse the angle change
    if (direction < 0) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	da05      	bge.n	8001048 <update_current_angle+0x40>
        angle_change = -angle_change;
 800103c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001040:	eef1 7a67 	vneg.f32	s15, s15
 8001044:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    switch (motor_index){
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d029      	beq.n	80010a2 <update_current_angle+0x9a>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b03      	cmp	r3, #3
 8001052:	dc31      	bgt.n	80010b8 <update_current_angle+0xb0>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d003      	beq.n	8001062 <update_current_angle+0x5a>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d00b      	beq.n	8001078 <update_current_angle+0x70>
            break;
        case 3:
            angle3 += angle_change; // Update current angle for motor 3
            break;
    }
}
 8001060:	e02a      	b.n	80010b8 <update_current_angle+0xb0>
            angle1 += angle_change; // Update current angle for motor 1
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <update_current_angle+0xd0>)
 8001064:	ed93 7a00 	vldr	s14, [r3]
 8001068:	edd7 7a05 	vldr	s15, [r7, #20]
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <update_current_angle+0xd0>)
 8001072:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001076:	e01f      	b.n	80010b8 <update_current_angle+0xb0>
            angle2 += angle_change; // Update current angle for motor 2
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <update_current_angle+0xd4>)
 800107a:	ed93 7a00 	vldr	s14, [r3]
 800107e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <update_current_angle+0xd4>)
 8001088:	edc3 7a00 	vstr	s15, [r3]
            angle3 -= angle_change;
 800108c:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <update_current_angle+0xd8>)
 800108e:	ed93 7a00 	vldr	s14, [r3]
 8001092:	edd7 7a05 	vldr	s15, [r7, #20]
 8001096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <update_current_angle+0xd8>)
 800109c:	edc3 7a00 	vstr	s15, [r3]
            break;
 80010a0:	e00a      	b.n	80010b8 <update_current_angle+0xb0>
            angle3 += angle_change; // Update current angle for motor 3
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <update_current_angle+0xd8>)
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <update_current_angle+0xd8>)
 80010b2:	edc3 7a00 	vstr	s15, [r3]
            break;
 80010b6:	bf00      	nop
}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	f3af 8000 	nop.w
 80010c8:	00000000 	.word	0x00000000
 80010cc:	40768000 	.word	0x40768000
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40f56800 	.word	0x40f56800
 80010d8:	240004a4 	.word	0x240004a4
 80010dc:	240004a8 	.word	0x240004a8
 80010e0:	240004ac 	.word	0x240004ac
 80010e4:	00000000 	.word	0x00000000

080010e8 <calculate_steps>:

int calculate_steps(float current_angle, float target_angle)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80010f2:	edc7 0a00 	vstr	s1, [r7]
    // Calculate the angular difference

    float angular_difference ;
    float temp,i;

    temp = target_angle - current_angle;
 80010f6:	ed97 7a00 	vldr	s14, [r7]
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001102:	edc7 7a04 	vstr	s15, [r7, #16]
    if (temp > 0){
 8001106:	edd7 7a04 	vldr	s15, [r7, #16]
 800110a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	dd03      	ble.n	800111c <calculate_steps+0x34>
    	i = 1;
 8001114:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e001      	b.n	8001120 <calculate_steps+0x38>
    }else{
    	i = -1;
 800111c:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <calculate_steps+0xa8>)
 800111e:	60fb      	str	r3, [r7, #12]
    }
	if (fabs(temp) == 0){
 8001120:	edd7 7a04 	vldr	s15, [r7, #16]
 8001124:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	d103      	bne.n	8001136 <calculate_steps+0x4e>
		angular_difference = 0;
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e007      	b.n	8001146 <calculate_steps+0x5e>
	}else{
		angular_difference = (target_angle) - current_angle;
 8001136:	ed97 7a00 	vldr	s14, [r7]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001142:	edc7 7a05 	vstr	s15, [r7, #20]
	}


    // Convert angular difference to steps
	int steps_needed = (((angular_difference) / 360.0) * 43840.0 * 2.0);
 8001146:	edd7 7a05 	vldr	s15, [r7, #20]
 800114a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800114e:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 8001180 <calculate_steps+0x98>
 8001152:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001156:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001188 <calculate_steps+0xa0>
 800115a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800115e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001162:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001166:	ee17 3a90 	vmov	r3, s15
 800116a:	60bb      	str	r3, [r7, #8]
	d = (int)round((0.98 / 360.0) * 43840 * 2.0);
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <calculate_steps+0xac>)
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <calculate_steps+0xb0>)
 8001170:	601a      	str	r2, [r3, #0]
    // Return the absolute number of steps (stepper motors can't move negative steps)
    return steps_needed;
 8001172:	68bb      	ldr	r3, [r7, #8]
}
 8001174:	4618      	mov	r0, r3
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	00000000 	.word	0x00000000
 8001184:	40768000 	.word	0x40768000
 8001188:	00000000 	.word	0x00000000
 800118c:	40e56800 	.word	0x40e56800
 8001190:	bf800000 	.word	0xbf800000
 8001194:	240004d0 	.word	0x240004d0
 8001198:	436f0000 	.word	0x436f0000

0800119c <maxSteps>:

int maxSteps(int steps_motor_1, int steps_motor_2, int steps_motor_3)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    int max_value = steps_motor_1;  // Assume motor 1 has the maximum steps
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	617b      	str	r3, [r7, #20]

    if (steps_motor_2 > max_value) {
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dd01      	ble.n	80011b8 <maxSteps+0x1c>
        max_value = steps_motor_2;  // Update if motor 2 has more steps
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	617b      	str	r3, [r7, #20]
    }

    if (steps_motor_3 > max_value) {
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dd01      	ble.n	80011c4 <maxSteps+0x28>
        max_value = steps_motor_3;  // Update if motor 3 has more steps
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	617b      	str	r3, [r7, #20]
    }

    return max_value;  // Return the largest number of steps
 80011c4:	697b      	ldr	r3, [r7, #20]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <angleControl>:


void angleControl(float target_angle_1, float target_angle_2, float target_angle_3) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	ed87 0a03 	vstr	s0, [r7, #12]
 80011de:	edc7 0a02 	vstr	s1, [r7, #8]
 80011e2:	ed87 1a01 	vstr	s2, [r7, #4]
	// Read the current angles from the sensors
	//Read_Angles();

	// Calculate the required steps for each motor based on current and target angles
	int steps_motor_1 = calculate_steps(angle1, (target_angle_1));
 80011e6:	4b92      	ldr	r3, [pc, #584]	@ (8001430 <angleControl+0x25c>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	edd7 0a03 	vldr	s1, [r7, #12]
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	f7ff ff78 	bl	80010e8 <calculate_steps>
 80011f8:	61b8      	str	r0, [r7, #24]
	int steps_motor_2 = calculate_steps(angle2, (target_angle_2));
 80011fa:	4b8e      	ldr	r3, [pc, #568]	@ (8001434 <angleControl+0x260>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	edd7 0a02 	vldr	s1, [r7, #8]
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	f7ff ff6e 	bl	80010e8 <calculate_steps>
 800120c:	6178      	str	r0, [r7, #20]
	//f = steps_motor_2;
	int steps_motor_3 = calculate_steps(angle3, target_angle_3);
 800120e:	4b8a      	ldr	r3, [pc, #552]	@ (8001438 <angleControl+0x264>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	edd7 0a01 	vldr	s1, [r7, #4]
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	f7ff ff64 	bl	80010e8 <calculate_steps>
 8001220:	61f8      	str	r0, [r7, #28]

	// Set the pulse counts for each motor
	countPulseL1 = abs(steps_motor_1);
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	bfb8      	it	lt
 8001228:	425b      	neglt	r3, r3
 800122a:	4a84      	ldr	r2, [pc, #528]	@ (800143c <angleControl+0x268>)
 800122c:	6013      	str	r3, [r2, #0]
	countPulseL2 = abs(steps_motor_2) ;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b00      	cmp	r3, #0
 8001232:	bfb8      	it	lt
 8001234:	425b      	neglt	r3, r3
 8001236:	4a82      	ldr	r2, [pc, #520]	@ (8001440 <angleControl+0x26c>)
 8001238:	6013      	str	r3, [r2, #0]
	error = angle3 - target_angle_3;
 800123a:	4b7f      	ldr	r3, [pc, #508]	@ (8001438 <angleControl+0x264>)
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	edd7 7a01 	vldr	s15, [r7, #4]
 8001244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001248:	4b7e      	ldr	r3, [pc, #504]	@ (8001444 <angleControl+0x270>)
 800124a:	edc3 7a00 	vstr	s15, [r3]




	// Determine the direction for each motor and set control pins accordingly
	if (target_angle_1 > angle1) {
 800124e:	4b78      	ldr	r3, [pc, #480]	@ (8001430 <angleControl+0x25c>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ed97 7a03 	vldr	s14, [r7, #12]
 8001258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	dd09      	ble.n	8001276 <angleControl+0xa2>
		// Move motor 1 clockwise
		dir1 = 1;
 8001262:	4b79      	ldr	r3, [pc, #484]	@ (8001448 <angleControl+0x274>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800126e:	4877      	ldr	r0, [pc, #476]	@ (800144c <angleControl+0x278>)
 8001270:	f003 fe64 	bl	8004f3c <HAL_GPIO_WritePin>
 8001274:	e009      	b.n	800128a <angleControl+0xb6>

	} else {
		dir1 = -1;
 8001276:	4b74      	ldr	r3, [pc, #464]	@ (8001448 <angleControl+0x274>)
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	601a      	str	r2, [r3, #0]
		// Move motor 1 counterclockwise
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001284:	4871      	ldr	r0, [pc, #452]	@ (800144c <angleControl+0x278>)
 8001286:	f003 fe59 	bl	8004f3c <HAL_GPIO_WritePin>
	}

	if (target_angle_2 >= angle2) {
 800128a:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <angleControl+0x260>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ed97 7a02 	vldr	s14, [r7, #8]
 8001294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	db09      	blt.n	80012b2 <angleControl+0xde>
		// Move motor 2 clockwise
		dir2 = 1;
 800129e:	4b6c      	ldr	r3, [pc, #432]	@ (8001450 <angleControl+0x27c>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012aa:	4868      	ldr	r0, [pc, #416]	@ (800144c <angleControl+0x278>)
 80012ac:	f003 fe46 	bl	8004f3c <HAL_GPIO_WritePin>
 80012b0:	e009      	b.n	80012c6 <angleControl+0xf2>
	} else {
		// Move motor 2 counterclockwise
		dir2 = -1;
 80012b2:	4b67      	ldr	r3, [pc, #412]	@ (8001450 <angleControl+0x27c>)
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012c0:	4862      	ldr	r0, [pc, #392]	@ (800144c <angleControl+0x278>)
 80012c2:	f003 fe3b 	bl	8004f3c <HAL_GPIO_WritePin>
	}

	if (steps_motor_2 == 0){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d103      	bne.n	80012d4 <angleControl+0x100>
		dir2 =1;
 80012cc:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <angleControl+0x27c>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e006      	b.n	80012e2 <angleControl+0x10e>
	}else if (steps_motor_1 == 0){
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <angleControl+0x10e>
		dir3 = -1;
 80012da:	4b5e      	ldr	r3, [pc, #376]	@ (8001454 <angleControl+0x280>)
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	601a      	str	r2, [r3, #0]
	}

	if (target_angle_3 > angle3 && dir2 == 1) {
 80012e2:	4b55      	ldr	r3, [pc, #340]	@ (8001438 <angleControl+0x264>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80012ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	dd22      	ble.n	800133c <angleControl+0x168>
 80012f6:	4b56      	ldr	r3, [pc, #344]	@ (8001450 <angleControl+0x27c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d11e      	bne.n	800133c <angleControl+0x168>
		// Motor 3 moves clockwise when Motor 2 is moving clockwise
		h = 1;
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <angleControl+0x284>)
 8001300:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001304:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 8001306:	4b53      	ldr	r3, [pc, #332]	@ (8001454 <angleControl+0x280>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	4b51      	ldr	r3, [pc, #324]	@ (800145c <angleControl+0x288>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
		countPulseL3 = abs(steps_motor_3);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2b00      	cmp	r3, #0
 8001320:	bfb8      	it	lt
 8001322:	425b      	neglt	r3, r3
 8001324:	4a4e      	ldr	r2, [pc, #312]	@ (8001460 <angleControl+0x28c>)
 8001326:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8001328:	4b4d      	ldr	r3, [pc, #308]	@ (8001460 <angleControl+0x28c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001334:	4845      	ldr	r0, [pc, #276]	@ (800144c <angleControl+0x278>)
 8001336:	f003 fe01 	bl	8004f3c <HAL_GPIO_WritePin>
 800133a:	e0a9      	b.n	8001490 <angleControl+0x2bc>
	}
	else if (target_angle_3 < angle3 && dir2 == 1) {
 800133c:	4b3e      	ldr	r3, [pc, #248]	@ (8001438 <angleControl+0x264>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	ed97 7a01 	vldr	s14, [r7, #4]
 8001346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	d51b      	bpl.n	8001388 <angleControl+0x1b4>
 8001350:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <angleControl+0x27c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d117      	bne.n	8001388 <angleControl+0x1b4>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 2;
 8001358:	4b3f      	ldr	r3, [pc, #252]	@ (8001458 <angleControl+0x284>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800135e:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 8001360:	4b3c      	ldr	r3, [pc, #240]	@ (8001454 <angleControl+0x280>)
 8001362:	f04f 32ff 	mov.w	r2, #4294967295
 8001366:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfb8      	it	lt
 800136e:	425b      	neglt	r3, r3
 8001370:	4a3b      	ldr	r2, [pc, #236]	@ (8001460 <angleControl+0x28c>)
 8001372:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8001374:	4b3a      	ldr	r3, [pc, #232]	@ (8001460 <angleControl+0x28c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001380:	4832      	ldr	r0, [pc, #200]	@ (800144c <angleControl+0x278>)
 8001382:	f003 fddb 	bl	8004f3c <HAL_GPIO_WritePin>
 8001386:	e083      	b.n	8001490 <angleControl+0x2bc>
	} else if (target_angle_3 < angle3 && dir2 == -1) {
 8001388:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <angleControl+0x264>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	d51b      	bpl.n	80013d4 <angleControl+0x200>
 800139c:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <angleControl+0x27c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d116      	bne.n	80013d4 <angleControl+0x200>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 3;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <angleControl+0x284>)
 80013a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001464 <angleControl+0x290>)
 80013aa:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <angleControl+0x280>)
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bfb8      	it	lt
 80013ba:	425b      	neglt	r3, r3
 80013bc:	4a28      	ldr	r2, [pc, #160]	@ (8001460 <angleControl+0x28c>)
 80013be:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 80013c0:	4b27      	ldr	r3, [pc, #156]	@ (8001460 <angleControl+0x28c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013cc:	481f      	ldr	r0, [pc, #124]	@ (800144c <angleControl+0x278>)
 80013ce:	f003 fdb5 	bl	8004f3c <HAL_GPIO_WritePin>
 80013d2:	e05d      	b.n	8001490 <angleControl+0x2bc>
	}
	else if (target_angle_3 > angle3 && dir2 == -1) {
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <angleControl+0x264>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ed97 7a01 	vldr	s14, [r7, #4]
 80013de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	dd3f      	ble.n	8001468 <angleControl+0x294>
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <angleControl+0x27c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d13a      	bne.n	8001468 <angleControl+0x294>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 4;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <angleControl+0x284>)
 80013f4:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80013f8:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <angleControl+0x280>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <angleControl+0x288>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
		countPulseL3 = abs( steps_motor_3);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bfb8      	it	lt
 8001416:	425b      	neglt	r3, r3
 8001418:	4a11      	ldr	r2, [pc, #68]	@ (8001460 <angleControl+0x28c>)
 800141a:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <angleControl+0x28c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001428:	4808      	ldr	r0, [pc, #32]	@ (800144c <angleControl+0x278>)
 800142a:	f003 fd87 	bl	8004f3c <HAL_GPIO_WritePin>
 800142e:	e02f      	b.n	8001490 <angleControl+0x2bc>
 8001430:	240004a4 	.word	0x240004a4
 8001434:	240004a8 	.word	0x240004a8
 8001438:	240004ac 	.word	0x240004ac
 800143c:	240004b8 	.word	0x240004b8
 8001440:	240004bc 	.word	0x240004bc
 8001444:	240004b0 	.word	0x240004b0
 8001448:	240004e0 	.word	0x240004e0
 800144c:	58021400 	.word	0x58021400
 8001450:	240004e4 	.word	0x240004e4
 8001454:	24000000 	.word	0x24000000
 8001458:	240004dc 	.word	0x240004dc
 800145c:	240004d4 	.word	0x240004d4
 8001460:	240004c0 	.word	0x240004c0
 8001464:	40400000 	.word	0x40400000
	} else {
		// Maintain angle3 in sync with angle2’s direction
		h =5;
 8001468:	4b3a      	ldr	r3, [pc, #232]	@ (8001554 <angleControl+0x380>)
 800146a:	4a3b      	ldr	r2, [pc, #236]	@ (8001558 <angleControl+0x384>)
 800146c:	601a      	str	r2, [r3, #0]
		dir3 = dir2;
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <angleControl+0x388>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a3b      	ldr	r2, [pc, #236]	@ (8001560 <angleControl+0x38c>)
 8001474:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, dir3 == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001476:	4b3a      	ldr	r3, [pc, #232]	@ (8001560 <angleControl+0x38c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800148a:	4836      	ldr	r0, [pc, #216]	@ (8001564 <angleControl+0x390>)
 800148c:	f003 fd56 	bl	8004f3c <HAL_GPIO_WritePin>
	}


	// Determine the maximum steps needed to synchronize the motors
	int max_steps = maxSteps(abs(steps_motor_1), abs(steps_motor_2), abs(steps_motor_3));
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8001496:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80014a0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bfb8      	it	lt
 80014aa:	425b      	neglt	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	f7ff fe75 	bl	800119c <maxSteps>
 80014b2:	6138      	str	r0, [r7, #16]

	// Calculate the pulse periods for each motor based on the maximum steps
	periodMotor1 = (int)(((float)max_steps / abs(steps_motor_1)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bfb8      	it	lt
 80014c4:	425b      	neglt	r3, r3
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014de:	ee17 2a90 	vmov	r2, s15
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <angleControl+0x394>)
 80014e4:	601a      	str	r2, [r3, #0]
	periodMotor2 = (int)(((float)max_steps / abs(steps_motor_2)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bfb8      	it	lt
 80014f6:	425b      	neglt	r3, r3
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001504:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001510:	ee17 2a90 	vmov	r2, s15
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <angleControl+0x398>)
 8001516:	601a      	str	r2, [r3, #0]
	periodMotor3 = (int)(((float)max_steps / abs(steps_motor_3)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	bfb8      	it	lt
 8001528:	425b      	neglt	r3, r3
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001536:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800153a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001542:	ee17 2a90 	vmov	r2, s15
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <angleControl+0x39c>)
 8001548:	601a      	str	r2, [r3, #0]

	// Start the timer if it is not already running (ensure the timer has been initialized)
	//HAL_TIM_Base_Start_IT(&htim4);
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	240004dc 	.word	0x240004dc
 8001558:	40a00000 	.word	0x40a00000
 800155c:	240004e4 	.word	0x240004e4
 8001560:	24000000 	.word	0x24000000
 8001564:	58021400 	.word	0x58021400
 8001568:	240004f8 	.word	0x240004f8
 800156c:	240004fc 	.word	0x240004fc
 8001570:	24000500 	.word	0x24000500

08001574 <autoHomeMotors>:

void autoHomeMotors(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    // Set initial movement direction for homing (assumes motors move towards the limit switches)
    HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET); // Move Motor 1 in the homing direction
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001580:	483f      	ldr	r0, [pc, #252]	@ (8001680 <autoHomeMotors+0x10c>)
 8001582:	f003 fcdb 	bl	8004f3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET); // Move Motor 2 in the homing direction
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800158c:	483c      	ldr	r0, [pc, #240]	@ (8001680 <autoHomeMotors+0x10c>)
 800158e:	f003 fcd5 	bl	8004f3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET); // Move Motor 3 in the homing direction
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001598:	4839      	ldr	r0, [pc, #228]	@ (8001680 <autoHomeMotors+0x10c>)
 800159a:	f003 fccf 	bl	8004f3c <HAL_GPIO_WritePin>


    // Start moving the motors
    countPulseL1 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 800159e:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <autoHomeMotors+0x110>)
 80015a0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80015a4:	601a      	str	r2, [r3, #0]
    countPulseL2 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <autoHomeMotors+0x114>)
 80015a8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80015ac:	601a      	str	r2, [r3, #0]
    countPulseL3 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <autoHomeMotors+0x118>)
 80015b0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80015b4:	601a      	str	r2, [r3, #0]

    periodMotor1 = 8;
 80015b6:	4b36      	ldr	r3, [pc, #216]	@ (8001690 <autoHomeMotors+0x11c>)
 80015b8:	2208      	movs	r2, #8
 80015ba:	601a      	str	r2, [r3, #0]
	periodMotor2 = 8;
 80015bc:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <autoHomeMotors+0x120>)
 80015be:	2208      	movs	r2, #8
 80015c0:	601a      	str	r2, [r3, #0]
	periodMotor3 = 20;
 80015c2:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <autoHomeMotors+0x124>)
 80015c4:	2214      	movs	r2, #20
 80015c6:	601a      	str	r2, [r3, #0]
	int i = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]

    // Wait until all limit switches are triggered
    while (a == 0 || b == 0 || c == 0 || count <1) {
 80015cc:	e001      	b.n	80015d2 <autoHomeMotors+0x5e>
        checkLimitSwitches(); // Continuously check the limit switches
 80015ce:	f000 f88b 	bl	80016e8 <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0 || count <1) {
 80015d2:	4b32      	ldr	r3, [pc, #200]	@ (800169c <autoHomeMotors+0x128>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f9      	beq.n	80015ce <autoHomeMotors+0x5a>
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <autoHomeMotors+0x12c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f5      	beq.n	80015ce <autoHomeMotors+0x5a>
 80015e2:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <autoHomeMotors+0x130>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f1      	beq.n	80015ce <autoHomeMotors+0x5a>
 80015ea:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <autoHomeMotors+0x134>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dded      	ble.n	80015ce <autoHomeMotors+0x5a>
    }
    while (count == 1){
 80015f2:	e029      	b.n	8001648 <autoHomeMotors+0xd4>
    	HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015fa:	4821      	ldr	r0, [pc, #132]	@ (8001680 <autoHomeMotors+0x10c>)
 80015fc:	f003 fc9e 	bl	8004f3c <HAL_GPIO_WritePin>

    	if (countPulseL3 == 0 && i == 0){
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <autoHomeMotors+0x118>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <autoHomeMotors+0xa6>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <autoHomeMotors+0xa6>
    		countPulseL3 = 10060;
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <autoHomeMotors+0x118>)
 8001610:	f242 724c 	movw	r2, #10060	@ 0x274c
 8001614:	601a      	str	r2, [r3, #0]
    		i = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
    	}

    	if (countPulseL3 == 0 && i == 1){
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <autoHomeMotors+0x118>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d112      	bne.n	8001648 <autoHomeMotors+0xd4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10f      	bne.n	8001648 <autoHomeMotors+0xd4>
			count = 2;
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <autoHomeMotors+0x134>)
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
			a = 0;
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <autoHomeMotors+0x128>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
			b=0;
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <autoHomeMotors+0x12c>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
			c=0;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <autoHomeMotors+0x130>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
			countPulseL3 = 50000;
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <autoHomeMotors+0x118>)
 8001642:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001646:	601a      	str	r2, [r3, #0]
    while (count == 1){
 8001648:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <autoHomeMotors+0x134>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d0d1      	beq.n	80015f4 <autoHomeMotors+0x80>
		}
    }

    while (a == 0 || b == 0 || c == 0 ) {
 8001650:	e001      	b.n	8001656 <autoHomeMotors+0xe2>
		checkLimitSwitches(); // Continuously check the limit switches
 8001652:	f000 f849 	bl	80016e8 <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0 ) {
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <autoHomeMotors+0x128>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f9      	beq.n	8001652 <autoHomeMotors+0xde>
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <autoHomeMotors+0x12c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f5      	beq.n	8001652 <autoHomeMotors+0xde>
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <autoHomeMotors+0x130>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f1      	beq.n	8001652 <autoHomeMotors+0xde>
	}

    // Set the home angle once all limit switches are activated
    HOME = 1;
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <autoHomeMotors+0x138>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
    setHomeAngles();
 8001674:	f000 f81c 	bl	80016b0 <setHomeAngles>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58021400 	.word	0x58021400
 8001684:	240004b8 	.word	0x240004b8
 8001688:	240004bc 	.word	0x240004bc
 800168c:	240004c0 	.word	0x240004c0
 8001690:	240004f8 	.word	0x240004f8
 8001694:	240004fc 	.word	0x240004fc
 8001698:	24000500 	.word	0x24000500
 800169c:	240004c4 	.word	0x240004c4
 80016a0:	240004c8 	.word	0x240004c8
 80016a4:	240004cc 	.word	0x240004cc
 80016a8:	240004e8 	.word	0x240004e8
 80016ac:	240004b4 	.word	0x240004b4

080016b0 <setHomeAngles>:

void setHomeAngles(void) {
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
    // Set the current angle to zero or a specific home angle as needed
    angle1 = 7.0; // Home position for Motor 1
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <setHomeAngles+0x20>)
 80016b6:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <setHomeAngles+0x24>)
 80016b8:	601a      	str	r2, [r3, #0]
    angle2 = 86.65; // Home position for Motor 2
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <setHomeAngles+0x28>)
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <setHomeAngles+0x2c>)
 80016be:	601a      	str	r2, [r3, #0]
    angle3 = -149.65; // Home position for Motor 3
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <setHomeAngles+0x30>)
 80016c2:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <setHomeAngles+0x34>)
 80016c4:	601a      	str	r2, [r3, #0]

}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	240004a4 	.word	0x240004a4
 80016d4:	40e00000 	.word	0x40e00000
 80016d8:	240004a8 	.word	0x240004a8
 80016dc:	42ad4ccd 	.word	0x42ad4ccd
 80016e0:	240004ac 	.word	0x240004ac
 80016e4:	c315a666 	.word	0xc315a666

080016e8 <checkLimitSwitches>:

void checkLimitSwitches(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
    // Check and handle limit switch 1
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 80016ec:	2110      	movs	r1, #16
 80016ee:	482c      	ldr	r0, [pc, #176]	@ (80017a0 <checkLimitSwitches+0xb8>)
 80016f0:	f003 fc0c 	bl	8004f0c <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d106      	bne.n	8001708 <checkLimitSwitches+0x20>
        a = 1;
 80016fa:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <checkLimitSwitches+0xbc>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
        countPulseL1 = 0;  // Stop Motor 1 if limit switch 1 is triggered
 8001700:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <checkLimitSwitches+0xc0>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e002      	b.n	800170e <checkLimitSwitches+0x26>
    } else {
        a = 0;
 8001708:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <checkLimitSwitches+0xbc>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
    }

    // Check and handle limit switch 2, ensuring that it only works if limit switch 3 is not active
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 800170e:	2120      	movs	r1, #32
 8001710:	4823      	ldr	r0, [pc, #140]	@ (80017a0 <checkLimitSwitches+0xb8>)
 8001712:	f003 fbfb 	bl	8004f0c <HAL_GPIO_ReadPin>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <checkLimitSwitches+0x42>
        b = 1;
 800171c:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <checkLimitSwitches+0xc4>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
        countPulseL2 = 0;  // Stop Motor 2 if limit switch 2 is triggered
 8001722:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <checkLimitSwitches+0xc8>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e002      	b.n	8001730 <checkLimitSwitches+0x48>
    } else {
        b = 0;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <checkLimitSwitches+0xc4>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
    }


    if (a == 1 && b == 1 && c == 1 && count != 1){
 8001730:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <checkLimitSwitches+0xbc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d10e      	bne.n	8001756 <checkLimitSwitches+0x6e>
 8001738:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <checkLimitSwitches+0xc4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d10a      	bne.n	8001756 <checkLimitSwitches+0x6e>
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <checkLimitSwitches+0xcc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <checkLimitSwitches+0x6e>
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <checkLimitSwitches+0xd0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d002      	beq.n	8001756 <checkLimitSwitches+0x6e>
      count = 1;
 8001750:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <checkLimitSwitches+0xd0>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

	}

    // Check and handle limit switch 3
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8001756:	2140      	movs	r1, #64	@ 0x40
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <checkLimitSwitches+0xb8>)
 800175a:	f003 fbd7 	bl	8004f0c <HAL_GPIO_ReadPin>
 800175e:	4603      	mov	r3, r0
 8001760:	2b01      	cmp	r3, #1
 8001762:	d111      	bne.n	8001788 <checkLimitSwitches+0xa0>
        c = 1;
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <checkLimitSwitches+0xcc>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

		periodMotor3 = periodMotor2;
 800176a:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <checkLimitSwitches+0xd4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <checkLimitSwitches+0xd8>)
 8001770:	6013      	str	r3, [r2, #0]
		countPulseL3 = countPulseL2;  // Stop Motor 3 if limit switch 3 is triggered
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <checkLimitSwitches+0xc8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a13      	ldr	r2, [pc, #76]	@ (80017c4 <checkLimitSwitches+0xdc>)
 8001778:	6013      	str	r3, [r2, #0]

        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);  // Stop motor direction for M3
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001780:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <checkLimitSwitches+0xe0>)
 8001782:	f003 fbdb 	bl	8004f3c <HAL_GPIO_WritePin>
    } else {
        c = 0;
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
    }

}
 8001786:	e008      	b.n	800179a <checkLimitSwitches+0xb2>
        c = 0;
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <checkLimitSwitches+0xcc>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001794:	480c      	ldr	r0, [pc, #48]	@ (80017c8 <checkLimitSwitches+0xe0>)
 8001796:	f003 fbd1 	bl	8004f3c <HAL_GPIO_WritePin>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	58020000 	.word	0x58020000
 80017a4:	240004c4 	.word	0x240004c4
 80017a8:	240004b8 	.word	0x240004b8
 80017ac:	240004c8 	.word	0x240004c8
 80017b0:	240004bc 	.word	0x240004bc
 80017b4:	240004cc 	.word	0x240004cc
 80017b8:	240004e8 	.word	0x240004e8
 80017bc:	240004fc 	.word	0x240004fc
 80017c0:	24000500 	.word	0x24000500
 80017c4:	240004c0 	.word	0x240004c0
 80017c8:	58021400 	.word	0x58021400

080017cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d0:	f000 ff72 	bl	80026b8 <HAL_Init>
//	angleL3->i2cHandle= &hi2c3;
//	AS5600_Init(angleL3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d4:	f000 f82e 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d8:	f000 fa9c 	bl	8001d14 <MX_GPIO_Init>
  MX_DMA_Init();
 80017dc:	f000 fa7a 	bl	8001cd4 <MX_DMA_Init>
  MX_I2C1_Init();
 80017e0:	f000 f8d0 	bl	8001984 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017e4:	f000 f90e 	bl	8001a04 <MX_I2C2_Init>
  MX_I2C3_Init();
 80017e8:	f000 f94c 	bl	8001a84 <MX_I2C3_Init>
  MX_TIM4_Init();
 80017ec:	f000 f9d8 	bl	8001ba0 <MX_TIM4_Init>
  MX_TIM2_Init();
 80017f0:	f000 f988 	bl	8001b04 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80017f4:	f000 fa22 	bl	8001c3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rx_data, 29);
 80017f8:	221d      	movs	r2, #29
 80017fa:	4909      	ldr	r1, [pc, #36]	@ (8001820 <main+0x54>)
 80017fc:	4809      	ldr	r0, [pc, #36]	@ (8001824 <main+0x58>)
 80017fe:	f007 f8ab 	bl	8008958 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001802:	4809      	ldr	r0, [pc, #36]	@ (8001828 <main+0x5c>)
 8001804:	f006 fb12 	bl	8007e2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <main+0x60>)
 800180a:	f006 fb0f 	bl	8007e2c <HAL_TIM_Base_Start_IT>



  autoHomeMotors();
 800180e:	f7ff feb1 	bl	8001574 <autoHomeMotors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, "hello", sizeof("hello"), 10);
 8001812:	230a      	movs	r3, #10
 8001814:	2206      	movs	r2, #6
 8001816:	4906      	ldr	r1, [pc, #24]	@ (8001830 <main+0x64>)
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <main+0x58>)
 800181a:	f007 f80f 	bl	800883c <HAL_UART_Transmit>
 800181e:	e7f8      	b.n	8001812 <main+0x46>
 8001820:	24000510 	.word	0x24000510
 8001824:	24000398 	.word	0x24000398
 8001828:	24000300 	.word	0x24000300
 800182c:	2400034c 	.word	0x2400034c
 8001830:	0800cd24 	.word	0x0800cd24

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0a4      	sub	sp, #144	@ 0x90
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800183e:	224c      	movs	r2, #76	@ 0x4c
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f009 fbe7 	bl	800b016 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184c:	2220      	movs	r2, #32
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fbe0 	bl	800b016 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001868:	2002      	movs	r0, #2
 800186a:	f003 fccf 	bl	800520c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <SystemClock_Config+0x144>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800187a:	4a3f      	ldr	r2, [pc, #252]	@ (8001978 <SystemClock_Config+0x144>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001880:	6193      	str	r3, [r2, #24]
 8001882:	4b3d      	ldr	r3, [pc, #244]	@ (8001978 <SystemClock_Config+0x144>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800188e:	bf00      	nop
 8001890:	4b39      	ldr	r3, [pc, #228]	@ (8001978 <SystemClock_Config+0x144>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800189c:	d1f8      	bne.n	8001890 <SystemClock_Config+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 800189e:	2330      	movs	r3, #48	@ 0x30
 80018a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018a2:	2301      	movs	r3, #1
 80018a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 80018aa:	2310      	movs	r3, #16
 80018ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ae:	2302      	movs	r3, #2
 80018b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80018b2:	2301      	movs	r3, #1
 80018b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018b6:	2304      	movs	r3, #4
 80018b8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018ba:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018be:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fccb 	bl	8005280 <HAL_RCC_OscConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018f0:	f000 fafc 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f4:	233f      	movs	r3, #63	@ 0x3f
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f8:	2303      	movs	r3, #3
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80018fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001906:	2340      	movs	r3, #64	@ 0x40
 8001908:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800190a:	2340      	movs	r3, #64	@ 0x40
 800190c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800190e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001914:	2340      	movs	r3, #64	@ 0x40
 8001916:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191c:	2102      	movs	r1, #2
 800191e:	4618      	mov	r0, r3
 8001920:	f004 f888 	bl	8005a34 <HAL_RCC_ClockConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800192a:	f000 fadf 	bl	8001eec <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <SystemClock_Config+0x148>)
 8001930:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001934:	4a11      	ldr	r2, [pc, #68]	@ (800197c <SystemClock_Config+0x148>)
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <SystemClock_Config+0x148>)
 8001940:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB1;
 8001950:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001954:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <SystemClock_Config+0x14c>)
 800195c:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800195e:	2322      	movs	r3, #34	@ 0x22
 8001960:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001962:	2320      	movs	r3, #32
 8001964:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4618      	mov	r0, r3
 800196c:	f006 f84c 	bl	8007a08 <HAL_RCCEx_CRSConfig>
}
 8001970:	bf00      	nop
 8001972:	3790      	adds	r7, #144	@ 0x90
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	58024800 	.word	0x58024800
 800197c:	58024400 	.word	0x58024400
 8001980:	02dc6bff 	.word	0x02dc6bff

08001984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001988:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <MX_I2C1_Init+0x74>)
 800198a:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <MX_I2C1_Init+0x78>)
 800198c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 800198e:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <MX_I2C1_Init+0x74>)
 8001990:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <MX_I2C1_Init+0x7c>)
 8001992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001994:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <MX_I2C1_Init+0x74>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <MX_I2C1_Init+0x74>)
 800199c:	2201      	movs	r2, #1
 800199e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <MX_I2C1_Init+0x74>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_I2C1_Init+0x74>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_I2C1_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_I2C1_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_I2C1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019be:	480e      	ldr	r0, [pc, #56]	@ (80019f8 <MX_I2C1_Init+0x74>)
 80019c0:	f003 faf0 	bl	8004fa4 <HAL_I2C_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019ca:	f000 fa8f 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4809      	ldr	r0, [pc, #36]	@ (80019f8 <MX_I2C1_Init+0x74>)
 80019d2:	f003 fb83 	bl	80050dc <HAL_I2CEx_ConfigAnalogFilter>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019dc:	f000 fa86 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_I2C1_Init+0x74>)
 80019e4:	f003 fbc5 	bl	8005172 <HAL_I2CEx_ConfigDigitalFilter>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019ee:	f000 fa7d 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	24000204 	.word	0x24000204
 80019fc:	40005400 	.word	0x40005400
 8001a00:	00a0a3f7 	.word	0x00a0a3f7

08001a04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <MX_I2C2_Init+0x78>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A0A3F7;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a10:	4a1b      	ldr	r2, [pc, #108]	@ (8001a80 <MX_I2C2_Init+0x7c>)
 8001a12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a3e:	480e      	ldr	r0, [pc, #56]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a40:	f003 fab0 	bl	8004fa4 <HAL_I2C_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a4a:	f000 fa4f 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4809      	ldr	r0, [pc, #36]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a52:	f003 fb43 	bl	80050dc <HAL_I2CEx_ConfigAnalogFilter>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a5c:	f000 fa46 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_I2C2_Init+0x74>)
 8001a64:	f003 fb85 	bl	8005172 <HAL_I2CEx_ConfigDigitalFilter>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a6e:	f000 fa3d 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	24000258 	.word	0x24000258
 8001a7c:	40005800 	.word	0x40005800
 8001a80:	00a0a3f7 	.word	0x00a0a3f7

08001a84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <MX_I2C3_Init+0x78>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00A0A3F7;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001a90:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <MX_I2C3_Init+0x7c>)
 8001a92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001abe:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001ac0:	f003 fa70 	bl	8004fa4 <HAL_I2C_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001aca:	f000 fa0f 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001ad2:	f003 fb03 	bl	80050dc <HAL_I2CEx_ConfigAnalogFilter>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001adc:	f000 fa06 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <MX_I2C3_Init+0x74>)
 8001ae4:	f003 fb45 	bl	8005172 <HAL_I2CEx_ConfigDigitalFilter>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001aee:	f000 f9fd 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	240002ac 	.word	0x240002ac
 8001afc:	40005c00 	.word	0x40005c00
 8001b00:	00a0a3f7 	.word	0x00a0a3f7

08001b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b2c:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001b30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b4a:	4814      	ldr	r0, [pc, #80]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b4c:	f006 f916 	bl	8007d7c <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b56:	f000 f9c9 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b68:	f006 faee 	bl	8008148 <HAL_TIM_ConfigClockSource>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b72:	f000 f9bb 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	@ (8001b9c <MX_TIM2_Init+0x98>)
 8001b84:	f006 fd50 	bl	8008628 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b8e:	f000 f9ad 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	24000300 	.word	0x24000300

08001ba0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <MX_TIM4_Init+0x98>)
 8001bc2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001bc6:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8001bca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be4:	4813      	ldr	r0, [pc, #76]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001be6:	f006 f8c9 	bl	8007d7c <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bf0:	f000 f97c 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001c02:	f006 faa1 	bl	8008148 <HAL_TIM_ConfigClockSource>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c0c:	f000 f96e 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_TIM4_Init+0x94>)
 8001c1e:	f006 fd03 	bl	8008628 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f000 f960 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2400034c 	.word	0x2400034c
 8001c38:	40000800 	.word	0x40000800

08001c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c40:	4b22      	ldr	r3, [pc, #136]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c42:	4a23      	ldr	r2, [pc, #140]	@ (8001cd0 <MX_USART2_UART_Init+0x94>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c46:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c78:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c84:	4811      	ldr	r0, [pc, #68]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c86:	f006 fd89 	bl	800879c <HAL_UART_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c90:	f000 f92c 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c94:	2100      	movs	r1, #0
 8001c96:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001c98:	f008 f96a 	bl	8009f70 <HAL_UARTEx_SetTxFifoThreshold>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ca2:	f000 f923 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4808      	ldr	r0, [pc, #32]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001caa:	f008 f99f 	bl	8009fec <HAL_UARTEx_SetRxFifoThreshold>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001cb4:	f000 f91a 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <MX_USART2_UART_Init+0x90>)
 8001cba:	f008 f920 	bl	8009efe <HAL_UARTEx_DisableFifoMode>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001cc4:	f000 f912 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	24000398 	.word	0x24000398
 8001cd0:	40004400 	.word	0x40004400

08001cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <MX_DMA_Init+0x3c>)
 8001cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d10 <MX_DMA_Init+0x3c>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_DMA_Init+0x3c>)
 8001cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	200b      	movs	r0, #11
 8001cfe:	f000 fe54 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d02:	200b      	movs	r0, #11
 8001d04:	f000 fe6b 	bl	80029de <HAL_NVIC_EnableIRQ>

}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	58024400 	.word	0x58024400

08001d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	@ 0x30
 8001d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d30:	4a69      	ldr	r2, [pc, #420]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3a:	4b67      	ldr	r3, [pc, #412]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d48:	4b63      	ldr	r3, [pc, #396]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4e:	4a62      	ldr	r2, [pc, #392]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d58:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d76:	4b58      	ldr	r3, [pc, #352]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	4b54      	ldr	r3, [pc, #336]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8a:	4a53      	ldr	r2, [pc, #332]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d94:	4b50      	ldr	r3, [pc, #320]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001da2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db2:	4b49      	ldr	r3, [pc, #292]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc0:	4b45      	ldr	r3, [pc, #276]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc6:	4a44      	ldr	r2, [pc, #272]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd0:	4b41      	ldr	r3, [pc, #260]	@ (8001ed8 <MX_GPIO_Init+0x1c4>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Mag_GPIO_Port, Mag_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2180      	movs	r1, #128	@ 0x80
 8001de2:	483e      	ldr	r0, [pc, #248]	@ (8001edc <MX_GPIO_Init+0x1c8>)
 8001de4:	f003 f8aa 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorL1_Pin|motorL2_Pin|motorL3_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2107      	movs	r1, #7
 8001dec:	483c      	ldr	r0, [pc, #240]	@ (8001ee0 <MX_GPIO_Init+0x1cc>)
 8001dee:	f003 f8a5 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M1dir_Pin|M2dir_Pin|M3dir_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001df8:	483a      	ldr	r0, [pc, #232]	@ (8001ee4 <MX_GPIO_Init+0x1d0>)
 8001dfa:	f003 f89f 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2180      	movs	r1, #128	@ 0x80
 8001e02:	4839      	ldr	r0, [pc, #228]	@ (8001ee8 <MX_GPIO_Init+0x1d4>)
 8001e04:	f003 f89a 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LimL1_Pin LimL2_Pin LimL3_Pin */
  GPIO_InitStruct.Pin = LimL1_Pin|LimL2_Pin|LimL3_Pin;
 8001e08:	2370      	movs	r3, #112	@ 0x70
 8001e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e10:	2302      	movs	r3, #2
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4830      	ldr	r0, [pc, #192]	@ (8001edc <MX_GPIO_Init+0x1c8>)
 8001e1c:	f002 fece 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Mag_Pin */
  GPIO_InitStruct.Pin = Mag_Pin;
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Mag_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4829      	ldr	r0, [pc, #164]	@ (8001edc <MX_GPIO_Init+0x1c8>)
 8001e38:	f002 fec0 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : motorL1_Pin motorL2_Pin */
  GPIO_InitStruct.Pin = motorL1_Pin|motorL2_Pin;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	4823      	ldr	r0, [pc, #140]	@ (8001ee0 <MX_GPIO_Init+0x1cc>)
 8001e54:	f002 feb2 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : motorL3_Pin */
  GPIO_InitStruct.Pin = motorL3_Pin;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(motorL3_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481c      	ldr	r0, [pc, #112]	@ (8001ee0 <MX_GPIO_Init+0x1cc>)
 8001e70:	f002 fea4 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1dir_Pin M2dir_Pin M3dir_Pin */
  GPIO_InitStruct.Pin = M1dir_Pin|M2dir_Pin|M3dir_Pin;
 8001e74:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4815      	ldr	r0, [pc, #84]	@ (8001ee4 <MX_GPIO_Init+0x1d0>)
 8001e8e:	f002 fe95 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480f      	ldr	r0, [pc, #60]	@ (8001ee8 <MX_GPIO_Init+0x1d4>)
 8001eaa:	f002 fe87 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001eae:	2308      	movs	r3, #8
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_CRS_SYNC;
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <MX_GPIO_Init+0x1cc>)
 8001eca:	f002 fe77 	bl	8004bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	@ 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	58020000 	.word	0x58020000
 8001ee0:	58020400 	.word	0x58020400
 8001ee4:	58021400 	.word	0x58021400
 8001ee8:	58021800 	.word	0x58021800

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <Error_Handler+0x8>

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_MspInit+0x30>)
 8001f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f04:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <HAL_MspInit+0x30>)
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_MspInit+0x30>)
 8001f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	58024400 	.word	0x58024400

08001f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0be      	sub	sp, #248	@ 0xf8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f48:	22b8      	movs	r2, #184	@ 0xb8
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f009 f862 	bl	800b016 <memset>
  if(hi2c->Instance==I2C1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a85      	ldr	r2, [pc, #532]	@ (800216c <HAL_I2C_MspInit+0x240>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d146      	bne.n	8001fea <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f5c:	f04f 0208 	mov.w	r2, #8
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 f8ea 	bl	800614c <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f7e:	f7ff ffb5 	bl	8001eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	4b7b      	ldr	r3, [pc, #492]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f88:	4a79      	ldr	r2, [pc, #484]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f92:	4b77      	ldr	r3, [pc, #476]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8001f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa0:	23c0      	movs	r3, #192	@ 0xc0
 8001fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa6:	2312      	movs	r3, #18
 8001fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	486b      	ldr	r0, [pc, #428]	@ (8002174 <HAL_I2C_MspInit+0x248>)
 8001fc6:	f002 fdf9 	bl	8004bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fca:	4b69      	ldr	r3, [pc, #420]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8001fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fd0:	4a67      	ldr	r2, [pc, #412]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8001fd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fda:	4b65      	ldr	r3, [pc, #404]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8001fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001fe8:	e0bc      	b.n	8002164 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a62      	ldr	r2, [pc, #392]	@ (8002178 <HAL_I2C_MspInit+0x24c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d146      	bne.n	8002082 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ff4:	f04f 0208 	mov.w	r2, #8
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800200a:	4618      	mov	r0, r3
 800200c:	f004 f89e 	bl	800614c <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002016:	f7ff ff69 	bl	8001eec <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800201a:	4b55      	ldr	r3, [pc, #340]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002020:	4a53      	ldr	r2, [pc, #332]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800202a:	4b51      	ldr	r3, [pc, #324]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002038:	2303      	movs	r3, #3
 800203a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203e:	2312      	movs	r3, #18
 8002040:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002050:	2304      	movs	r3, #4
 8002052:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002056:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800205a:	4619      	mov	r1, r3
 800205c:	4847      	ldr	r0, [pc, #284]	@ (800217c <HAL_I2C_MspInit+0x250>)
 800205e:	f002 fdad 	bl	8004bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002062:	4b43      	ldr	r3, [pc, #268]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8002064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002068:	4a41      	ldr	r2, [pc, #260]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 800206a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800206e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002072:	4b3f      	ldr	r3, [pc, #252]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8002074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
}
 8002080:	e070      	b.n	8002164 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3e      	ldr	r2, [pc, #248]	@ (8002180 <HAL_I2C_MspInit+0x254>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d16b      	bne.n	8002164 <HAL_I2C_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800208c:	f04f 0208 	mov.w	r2, #8
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 f852 	bl	800614c <HAL_RCCEx_PeriphCLKConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_MspInit+0x186>
      Error_Handler();
 80020ae:	f7ff ff1d 	bl	8001eec <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d6:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e0:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f6:	2312      	movs	r3, #18
 80020f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002108:	2304      	movs	r3, #4
 800210a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002112:	4619      	mov	r1, r3
 8002114:	481b      	ldr	r0, [pc, #108]	@ (8002184 <HAL_I2C_MspInit+0x258>)
 8002116:	f002 fd51 	bl	8004bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800211a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002122:	2312      	movs	r3, #18
 8002124:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002134:	2304      	movs	r3, #4
 8002136:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800213e:	4619      	mov	r1, r3
 8002140:	4811      	ldr	r0, [pc, #68]	@ (8002188 <HAL_I2C_MspInit+0x25c>)
 8002142:	f002 fd3b 	bl	8004bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8002148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800214c:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 800214e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002152:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_I2C_MspInit+0x244>)
 8002158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800215c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	bf00      	nop
 8002166:	37f8      	adds	r7, #248	@ 0xf8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40005400 	.word	0x40005400
 8002170:	58024400 	.word	0x58024400
 8002174:	58020400 	.word	0x58020400
 8002178:	40005800 	.word	0x40005800
 800217c:	58021400 	.word	0x58021400
 8002180:	40005c00 	.word	0x40005c00
 8002184:	58020800 	.word	0x58020800
 8002188:	58020000 	.word	0x58020000

0800218c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219c:	d117      	bne.n	80021ce <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219e:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <HAL_TIM_Base_MspInit+0x84>)
 80021a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002210 <HAL_TIM_Base_MspInit+0x84>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021ae:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <HAL_TIM_Base_MspInit+0x84>)
 80021b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	201c      	movs	r0, #28
 80021c2:	f000 fbf2 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021c6:	201c      	movs	r0, #28
 80021c8:	f000 fc09 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021cc:	e01b      	b.n	8002206 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a10      	ldr	r2, [pc, #64]	@ (8002214 <HAL_TIM_Base_MspInit+0x88>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d116      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_TIM_Base_MspInit+0x84>)
 80021da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021de:	4a0c      	ldr	r2, [pc, #48]	@ (8002210 <HAL_TIM_Base_MspInit+0x84>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_TIM_Base_MspInit+0x84>)
 80021ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	201e      	movs	r0, #30
 80021fc:	f000 fbd5 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002200:	201e      	movs	r0, #30
 8002202:	f000 fbec 	bl	80029de <HAL_NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	58024400 	.word	0x58024400
 8002214:	40000800 	.word	0x40000800

08002218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b0b8      	sub	sp, #224	@ 0xe0
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	22b8      	movs	r2, #184	@ 0xb8
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f008 feec 	bl	800b016 <memset>
  if(huart->Instance==USART2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3d      	ldr	r2, [pc, #244]	@ (8002338 <HAL_UART_MspInit+0x120>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d173      	bne.n	8002330 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002248:	f04f 0202 	mov.w	r2, #2
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 8002254:	2304      	movs	r3, #4
 8002256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4618      	mov	r0, r3
 8002260:	f003 ff74 	bl	800614c <HAL_RCCEx_PeriphCLKConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800226a:	f7ff fe3f 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800226e:	4b33      	ldr	r3, [pc, #204]	@ (800233c <HAL_UART_MspInit+0x124>)
 8002270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002274:	4a31      	ldr	r2, [pc, #196]	@ (800233c <HAL_UART_MspInit+0x124>)
 8002276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800227e:	4b2f      	ldr	r3, [pc, #188]	@ (800233c <HAL_UART_MspInit+0x124>)
 8002280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228c:	4b2b      	ldr	r3, [pc, #172]	@ (800233c <HAL_UART_MspInit+0x124>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002292:	4a2a      	ldr	r2, [pc, #168]	@ (800233c <HAL_UART_MspInit+0x124>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800229c:	4b27      	ldr	r3, [pc, #156]	@ (800233c <HAL_UART_MspInit+0x124>)
 800229e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022aa:	230c      	movs	r3, #12
 80022ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c2:	2307      	movs	r3, #7
 80022c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80022cc:	4619      	mov	r1, r3
 80022ce:	481c      	ldr	r0, [pc, #112]	@ (8002340 <HAL_UART_MspInit+0x128>)
 80022d0:	f002 fc74 	bl	8004bbc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <HAL_UART_MspInit+0x130>)
 80022d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80022da:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 80022dc:	222b      	movs	r2, #43	@ 0x2b
 80022de:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e0:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022ec:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 80022ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022fa:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002300:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002306:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800230c:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002312:	480c      	ldr	r0, [pc, #48]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 8002314:	f000 fb7e 	bl	8002a14 <HAL_DMA_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800231e:	f7ff fde5 	bl	8001eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 8002326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800232a:	4a06      	ldr	r2, [pc, #24]	@ (8002344 <HAL_UART_MspInit+0x12c>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002330:	bf00      	nop
 8002332:	37e0      	adds	r7, #224	@ 0xe0
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40004400 	.word	0x40004400
 800233c:	58024400 	.word	0x58024400
 8002340:	58020000 	.word	0x58020000
 8002344:	2400042c 	.word	0x2400042c
 8002348:	40020010 	.word	0x40020010

0800234c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <NMI_Handler+0x4>

08002354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <HardFault_Handler+0x4>

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <MemManage_Handler+0x4>

08002364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <UsageFault_Handler+0x4>

08002374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a2:	f000 f9fb 	bl	800279c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023b0:	4802      	ldr	r0, [pc, #8]	@ (80023bc <DMA1_Stream0_IRQHandler+0x10>)
 80023b2:	f001 f8f1 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2400042c 	.word	0x2400042c

080023c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <TIM2_IRQHandler+0x10>)
 80023c6:	f005 fdb7 	bl	8007f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	24000300 	.word	0x24000300

080023d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023d8:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <TIM4_IRQHandler+0x10>)
 80023da:	f005 fdad 	bl	8007f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2400034c 	.word	0x2400034c

080023e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return 1;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_kill>:

int _kill(int pid, int sig)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002402:	f008 fed5 	bl	800b1b0 <__errno>
 8002406:	4603      	mov	r3, r0
 8002408:	2216      	movs	r2, #22
 800240a:	601a      	str	r2, [r3, #0]
  return -1;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_exit>:

void _exit (int status)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffe7 	bl	80023f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <_exit+0x12>

0800242e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e00a      	b.n	8002456 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002440:	f3af 8000 	nop.w
 8002444:	4601      	mov	r1, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	dbf0      	blt.n	8002440 <_read+0x12>
  }

  return len;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e009      	b.n	800248e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	60ba      	str	r2, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	dbf1      	blt.n	800247a <_write+0x12>
  }
  return len;
 8002496:	687b      	ldr	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_close>:

int _close(int file)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c8:	605a      	str	r2, [r3, #4]
  return 0;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_isatty>:

int _isatty(int file)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <_sbrk+0x5c>)
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <_sbrk+0x60>)
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <_sbrk+0x64>)
 8002526:	4a12      	ldr	r2, [pc, #72]	@ (8002570 <_sbrk+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002538:	f008 fe3a 	bl	800b1b0 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	220c      	movs	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e009      	b.n	800255c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254e:	4b07      	ldr	r3, [pc, #28]	@ (800256c <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a05      	ldr	r2, [pc, #20]	@ (800256c <_sbrk+0x64>)
 8002558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24050000 	.word	0x24050000
 8002568:	00000400 	.word	0x00000400
 800256c:	24000540 	.word	0x24000540
 8002570:	24000698 	.word	0x24000698

08002574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002578:	4b32      	ldr	r3, [pc, #200]	@ (8002644 <SystemInit+0xd0>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	4a31      	ldr	r2, [pc, #196]	@ (8002644 <SystemInit+0xd0>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002588:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <SystemInit+0xd4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	2b06      	cmp	r3, #6
 8002592:	d807      	bhi.n	80025a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002594:	4b2c      	ldr	r3, [pc, #176]	@ (8002648 <SystemInit+0xd4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 030f 	bic.w	r3, r3, #15
 800259c:	4a2a      	ldr	r2, [pc, #168]	@ (8002648 <SystemInit+0xd4>)
 800259e:	f043 0307 	orr.w	r3, r3, #7
 80025a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025a4:	4b29      	ldr	r3, [pc, #164]	@ (800264c <SystemInit+0xd8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a28      	ldr	r2, [pc, #160]	@ (800264c <SystemInit+0xd8>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025b0:	4b26      	ldr	r3, [pc, #152]	@ (800264c <SystemInit+0xd8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025b6:	4b25      	ldr	r3, [pc, #148]	@ (800264c <SystemInit+0xd8>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4924      	ldr	r1, [pc, #144]	@ (800264c <SystemInit+0xd8>)
 80025bc:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <SystemInit+0xdc>)
 80025be:	4013      	ands	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c2:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <SystemInit+0xd4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <SystemInit+0xd4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 030f 	bic.w	r3, r3, #15
 80025d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002648 <SystemInit+0xd4>)
 80025d8:	f043 0307 	orr.w	r3, r3, #7
 80025dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <SystemInit+0xd8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <SystemInit+0xd8>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <SystemInit+0xd8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <SystemInit+0xd8>)
 80025f2:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <SystemInit+0xe0>)
 80025f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <SystemInit+0xd8>)
 80025f8:	4a17      	ldr	r2, [pc, #92]	@ (8002658 <SystemInit+0xe4>)
 80025fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025fc:	4b13      	ldr	r3, [pc, #76]	@ (800264c <SystemInit+0xd8>)
 80025fe:	4a17      	ldr	r2, [pc, #92]	@ (800265c <SystemInit+0xe8>)
 8002600:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002602:	4b12      	ldr	r3, [pc, #72]	@ (800264c <SystemInit+0xd8>)
 8002604:	2200      	movs	r2, #0
 8002606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002608:	4b10      	ldr	r3, [pc, #64]	@ (800264c <SystemInit+0xd8>)
 800260a:	4a14      	ldr	r2, [pc, #80]	@ (800265c <SystemInit+0xe8>)
 800260c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <SystemInit+0xd8>)
 8002610:	2200      	movs	r2, #0
 8002612:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002614:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <SystemInit+0xd8>)
 8002616:	4a11      	ldr	r2, [pc, #68]	@ (800265c <SystemInit+0xe8>)
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <SystemInit+0xd8>)
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002620:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <SystemInit+0xd8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a09      	ldr	r2, [pc, #36]	@ (800264c <SystemInit+0xd8>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800262c:	4b07      	ldr	r3, [pc, #28]	@ (800264c <SystemInit+0xd8>)
 800262e:	2200      	movs	r2, #0
 8002630:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002632:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <SystemInit+0xec>)
 8002634:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002638:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00
 8002648:	52002000 	.word	0x52002000
 800264c:	58024400 	.word	0x58024400
 8002650:	eaf6ed7f 	.word	0xeaf6ed7f
 8002654:	02020200 	.word	0x02020200
 8002658:	01ff0000 	.word	0x01ff0000
 800265c:	01010280 	.word	0x01010280
 8002660:	52004000 	.word	0x52004000

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800269c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002668:	f7ff ff84 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800266c:	480c      	ldr	r0, [pc, #48]	@ (80026a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800266e:	490d      	ldr	r1, [pc, #52]	@ (80026a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002674:	e002      	b.n	800267c <LoopCopyDataInit>

08002676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267a:	3304      	adds	r3, #4

0800267c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800267c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002680:	d3f9      	bcc.n	8002676 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002684:	4c0a      	ldr	r4, [pc, #40]	@ (80026b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002688:	e001      	b.n	800268e <LoopFillZerobss>

0800268a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800268c:	3204      	adds	r2, #4

0800268e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002690:	d3fb      	bcc.n	800268a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002692:	f008 fd93 	bl	800b1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7ff f899 	bl	80017cc <main>
  bx  lr
 800269a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800269c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80026a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026a4:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 80026a8:	0800d194 	.word	0x0800d194
  ldr r2, =_sbss
 80026ac:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80026b0:	24000694 	.word	0x24000694

080026b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC3_IRQHandler>
	...

080026b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026be:	2003      	movs	r0, #3
 80026c0:	f000 f968 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026c4:	f003 fb6c 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <HAL_Init+0x68>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4913      	ldr	r1, [pc, #76]	@ (8002724 <HAL_Init+0x6c>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_Init+0x68>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002724 <HAL_Init+0x6c>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002728 <HAL_Init+0x70>)
 80026fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026fc:	4a0b      	ldr	r2, [pc, #44]	@ (800272c <HAL_Init+0x74>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002702:	200f      	movs	r0, #15
 8002704:	f000 f814 	bl	8002730 <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e002      	b.n	8002718 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002712:	f7ff fbf1 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	0800cd2c 	.word	0x0800cd2c
 8002728:	24000014 	.word	0x24000014
 800272c:	24000010 	.word	0x24000010

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_InitTick+0x60>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e021      	b.n	8002788 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_InitTick+0x64>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_InitTick+0x60>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002752:	fbb3 f3f1 	udiv	r3, r3, r1
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f94d 	bl	80029fa <HAL_SYSTICK_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e00e      	b.n	8002788 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b0f      	cmp	r3, #15
 800276e:	d80a      	bhi.n	8002786 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002770:	2200      	movs	r2, #0
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f000 f917 	bl	80029aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800277c:	4a06      	ldr	r2, [pc, #24]	@ (8002798 <HAL_InitTick+0x68>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	2400001c 	.word	0x2400001c
 8002794:	24000010 	.word	0x24000010
 8002798:	24000018 	.word	0x24000018

0800279c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027a0:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_IncTick+0x20>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_IncTick+0x24>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <HAL_IncTick+0x24>)
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	2400001c 	.word	0x2400001c
 80027c0:	24000544 	.word	0x24000544

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_GetTick+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	24000544 	.word	0x24000544

080027dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027e0:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <HAL_GetREVID+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0c1b      	lsrs	r3, r3, #16
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	5c001000 	.word	0x5c001000

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <__NVIC_SetPriorityGrouping+0x40>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	4313      	orrs	r3, r2
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <__NVIC_SetPriorityGrouping+0x40>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00
 8002838:	05fa0000 	.word	0x05fa0000

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db0b      	blt.n	8002882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4907      	ldr	r1, [pc, #28]	@ (8002890 <__NVIC_EnableIRQ+0x38>)
 8002872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	@ (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	@ (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	@ 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	@ 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff8e 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff29 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b8:	f7ff ff40 	bl	800283c <__NVIC_GetPriorityGrouping>
 80029bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff90 	bl	80028e8 <NVIC_EncodePriority>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff5f 	bl	8002894 <__NVIC_SetPriority>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff33 	bl	8002858 <__NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffa4 	bl	8002950 <SysTick_Config>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fed2 	bl	80027c4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e312      	b.n	8003052 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a66      	ldr	r2, [pc, #408]	@ (8002bcc <HAL_DMA_Init+0x1b8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d04a      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a65      	ldr	r2, [pc, #404]	@ (8002bd0 <HAL_DMA_Init+0x1bc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d045      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a63      	ldr	r2, [pc, #396]	@ (8002bd4 <HAL_DMA_Init+0x1c0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d040      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a62      	ldr	r2, [pc, #392]	@ (8002bd8 <HAL_DMA_Init+0x1c4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d03b      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a60      	ldr	r2, [pc, #384]	@ (8002bdc <HAL_DMA_Init+0x1c8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d036      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5f      	ldr	r2, [pc, #380]	@ (8002be0 <HAL_DMA_Init+0x1cc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d031      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002be4 <HAL_DMA_Init+0x1d0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d02c      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5c      	ldr	r2, [pc, #368]	@ (8002be8 <HAL_DMA_Init+0x1d4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d027      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5a      	ldr	r2, [pc, #360]	@ (8002bec <HAL_DMA_Init+0x1d8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d022      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a59      	ldr	r2, [pc, #356]	@ (8002bf0 <HAL_DMA_Init+0x1dc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d01d      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_DMA_Init+0x1e0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d018      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a56      	ldr	r2, [pc, #344]	@ (8002bf8 <HAL_DMA_Init+0x1e4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a54      	ldr	r2, [pc, #336]	@ (8002bfc <HAL_DMA_Init+0x1e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00e      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a53      	ldr	r2, [pc, #332]	@ (8002c00 <HAL_DMA_Init+0x1ec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a51      	ldr	r2, [pc, #324]	@ (8002c04 <HAL_DMA_Init+0x1f0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a50      	ldr	r2, [pc, #320]	@ (8002c08 <HAL_DMA_Init+0x1f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_DMA_Init+0xbc>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_Init+0xbe>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 813c 	beq.w	8002d50 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a37      	ldr	r2, [pc, #220]	@ (8002bcc <HAL_DMA_Init+0x1b8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d04a      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a36      	ldr	r2, [pc, #216]	@ (8002bd0 <HAL_DMA_Init+0x1bc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d045      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a34      	ldr	r2, [pc, #208]	@ (8002bd4 <HAL_DMA_Init+0x1c0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d040      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a33      	ldr	r2, [pc, #204]	@ (8002bd8 <HAL_DMA_Init+0x1c4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d03b      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a31      	ldr	r2, [pc, #196]	@ (8002bdc <HAL_DMA_Init+0x1c8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d036      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a30      	ldr	r2, [pc, #192]	@ (8002be0 <HAL_DMA_Init+0x1cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d031      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2e      	ldr	r2, [pc, #184]	@ (8002be4 <HAL_DMA_Init+0x1d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02c      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2d      	ldr	r2, [pc, #180]	@ (8002be8 <HAL_DMA_Init+0x1d4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d027      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bec <HAL_DMA_Init+0x1d8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf0 <HAL_DMA_Init+0x1dc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d01d      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <HAL_DMA_Init+0x1e0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d018      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a27      	ldr	r2, [pc, #156]	@ (8002bf8 <HAL_DMA_Init+0x1e4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a25      	ldr	r2, [pc, #148]	@ (8002bfc <HAL_DMA_Init+0x1e8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00e      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	@ (8002c00 <HAL_DMA_Init+0x1ec>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_DMA_Init+0x1f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_DMA_Init+0x1f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <HAL_DMA_Init+0x186>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e007      	b.n	8002baa <HAL_DMA_Init+0x196>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002baa:	e02f      	b.n	8002c0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bac:	f7ff fe0a 	bl	80027c4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d928      	bls.n	8002c0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e242      	b.n	8003052 <HAL_DMA_Init+0x63e>
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1c8      	bne.n	8002bac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4b83      	ldr	r3, [pc, #524]	@ (8002e34 <HAL_DMA_Init+0x420>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d107      	bne.n	8002c70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b28      	cmp	r3, #40	@ 0x28
 8002c76:	d903      	bls.n	8002c80 <HAL_DMA_Init+0x26c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c7e:	d91f      	bls.n	8002cc0 <HAL_DMA_Init+0x2ac>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c86:	d903      	bls.n	8002c90 <HAL_DMA_Init+0x27c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b42      	cmp	r3, #66	@ 0x42
 8002c8e:	d917      	bls.n	8002cc0 <HAL_DMA_Init+0x2ac>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b46      	cmp	r3, #70	@ 0x46
 8002c96:	d903      	bls.n	8002ca0 <HAL_DMA_Init+0x28c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b48      	cmp	r3, #72	@ 0x48
 8002c9e:	d90f      	bls.n	8002cc0 <HAL_DMA_Init+0x2ac>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b4e      	cmp	r3, #78	@ 0x4e
 8002ca6:	d903      	bls.n	8002cb0 <HAL_DMA_Init+0x29c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b52      	cmp	r3, #82	@ 0x52
 8002cae:	d907      	bls.n	8002cc0 <HAL_DMA_Init+0x2ac>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b73      	cmp	r3, #115	@ 0x73
 8002cb6:	d905      	bls.n	8002cc4 <HAL_DMA_Init+0x2b0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b77      	cmp	r3, #119	@ 0x77
 8002cbe:	d801      	bhi.n	8002cc4 <HAL_DMA_Init+0x2b0>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMA_Init+0x2b2>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cd0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 0307 	bic.w	r3, r3, #7
 8002ce8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d117      	bne.n	8002d2c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00e      	beq.n	8002d2c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f001 fdca 	bl	80048a8 <DMA_CheckFifoParam>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2240      	movs	r2, #64	@ 0x40
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e192      	b.n	8003052 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f001 fd05 	bl	8004744 <DMA_CalcBaseAndBitshift>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	223f      	movs	r2, #63	@ 0x3f
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	e0c8      	b.n	8002ee2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a38      	ldr	r2, [pc, #224]	@ (8002e38 <HAL_DMA_Init+0x424>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d022      	beq.n	8002da0 <HAL_DMA_Init+0x38c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a37      	ldr	r2, [pc, #220]	@ (8002e3c <HAL_DMA_Init+0x428>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d01d      	beq.n	8002da0 <HAL_DMA_Init+0x38c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a35      	ldr	r2, [pc, #212]	@ (8002e40 <HAL_DMA_Init+0x42c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d018      	beq.n	8002da0 <HAL_DMA_Init+0x38c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a34      	ldr	r2, [pc, #208]	@ (8002e44 <HAL_DMA_Init+0x430>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_DMA_Init+0x38c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a32      	ldr	r2, [pc, #200]	@ (8002e48 <HAL_DMA_Init+0x434>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_DMA_Init+0x38c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a31      	ldr	r2, [pc, #196]	@ (8002e4c <HAL_DMA_Init+0x438>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_DMA_Init+0x38c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2f      	ldr	r2, [pc, #188]	@ (8002e50 <HAL_DMA_Init+0x43c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Init+0x38c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8002e54 <HAL_DMA_Init+0x440>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA_Init+0x390>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_DMA_Init+0x392>
 8002da4:	2300      	movs	r3, #0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8092 	beq.w	8002ed0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a21      	ldr	r2, [pc, #132]	@ (8002e38 <HAL_DMA_Init+0x424>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d021      	beq.n	8002dfa <HAL_DMA_Init+0x3e6>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a20      	ldr	r2, [pc, #128]	@ (8002e3c <HAL_DMA_Init+0x428>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d01c      	beq.n	8002dfa <HAL_DMA_Init+0x3e6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <HAL_DMA_Init+0x42c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d017      	beq.n	8002dfa <HAL_DMA_Init+0x3e6>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <HAL_DMA_Init+0x430>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d012      	beq.n	8002dfa <HAL_DMA_Init+0x3e6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e48 <HAL_DMA_Init+0x434>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_DMA_Init+0x3e6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e4c <HAL_DMA_Init+0x438>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d008      	beq.n	8002dfa <HAL_DMA_Init+0x3e6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a18      	ldr	r2, [pc, #96]	@ (8002e50 <HAL_DMA_Init+0x43c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <HAL_DMA_Init+0x3e6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a17      	ldr	r2, [pc, #92]	@ (8002e54 <HAL_DMA_Init+0x440>)
 8002df8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <HAL_DMA_Init+0x444>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b40      	cmp	r3, #64	@ 0x40
 8002e20:	d01c      	beq.n	8002e5c <HAL_DMA_Init+0x448>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b80      	cmp	r3, #128	@ 0x80
 8002e28:	d102      	bne.n	8002e30 <HAL_DMA_Init+0x41c>
 8002e2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e2e:	e016      	b.n	8002e5e <HAL_DMA_Init+0x44a>
 8002e30:	2300      	movs	r3, #0
 8002e32:	e014      	b.n	8002e5e <HAL_DMA_Init+0x44a>
 8002e34:	fe10803f 	.word	0xfe10803f
 8002e38:	58025408 	.word	0x58025408
 8002e3c:	5802541c 	.word	0x5802541c
 8002e40:	58025430 	.word	0x58025430
 8002e44:	58025444 	.word	0x58025444
 8002e48:	58025458 	.word	0x58025458
 8002e4c:	5802546c 	.word	0x5802546c
 8002e50:	58025480 	.word	0x58025480
 8002e54:	58025494 	.word	0x58025494
 8002e58:	fffe000f 	.word	0xfffe000f
 8002e5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b6e      	ldr	r3, [pc, #440]	@ (800305c <HAL_DMA_Init+0x648>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8003060 <HAL_DMA_Init+0x64c>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	009a      	lsls	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f001 fc45 	bl	8004744 <DMA_CalcBaseAndBitshift>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	e008      	b.n	8002ee2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2240      	movs	r2, #64	@ 0x40
 8002ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0b7      	b.n	8003052 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5f      	ldr	r2, [pc, #380]	@ (8003064 <HAL_DMA_Init+0x650>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d072      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8003068 <HAL_DMA_Init+0x654>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d06d      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5c      	ldr	r2, [pc, #368]	@ (800306c <HAL_DMA_Init+0x658>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d068      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5a      	ldr	r2, [pc, #360]	@ (8003070 <HAL_DMA_Init+0x65c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d063      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a59      	ldr	r2, [pc, #356]	@ (8003074 <HAL_DMA_Init+0x660>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d05e      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a57      	ldr	r2, [pc, #348]	@ (8003078 <HAL_DMA_Init+0x664>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d059      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a56      	ldr	r2, [pc, #344]	@ (800307c <HAL_DMA_Init+0x668>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d054      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a54      	ldr	r2, [pc, #336]	@ (8003080 <HAL_DMA_Init+0x66c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d04f      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a53      	ldr	r2, [pc, #332]	@ (8003084 <HAL_DMA_Init+0x670>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a51      	ldr	r2, [pc, #324]	@ (8003088 <HAL_DMA_Init+0x674>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a50      	ldr	r2, [pc, #320]	@ (800308c <HAL_DMA_Init+0x678>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a4e      	ldr	r2, [pc, #312]	@ (8003090 <HAL_DMA_Init+0x67c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a4d      	ldr	r2, [pc, #308]	@ (8003094 <HAL_DMA_Init+0x680>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a4b      	ldr	r2, [pc, #300]	@ (8003098 <HAL_DMA_Init+0x684>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4a      	ldr	r2, [pc, #296]	@ (800309c <HAL_DMA_Init+0x688>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a48      	ldr	r2, [pc, #288]	@ (80030a0 <HAL_DMA_Init+0x68c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a47      	ldr	r2, [pc, #284]	@ (80030a4 <HAL_DMA_Init+0x690>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a45      	ldr	r2, [pc, #276]	@ (80030a8 <HAL_DMA_Init+0x694>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a44      	ldr	r2, [pc, #272]	@ (80030ac <HAL_DMA_Init+0x698>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a42      	ldr	r2, [pc, #264]	@ (80030b0 <HAL_DMA_Init+0x69c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a41      	ldr	r2, [pc, #260]	@ (80030b4 <HAL_DMA_Init+0x6a0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3f      	ldr	r2, [pc, #252]	@ (80030b8 <HAL_DMA_Init+0x6a4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a3e      	ldr	r2, [pc, #248]	@ (80030bc <HAL_DMA_Init+0x6a8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_Init+0x5be>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80030c0 <HAL_DMA_Init+0x6ac>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Init+0x5c2>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_DMA_Init+0x5c4>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d032      	beq.n	8003042 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f001 fcdf 	bl	80049a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b80      	cmp	r3, #128	@ 0x80
 8002fe8:	d102      	bne.n	8002ff0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003004:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_DMA_Init+0x61c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d80c      	bhi.n	8003030 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f001 fd5c 	bl	8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e008      	b.n	8003042 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	a7fdabf8 	.word	0xa7fdabf8
 8003060:	cccccccd 	.word	0xcccccccd
 8003064:	40020010 	.word	0x40020010
 8003068:	40020028 	.word	0x40020028
 800306c:	40020040 	.word	0x40020040
 8003070:	40020058 	.word	0x40020058
 8003074:	40020070 	.word	0x40020070
 8003078:	40020088 	.word	0x40020088
 800307c:	400200a0 	.word	0x400200a0
 8003080:	400200b8 	.word	0x400200b8
 8003084:	40020410 	.word	0x40020410
 8003088:	40020428 	.word	0x40020428
 800308c:	40020440 	.word	0x40020440
 8003090:	40020458 	.word	0x40020458
 8003094:	40020470 	.word	0x40020470
 8003098:	40020488 	.word	0x40020488
 800309c:	400204a0 	.word	0x400204a0
 80030a0:	400204b8 	.word	0x400204b8
 80030a4:	58025408 	.word	0x58025408
 80030a8:	5802541c 	.word	0x5802541c
 80030ac:	58025430 	.word	0x58025430
 80030b0:	58025444 	.word	0x58025444
 80030b4:	58025458 	.word	0x58025458
 80030b8:	5802546c 	.word	0x5802546c
 80030bc:	58025480 	.word	0x58025480
 80030c0:	58025494 	.word	0x58025494

080030c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e226      	b.n	800352e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_DMA_Start_IT+0x2a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e21f      	b.n	800352e <HAL_DMA_Start_IT+0x46a>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	f040 820a 	bne.w	8003518 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a68      	ldr	r2, [pc, #416]	@ (80032b8 <HAL_DMA_Start_IT+0x1f4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a66      	ldr	r2, [pc, #408]	@ (80032bc <HAL_DMA_Start_IT+0x1f8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_DMA_Start_IT+0x1fc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a63      	ldr	r2, [pc, #396]	@ (80032c4 <HAL_DMA_Start_IT+0x200>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a62      	ldr	r2, [pc, #392]	@ (80032c8 <HAL_DMA_Start_IT+0x204>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a60      	ldr	r2, [pc, #384]	@ (80032cc <HAL_DMA_Start_IT+0x208>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5f      	ldr	r2, [pc, #380]	@ (80032d0 <HAL_DMA_Start_IT+0x20c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5d      	ldr	r2, [pc, #372]	@ (80032d4 <HAL_DMA_Start_IT+0x210>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5c      	ldr	r2, [pc, #368]	@ (80032d8 <HAL_DMA_Start_IT+0x214>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5a      	ldr	r2, [pc, #360]	@ (80032dc <HAL_DMA_Start_IT+0x218>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a59      	ldr	r2, [pc, #356]	@ (80032e0 <HAL_DMA_Start_IT+0x21c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a57      	ldr	r2, [pc, #348]	@ (80032e4 <HAL_DMA_Start_IT+0x220>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a56      	ldr	r2, [pc, #344]	@ (80032e8 <HAL_DMA_Start_IT+0x224>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_DMA_Start_IT+0x228>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a53      	ldr	r2, [pc, #332]	@ (80032f0 <HAL_DMA_Start_IT+0x22c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a51      	ldr	r2, [pc, #324]	@ (80032f4 <HAL_DMA_Start_IT+0x230>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <HAL_DMA_Start_IT+0x100>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_DMA_Start_IT+0x110>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f001 f906 	bl	80043ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a34      	ldr	r2, [pc, #208]	@ (80032b8 <HAL_DMA_Start_IT+0x1f4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d04a      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a33      	ldr	r2, [pc, #204]	@ (80032bc <HAL_DMA_Start_IT+0x1f8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d045      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a31      	ldr	r2, [pc, #196]	@ (80032c0 <HAL_DMA_Start_IT+0x1fc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d040      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a30      	ldr	r2, [pc, #192]	@ (80032c4 <HAL_DMA_Start_IT+0x200>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d03b      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2e      	ldr	r2, [pc, #184]	@ (80032c8 <HAL_DMA_Start_IT+0x204>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d036      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2d      	ldr	r2, [pc, #180]	@ (80032cc <HAL_DMA_Start_IT+0x208>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d031      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2b      	ldr	r2, [pc, #172]	@ (80032d0 <HAL_DMA_Start_IT+0x20c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02c      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2a      	ldr	r2, [pc, #168]	@ (80032d4 <HAL_DMA_Start_IT+0x210>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d027      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a28      	ldr	r2, [pc, #160]	@ (80032d8 <HAL_DMA_Start_IT+0x214>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a27      	ldr	r2, [pc, #156]	@ (80032dc <HAL_DMA_Start_IT+0x218>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01d      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a25      	ldr	r2, [pc, #148]	@ (80032e0 <HAL_DMA_Start_IT+0x21c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a24      	ldr	r2, [pc, #144]	@ (80032e4 <HAL_DMA_Start_IT+0x220>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a22      	ldr	r2, [pc, #136]	@ (80032e8 <HAL_DMA_Start_IT+0x224>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a21      	ldr	r2, [pc, #132]	@ (80032ec <HAL_DMA_Start_IT+0x228>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	@ (80032f0 <HAL_DMA_Start_IT+0x22c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	@ (80032f4 <HAL_DMA_Start_IT+0x230>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Start_IT+0x1c0>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_DMA_Start_IT+0x1c2>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d036      	beq.n	80032f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 021e 	bic.w	r2, r3, #30
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0216 	orr.w	r2, r2, #22
 800329c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d03e      	beq.n	8003324 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0208 	orr.w	r2, r2, #8
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e035      	b.n	8003324 <HAL_DMA_Start_IT+0x260>
 80032b8:	40020010 	.word	0x40020010
 80032bc:	40020028 	.word	0x40020028
 80032c0:	40020040 	.word	0x40020040
 80032c4:	40020058 	.word	0x40020058
 80032c8:	40020070 	.word	0x40020070
 80032cc:	40020088 	.word	0x40020088
 80032d0:	400200a0 	.word	0x400200a0
 80032d4:	400200b8 	.word	0x400200b8
 80032d8:	40020410 	.word	0x40020410
 80032dc:	40020428 	.word	0x40020428
 80032e0:	40020440 	.word	0x40020440
 80032e4:	40020458 	.word	0x40020458
 80032e8:	40020470 	.word	0x40020470
 80032ec:	40020488 	.word	0x40020488
 80032f0:	400204a0 	.word	0x400204a0
 80032f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 020e 	bic.w	r2, r3, #14
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 020a 	orr.w	r2, r2, #10
 800330a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0204 	orr.w	r2, r2, #4
 8003322:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a83      	ldr	r2, [pc, #524]	@ (8003538 <HAL_DMA_Start_IT+0x474>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d072      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a82      	ldr	r2, [pc, #520]	@ (800353c <HAL_DMA_Start_IT+0x478>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d06d      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a80      	ldr	r2, [pc, #512]	@ (8003540 <HAL_DMA_Start_IT+0x47c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d068      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7f      	ldr	r2, [pc, #508]	@ (8003544 <HAL_DMA_Start_IT+0x480>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d063      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7d      	ldr	r2, [pc, #500]	@ (8003548 <HAL_DMA_Start_IT+0x484>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d05e      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7c      	ldr	r2, [pc, #496]	@ (800354c <HAL_DMA_Start_IT+0x488>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d059      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7a      	ldr	r2, [pc, #488]	@ (8003550 <HAL_DMA_Start_IT+0x48c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d054      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a79      	ldr	r2, [pc, #484]	@ (8003554 <HAL_DMA_Start_IT+0x490>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d04f      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a77      	ldr	r2, [pc, #476]	@ (8003558 <HAL_DMA_Start_IT+0x494>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d04a      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a76      	ldr	r2, [pc, #472]	@ (800355c <HAL_DMA_Start_IT+0x498>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d045      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a74      	ldr	r2, [pc, #464]	@ (8003560 <HAL_DMA_Start_IT+0x49c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d040      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a73      	ldr	r2, [pc, #460]	@ (8003564 <HAL_DMA_Start_IT+0x4a0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d03b      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a71      	ldr	r2, [pc, #452]	@ (8003568 <HAL_DMA_Start_IT+0x4a4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d036      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a70      	ldr	r2, [pc, #448]	@ (800356c <HAL_DMA_Start_IT+0x4a8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d031      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003570 <HAL_DMA_Start_IT+0x4ac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02c      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6d      	ldr	r2, [pc, #436]	@ (8003574 <HAL_DMA_Start_IT+0x4b0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d027      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003578 <HAL_DMA_Start_IT+0x4b4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d022      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6a      	ldr	r2, [pc, #424]	@ (800357c <HAL_DMA_Start_IT+0x4b8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d01d      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a68      	ldr	r2, [pc, #416]	@ (8003580 <HAL_DMA_Start_IT+0x4bc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d018      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a67      	ldr	r2, [pc, #412]	@ (8003584 <HAL_DMA_Start_IT+0x4c0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	@ (8003588 <HAL_DMA_Start_IT+0x4c4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00e      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a64      	ldr	r2, [pc, #400]	@ (800358c <HAL_DMA_Start_IT+0x4c8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a62      	ldr	r2, [pc, #392]	@ (8003590 <HAL_DMA_Start_IT+0x4cc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a61      	ldr	r2, [pc, #388]	@ (8003594 <HAL_DMA_Start_IT+0x4d0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d101      	bne.n	8003418 <HAL_DMA_Start_IT+0x354>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_DMA_Start_IT+0x356>
 8003418:	2300      	movs	r3, #0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01a      	beq.n	8003454 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800343a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800344e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003452:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a37      	ldr	r2, [pc, #220]	@ (8003538 <HAL_DMA_Start_IT+0x474>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04a      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a36      	ldr	r2, [pc, #216]	@ (800353c <HAL_DMA_Start_IT+0x478>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d045      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a34      	ldr	r2, [pc, #208]	@ (8003540 <HAL_DMA_Start_IT+0x47c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d040      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a33      	ldr	r2, [pc, #204]	@ (8003544 <HAL_DMA_Start_IT+0x480>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a31      	ldr	r2, [pc, #196]	@ (8003548 <HAL_DMA_Start_IT+0x484>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d036      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a30      	ldr	r2, [pc, #192]	@ (800354c <HAL_DMA_Start_IT+0x488>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d031      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2e      	ldr	r2, [pc, #184]	@ (8003550 <HAL_DMA_Start_IT+0x48c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02c      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2d      	ldr	r2, [pc, #180]	@ (8003554 <HAL_DMA_Start_IT+0x490>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d027      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003558 <HAL_DMA_Start_IT+0x494>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2a      	ldr	r2, [pc, #168]	@ (800355c <HAL_DMA_Start_IT+0x498>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01d      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a28      	ldr	r2, [pc, #160]	@ (8003560 <HAL_DMA_Start_IT+0x49c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a27      	ldr	r2, [pc, #156]	@ (8003564 <HAL_DMA_Start_IT+0x4a0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a25      	ldr	r2, [pc, #148]	@ (8003568 <HAL_DMA_Start_IT+0x4a4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a24      	ldr	r2, [pc, #144]	@ (800356c <HAL_DMA_Start_IT+0x4a8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <HAL_DMA_Start_IT+0x4ac>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	@ (8003574 <HAL_DMA_Start_IT+0x4b0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <HAL_DMA_Start_IT+0x442>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e012      	b.n	800352c <HAL_DMA_Start_IT+0x468>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e009      	b.n	800352c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800351e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40020010 	.word	0x40020010
 800353c:	40020028 	.word	0x40020028
 8003540:	40020040 	.word	0x40020040
 8003544:	40020058 	.word	0x40020058
 8003548:	40020070 	.word	0x40020070
 800354c:	40020088 	.word	0x40020088
 8003550:	400200a0 	.word	0x400200a0
 8003554:	400200b8 	.word	0x400200b8
 8003558:	40020410 	.word	0x40020410
 800355c:	40020428 	.word	0x40020428
 8003560:	40020440 	.word	0x40020440
 8003564:	40020458 	.word	0x40020458
 8003568:	40020470 	.word	0x40020470
 800356c:	40020488 	.word	0x40020488
 8003570:	400204a0 	.word	0x400204a0
 8003574:	400204b8 	.word	0x400204b8
 8003578:	58025408 	.word	0x58025408
 800357c:	5802541c 	.word	0x5802541c
 8003580:	58025430 	.word	0x58025430
 8003584:	58025444 	.word	0x58025444
 8003588:	58025458 	.word	0x58025458
 800358c:	5802546c 	.word	0x5802546c
 8003590:	58025480 	.word	0x58025480
 8003594:	58025494 	.word	0x58025494

08003598 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	@ 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035a4:	4b67      	ldr	r3, [pc, #412]	@ (8003744 <HAL_DMA_IRQHandler+0x1ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a67      	ldr	r2, [pc, #412]	@ (8003748 <HAL_DMA_IRQHandler+0x1b0>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a5f      	ldr	r2, [pc, #380]	@ (800374c <HAL_DMA_IRQHandler+0x1b4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003750 <HAL_DMA_IRQHandler+0x1b8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003754 <HAL_DMA_IRQHandler+0x1bc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003758 <HAL_DMA_IRQHandler+0x1c0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a59      	ldr	r2, [pc, #356]	@ (800375c <HAL_DMA_IRQHandler+0x1c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a57      	ldr	r2, [pc, #348]	@ (8003760 <HAL_DMA_IRQHandler+0x1c8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a56      	ldr	r2, [pc, #344]	@ (8003764 <HAL_DMA_IRQHandler+0x1cc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a54      	ldr	r2, [pc, #336]	@ (8003768 <HAL_DMA_IRQHandler+0x1d0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a53      	ldr	r2, [pc, #332]	@ (800376c <HAL_DMA_IRQHandler+0x1d4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a51      	ldr	r2, [pc, #324]	@ (8003770 <HAL_DMA_IRQHandler+0x1d8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a50      	ldr	r2, [pc, #320]	@ (8003774 <HAL_DMA_IRQHandler+0x1dc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4e      	ldr	r2, [pc, #312]	@ (8003778 <HAL_DMA_IRQHandler+0x1e0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a4d      	ldr	r2, [pc, #308]	@ (800377c <HAL_DMA_IRQHandler+0x1e4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4b      	ldr	r2, [pc, #300]	@ (8003780 <HAL_DMA_IRQHandler+0x1e8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a4a      	ldr	r2, [pc, #296]	@ (8003784 <HAL_DMA_IRQHandler+0x1ec>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a48      	ldr	r2, [pc, #288]	@ (8003788 <HAL_DMA_IRQHandler+0x1f0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_DMA_IRQHandler+0xd6>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_DMA_IRQHandler+0xd8>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 842b 	beq.w	8003ecc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2208      	movs	r2, #8
 8003680:	409a      	lsls	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80a2 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2e      	ldr	r2, [pc, #184]	@ (800374c <HAL_DMA_IRQHandler+0x1b4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04a      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2d      	ldr	r2, [pc, #180]	@ (8003750 <HAL_DMA_IRQHandler+0x1b8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d045      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003754 <HAL_DMA_IRQHandler+0x1bc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d040      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003758 <HAL_DMA_IRQHandler+0x1c0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d03b      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a28      	ldr	r2, [pc, #160]	@ (800375c <HAL_DMA_IRQHandler+0x1c4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a27      	ldr	r2, [pc, #156]	@ (8003760 <HAL_DMA_IRQHandler+0x1c8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d031      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a25      	ldr	r2, [pc, #148]	@ (8003764 <HAL_DMA_IRQHandler+0x1cc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02c      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a24      	ldr	r2, [pc, #144]	@ (8003768 <HAL_DMA_IRQHandler+0x1d0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	@ (800376c <HAL_DMA_IRQHandler+0x1d4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a21      	ldr	r2, [pc, #132]	@ (8003770 <HAL_DMA_IRQHandler+0x1d8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003774 <HAL_DMA_IRQHandler+0x1dc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003778 <HAL_DMA_IRQHandler+0x1e0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <HAL_DMA_IRQHandler+0x1e4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <HAL_DMA_IRQHandler+0x1e8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a19      	ldr	r2, [pc, #100]	@ (8003784 <HAL_DMA_IRQHandler+0x1ec>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_DMA_IRQHandler+0x1f0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d12f      	bne.n	800378c <HAL_DMA_IRQHandler+0x1f4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e02e      	b.n	80037a0 <HAL_DMA_IRQHandler+0x208>
 8003742:	bf00      	nop
 8003744:	24000010 	.word	0x24000010
 8003748:	1b4e81b5 	.word	0x1b4e81b5
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d015      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2208      	movs	r2, #8
 80037be:	409a      	lsls	r2, r3
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d06e      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a69      	ldr	r2, [pc, #420]	@ (8003990 <HAL_DMA_IRQHandler+0x3f8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a67      	ldr	r2, [pc, #412]	@ (8003994 <HAL_DMA_IRQHandler+0x3fc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a66      	ldr	r2, [pc, #408]	@ (8003998 <HAL_DMA_IRQHandler+0x400>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a64      	ldr	r2, [pc, #400]	@ (800399c <HAL_DMA_IRQHandler+0x404>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a63      	ldr	r2, [pc, #396]	@ (80039a0 <HAL_DMA_IRQHandler+0x408>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a61      	ldr	r2, [pc, #388]	@ (80039a4 <HAL_DMA_IRQHandler+0x40c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a60      	ldr	r2, [pc, #384]	@ (80039a8 <HAL_DMA_IRQHandler+0x410>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a5e      	ldr	r2, [pc, #376]	@ (80039ac <HAL_DMA_IRQHandler+0x414>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5d      	ldr	r2, [pc, #372]	@ (80039b0 <HAL_DMA_IRQHandler+0x418>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5b      	ldr	r2, [pc, #364]	@ (80039b4 <HAL_DMA_IRQHandler+0x41c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5a      	ldr	r2, [pc, #360]	@ (80039b8 <HAL_DMA_IRQHandler+0x420>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a58      	ldr	r2, [pc, #352]	@ (80039bc <HAL_DMA_IRQHandler+0x424>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a57      	ldr	r2, [pc, #348]	@ (80039c0 <HAL_DMA_IRQHandler+0x428>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a55      	ldr	r2, [pc, #340]	@ (80039c4 <HAL_DMA_IRQHandler+0x42c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a54      	ldr	r2, [pc, #336]	@ (80039c8 <HAL_DMA_IRQHandler+0x430>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a52      	ldr	r2, [pc, #328]	@ (80039cc <HAL_DMA_IRQHandler+0x434>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10a      	bne.n	800389c <HAL_DMA_IRQHandler+0x304>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e003      	b.n	80038a4 <HAL_DMA_IRQHandler+0x30c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f043 0202 	orr.w	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2204      	movs	r2, #4
 80038ce:	409a      	lsls	r2, r3
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 808f 	beq.w	80039f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2c      	ldr	r2, [pc, #176]	@ (8003990 <HAL_DMA_IRQHandler+0x3f8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04a      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <HAL_DMA_IRQHandler+0x3fc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d045      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a29      	ldr	r2, [pc, #164]	@ (8003998 <HAL_DMA_IRQHandler+0x400>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d040      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a27      	ldr	r2, [pc, #156]	@ (800399c <HAL_DMA_IRQHandler+0x404>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d03b      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a26      	ldr	r2, [pc, #152]	@ (80039a0 <HAL_DMA_IRQHandler+0x408>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d036      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <HAL_DMA_IRQHandler+0x40c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a23      	ldr	r2, [pc, #140]	@ (80039a8 <HAL_DMA_IRQHandler+0x410>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d02c      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a21      	ldr	r2, [pc, #132]	@ (80039ac <HAL_DMA_IRQHandler+0x414>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d027      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a20      	ldr	r2, [pc, #128]	@ (80039b0 <HAL_DMA_IRQHandler+0x418>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1e      	ldr	r2, [pc, #120]	@ (80039b4 <HAL_DMA_IRQHandler+0x41c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01d      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <HAL_DMA_IRQHandler+0x420>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1b      	ldr	r2, [pc, #108]	@ (80039bc <HAL_DMA_IRQHandler+0x424>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1a      	ldr	r2, [pc, #104]	@ (80039c0 <HAL_DMA_IRQHandler+0x428>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a18      	ldr	r2, [pc, #96]	@ (80039c4 <HAL_DMA_IRQHandler+0x42c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <HAL_DMA_IRQHandler+0x430>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <HAL_DMA_IRQHandler+0x434>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d12a      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x438>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e023      	b.n	80039d8 <HAL_DMA_IRQHandler+0x440>
 8003990:	40020010 	.word	0x40020010
 8003994:	40020028 	.word	0x40020028
 8003998:	40020040 	.word	0x40020040
 800399c:	40020058 	.word	0x40020058
 80039a0:	40020070 	.word	0x40020070
 80039a4:	40020088 	.word	0x40020088
 80039a8:	400200a0 	.word	0x400200a0
 80039ac:	400200b8 	.word	0x400200b8
 80039b0:	40020410 	.word	0x40020410
 80039b4:	40020428 	.word	0x40020428
 80039b8:	40020440 	.word	0x40020440
 80039bc:	40020458 	.word	0x40020458
 80039c0:	40020470 	.word	0x40020470
 80039c4:	40020488 	.word	0x40020488
 80039c8:	400204a0 	.word	0x400204a0
 80039cc:	400204b8 	.word	0x400204b8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2204      	movs	r2, #4
 80039e6:	409a      	lsls	r2, r3
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	2210      	movs	r2, #16
 8003a02:	409a      	lsls	r2, r3
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a6 	beq.w	8003b5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a85      	ldr	r2, [pc, #532]	@ (8003c28 <HAL_DMA_IRQHandler+0x690>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d04a      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a83      	ldr	r2, [pc, #524]	@ (8003c2c <HAL_DMA_IRQHandler+0x694>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d045      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a82      	ldr	r2, [pc, #520]	@ (8003c30 <HAL_DMA_IRQHandler+0x698>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d040      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a80      	ldr	r2, [pc, #512]	@ (8003c34 <HAL_DMA_IRQHandler+0x69c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d03b      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a7f      	ldr	r2, [pc, #508]	@ (8003c38 <HAL_DMA_IRQHandler+0x6a0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d036      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a7d      	ldr	r2, [pc, #500]	@ (8003c3c <HAL_DMA_IRQHandler+0x6a4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d031      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c40 <HAL_DMA_IRQHandler+0x6a8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d02c      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7a      	ldr	r2, [pc, #488]	@ (8003c44 <HAL_DMA_IRQHandler+0x6ac>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d027      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a79      	ldr	r2, [pc, #484]	@ (8003c48 <HAL_DMA_IRQHandler+0x6b0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d022      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a77      	ldr	r2, [pc, #476]	@ (8003c4c <HAL_DMA_IRQHandler+0x6b4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01d      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a76      	ldr	r2, [pc, #472]	@ (8003c50 <HAL_DMA_IRQHandler+0x6b8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d018      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a74      	ldr	r2, [pc, #464]	@ (8003c54 <HAL_DMA_IRQHandler+0x6bc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a73      	ldr	r2, [pc, #460]	@ (8003c58 <HAL_DMA_IRQHandler+0x6c0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a71      	ldr	r2, [pc, #452]	@ (8003c5c <HAL_DMA_IRQHandler+0x6c4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a70      	ldr	r2, [pc, #448]	@ (8003c60 <HAL_DMA_IRQHandler+0x6c8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8003c64 <HAL_DMA_IRQHandler+0x6cc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10a      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x52c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e009      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x540>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03e      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d108      	bne.n	8003b1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d024      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	e01f      	b.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01b      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
 8003b2a:	e016      	b.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0208 	bic.w	r2, r2, #8
 8003b48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2220      	movs	r2, #32
 8003b64:	409a      	lsls	r2, r3
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8110 	beq.w	8003d90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <HAL_DMA_IRQHandler+0x690>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d04a      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c2c <HAL_DMA_IRQHandler+0x694>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d045      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a29      	ldr	r2, [pc, #164]	@ (8003c30 <HAL_DMA_IRQHandler+0x698>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d040      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a28      	ldr	r2, [pc, #160]	@ (8003c34 <HAL_DMA_IRQHandler+0x69c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d03b      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a26      	ldr	r2, [pc, #152]	@ (8003c38 <HAL_DMA_IRQHandler+0x6a0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d036      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a25      	ldr	r2, [pc, #148]	@ (8003c3c <HAL_DMA_IRQHandler+0x6a4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d031      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a23      	ldr	r2, [pc, #140]	@ (8003c40 <HAL_DMA_IRQHandler+0x6a8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02c      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a22      	ldr	r2, [pc, #136]	@ (8003c44 <HAL_DMA_IRQHandler+0x6ac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d027      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	@ (8003c48 <HAL_DMA_IRQHandler+0x6b0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <HAL_DMA_IRQHandler+0x6b4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d01d      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c50 <HAL_DMA_IRQHandler+0x6b8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d018      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <HAL_DMA_IRQHandler+0x6bc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <HAL_DMA_IRQHandler+0x6c0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a19      	ldr	r2, [pc, #100]	@ (8003c5c <HAL_DMA_IRQHandler+0x6c4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <HAL_DMA_IRQHandler+0x6c8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a16      	ldr	r2, [pc, #88]	@ (8003c64 <HAL_DMA_IRQHandler+0x6cc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d12b      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x6d0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e02a      	b.n	8003c7c <HAL_DMA_IRQHandler+0x6e4>
 8003c26:	bf00      	nop
 8003c28:	40020010 	.word	0x40020010
 8003c2c:	40020028 	.word	0x40020028
 8003c30:	40020040 	.word	0x40020040
 8003c34:	40020058 	.word	0x40020058
 8003c38:	40020070 	.word	0x40020070
 8003c3c:	40020088 	.word	0x40020088
 8003c40:	400200a0 	.word	0x400200a0
 8003c44:	400200b8 	.word	0x400200b8
 8003c48:	40020410 	.word	0x40020410
 8003c4c:	40020428 	.word	0x40020428
 8003c50:	40020440 	.word	0x40020440
 8003c54:	40020458 	.word	0x40020458
 8003c58:	40020470 	.word	0x40020470
 8003c5c:	40020488 	.word	0x40020488
 8003c60:	400204a0 	.word	0x400204a0
 8003c64:	400204b8 	.word	0x400204b8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8087 	beq.w	8003d90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d139      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0216 	bic.w	r2, r2, #22
 8003cac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_DMA_IRQHandler+0x736>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0208 	bic.w	r2, r2, #8
 8003cdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	223f      	movs	r2, #63	@ 0x3f
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 834a 	beq.w	800439c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
          }
          return;
 8003d10:	e344      	b.n	800439c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02c      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
 8003d3e:	e027      	b.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
 8003d50:	e01e      	b.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10f      	bne.n	8003d80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0210 	bic.w	r2, r2, #16
 8003d6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8306 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8088 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2204      	movs	r2, #4
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7a      	ldr	r2, [pc, #488]	@ (8003fa0 <HAL_DMA_IRQHandler+0xa08>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d04a      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a79      	ldr	r2, [pc, #484]	@ (8003fa4 <HAL_DMA_IRQHandler+0xa0c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d045      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a77      	ldr	r2, [pc, #476]	@ (8003fa8 <HAL_DMA_IRQHandler+0xa10>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d040      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a76      	ldr	r2, [pc, #472]	@ (8003fac <HAL_DMA_IRQHandler+0xa14>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d03b      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a74      	ldr	r2, [pc, #464]	@ (8003fb0 <HAL_DMA_IRQHandler+0xa18>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d036      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a73      	ldr	r2, [pc, #460]	@ (8003fb4 <HAL_DMA_IRQHandler+0xa1c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d031      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a71      	ldr	r2, [pc, #452]	@ (8003fb8 <HAL_DMA_IRQHandler+0xa20>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02c      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a70      	ldr	r2, [pc, #448]	@ (8003fbc <HAL_DMA_IRQHandler+0xa24>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d027      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc0 <HAL_DMA_IRQHandler+0xa28>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6d      	ldr	r2, [pc, #436]	@ (8003fc4 <HAL_DMA_IRQHandler+0xa2c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d01d      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6b      	ldr	r2, [pc, #428]	@ (8003fc8 <HAL_DMA_IRQHandler+0xa30>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6a      	ldr	r2, [pc, #424]	@ (8003fcc <HAL_DMA_IRQHandler+0xa34>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a68      	ldr	r2, [pc, #416]	@ (8003fd0 <HAL_DMA_IRQHandler+0xa38>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a67      	ldr	r2, [pc, #412]	@ (8003fd4 <HAL_DMA_IRQHandler+0xa3c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a65      	ldr	r2, [pc, #404]	@ (8003fd8 <HAL_DMA_IRQHandler+0xa40>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a64      	ldr	r2, [pc, #400]	@ (8003fdc <HAL_DMA_IRQHandler+0xa44>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <HAL_DMA_IRQHandler+0x8ca>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e007      	b.n	8003e72 <HAL_DMA_IRQHandler+0x8da>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d307      	bcc.n	8003e8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f2      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x8da>
 8003e8c:	e000      	b.n	8003e90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003ea6:	e003      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8272 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
 8003eca:	e26c      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a43      	ldr	r2, [pc, #268]	@ (8003fe0 <HAL_DMA_IRQHandler+0xa48>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a42      	ldr	r2, [pc, #264]	@ (8003fe4 <HAL_DMA_IRQHandler+0xa4c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d01d      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a40      	ldr	r2, [pc, #256]	@ (8003fe8 <HAL_DMA_IRQHandler+0xa50>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	@ (8003fec <HAL_DMA_IRQHandler+0xa54>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff0 <HAL_DMA_IRQHandler+0xa58>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff4 <HAL_DMA_IRQHandler+0xa5c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003ff8 <HAL_DMA_IRQHandler+0xa60>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a39      	ldr	r2, [pc, #228]	@ (8003ffc <HAL_DMA_IRQHandler+0xa64>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x988>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_DMA_IRQHandler+0x98a>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 823f 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2204      	movs	r2, #4
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80cd 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xb48>
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80c7 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d049      	beq.n	8004000 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8210 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f88:	e20a      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8206 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f9c:	e200      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
 8003f9e:	bf00      	nop
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	58025408 	.word	0x58025408
 8003fe4:	5802541c 	.word	0x5802541c
 8003fe8:	58025430 	.word	0x58025430
 8003fec:	58025444 	.word	0x58025444
 8003ff0:	58025458 	.word	0x58025458
 8003ff4:	5802546c 	.word	0x5802546c
 8003ff8:	58025480 	.word	0x58025480
 8003ffc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d160      	bne.n	80040cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7f      	ldr	r2, [pc, #508]	@ (800420c <HAL_DMA_IRQHandler+0xc74>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d04a      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a7d      	ldr	r2, [pc, #500]	@ (8004210 <HAL_DMA_IRQHandler+0xc78>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d045      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a7c      	ldr	r2, [pc, #496]	@ (8004214 <HAL_DMA_IRQHandler+0xc7c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d040      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a7a      	ldr	r2, [pc, #488]	@ (8004218 <HAL_DMA_IRQHandler+0xc80>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d03b      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a79      	ldr	r2, [pc, #484]	@ (800421c <HAL_DMA_IRQHandler+0xc84>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d036      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a77      	ldr	r2, [pc, #476]	@ (8004220 <HAL_DMA_IRQHandler+0xc88>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a76      	ldr	r2, [pc, #472]	@ (8004224 <HAL_DMA_IRQHandler+0xc8c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d02c      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a74      	ldr	r2, [pc, #464]	@ (8004228 <HAL_DMA_IRQHandler+0xc90>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d027      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a73      	ldr	r2, [pc, #460]	@ (800422c <HAL_DMA_IRQHandler+0xc94>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a71      	ldr	r2, [pc, #452]	@ (8004230 <HAL_DMA_IRQHandler+0xc98>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01d      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a70      	ldr	r2, [pc, #448]	@ (8004234 <HAL_DMA_IRQHandler+0xc9c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6e      	ldr	r2, [pc, #440]	@ (8004238 <HAL_DMA_IRQHandler+0xca0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6d      	ldr	r2, [pc, #436]	@ (800423c <HAL_DMA_IRQHandler+0xca4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6b      	ldr	r2, [pc, #428]	@ (8004240 <HAL_DMA_IRQHandler+0xca8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6a      	ldr	r2, [pc, #424]	@ (8004244 <HAL_DMA_IRQHandler+0xcac>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a68      	ldr	r2, [pc, #416]	@ (8004248 <HAL_DMA_IRQHandler+0xcb0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <HAL_DMA_IRQHandler+0xb24>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e007      	b.n	80040cc <HAL_DMA_IRQHandler+0xb34>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8165 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040de:	e15f      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2202      	movs	r2, #2
 80040ea:	409a      	lsls	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80c5 	beq.w	8004280 <HAL_DMA_IRQHandler+0xce8>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80bf 	beq.w	8004280 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2202      	movs	r2, #2
 800410c:	409a      	lsls	r2, r3
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d018      	beq.n	800414e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 813a 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004138:	e134      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8130 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800414c:	e12a      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	f040 8089 	bne.w	800426c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2b      	ldr	r2, [pc, #172]	@ (800420c <HAL_DMA_IRQHandler+0xc74>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d04a      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a29      	ldr	r2, [pc, #164]	@ (8004210 <HAL_DMA_IRQHandler+0xc78>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d045      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a28      	ldr	r2, [pc, #160]	@ (8004214 <HAL_DMA_IRQHandler+0xc7c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d040      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a26      	ldr	r2, [pc, #152]	@ (8004218 <HAL_DMA_IRQHandler+0xc80>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d03b      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a25      	ldr	r2, [pc, #148]	@ (800421c <HAL_DMA_IRQHandler+0xc84>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d036      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a23      	ldr	r2, [pc, #140]	@ (8004220 <HAL_DMA_IRQHandler+0xc88>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a22      	ldr	r2, [pc, #136]	@ (8004224 <HAL_DMA_IRQHandler+0xc8c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d02c      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a20      	ldr	r2, [pc, #128]	@ (8004228 <HAL_DMA_IRQHandler+0xc90>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d027      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1f      	ldr	r2, [pc, #124]	@ (800422c <HAL_DMA_IRQHandler+0xc94>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d022      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004230 <HAL_DMA_IRQHandler+0xc98>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01d      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <HAL_DMA_IRQHandler+0xc9c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d018      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <HAL_DMA_IRQHandler+0xca0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a19      	ldr	r2, [pc, #100]	@ (800423c <HAL_DMA_IRQHandler+0xca4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <HAL_DMA_IRQHandler+0xca8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a16      	ldr	r2, [pc, #88]	@ (8004244 <HAL_DMA_IRQHandler+0xcac>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <HAL_DMA_IRQHandler+0xcb0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d128      	bne.n	800424c <HAL_DMA_IRQHandler+0xcb4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0214 	bic.w	r2, r2, #20
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e027      	b.n	800425c <HAL_DMA_IRQHandler+0xcc4>
 800420c:	40020010 	.word	0x40020010
 8004210:	40020028 	.word	0x40020028
 8004214:	40020040 	.word	0x40020040
 8004218:	40020058 	.word	0x40020058
 800421c:	40020070 	.word	0x40020070
 8004220:	40020088 	.word	0x40020088
 8004224:	400200a0 	.word	0x400200a0
 8004228:	400200b8 	.word	0x400200b8
 800422c:	40020410 	.word	0x40020410
 8004230:	40020428 	.word	0x40020428
 8004234:	40020440 	.word	0x40020440
 8004238:	40020458 	.word	0x40020458
 800423c:	40020470 	.word	0x40020470
 8004240:	40020488 	.word	0x40020488
 8004244:	400204a0 	.word	0x400204a0
 8004248:	400204b8 	.word	0x400204b8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 020a 	bic.w	r2, r2, #10
 800425a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8097 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800427e:	e091      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2208      	movs	r2, #8
 800428a:	409a      	lsls	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8088 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8082 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a41      	ldr	r2, [pc, #260]	@ (80043ac <HAL_DMA_IRQHandler+0xe14>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d04a      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a3f      	ldr	r2, [pc, #252]	@ (80043b0 <HAL_DMA_IRQHandler+0xe18>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d045      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3e      	ldr	r2, [pc, #248]	@ (80043b4 <HAL_DMA_IRQHandler+0xe1c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d040      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3c      	ldr	r2, [pc, #240]	@ (80043b8 <HAL_DMA_IRQHandler+0xe20>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d03b      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a3b      	ldr	r2, [pc, #236]	@ (80043bc <HAL_DMA_IRQHandler+0xe24>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d036      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a39      	ldr	r2, [pc, #228]	@ (80043c0 <HAL_DMA_IRQHandler+0xe28>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d031      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <HAL_DMA_IRQHandler+0xe2c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d02c      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a36      	ldr	r2, [pc, #216]	@ (80043c8 <HAL_DMA_IRQHandler+0xe30>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d027      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a35      	ldr	r2, [pc, #212]	@ (80043cc <HAL_DMA_IRQHandler+0xe34>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a33      	ldr	r2, [pc, #204]	@ (80043d0 <HAL_DMA_IRQHandler+0xe38>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01d      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a32      	ldr	r2, [pc, #200]	@ (80043d4 <HAL_DMA_IRQHandler+0xe3c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a30      	ldr	r2, [pc, #192]	@ (80043d8 <HAL_DMA_IRQHandler+0xe40>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2f      	ldr	r2, [pc, #188]	@ (80043dc <HAL_DMA_IRQHandler+0xe44>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2d      	ldr	r2, [pc, #180]	@ (80043e0 <HAL_DMA_IRQHandler+0xe48>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2c      	ldr	r2, [pc, #176]	@ (80043e4 <HAL_DMA_IRQHandler+0xe4c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <HAL_DMA_IRQHandler+0xe50>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <HAL_DMA_IRQHandler+0xdbc>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 021c 	bic.w	r2, r2, #28
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e007      	b.n	8004364 <HAL_DMA_IRQHandler+0xdcc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 020e 	bic.w	r2, r2, #14
 8004362:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
 800439a:	e004      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043a6:	3728      	adds	r7, #40	@ 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40020010 	.word	0x40020010
 80043b0:	40020028 	.word	0x40020028
 80043b4:	40020040 	.word	0x40020040
 80043b8:	40020058 	.word	0x40020058
 80043bc:	40020070 	.word	0x40020070
 80043c0:	40020088 	.word	0x40020088
 80043c4:	400200a0 	.word	0x400200a0
 80043c8:	400200b8 	.word	0x400200b8
 80043cc:	40020410 	.word	0x40020410
 80043d0:	40020428 	.word	0x40020428
 80043d4:	40020440 	.word	0x40020440
 80043d8:	40020458 	.word	0x40020458
 80043dc:	40020470 	.word	0x40020470
 80043e0:	40020488 	.word	0x40020488
 80043e4:	400204a0 	.word	0x400204a0
 80043e8:	400204b8 	.word	0x400204b8

080043ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a7f      	ldr	r2, [pc, #508]	@ (8004608 <DMA_SetConfig+0x21c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d072      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7d      	ldr	r2, [pc, #500]	@ (800460c <DMA_SetConfig+0x220>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d06d      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7c      	ldr	r2, [pc, #496]	@ (8004610 <DMA_SetConfig+0x224>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d068      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7a      	ldr	r2, [pc, #488]	@ (8004614 <DMA_SetConfig+0x228>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d063      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a79      	ldr	r2, [pc, #484]	@ (8004618 <DMA_SetConfig+0x22c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d05e      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	@ (800461c <DMA_SetConfig+0x230>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d059      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a76      	ldr	r2, [pc, #472]	@ (8004620 <DMA_SetConfig+0x234>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d054      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a74      	ldr	r2, [pc, #464]	@ (8004624 <DMA_SetConfig+0x238>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04f      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a73      	ldr	r2, [pc, #460]	@ (8004628 <DMA_SetConfig+0x23c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04a      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a71      	ldr	r2, [pc, #452]	@ (800462c <DMA_SetConfig+0x240>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d045      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a70      	ldr	r2, [pc, #448]	@ (8004630 <DMA_SetConfig+0x244>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	@ (8004634 <DMA_SetConfig+0x248>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d03b      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6d      	ldr	r2, [pc, #436]	@ (8004638 <DMA_SetConfig+0x24c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d036      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6b      	ldr	r2, [pc, #428]	@ (800463c <DMA_SetConfig+0x250>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6a      	ldr	r2, [pc, #424]	@ (8004640 <DMA_SetConfig+0x254>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d02c      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a68      	ldr	r2, [pc, #416]	@ (8004644 <DMA_SetConfig+0x258>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d027      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a67      	ldr	r2, [pc, #412]	@ (8004648 <DMA_SetConfig+0x25c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a65      	ldr	r2, [pc, #404]	@ (800464c <DMA_SetConfig+0x260>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a64      	ldr	r2, [pc, #400]	@ (8004650 <DMA_SetConfig+0x264>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a62      	ldr	r2, [pc, #392]	@ (8004654 <DMA_SetConfig+0x268>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a61      	ldr	r2, [pc, #388]	@ (8004658 <DMA_SetConfig+0x26c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a5f      	ldr	r2, [pc, #380]	@ (800465c <DMA_SetConfig+0x270>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004660 <DMA_SetConfig+0x274>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5c      	ldr	r2, [pc, #368]	@ (8004664 <DMA_SetConfig+0x278>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <DMA_SetConfig+0x10e>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <DMA_SetConfig+0x110>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004508:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800451a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a39      	ldr	r2, [pc, #228]	@ (8004608 <DMA_SetConfig+0x21c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d04a      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a38      	ldr	r2, [pc, #224]	@ (800460c <DMA_SetConfig+0x220>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d045      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a36      	ldr	r2, [pc, #216]	@ (8004610 <DMA_SetConfig+0x224>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d040      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a35      	ldr	r2, [pc, #212]	@ (8004614 <DMA_SetConfig+0x228>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d03b      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a33      	ldr	r2, [pc, #204]	@ (8004618 <DMA_SetConfig+0x22c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d036      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a32      	ldr	r2, [pc, #200]	@ (800461c <DMA_SetConfig+0x230>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d031      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a30      	ldr	r2, [pc, #192]	@ (8004620 <DMA_SetConfig+0x234>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d02c      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2f      	ldr	r2, [pc, #188]	@ (8004624 <DMA_SetConfig+0x238>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d027      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2d      	ldr	r2, [pc, #180]	@ (8004628 <DMA_SetConfig+0x23c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d022      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2c      	ldr	r2, [pc, #176]	@ (800462c <DMA_SetConfig+0x240>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d01d      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2a      	ldr	r2, [pc, #168]	@ (8004630 <DMA_SetConfig+0x244>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d018      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a29      	ldr	r2, [pc, #164]	@ (8004634 <DMA_SetConfig+0x248>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a27      	ldr	r2, [pc, #156]	@ (8004638 <DMA_SetConfig+0x24c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a26      	ldr	r2, [pc, #152]	@ (800463c <DMA_SetConfig+0x250>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d009      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <DMA_SetConfig+0x254>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a23      	ldr	r2, [pc, #140]	@ (8004644 <DMA_SetConfig+0x258>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <DMA_SetConfig+0x1d4>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <DMA_SetConfig+0x1d6>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d059      	beq.n	800467a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	223f      	movs	r2, #63	@ 0x3f
 80045d0:	409a      	lsls	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b40      	cmp	r3, #64	@ 0x40
 80045f4:	d138      	bne.n	8004668 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004606:	e086      	b.n	8004716 <DMA_SetConfig+0x32a>
 8004608:	40020010 	.word	0x40020010
 800460c:	40020028 	.word	0x40020028
 8004610:	40020040 	.word	0x40020040
 8004614:	40020058 	.word	0x40020058
 8004618:	40020070 	.word	0x40020070
 800461c:	40020088 	.word	0x40020088
 8004620:	400200a0 	.word	0x400200a0
 8004624:	400200b8 	.word	0x400200b8
 8004628:	40020410 	.word	0x40020410
 800462c:	40020428 	.word	0x40020428
 8004630:	40020440 	.word	0x40020440
 8004634:	40020458 	.word	0x40020458
 8004638:	40020470 	.word	0x40020470
 800463c:	40020488 	.word	0x40020488
 8004640:	400204a0 	.word	0x400204a0
 8004644:	400204b8 	.word	0x400204b8
 8004648:	58025408 	.word	0x58025408
 800464c:	5802541c 	.word	0x5802541c
 8004650:	58025430 	.word	0x58025430
 8004654:	58025444 	.word	0x58025444
 8004658:	58025458 	.word	0x58025458
 800465c:	5802546c 	.word	0x5802546c
 8004660:	58025480 	.word	0x58025480
 8004664:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
}
 8004678:	e04d      	b.n	8004716 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a29      	ldr	r2, [pc, #164]	@ (8004724 <DMA_SetConfig+0x338>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <DMA_SetConfig+0x2de>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a27      	ldr	r2, [pc, #156]	@ (8004728 <DMA_SetConfig+0x33c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01d      	beq.n	80046ca <DMA_SetConfig+0x2de>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a26      	ldr	r2, [pc, #152]	@ (800472c <DMA_SetConfig+0x340>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <DMA_SetConfig+0x2de>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a24      	ldr	r2, [pc, #144]	@ (8004730 <DMA_SetConfig+0x344>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a23      	ldr	r2, [pc, #140]	@ (8004734 <DMA_SetConfig+0x348>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a21      	ldr	r2, [pc, #132]	@ (8004738 <DMA_SetConfig+0x34c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a20      	ldr	r2, [pc, #128]	@ (800473c <DMA_SetConfig+0x350>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004740 <DMA_SetConfig+0x354>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <DMA_SetConfig+0x2e2>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <DMA_SetConfig+0x2e4>
 80046ce:	2300      	movs	r3, #0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b40      	cmp	r3, #64	@ 0x40
 80046f2:	d108      	bne.n	8004706 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	60da      	str	r2, [r3, #12]
}
 8004704:	e007      	b.n	8004716 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58025408 	.word	0x58025408
 8004728:	5802541c 	.word	0x5802541c
 800472c:	58025430 	.word	0x58025430
 8004730:	58025444 	.word	0x58025444
 8004734:	58025458 	.word	0x58025458
 8004738:	5802546c 	.word	0x5802546c
 800473c:	58025480 	.word	0x58025480
 8004740:	58025494 	.word	0x58025494

08004744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a42      	ldr	r2, [pc, #264]	@ (800485c <DMA_CalcBaseAndBitshift+0x118>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d04a      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a41      	ldr	r2, [pc, #260]	@ (8004860 <DMA_CalcBaseAndBitshift+0x11c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d045      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3f      	ldr	r2, [pc, #252]	@ (8004864 <DMA_CalcBaseAndBitshift+0x120>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d040      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3e      	ldr	r2, [pc, #248]	@ (8004868 <DMA_CalcBaseAndBitshift+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d03b      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3c      	ldr	r2, [pc, #240]	@ (800486c <DMA_CalcBaseAndBitshift+0x128>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d036      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3b      	ldr	r2, [pc, #236]	@ (8004870 <DMA_CalcBaseAndBitshift+0x12c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d031      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a39      	ldr	r2, [pc, #228]	@ (8004874 <DMA_CalcBaseAndBitshift+0x130>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d02c      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a38      	ldr	r2, [pc, #224]	@ (8004878 <DMA_CalcBaseAndBitshift+0x134>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d027      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a36      	ldr	r2, [pc, #216]	@ (800487c <DMA_CalcBaseAndBitshift+0x138>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d022      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a35      	ldr	r2, [pc, #212]	@ (8004880 <DMA_CalcBaseAndBitshift+0x13c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d01d      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a33      	ldr	r2, [pc, #204]	@ (8004884 <DMA_CalcBaseAndBitshift+0x140>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d018      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a32      	ldr	r2, [pc, #200]	@ (8004888 <DMA_CalcBaseAndBitshift+0x144>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d013      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a30      	ldr	r2, [pc, #192]	@ (800488c <DMA_CalcBaseAndBitshift+0x148>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00e      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004890 <DMA_CalcBaseAndBitshift+0x14c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d009      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004894 <DMA_CalcBaseAndBitshift+0x150>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004898 <DMA_CalcBaseAndBitshift+0x154>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <DMA_CalcBaseAndBitshift+0xac>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <DMA_CalcBaseAndBitshift+0xae>
 80047f0:	2300      	movs	r3, #0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d024      	beq.n	8004840 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3b10      	subs	r3, #16
 80047fe:	4a27      	ldr	r2, [pc, #156]	@ (800489c <DMA_CalcBaseAndBitshift+0x158>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	4a24      	ldr	r2, [pc, #144]	@ (80048a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004810:	5cd3      	ldrb	r3, [r2, r3]
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d908      	bls.n	8004830 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	4b1f      	ldr	r3, [pc, #124]	@ (80048a4 <DMA_CalcBaseAndBitshift+0x160>)
 8004826:	4013      	ands	r3, r2
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	659a      	str	r2, [r3, #88]	@ 0x58
 800482e:	e00d      	b.n	800484c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <DMA_CalcBaseAndBitshift+0x160>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6593      	str	r3, [r2, #88]	@ 0x58
 800483e:	e005      	b.n	800484c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40020010 	.word	0x40020010
 8004860:	40020028 	.word	0x40020028
 8004864:	40020040 	.word	0x40020040
 8004868:	40020058 	.word	0x40020058
 800486c:	40020070 	.word	0x40020070
 8004870:	40020088 	.word	0x40020088
 8004874:	400200a0 	.word	0x400200a0
 8004878:	400200b8 	.word	0x400200b8
 800487c:	40020410 	.word	0x40020410
 8004880:	40020428 	.word	0x40020428
 8004884:	40020440 	.word	0x40020440
 8004888:	40020458 	.word	0x40020458
 800488c:	40020470 	.word	0x40020470
 8004890:	40020488 	.word	0x40020488
 8004894:	400204a0 	.word	0x400204a0
 8004898:	400204b8 	.word	0x400204b8
 800489c:	aaaaaaab 	.word	0xaaaaaaab
 80048a0:	0800cd3c 	.word	0x0800cd3c
 80048a4:	fffffc00 	.word	0xfffffc00

080048a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d120      	bne.n	80048fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d858      	bhi.n	8004976 <DMA_CheckFifoParam+0xce>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <DMA_CheckFifoParam+0x24>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048ef 	.word	0x080048ef
 80048d4:	080048dd 	.word	0x080048dd
 80048d8:	08004977 	.word	0x08004977
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d048      	beq.n	800497a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048ec:	e045      	b.n	800497a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048f6:	d142      	bne.n	800497e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048fc:	e03f      	b.n	800497e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004906:	d123      	bne.n	8004950 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	2b03      	cmp	r3, #3
 800490e:	d838      	bhi.n	8004982 <DMA_CheckFifoParam+0xda>
 8004910:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <DMA_CheckFifoParam+0x70>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004929 	.word	0x08004929
 800491c:	0800492f 	.word	0x0800492f
 8004920:	08004929 	.word	0x08004929
 8004924:	08004941 	.word	0x08004941
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
        break;
 800492c:	e030      	b.n	8004990 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d025      	beq.n	8004986 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800493e:	e022      	b.n	8004986 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004948:	d11f      	bne.n	800498a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800494e:	e01c      	b.n	800498a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	2b02      	cmp	r3, #2
 8004956:	d902      	bls.n	800495e <DMA_CheckFifoParam+0xb6>
 8004958:	2b03      	cmp	r3, #3
 800495a:	d003      	beq.n	8004964 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800495c:	e018      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
        break;
 8004962:	e015      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
    break;
 8004974:	e00b      	b.n	800498e <DMA_CheckFifoParam+0xe6>
        break;
 8004976:	bf00      	nop
 8004978:	e00a      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800497a:	bf00      	nop
 800497c:	e008      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800497e:	bf00      	nop
 8004980:	e006      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 8004982:	bf00      	nop
 8004984:	e004      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
    break;
 800498e:	bf00      	nop
    }
  }

  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop

080049a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a38      	ldr	r2, [pc, #224]	@ (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a36      	ldr	r2, [pc, #216]	@ (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01d      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a35      	ldr	r2, [pc, #212]	@ (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a33      	ldr	r2, [pc, #204]	@ (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a32      	ldr	r2, [pc, #200]	@ (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a30      	ldr	r2, [pc, #192]	@ (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2f      	ldr	r2, [pc, #188]	@ (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	3b08      	subs	r3, #8
 8004a10:	4a28      	ldr	r2, [pc, #160]	@ (8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a24      	ldr	r2, [pc, #144]	@ (8004abc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	2201      	movs	r2, #1
 8004a36:	409a      	lsls	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a3c:	e024      	b.n	8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3b10      	subs	r3, #16
 8004a46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d806      	bhi.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d902      	bls.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3308      	adds	r3, #8
 8004a64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4b18      	ldr	r3, [pc, #96]	@ (8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a78:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2201      	movs	r2, #1
 8004a82:	409a      	lsls	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	58025408 	.word	0x58025408
 8004a98:	5802541c 	.word	0x5802541c
 8004a9c:	58025430 	.word	0x58025430
 8004aa0:	58025444 	.word	0x58025444
 8004aa4:	58025458 	.word	0x58025458
 8004aa8:	5802546c 	.word	0x5802546c
 8004aac:	58025480 	.word	0x58025480
 8004ab0:	58025494 	.word	0x58025494
 8004ab4:	cccccccd 	.word	0xcccccccd
 8004ab8:	16009600 	.word	0x16009600
 8004abc:	58025880 	.word	0x58025880
 8004ac0:	aaaaaaab 	.word	0xaaaaaaab
 8004ac4:	400204b8 	.word	0x400204b8
 8004ac8:	4002040f 	.word	0x4002040f
 8004acc:	10008200 	.word	0x10008200
 8004ad0:	40020880 	.word	0x40020880

08004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04a      	beq.n	8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d847      	bhi.n	8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a25      	ldr	r2, [pc, #148]	@ (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d022      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a24      	ldr	r2, [pc, #144]	@ (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d01d      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a22      	ldr	r2, [pc, #136]	@ (8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d018      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a21      	ldr	r2, [pc, #132]	@ (8004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00e      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d009      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d101      	bne.n	8004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4b17      	ldr	r3, [pc, #92]	@ (8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	@ (8004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b5e:	e009      	b.n	8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a11      	ldr	r2, [pc, #68]	@ (8004bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b72:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	58025408 	.word	0x58025408
 8004b90:	5802541c 	.word	0x5802541c
 8004b94:	58025430 	.word	0x58025430
 8004b98:	58025444 	.word	0x58025444
 8004b9c:	58025458 	.word	0x58025458
 8004ba0:	5802546c 	.word	0x5802546c
 8004ba4:	58025480 	.word	0x58025480
 8004ba8:	58025494 	.word	0x58025494
 8004bac:	1600963f 	.word	0x1600963f
 8004bb0:	58025940 	.word	0x58025940
 8004bb4:	1000823f 	.word	0x1000823f
 8004bb8:	40020940 	.word	0x40020940

08004bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	@ 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bca:	4b86      	ldr	r3, [pc, #536]	@ (8004de4 <HAL_GPIO_Init+0x228>)
 8004bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bce:	e18c      	b.n	8004eea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 817e 	beq.w	8004ee4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d005      	beq.n	8004c00 <HAL_GPIO_Init+0x44>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d130      	bne.n	8004c62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c36:	2201      	movs	r2, #1
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4013      	ands	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 0201 	and.w	r2, r3, #1
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d123      	bne.n	8004cf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80d8 	beq.w	8004ee4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d34:	4b2c      	ldr	r3, [pc, #176]	@ (8004de8 <HAL_GPIO_Init+0x22c>)
 8004d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004de8 <HAL_GPIO_Init+0x22c>)
 8004d3c:	f043 0302 	orr.w	r3, r3, #2
 8004d40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004d44:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <HAL_GPIO_Init+0x22c>)
 8004d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d52:	4a26      	ldr	r2, [pc, #152]	@ (8004dec <HAL_GPIO_Init+0x230>)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	089b      	lsrs	r3, r3, #2
 8004d58:	3302      	adds	r3, #2
 8004d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	220f      	movs	r2, #15
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1d      	ldr	r2, [pc, #116]	@ (8004df0 <HAL_GPIO_Init+0x234>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d04a      	beq.n	8004e14 <HAL_GPIO_Init+0x258>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1c      	ldr	r2, [pc, #112]	@ (8004df4 <HAL_GPIO_Init+0x238>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02b      	beq.n	8004dde <HAL_GPIO_Init+0x222>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1b      	ldr	r2, [pc, #108]	@ (8004df8 <HAL_GPIO_Init+0x23c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d025      	beq.n	8004dda <HAL_GPIO_Init+0x21e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1a      	ldr	r2, [pc, #104]	@ (8004dfc <HAL_GPIO_Init+0x240>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01f      	beq.n	8004dd6 <HAL_GPIO_Init+0x21a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a19      	ldr	r2, [pc, #100]	@ (8004e00 <HAL_GPIO_Init+0x244>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d019      	beq.n	8004dd2 <HAL_GPIO_Init+0x216>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a18      	ldr	r2, [pc, #96]	@ (8004e04 <HAL_GPIO_Init+0x248>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <HAL_GPIO_Init+0x212>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a17      	ldr	r2, [pc, #92]	@ (8004e08 <HAL_GPIO_Init+0x24c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00d      	beq.n	8004dca <HAL_GPIO_Init+0x20e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a16      	ldr	r2, [pc, #88]	@ (8004e0c <HAL_GPIO_Init+0x250>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d007      	beq.n	8004dc6 <HAL_GPIO_Init+0x20a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a15      	ldr	r2, [pc, #84]	@ (8004e10 <HAL_GPIO_Init+0x254>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d101      	bne.n	8004dc2 <HAL_GPIO_Init+0x206>
 8004dbe:	2309      	movs	r3, #9
 8004dc0:	e029      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004dc2:	230a      	movs	r3, #10
 8004dc4:	e027      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004dc6:	2307      	movs	r3, #7
 8004dc8:	e025      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004dca:	2306      	movs	r3, #6
 8004dcc:	e023      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004dce:	2305      	movs	r3, #5
 8004dd0:	e021      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	e01f      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e01d      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e01b      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e019      	b.n	8004e16 <HAL_GPIO_Init+0x25a>
 8004de2:	bf00      	nop
 8004de4:	58000080 	.word	0x58000080
 8004de8:	58024400 	.word	0x58024400
 8004dec:	58000400 	.word	0x58000400
 8004df0:	58020000 	.word	0x58020000
 8004df4:	58020400 	.word	0x58020400
 8004df8:	58020800 	.word	0x58020800
 8004dfc:	58020c00 	.word	0x58020c00
 8004e00:	58021000 	.word	0x58021000
 8004e04:	58021400 	.word	0x58021400
 8004e08:	58021800 	.word	0x58021800
 8004e0c:	58021c00 	.word	0x58021c00
 8004e10:	58022400 	.word	0x58022400
 8004e14:	2300      	movs	r3, #0
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	f002 0203 	and.w	r2, r2, #3
 8004e1c:	0092      	lsls	r2, r2, #2
 8004e1e:	4093      	lsls	r3, r2
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e26:	4938      	ldr	r1, [pc, #224]	@ (8004f08 <HAL_GPIO_Init+0x34c>)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	089b      	lsrs	r3, r3, #2
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4013      	ands	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f ae6b 	bne.w	8004bd0 <HAL_GPIO_Init+0x14>
  }
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	3724      	adds	r7, #36	@ 0x24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	58000400 	.word	0x58000400

08004f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e001      	b.n	8004f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f4c:	787b      	ldrb	r3, [r7, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f58:	e003      	b.n	8004f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f5a:	887b      	ldrh	r3, [r7, #2]
 8004f5c:	041a      	lsls	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f80:	887a      	ldrh	r2, [r7, #2]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4013      	ands	r3, r2
 8004f86:	041a      	lsls	r2, r3, #16
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	43d9      	mvns	r1, r3
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	400b      	ands	r3, r1
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	619a      	str	r2, [r3, #24]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e08b      	b.n	80050ce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc ffae 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	@ 0x24
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e006      	b.n	800502c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800502a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d108      	bne.n	8005046 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	e007      	b.n	8005056 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b1d      	ldr	r3, [pc, #116]	@ (80050d8 <HAL_I2C_Init+0x134>)
 8005062:	430b      	orrs	r3, r1
 8005064:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005074:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69d9      	ldr	r1, [r3, #28]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	02008000 	.word	0x02008000

080050dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d138      	bne.n	8005164 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e032      	b.n	8005166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2224      	movs	r2, #36	@ 0x24
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800512e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6819      	ldr	r1, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b20      	cmp	r3, #32
 8005186:	d139      	bne.n	80051fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005192:	2302      	movs	r3, #2
 8005194:	e033      	b.n	80051fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2224      	movs	r2, #36	@ 0x24
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e000      	b.n	80051fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
  }
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005214:	4b19      	ldr	r3, [pc, #100]	@ (800527c <HAL_PWREx_ConfigSupply+0x70>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d00a      	beq.n	8005236 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005220:	4b16      	ldr	r3, [pc, #88]	@ (800527c <HAL_PWREx_ConfigSupply+0x70>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	429a      	cmp	r2, r3
 800522c:	d001      	beq.n	8005232 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e01f      	b.n	8005272 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e01d      	b.n	8005272 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005236:	4b11      	ldr	r3, [pc, #68]	@ (800527c <HAL_PWREx_ConfigSupply+0x70>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f023 0207 	bic.w	r2, r3, #7
 800523e:	490f      	ldr	r1, [pc, #60]	@ (800527c <HAL_PWREx_ConfigSupply+0x70>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4313      	orrs	r3, r2
 8005244:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005246:	f7fd fabd 	bl	80027c4 <HAL_GetTick>
 800524a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800524c:	e009      	b.n	8005262 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800524e:	f7fd fab9 	bl	80027c4 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800525c:	d901      	bls.n	8005262 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e007      	b.n	8005272 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005262:	4b06      	ldr	r3, [pc, #24]	@ (800527c <HAL_PWREx_ConfigSupply+0x70>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800526a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800526e:	d1ee      	bne.n	800524e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	58024800 	.word	0x58024800

08005280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08c      	sub	sp, #48	@ 0x30
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e3c8      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 8087 	beq.w	80053ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a0:	4b88      	ldr	r3, [pc, #544]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052aa:	4b86      	ldr	r3, [pc, #536]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d007      	beq.n	80052c6 <HAL_RCC_OscConfig+0x46>
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	2b18      	cmp	r3, #24
 80052ba:	d110      	bne.n	80052de <HAL_RCC_OscConfig+0x5e>
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d10b      	bne.n	80052de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c6:	4b7f      	ldr	r3, [pc, #508]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d06c      	beq.n	80053ac <HAL_RCC_OscConfig+0x12c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d168      	bne.n	80053ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e3a2      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e6:	d106      	bne.n	80052f6 <HAL_RCC_OscConfig+0x76>
 80052e8:	4b76      	ldr	r3, [pc, #472]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a75      	ldr	r2, [pc, #468]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80052ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e02e      	b.n	8005354 <HAL_RCC_OscConfig+0xd4>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10c      	bne.n	8005318 <HAL_RCC_OscConfig+0x98>
 80052fe:	4b71      	ldr	r3, [pc, #452]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a70      	ldr	r2, [pc, #448]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	4b6e      	ldr	r3, [pc, #440]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a6d      	ldr	r2, [pc, #436]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005310:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	e01d      	b.n	8005354 <HAL_RCC_OscConfig+0xd4>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005320:	d10c      	bne.n	800533c <HAL_RCC_OscConfig+0xbc>
 8005322:	4b68      	ldr	r3, [pc, #416]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a67      	ldr	r2, [pc, #412]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	4b65      	ldr	r3, [pc, #404]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a64      	ldr	r2, [pc, #400]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e00b      	b.n	8005354 <HAL_RCC_OscConfig+0xd4>
 800533c:	4b61      	ldr	r3, [pc, #388]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a60      	ldr	r2, [pc, #384]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	4b5e      	ldr	r3, [pc, #376]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a5d      	ldr	r2, [pc, #372]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 800534e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fd fa32 	bl	80027c4 <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005364:	f7fd fa2e 	bl	80027c4 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	@ 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e356      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005376:	4b53      	ldr	r3, [pc, #332]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0xe4>
 8005382:	e014      	b.n	80053ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd fa1e 	bl	80027c4 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800538c:	f7fd fa1a 	bl	80027c4 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	@ 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e342      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800539e:	4b49      	ldr	r3, [pc, #292]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x10c>
 80053aa:	e000      	b.n	80053ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 808c 	beq.w	80054d4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053bc:	4b41      	ldr	r3, [pc, #260]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053c6:	4b3f      	ldr	r3, [pc, #252]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_RCC_OscConfig+0x162>
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	2b18      	cmp	r3, #24
 80053d6:	d137      	bne.n	8005448 <HAL_RCC_OscConfig+0x1c8>
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d132      	bne.n	8005448 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053e2:	4b38      	ldr	r3, [pc, #224]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_RCC_OscConfig+0x17a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e314      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053fa:	4b32      	ldr	r3, [pc, #200]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 0219 	bic.w	r2, r3, #25
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	492f      	ldr	r1, [pc, #188]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fd f9da 	bl	80027c4 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005414:	f7fd f9d6 	bl	80027c4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e2fe      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005426:	4b27      	ldr	r3, [pc, #156]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005432:	4b24      	ldr	r3, [pc, #144]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	061b      	lsls	r3, r3, #24
 8005440:	4920      	ldr	r1, [pc, #128]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005442:	4313      	orrs	r3, r2
 8005444:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005446:	e045      	b.n	80054d4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d026      	beq.n	800549e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005450:	4b1c      	ldr	r3, [pc, #112]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 0219 	bic.w	r2, r3, #25
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4919      	ldr	r1, [pc, #100]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005462:	f7fd f9af 	bl	80027c4 <HAL_GetTick>
 8005466:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546a:	f7fd f9ab 	bl	80027c4 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e2d3      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800547c:	4b11      	ldr	r3, [pc, #68]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005488:	4b0e      	ldr	r3, [pc, #56]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	490b      	ldr	r1, [pc, #44]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
 800549c:	e01a      	b.n	80054d4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800549e:	4b09      	ldr	r3, [pc, #36]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a08      	ldr	r2, [pc, #32]	@ (80054c4 <HAL_RCC_OscConfig+0x244>)
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054aa:	f7fd f98b 	bl	80027c4 <HAL_GetTick>
 80054ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054b0:	e00a      	b.n	80054c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b2:	f7fd f987 	bl	80027c4 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d903      	bls.n	80054c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e2af      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
 80054c4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054c8:	4b96      	ldr	r3, [pc, #600]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1ee      	bne.n	80054b2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d06a      	beq.n	80055b6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e0:	4b90      	ldr	r3, [pc, #576]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054e8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054ea:	4b8e      	ldr	r3, [pc, #568]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80054ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ee:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d007      	beq.n	8005506 <HAL_RCC_OscConfig+0x286>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b18      	cmp	r3, #24
 80054fa:	d11b      	bne.n	8005534 <HAL_RCC_OscConfig+0x2b4>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d116      	bne.n	8005534 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005506:	4b87      	ldr	r3, [pc, #540]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x29e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	2b80      	cmp	r3, #128	@ 0x80
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e282      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800551e:	4b81      	ldr	r3, [pc, #516]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	061b      	lsls	r3, r3, #24
 800552c:	497d      	ldr	r1, [pc, #500]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800552e:	4313      	orrs	r3, r2
 8005530:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005532:	e040      	b.n	80055b6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d023      	beq.n	8005584 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800553c:	4b79      	ldr	r3, [pc, #484]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a78      	ldr	r2, [pc, #480]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fd f93c 	bl	80027c4 <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005550:	f7fd f938 	bl	80027c4 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e260      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005562:	4b70      	ldr	r3, [pc, #448]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800556e:	4b6d      	ldr	r3, [pc, #436]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	061b      	lsls	r3, r3, #24
 800557c:	4969      	ldr	r1, [pc, #420]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800557e:	4313      	orrs	r3, r2
 8005580:	60cb      	str	r3, [r1, #12]
 8005582:	e018      	b.n	80055b6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005584:	4b67      	ldr	r3, [pc, #412]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a66      	ldr	r2, [pc, #408]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800558a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800558e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fd f918 	bl	80027c4 <HAL_GetTick>
 8005594:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005598:	f7fd f914 	bl	80027c4 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e23c      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055aa:	4b5e      	ldr	r3, [pc, #376]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d036      	beq.n	8005630 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d019      	beq.n	80055fe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ca:	4b56      	ldr	r3, [pc, #344]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80055cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ce:	4a55      	ldr	r2, [pc, #340]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d6:	f7fd f8f5 	bl	80027c4 <HAL_GetTick>
 80055da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055de:	f7fd f8f1 	bl	80027c4 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e219      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x35e>
 80055fc:	e018      	b.n	8005630 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055fe:	4b49      	ldr	r3, [pc, #292]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005602:	4a48      	ldr	r2, [pc, #288]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560a:	f7fd f8db 	bl	80027c4 <HAL_GetTick>
 800560e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005612:	f7fd f8d7 	bl	80027c4 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e1ff      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005624:	4b3f      	ldr	r3, [pc, #252]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b00      	cmp	r3, #0
 800563a:	d036      	beq.n	80056aa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d019      	beq.n	8005678 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005644:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a36      	ldr	r2, [pc, #216]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800564a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800564e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005650:	f7fd f8b8 	bl	80027c4 <HAL_GetTick>
 8005654:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005658:	f7fd f8b4 	bl	80027c4 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e1dc      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800566a:	4b2e      	ldr	r3, [pc, #184]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x3d8>
 8005676:	e018      	b.n	80056aa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005678:	4b2a      	ldr	r3, [pc, #168]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a29      	ldr	r2, [pc, #164]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800567e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005682:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005684:	f7fd f89e 	bl	80027c4 <HAL_GetTick>
 8005688:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800568c:	f7fd f89a 	bl	80027c4 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e1c2      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800569e:	4b21      	ldr	r3, [pc, #132]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 8086 	beq.w	80057c4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80056be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056c4:	f7fd f87e 	bl	80027c4 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056cc:	f7fd f87a 	bl	80027c4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	@ 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e1a2      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056de:	4b12      	ldr	r3, [pc, #72]	@ (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d106      	bne.n	8005700 <HAL_RCC_OscConfig+0x480>
 80056f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80056fe:	e032      	b.n	8005766 <HAL_RCC_OscConfig+0x4e6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d111      	bne.n	800572c <HAL_RCC_OscConfig+0x4ac>
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570c:	4a05      	ldr	r2, [pc, #20]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	6713      	str	r3, [r2, #112]	@ 0x70
 8005714:	4b03      	ldr	r3, [pc, #12]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 8005716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005718:	4a02      	ldr	r2, [pc, #8]	@ (8005724 <HAL_RCC_OscConfig+0x4a4>)
 800571a:	f023 0304 	bic.w	r3, r3, #4
 800571e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005720:	e021      	b.n	8005766 <HAL_RCC_OscConfig+0x4e6>
 8005722:	bf00      	nop
 8005724:	58024400 	.word	0x58024400
 8005728:	58024800 	.word	0x58024800
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b05      	cmp	r3, #5
 8005732:	d10c      	bne.n	800574e <HAL_RCC_OscConfig+0x4ce>
 8005734:	4b83      	ldr	r3, [pc, #524]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005738:	4a82      	ldr	r2, [pc, #520]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800573a:	f043 0304 	orr.w	r3, r3, #4
 800573e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005740:	4b80      	ldr	r3, [pc, #512]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005744:	4a7f      	ldr	r2, [pc, #508]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6713      	str	r3, [r2, #112]	@ 0x70
 800574c:	e00b      	b.n	8005766 <HAL_RCC_OscConfig+0x4e6>
 800574e:	4b7d      	ldr	r3, [pc, #500]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005752:	4a7c      	ldr	r2, [pc, #496]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	6713      	str	r3, [r2, #112]	@ 0x70
 800575a:	4b7a      	ldr	r3, [pc, #488]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575e:	4a79      	ldr	r2, [pc, #484]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005760:	f023 0304 	bic.w	r3, r3, #4
 8005764:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d015      	beq.n	800579a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576e:	f7fd f829 	bl	80027c4 <HAL_GetTick>
 8005772:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fd f825 	bl	80027c4 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e14b      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800578c:	4b6d      	ldr	r3, [pc, #436]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ee      	beq.n	8005776 <HAL_RCC_OscConfig+0x4f6>
 8005798:	e014      	b.n	80057c4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579a:	f7fd f813 	bl	80027c4 <HAL_GetTick>
 800579e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7fd f80f 	bl	80027c4 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e135      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057b8:	4b62      	ldr	r3, [pc, #392]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ee      	bne.n	80057a2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 812a 	beq.w	8005a22 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057d6:	2b18      	cmp	r3, #24
 80057d8:	f000 80ba 	beq.w	8005950 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	f040 8095 	bne.w	8005910 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e6:	4b57      	ldr	r3, [pc, #348]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a56      	ldr	r2, [pc, #344]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80057ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f2:	f7fc ffe7 	bl	80027c4 <HAL_GetTick>
 80057f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057fa:	f7fc ffe3 	bl	80027c4 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e10b      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800580c:	4b4d      	ldr	r3, [pc, #308]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f0      	bne.n	80057fa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005818:	4b4a      	ldr	r3, [pc, #296]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800581a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800581c:	4b4a      	ldr	r3, [pc, #296]	@ (8005948 <HAL_RCC_OscConfig+0x6c8>)
 800581e:	4013      	ands	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005828:	0112      	lsls	r2, r2, #4
 800582a:	430a      	orrs	r2, r1
 800582c:	4945      	ldr	r1, [pc, #276]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800582e:	4313      	orrs	r3, r2
 8005830:	628b      	str	r3, [r1, #40]	@ 0x28
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	3b01      	subs	r3, #1
 8005838:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005840:	3b01      	subs	r3, #1
 8005842:	025b      	lsls	r3, r3, #9
 8005844:	b29b      	uxth	r3, r3
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584c:	3b01      	subs	r3, #1
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585a:	3b01      	subs	r3, #1
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005862:	4938      	ldr	r1, [pc, #224]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005864:	4313      	orrs	r3, r2
 8005866:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005868:	4b36      	ldr	r3, [pc, #216]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	4a35      	ldr	r2, [pc, #212]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005874:	4b33      	ldr	r3, [pc, #204]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005878:	4b34      	ldr	r3, [pc, #208]	@ (800594c <HAL_RCC_OscConfig+0x6cc>)
 800587a:	4013      	ands	r3, r2
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005880:	00d2      	lsls	r2, r2, #3
 8005882:	4930      	ldr	r1, [pc, #192]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005884:	4313      	orrs	r3, r2
 8005886:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005888:	4b2e      	ldr	r3, [pc, #184]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	f023 020c 	bic.w	r2, r3, #12
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	492b      	ldr	r1, [pc, #172]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005896:	4313      	orrs	r3, r2
 8005898:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800589a:	4b2a      	ldr	r3, [pc, #168]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 800589c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589e:	f023 0202 	bic.w	r2, r3, #2
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a6:	4927      	ldr	r1, [pc, #156]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058ac:	4b25      	ldr	r3, [pc, #148]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	4a24      	ldr	r2, [pc, #144]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b8:	4b22      	ldr	r3, [pc, #136]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	4a21      	ldr	r2, [pc, #132]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058dc:	4b19      	ldr	r3, [pc, #100]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a18      	ldr	r2, [pc, #96]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 80058e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fc ff6c 	bl	80027c4 <HAL_GetTick>
 80058ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fc ff68 	bl	80027c4 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e090      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005902:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0x670>
 800590e:	e088      	b.n	8005a22 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005910:	4b0c      	ldr	r3, [pc, #48]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a0b      	ldr	r2, [pc, #44]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800591a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fc ff52 	bl	80027c4 <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fc ff4e 	bl	80027c4 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e076      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005936:	4b03      	ldr	r3, [pc, #12]	@ (8005944 <HAL_RCC_OscConfig+0x6c4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x6a4>
 8005942:	e06e      	b.n	8005a22 <HAL_RCC_OscConfig+0x7a2>
 8005944:	58024400 	.word	0x58024400
 8005948:	fffffc0c 	.word	0xfffffc0c
 800594c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005950:	4b36      	ldr	r3, [pc, #216]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 8005952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005954:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005956:	4b35      	ldr	r3, [pc, #212]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	2b01      	cmp	r3, #1
 8005962:	d031      	beq.n	80059c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f003 0203 	and.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d12a      	bne.n	80059c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	091b      	lsrs	r3, r3, #4
 8005976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d122      	bne.n	80059c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d11a      	bne.n	80059c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	0a5b      	lsrs	r3, r3, #9
 8005996:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d111      	bne.n	80059c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d108      	bne.n	80059c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	0e1b      	lsrs	r3, r3, #24
 80059ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e02b      	b.n	8005a24 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80059cc:	4b17      	ldr	r3, [pc, #92]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 80059ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d0:	08db      	lsrs	r3, r3, #3
 80059d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d01f      	beq.n	8005a22 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80059e2:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e6:	4a11      	ldr	r2, [pc, #68]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059ee:	f7fc fee9 	bl	80027c4 <HAL_GetTick>
 80059f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80059f4:	bf00      	nop
 80059f6:	f7fc fee5 	bl	80027c4 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d0f9      	beq.n	80059f6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a02:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 8005a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a06:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <HAL_RCC_OscConfig+0x7b0>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a0e:	00d2      	lsls	r2, r2, #3
 8005a10:	4906      	ldr	r1, [pc, #24]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a16:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	4a04      	ldr	r2, [pc, #16]	@ (8005a2c <HAL_RCC_OscConfig+0x7ac>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3730      	adds	r7, #48	@ 0x30
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	ffff0007 	.word	0xffff0007

08005a34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e19c      	b.n	8005d82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a48:	4b8a      	ldr	r3, [pc, #552]	@ (8005c74 <HAL_RCC_ClockConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d910      	bls.n	8005a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a56:	4b87      	ldr	r3, [pc, #540]	@ (8005c74 <HAL_RCC_ClockConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f023 020f 	bic.w	r2, r3, #15
 8005a5e:	4985      	ldr	r1, [pc, #532]	@ (8005c74 <HAL_RCC_ClockConfig+0x240>)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a66:	4b83      	ldr	r3, [pc, #524]	@ (8005c74 <HAL_RCC_ClockConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d001      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e184      	b.n	8005d82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d010      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	4b7b      	ldr	r3, [pc, #492]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d908      	bls.n	8005aa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a94:	4b78      	ldr	r3, [pc, #480]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	4975      	ldr	r1, [pc, #468]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d010      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	4b70      	ldr	r3, [pc, #448]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d908      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	496a      	ldr	r1, [pc, #424]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d010      	beq.n	8005b02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	4b64      	ldr	r3, [pc, #400]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d908      	bls.n	8005b02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005af0:	4b61      	ldr	r3, [pc, #388]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	495e      	ldr	r1, [pc, #376]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d010      	beq.n	8005b30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69da      	ldr	r2, [r3, #28]
 8005b12:	4b59      	ldr	r3, [pc, #356]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d908      	bls.n	8005b30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b1e:	4b56      	ldr	r3, [pc, #344]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4953      	ldr	r1, [pc, #332]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d010      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	4b4d      	ldr	r3, [pc, #308]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d908      	bls.n	8005b5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f023 020f 	bic.w	r2, r3, #15
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4947      	ldr	r1, [pc, #284]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d055      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b6a:	4b43      	ldr	r3, [pc, #268]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4940      	ldr	r1, [pc, #256]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b84:	4b3c      	ldr	r3, [pc, #240]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d121      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0f6      	b.n	8005d82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b9c:	4b36      	ldr	r3, [pc, #216]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d115      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0ea      	b.n	8005d82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bb4:	4b30      	ldr	r3, [pc, #192]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0de      	b.n	8005d82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0d6      	b.n	8005d82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bd4:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f023 0207 	bic.w	r2, r3, #7
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4925      	ldr	r1, [pc, #148]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be6:	f7fc fded 	bl	80027c4 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bec:	e00a      	b.n	8005c04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bee:	f7fc fde9 	bl	80027c4 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e0be      	b.n	8005d82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c04:	4b1c      	ldr	r3, [pc, #112]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d1eb      	bne.n	8005bee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d010      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	4b14      	ldr	r3, [pc, #80]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d208      	bcs.n	8005c44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c32:	4b11      	ldr	r3, [pc, #68]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f023 020f 	bic.w	r2, r3, #15
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	490e      	ldr	r1, [pc, #56]	@ (8005c78 <HAL_RCC_ClockConfig+0x244>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c44:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <HAL_RCC_ClockConfig+0x240>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d214      	bcs.n	8005c7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c52:	4b08      	ldr	r3, [pc, #32]	@ (8005c74 <HAL_RCC_ClockConfig+0x240>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 020f 	bic.w	r2, r3, #15
 8005c5a:	4906      	ldr	r1, [pc, #24]	@ (8005c74 <HAL_RCC_ClockConfig+0x240>)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b04      	ldr	r3, [pc, #16]	@ (8005c74 <HAL_RCC_ClockConfig+0x240>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e086      	b.n	8005d82 <HAL_RCC_ClockConfig+0x34e>
 8005c74:	52002000 	.word	0x52002000
 8005c78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d208      	bcs.n	8005caa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c98:	4b3c      	ldr	r3, [pc, #240]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	4939      	ldr	r1, [pc, #228]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d010      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	4b34      	ldr	r3, [pc, #208]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d208      	bcs.n	8005cd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cc6:	4b31      	ldr	r3, [pc, #196]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	492e      	ldr	r1, [pc, #184]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d010      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	4b28      	ldr	r3, [pc, #160]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d208      	bcs.n	8005d06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cf4:	4b25      	ldr	r3, [pc, #148]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	4922      	ldr	r1, [pc, #136]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d010      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69da      	ldr	r2, [r3, #28]
 8005d16:	4b1d      	ldr	r3, [pc, #116]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d208      	bcs.n	8005d34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d22:	4b1a      	ldr	r3, [pc, #104]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	4917      	ldr	r1, [pc, #92]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d34:	f000 f834 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	0a1b      	lsrs	r3, r3, #8
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	4912      	ldr	r1, [pc, #72]	@ (8005d90 <HAL_RCC_ClockConfig+0x35c>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d52:	4b0e      	ldr	r3, [pc, #56]	@ (8005d8c <HAL_RCC_ClockConfig+0x358>)
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005d90 <HAL_RCC_ClockConfig+0x35c>)
 8005d5c:	5cd3      	ldrb	r3, [r2, r3]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
 8005d68:	4a0a      	ldr	r2, [pc, #40]	@ (8005d94 <HAL_RCC_ClockConfig+0x360>)
 8005d6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d98 <HAL_RCC_ClockConfig+0x364>)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d72:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <HAL_RCC_ClockConfig+0x368>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fc fcda 	bl	8002730 <HAL_InitTick>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	0800cd2c 	.word	0x0800cd2c
 8005d94:	24000014 	.word	0x24000014
 8005d98:	24000010 	.word	0x24000010
 8005d9c:	24000018 	.word	0x24000018

08005da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b089      	sub	sp, #36	@ 0x24
 8005da4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005da6:	4bb3      	ldr	r3, [pc, #716]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dae:	2b18      	cmp	r3, #24
 8005db0:	f200 8155 	bhi.w	800605e <HAL_RCC_GetSysClockFreq+0x2be>
 8005db4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005e21 	.word	0x08005e21
 8005dc0:	0800605f 	.word	0x0800605f
 8005dc4:	0800605f 	.word	0x0800605f
 8005dc8:	0800605f 	.word	0x0800605f
 8005dcc:	0800605f 	.word	0x0800605f
 8005dd0:	0800605f 	.word	0x0800605f
 8005dd4:	0800605f 	.word	0x0800605f
 8005dd8:	0800605f 	.word	0x0800605f
 8005ddc:	08005e47 	.word	0x08005e47
 8005de0:	0800605f 	.word	0x0800605f
 8005de4:	0800605f 	.word	0x0800605f
 8005de8:	0800605f 	.word	0x0800605f
 8005dec:	0800605f 	.word	0x0800605f
 8005df0:	0800605f 	.word	0x0800605f
 8005df4:	0800605f 	.word	0x0800605f
 8005df8:	0800605f 	.word	0x0800605f
 8005dfc:	08005e4d 	.word	0x08005e4d
 8005e00:	0800605f 	.word	0x0800605f
 8005e04:	0800605f 	.word	0x0800605f
 8005e08:	0800605f 	.word	0x0800605f
 8005e0c:	0800605f 	.word	0x0800605f
 8005e10:	0800605f 	.word	0x0800605f
 8005e14:	0800605f 	.word	0x0800605f
 8005e18:	0800605f 	.word	0x0800605f
 8005e1c:	08005e53 	.word	0x08005e53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e20:	4b94      	ldr	r3, [pc, #592]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e2c:	4b91      	ldr	r3, [pc, #580]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	08db      	lsrs	r3, r3, #3
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	4a90      	ldr	r2, [pc, #576]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e3e:	e111      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e40:	4b8d      	ldr	r3, [pc, #564]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e42:	61bb      	str	r3, [r7, #24]
      break;
 8005e44:	e10e      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e46:	4b8d      	ldr	r3, [pc, #564]	@ (800607c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e48:	61bb      	str	r3, [r7, #24]
      break;
 8005e4a:	e10b      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e4e:	61bb      	str	r3, [r7, #24]
      break;
 8005e50:	e108      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e52:	4b88      	ldr	r3, [pc, #544]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e5c:	4b85      	ldr	r3, [pc, #532]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e68:	4b82      	ldr	r3, [pc, #520]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e72:	4b80      	ldr	r3, [pc, #512]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e76:	08db      	lsrs	r3, r3, #3
 8005e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80e1 	beq.w	8006058 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	f000 8083 	beq.w	8005fa4 <HAL_RCC_GetSysClockFreq+0x204>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	f200 80a1 	bhi.w	8005fe8 <HAL_RCC_GetSysClockFreq+0x248>
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x114>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d056      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005eb2:	e099      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d02d      	beq.n	8005f1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	08db      	lsrs	r3, r3, #3
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	4a6b      	ldr	r2, [pc, #428]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eea:	4b62      	ldr	r3, [pc, #392]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f1a:	e087      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006088 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2e:	4b51      	ldr	r3, [pc, #324]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f42:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f5e:	e065      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800608c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f72:	4b40      	ldr	r3, [pc, #256]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f86:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fa2:	e043      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006090 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fe6:	e021      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800608c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600a:	ed97 6a02 	vldr	s12, [r7, #8]
 800600e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800601e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800602a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800602c:	4b11      	ldr	r3, [pc, #68]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006030:	0a5b      	lsrs	r3, r3, #9
 8006032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006036:	3301      	adds	r3, #1
 8006038:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006044:	edd7 6a07 	vldr	s13, [r7, #28]
 8006048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006050:	ee17 3a90 	vmov	r3, s15
 8006054:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006056:	e005      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	61bb      	str	r3, [r7, #24]
      break;
 800605c:	e002      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800605e:	4b07      	ldr	r3, [pc, #28]	@ (800607c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006060:	61bb      	str	r3, [r7, #24]
      break;
 8006062:	bf00      	nop
  }

  return sysclockfreq;
 8006064:	69bb      	ldr	r3, [r7, #24]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3724      	adds	r7, #36	@ 0x24
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	58024400 	.word	0x58024400
 8006078:	03d09000 	.word	0x03d09000
 800607c:	003d0900 	.word	0x003d0900
 8006080:	007a1200 	.word	0x007a1200
 8006084:	46000000 	.word	0x46000000
 8006088:	4c742400 	.word	0x4c742400
 800608c:	4a742400 	.word	0x4a742400
 8006090:	4af42400 	.word	0x4af42400

08006094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800609a:	f7ff fe81 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 800609e:	4602      	mov	r2, r0
 80060a0:	4b10      	ldr	r3, [pc, #64]	@ (80060e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	490f      	ldr	r1, [pc, #60]	@ (80060e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80060ac:	5ccb      	ldrb	r3, [r1, r3]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	fa22 f303 	lsr.w	r3, r2, r3
 80060b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060b8:	4b0a      	ldr	r3, [pc, #40]	@ (80060e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	4a09      	ldr	r2, [pc, #36]	@ (80060e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80060c2:	5cd3      	ldrb	r3, [r2, r3]
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	fa22 f303 	lsr.w	r3, r2, r3
 80060ce:	4a07      	ldr	r2, [pc, #28]	@ (80060ec <HAL_RCC_GetHCLKFreq+0x58>)
 80060d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060d2:	4a07      	ldr	r2, [pc, #28]	@ (80060f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060d8:	4b04      	ldr	r3, [pc, #16]	@ (80060ec <HAL_RCC_GetHCLKFreq+0x58>)
 80060da:	681b      	ldr	r3, [r3, #0]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	58024400 	.word	0x58024400
 80060e8:	0800cd2c 	.word	0x0800cd2c
 80060ec:	24000014 	.word	0x24000014
 80060f0:	24000010 	.word	0x24000010

080060f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060f8:	f7ff ffcc 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	091b      	lsrs	r3, r3, #4
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4904      	ldr	r1, [pc, #16]	@ (800611c <HAL_RCC_GetPCLK1Freq+0x28>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006114:	4618      	mov	r0, r3
 8006116:	bd80      	pop	{r7, pc}
 8006118:	58024400 	.word	0x58024400
 800611c:	0800cd2c 	.word	0x0800cd2c

08006120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006124:	f7ff ffb6 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 8006128:	4602      	mov	r2, r0
 800612a:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	4904      	ldr	r1, [pc, #16]	@ (8006148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006136:	5ccb      	ldrb	r3, [r1, r3]
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006140:	4618      	mov	r0, r3
 8006142:	bd80      	pop	{r7, pc}
 8006144:	58024400 	.word	0x58024400
 8006148:	0800cd2c 	.word	0x0800cd2c

0800614c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800614c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006150:	b0c6      	sub	sp, #280	@ 0x118
 8006152:	af00      	add	r7, sp, #0
 8006154:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006158:	2300      	movs	r3, #0
 800615a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800615e:	2300      	movs	r3, #0
 8006160:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006170:	2500      	movs	r5, #0
 8006172:	ea54 0305 	orrs.w	r3, r4, r5
 8006176:	d049      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800617e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006182:	d02f      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006184:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006188:	d828      	bhi.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800618a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800618e:	d01a      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006190:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006194:	d822      	bhi.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800619a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800619e:	d007      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061a0:	e01c      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a2:	4bab      	ldr	r3, [pc, #684]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a6:	4aaa      	ldr	r2, [pc, #680]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061ae:	e01a      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	3308      	adds	r3, #8
 80061b6:	2102      	movs	r1, #2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 fc7b 	bl	8007ab4 <RCCEx_PLL2_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061c4:	e00f      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ca:	3328      	adds	r3, #40	@ 0x28
 80061cc:	2102      	movs	r1, #2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fd22 	bl	8007c18 <RCCEx_PLL3_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061da:	e004      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061e2:	e000      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80061e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061ee:	4b98      	ldr	r3, [pc, #608]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061fc:	4a94      	ldr	r2, [pc, #592]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061fe:	430b      	orrs	r3, r1
 8006200:	6513      	str	r3, [r2, #80]	@ 0x50
 8006202:	e003      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006208:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006218:	f04f 0900 	mov.w	r9, #0
 800621c:	ea58 0309 	orrs.w	r3, r8, r9
 8006220:	d047      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006228:	2b04      	cmp	r3, #4
 800622a:	d82a      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800622c:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006249 	.word	0x08006249
 8006238:	08006257 	.word	0x08006257
 800623c:	0800626d 	.word	0x0800626d
 8006240:	0800628b 	.word	0x0800628b
 8006244:	0800628b 	.word	0x0800628b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006248:	4b81      	ldr	r3, [pc, #516]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	4a80      	ldr	r2, [pc, #512]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800624e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006254:	e01a      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	3308      	adds	r3, #8
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fc28 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800626a:	e00f      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006270:	3328      	adds	r3, #40	@ 0x28
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fccf 	bl	8007c18 <RCCEx_PLL3_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006280:	e004      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006288:	e000      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800628a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006294:	4b6e      	ldr	r3, [pc, #440]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006298:	f023 0107 	bic.w	r1, r3, #7
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a2:	4a6b      	ldr	r2, [pc, #428]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80062a8:	e003      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80062be:	f04f 0b00 	mov.w	fp, #0
 80062c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80062c6:	d05b      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062d0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80062d4:	d03b      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80062d6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80062da:	d834      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80062dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062e0:	d037      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80062e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062e6:	d82e      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80062e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062ec:	d033      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80062ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062f2:	d828      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80062f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062f8:	d01a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80062fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062fe:	d822      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006304:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006308:	d007      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800630a:	e01c      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630c:	4b50      	ldr	r3, [pc, #320]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	4a4f      	ldr	r2, [pc, #316]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006318:	e01e      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800631a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631e:	3308      	adds	r3, #8
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f001 fbc6 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800632e:	e013      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006334:	3328      	adds	r3, #40	@ 0x28
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fc6d 	bl	8007c18 <RCCEx_PLL3_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006344:	e008      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800634c:	e004      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006360:	4b3b      	ldr	r3, [pc, #236]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006364:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006370:	4a37      	ldr	r2, [pc, #220]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006372:	430b      	orrs	r3, r1
 8006374:	6593      	str	r3, [r2, #88]	@ 0x58
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800637c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800638c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006396:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d05d      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80063a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80063ac:	d03b      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80063ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80063b2:	d834      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063b8:	d037      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80063ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063be:	d82e      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063c4:	d033      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80063c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063ca:	d828      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063d0:	d01a      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80063d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063d6:	d822      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80063dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063e0:	d007      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80063e2:	e01c      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	4a19      	ldr	r2, [pc, #100]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063f0:	e01e      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	3308      	adds	r3, #8
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fb5a 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006406:	e013      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	3328      	adds	r3, #40	@ 0x28
 800640e:	2100      	movs	r1, #0
 8006410:	4618      	mov	r0, r3
 8006412:	f001 fc01 	bl	8007c18 <RCCEx_PLL3_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006424:	e004      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006426:	bf00      	nop
 8006428:	e002      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800642e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10d      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006438:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800643a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006444:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006448:	4a01      	ldr	r2, [pc, #4]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800644a:	430b      	orrs	r3, r1
 800644c:	6593      	str	r3, [r2, #88]	@ 0x58
 800644e:	e005      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006468:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800646c:	2300      	movs	r3, #0
 800646e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006472:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006476:	460b      	mov	r3, r1
 8006478:	4313      	orrs	r3, r2
 800647a:	d03a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006482:	2b30      	cmp	r3, #48	@ 0x30
 8006484:	d01f      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006486:	2b30      	cmp	r3, #48	@ 0x30
 8006488:	d819      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x372>
 800648a:	2b20      	cmp	r3, #32
 800648c:	d00c      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d815      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d019      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006496:	2b10      	cmp	r3, #16
 8006498:	d111      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800649a:	4baa      	ldr	r3, [pc, #680]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800649c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649e:	4aa9      	ldr	r2, [pc, #676]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80064a6:	e011      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	3308      	adds	r3, #8
 80064ae:	2102      	movs	r1, #2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 faff 	bl	8007ab4 <RCCEx_PLL2_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80064bc:	e006      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064c4:	e002      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80064ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80064d4:	4b9b      	ldr	r3, [pc, #620]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e2:	4a98      	ldr	r2, [pc, #608]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064e4:	430b      	orrs	r3, r1
 80064e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064e8:	e003      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80064fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006508:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800650c:	460b      	mov	r3, r1
 800650e:	4313      	orrs	r3, r2
 8006510:	d051      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006518:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800651c:	d035      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800651e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006522:	d82e      	bhi.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006524:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006528:	d031      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800652a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800652e:	d828      	bhi.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006534:	d01a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800653a:	d822      	bhi.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006544:	d007      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006546:	e01c      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006548:	4b7e      	ldr	r3, [pc, #504]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800654a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654c:	4a7d      	ldr	r2, [pc, #500]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800654e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006554:	e01c      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	3308      	adds	r3, #8
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f001 faa8 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800656a:	e011      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006570:	3328      	adds	r3, #40	@ 0x28
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fb4f 	bl	8007c18 <RCCEx_PLL3_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006580:	e006      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006588:	e002      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800658a:	bf00      	nop
 800658c:	e000      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800658e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006598:	4b6a      	ldr	r3, [pc, #424]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800659a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800659c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a6:	4a67      	ldr	r2, [pc, #412]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80065ac:	e003      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80065c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065c6:	2300      	movs	r3, #0
 80065c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4313      	orrs	r3, r2
 80065d4:	d053      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065e0:	d033      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80065e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065e6:	d82c      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80065e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065ec:	d02f      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80065ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065f2:	d826      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80065f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065f8:	d02b      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80065fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065fe:	d820      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006604:	d012      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800660a:	d81a      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d022      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006614:	d115      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661a:	3308      	adds	r3, #8
 800661c:	2101      	movs	r1, #1
 800661e:	4618      	mov	r0, r3
 8006620:	f001 fa48 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800662a:	e015      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006630:	3328      	adds	r3, #40	@ 0x28
 8006632:	2101      	movs	r1, #1
 8006634:	4618      	mov	r0, r3
 8006636:	f001 faef 	bl	8007c18 <RCCEx_PLL3_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006640:	e00a      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006648:	e006      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800664a:	bf00      	nop
 800664c:	e004      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006660:	4b38      	ldr	r3, [pc, #224]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006664:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800666e:	4a35      	ldr	r2, [pc, #212]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6513      	str	r3, [r2, #80]	@ 0x50
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800667a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800668a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006694:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d058      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066aa:	d033      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80066ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066b0:	d82c      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b6:	d02f      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80066b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066bc:	d826      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066c2:	d02b      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80066c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066c8:	d820      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ce:	d012      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80066d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066d4:	d81a      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d022      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80066da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066de:	d115      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e4:	3308      	adds	r3, #8
 80066e6:	2101      	movs	r1, #1
 80066e8:	4618      	mov	r0, r3
 80066ea:	f001 f9e3 	bl	8007ab4 <RCCEx_PLL2_Config>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066f4:	e015      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fa:	3328      	adds	r3, #40	@ 0x28
 80066fc:	2101      	movs	r1, #1
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fa8a 	bl	8007c18 <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800670a:	e00a      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006712:	e006      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006714:	bf00      	nop
 8006716:	e004      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006718:	bf00      	nop
 800671a:	e002      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10e      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800672a:	4b06      	ldr	r3, [pc, #24]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800672c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800673a:	4a02      	ldr	r2, [pc, #8]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800673c:	430b      	orrs	r3, r1
 800673e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006740:	e006      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006748:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800674c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800675c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006766:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800676a:	460b      	mov	r3, r1
 800676c:	4313      	orrs	r3, r2
 800676e:	d037      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800677a:	d00e      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800677c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006780:	d816      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d018      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800678a:	d111      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800678c:	4bc4      	ldr	r3, [pc, #784]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	4ac3      	ldr	r2, [pc, #780]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006798:	e00f      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679e:	3308      	adds	r3, #8
 80067a0:	2101      	movs	r1, #1
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 f986 	bl	8007ab4 <RCCEx_PLL2_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067ae:	e004      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067b6:	e000      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80067b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067c2:	4bb7      	ldr	r3, [pc, #732]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067d0:	4ab3      	ldr	r2, [pc, #716]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067d2:	430b      	orrs	r3, r1
 80067d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80067d6:	e003      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80067ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067f0:	2300      	movs	r3, #0
 80067f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067fa:	460b      	mov	r3, r1
 80067fc:	4313      	orrs	r3, r2
 80067fe:	d039      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006806:	2b03      	cmp	r3, #3
 8006808:	d81c      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800680a:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	0800684d 	.word	0x0800684d
 8006814:	08006821 	.word	0x08006821
 8006818:	0800682f 	.word	0x0800682f
 800681c:	0800684d 	.word	0x0800684d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006820:	4b9f      	ldr	r3, [pc, #636]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	4a9e      	ldr	r2, [pc, #632]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800682c:	e00f      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006832:	3308      	adds	r3, #8
 8006834:	2102      	movs	r1, #2
 8006836:	4618      	mov	r0, r3
 8006838:	f001 f93c 	bl	8007ab4 <RCCEx_PLL2_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006842:	e004      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800684a:	e000      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800684c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006856:	4b92      	ldr	r3, [pc, #584]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800685a:	f023 0103 	bic.w	r1, r3, #3
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006864:	4a8e      	ldr	r2, [pc, #568]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006866:	430b      	orrs	r3, r1
 8006868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800686a:	e003      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006870:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006880:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006884:	2300      	movs	r3, #0
 8006886:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800688a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800688e:	460b      	mov	r3, r1
 8006890:	4313      	orrs	r3, r2
 8006892:	f000 8099 	beq.w	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006896:	4b83      	ldr	r3, [pc, #524]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a82      	ldr	r2, [pc, #520]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800689c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068a2:	f7fb ff8f 	bl	80027c4 <HAL_GetTick>
 80068a6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068aa:	e00b      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ac:	f7fb ff8a 	bl	80027c4 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b64      	cmp	r3, #100	@ 0x64
 80068ba:	d903      	bls.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068c2:	e005      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c4:	4b77      	ldr	r3, [pc, #476]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0ed      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80068d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d173      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068d8:	4b71      	ldr	r3, [pc, #452]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068e4:	4053      	eors	r3, r2
 80068e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d015      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068ee:	4b6c      	ldr	r3, [pc, #432]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068fa:	4b69      	ldr	r3, [pc, #420]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fe:	4a68      	ldr	r2, [pc, #416]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006904:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006906:	4b66      	ldr	r3, [pc, #408]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690a:	4a65      	ldr	r2, [pc, #404]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800690c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006910:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006912:	4a63      	ldr	r2, [pc, #396]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006918:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006926:	d118      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006928:	f7fb ff4c 	bl	80027c4 <HAL_GetTick>
 800692c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006930:	e00d      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006932:	f7fb ff47 	bl	80027c4 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006942:	429a      	cmp	r2, r3
 8006944:	d903      	bls.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800694c:	e005      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800694e:	4b54      	ldr	r3, [pc, #336]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0eb      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800695a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800695e:	2b00      	cmp	r3, #0
 8006960:	d129      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800696a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800696e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006972:	d10e      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006974:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006984:	091a      	lsrs	r2, r3, #4
 8006986:	4b48      	ldr	r3, [pc, #288]	@ (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006988:	4013      	ands	r3, r2
 800698a:	4a45      	ldr	r2, [pc, #276]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800698c:	430b      	orrs	r3, r1
 800698e:	6113      	str	r3, [r2, #16]
 8006990:	e005      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006992:	4b43      	ldr	r3, [pc, #268]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	4a42      	ldr	r2, [pc, #264]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006998:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800699c:	6113      	str	r3, [r2, #16]
 800699e:	4b40      	ldr	r3, [pc, #256]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ae:	4a3c      	ldr	r2, [pc, #240]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b4:	e008      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80069be:	e003      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f002 0301 	and.w	r3, r2, #1
 80069d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80069de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f000 808f 	beq.w	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069f0:	2b28      	cmp	r3, #40	@ 0x28
 80069f2:	d871      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80069f4:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006ae1 	.word	0x08006ae1
 8006a00:	08006ad9 	.word	0x08006ad9
 8006a04:	08006ad9 	.word	0x08006ad9
 8006a08:	08006ad9 	.word	0x08006ad9
 8006a0c:	08006ad9 	.word	0x08006ad9
 8006a10:	08006ad9 	.word	0x08006ad9
 8006a14:	08006ad9 	.word	0x08006ad9
 8006a18:	08006ad9 	.word	0x08006ad9
 8006a1c:	08006aad 	.word	0x08006aad
 8006a20:	08006ad9 	.word	0x08006ad9
 8006a24:	08006ad9 	.word	0x08006ad9
 8006a28:	08006ad9 	.word	0x08006ad9
 8006a2c:	08006ad9 	.word	0x08006ad9
 8006a30:	08006ad9 	.word	0x08006ad9
 8006a34:	08006ad9 	.word	0x08006ad9
 8006a38:	08006ad9 	.word	0x08006ad9
 8006a3c:	08006ac3 	.word	0x08006ac3
 8006a40:	08006ad9 	.word	0x08006ad9
 8006a44:	08006ad9 	.word	0x08006ad9
 8006a48:	08006ad9 	.word	0x08006ad9
 8006a4c:	08006ad9 	.word	0x08006ad9
 8006a50:	08006ad9 	.word	0x08006ad9
 8006a54:	08006ad9 	.word	0x08006ad9
 8006a58:	08006ad9 	.word	0x08006ad9
 8006a5c:	08006ae1 	.word	0x08006ae1
 8006a60:	08006ad9 	.word	0x08006ad9
 8006a64:	08006ad9 	.word	0x08006ad9
 8006a68:	08006ad9 	.word	0x08006ad9
 8006a6c:	08006ad9 	.word	0x08006ad9
 8006a70:	08006ad9 	.word	0x08006ad9
 8006a74:	08006ad9 	.word	0x08006ad9
 8006a78:	08006ad9 	.word	0x08006ad9
 8006a7c:	08006ae1 	.word	0x08006ae1
 8006a80:	08006ad9 	.word	0x08006ad9
 8006a84:	08006ad9 	.word	0x08006ad9
 8006a88:	08006ad9 	.word	0x08006ad9
 8006a8c:	08006ad9 	.word	0x08006ad9
 8006a90:	08006ad9 	.word	0x08006ad9
 8006a94:	08006ad9 	.word	0x08006ad9
 8006a98:	08006ad9 	.word	0x08006ad9
 8006a9c:	08006ae1 	.word	0x08006ae1
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	58024800 	.word	0x58024800
 8006aa8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fffd 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ac0:	e00f      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac6:	3328      	adds	r3, #40	@ 0x28
 8006ac8:	2101      	movs	r1, #1
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 f8a4 	bl	8007c18 <RCCEx_PLL3_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ad6:	e004      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ade:	e000      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006aea:	4bbf      	ldr	r3, [pc, #764]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006af8:	4abb      	ldr	r2, [pc, #748]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006afa:	430b      	orrs	r3, r1
 8006afc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006afe:	e003      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f002 0302 	and.w	r3, r2, #2
 8006b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4313      	orrs	r3, r2
 8006b26:	d041      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d824      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006b32:	a201      	add	r2, pc, #4	@ (adr r2, 8006b38 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b85 	.word	0x08006b85
 8006b3c:	08006b51 	.word	0x08006b51
 8006b40:	08006b67 	.word	0x08006b67
 8006b44:	08006b85 	.word	0x08006b85
 8006b48:	08006b85 	.word	0x08006b85
 8006b4c:	08006b85 	.word	0x08006b85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	3308      	adds	r3, #8
 8006b56:	2101      	movs	r1, #1
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 ffab 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b64:	e00f      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	3328      	adds	r3, #40	@ 0x28
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 f852 	bl	8007c18 <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b7a:	e004      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b8e:	4b96      	ldr	r3, [pc, #600]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b92:	f023 0107 	bic.w	r1, r3, #7
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9c:	4a92      	ldr	r2, [pc, #584]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ba2:	e003      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f002 0304 	and.w	r3, r2, #4
 8006bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bc2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d044      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd4:	2b05      	cmp	r3, #5
 8006bd6:	d825      	bhi.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006c2d 	.word	0x08006c2d
 8006be4:	08006bf9 	.word	0x08006bf9
 8006be8:	08006c0f 	.word	0x08006c0f
 8006bec:	08006c2d 	.word	0x08006c2d
 8006bf0:	08006c2d 	.word	0x08006c2d
 8006bf4:	08006c2d 	.word	0x08006c2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	2101      	movs	r1, #1
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 ff57 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006c06:	4603      	mov	r3, r0
 8006c08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c0c:	e00f      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c12:	3328      	adds	r3, #40	@ 0x28
 8006c14:	2101      	movs	r1, #1
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fffe 	bl	8007c18 <RCCEx_PLL3_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c22:	e004      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c36:	4b6c      	ldr	r3, [pc, #432]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3a:	f023 0107 	bic.w	r1, r3, #7
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c46:	4a68      	ldr	r2, [pc, #416]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c4c:	e003      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f002 0320 	and.w	r3, r2, #32
 8006c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c66:	2300      	movs	r3, #0
 8006c68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d055      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c82:	d033      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c88:	d82c      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c8e:	d02f      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c94:	d826      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c9a:	d02b      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006c9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ca0:	d820      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ca6:	d012      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cac:	d81a      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d022      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006cb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cb6:	d115      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fef7 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ccc:	e015      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd2:	3328      	adds	r3, #40	@ 0x28
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 ff9e 	bl	8007c18 <RCCEx_PLL3_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cea:	e006      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006cec:	bf00      	nop
 8006cee:	e004      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006cf0:	bf00      	nop
 8006cf2:	e002      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006cf4:	bf00      	nop
 8006cf6:	e000      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10b      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d02:	4b39      	ldr	r3, [pc, #228]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d06:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d12:	4a35      	ldr	r2, [pc, #212]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d14:	430b      	orrs	r3, r1
 8006d16:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d18:	e003      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d32:	2300      	movs	r3, #0
 8006d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d38:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	d058      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d4a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d4e:	d033      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006d50:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d54:	d82c      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d5a:	d02f      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d60:	d826      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d66:	d02b      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d6c:	d820      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d72:	d012      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d78:	d81a      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d022      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d82:	d115      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	3308      	adds	r3, #8
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fe91 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d98:	e015      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9e:	3328      	adds	r3, #40	@ 0x28
 8006da0:	2102      	movs	r1, #2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 ff38 	bl	8007c18 <RCCEx_PLL3_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006db6:	e006      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006db8:	bf00      	nop
 8006dba:	e004      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e002      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10e      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006dce:	4b06      	ldr	r3, [pc, #24]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dde:	4a02      	ldr	r2, [pc, #8]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006de0:	430b      	orrs	r3, r1
 8006de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006de4:	e006      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006de6:	bf00      	nop
 8006de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e04:	2300      	movs	r3, #0
 8006e06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d055      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e1c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e20:	d033      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006e22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e26:	d82c      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e2c:	d02f      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e32:	d826      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e34:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e38:	d02b      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006e3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e3e:	d820      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e44:	d012      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e4a:	d81a      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d022      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e54:	d115      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fe28 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e6a:	e015      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e70:	3328      	adds	r3, #40	@ 0x28
 8006e72:	2102      	movs	r1, #2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fecf 	bl	8007c18 <RCCEx_PLL3_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e80:	e00a      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e88:	e006      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e8a:	bf00      	nop
 8006e8c:	e004      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e8e:	bf00      	nop
 8006e90:	e002      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ea0:	4ba0      	ldr	r3, [pc, #640]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eb0:	4a9c      	ldr	r2, [pc, #624]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f002 0308 	and.w	r3, r2, #8
 8006ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ed6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006eda:	460b      	mov	r3, r1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	d01e      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eec:	d10c      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef2:	3328      	adds	r3, #40	@ 0x28
 8006ef4:	2102      	movs	r1, #2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fe8e 	bl	8007c18 <RCCEx_PLL3_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006f08:	4b86      	ldr	r3, [pc, #536]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f18:	4a82      	ldr	r2, [pc, #520]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	f002 0310 	and.w	r3, r2, #16
 8006f2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f34:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	d01e      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4a:	d10c      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	3328      	adds	r3, #40	@ 0x28
 8006f52:	2102      	movs	r1, #2
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fe5f 	bl	8007c18 <RCCEx_PLL3_Config>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f66:	4b6f      	ldr	r3, [pc, #444]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f76:	4a6b      	ldr	r2, [pc, #428]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f8e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d03e      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fa4:	d022      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006faa:	d81b      	bhi.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fb4:	d00b      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006fb6:	e015      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fd77 	bl	8007ab4 <RCCEx_PLL2_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fcc:	e00f      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd2:	3328      	adds	r3, #40	@ 0x28
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fe1e 	bl	8007c18 <RCCEx_PLL3_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fe2:	e004      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007006:	4a47      	ldr	r2, [pc, #284]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007008:	430b      	orrs	r3, r1
 800700a:	6593      	str	r3, [r2, #88]	@ 0x58
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007012:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007022:	673b      	str	r3, [r7, #112]	@ 0x70
 8007024:	2300      	movs	r3, #0
 8007026:	677b      	str	r3, [r7, #116]	@ 0x74
 8007028:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800702c:	460b      	mov	r3, r1
 800702e:	4313      	orrs	r3, r2
 8007030:	d03b      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800703a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800703e:	d01f      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007040:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007044:	d818      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800704a:	d003      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800704c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007050:	d007      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007052:	e011      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007054:	4b33      	ldr	r3, [pc, #204]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	4a32      	ldr	r2, [pc, #200]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800705a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800705e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007060:	e00f      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007066:	3328      	adds	r3, #40	@ 0x28
 8007068:	2101      	movs	r1, #1
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fdd4 	bl	8007c18 <RCCEx_PLL3_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007076:	e004      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800707e:	e000      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800708a:	4b26      	ldr	r3, [pc, #152]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800708c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800708e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800709a:	4a22      	ldr	r2, [pc, #136]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800709c:	430b      	orrs	r3, r1
 800709e:	6553      	str	r3, [r2, #84]	@ 0x54
 80070a0:	e003      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80070b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070b8:	2300      	movs	r3, #0
 80070ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070bc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80070c0:	460b      	mov	r3, r1
 80070c2:	4313      	orrs	r3, r2
 80070c4:	d034      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80070d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d4:	d007      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80070d6:	e011      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d8:	4b12      	ldr	r3, [pc, #72]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070dc:	4a11      	ldr	r2, [pc, #68]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070e4:	e00e      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ea:	3308      	adds	r3, #8
 80070ec:	2102      	movs	r1, #2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fce0 	bl	8007ab4 <RCCEx_PLL2_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070fa:	e003      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10d      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800710c:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800710e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007110:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800711a:	4a02      	ldr	r2, [pc, #8]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800711c:	430b      	orrs	r3, r1
 800711e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007120:	e006      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007122:	bf00      	nop
 8007124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800712c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800713c:	663b      	str	r3, [r7, #96]	@ 0x60
 800713e:	2300      	movs	r3, #0
 8007140:	667b      	str	r3, [r7, #100]	@ 0x64
 8007142:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007146:	460b      	mov	r3, r1
 8007148:	4313      	orrs	r3, r2
 800714a:	d00c      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007150:	3328      	adds	r3, #40	@ 0x28
 8007152:	2102      	movs	r1, #2
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fd5f 	bl	8007c18 <RCCEx_PLL3_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007172:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007174:	2300      	movs	r3, #0
 8007176:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007178:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800717c:	460b      	mov	r3, r1
 800717e:	4313      	orrs	r3, r2
 8007180:	d036      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007188:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800718c:	d018      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800718e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007192:	d811      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007198:	d014      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800719a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800719e:	d80b      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d011      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80071a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a8:	d106      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071aa:	4bb7      	ldr	r3, [pc, #732]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	4ab6      	ldr	r2, [pc, #728]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80071b6:	e008      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071be:	e004      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80071c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071d2:	4bad      	ldr	r3, [pc, #692]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071e0:	4aa9      	ldr	r2, [pc, #676]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071e2:	430b      	orrs	r3, r1
 80071e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80071e6:	e003      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80071fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80071fe:	2300      	movs	r3, #0
 8007200:	657b      	str	r3, [r7, #84]	@ 0x54
 8007202:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007206:	460b      	mov	r3, r1
 8007208:	4313      	orrs	r3, r2
 800720a:	d009      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800720c:	4b9e      	ldr	r3, [pc, #632]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800720e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007210:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721a:	4a9b      	ldr	r2, [pc, #620]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800721c:	430b      	orrs	r3, r1
 800721e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800722c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800722e:	2300      	movs	r3, #0
 8007230:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007232:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d009      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800723c:	4b92      	ldr	r3, [pc, #584]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800723e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007240:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800724a:	4a8f      	ldr	r2, [pc, #572]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800724c:	430b      	orrs	r3, r1
 800724e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800725c:	643b      	str	r3, [r7, #64]	@ 0x40
 800725e:	2300      	movs	r3, #0
 8007260:	647b      	str	r3, [r7, #68]	@ 0x44
 8007262:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007266:	460b      	mov	r3, r1
 8007268:	4313      	orrs	r3, r2
 800726a:	d00e      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800726c:	4b86      	ldr	r3, [pc, #536]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	4a85      	ldr	r2, [pc, #532]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007272:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007276:	6113      	str	r3, [r2, #16]
 8007278:	4b83      	ldr	r3, [pc, #524]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800727a:	6919      	ldr	r1, [r3, #16]
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007284:	4a80      	ldr	r2, [pc, #512]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007286:	430b      	orrs	r3, r1
 8007288:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800729c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80072a0:	460b      	mov	r3, r1
 80072a2:	4313      	orrs	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072a6:	4b78      	ldr	r3, [pc, #480]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b4:	4a74      	ldr	r2, [pc, #464]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072b6:	430b      	orrs	r3, r1
 80072b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80072c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c8:	2300      	movs	r3, #0
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80072cc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80072d0:	460b      	mov	r3, r1
 80072d2:	4313      	orrs	r3, r2
 80072d4:	d00a      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072d6:	4b6c      	ldr	r3, [pc, #432]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072da:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80072de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e6:	4a68      	ldr	r2, [pc, #416]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072e8:	430b      	orrs	r3, r1
 80072ea:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	2100      	movs	r1, #0
 80072f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007302:	460b      	mov	r3, r1
 8007304:	4313      	orrs	r3, r2
 8007306:	d011      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	3308      	adds	r3, #8
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fbcf 	bl	8007ab4 <RCCEx_PLL2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800731c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	2100      	movs	r1, #0
 8007336:	6239      	str	r1, [r7, #32]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
 800733e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007342:	460b      	mov	r3, r1
 8007344:	4313      	orrs	r3, r2
 8007346:	d011      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	3308      	adds	r3, #8
 800734e:	2101      	movs	r1, #1
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fbaf 	bl	8007ab4 <RCCEx_PLL2_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800735c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	2100      	movs	r1, #0
 8007376:	61b9      	str	r1, [r7, #24]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007382:	460b      	mov	r3, r1
 8007384:	4313      	orrs	r3, r2
 8007386:	d011      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738c:	3308      	adds	r3, #8
 800738e:	2102      	movs	r1, #2
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fb8f 	bl	8007ab4 <RCCEx_PLL2_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800739c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	2100      	movs	r1, #0
 80073b6:	6139      	str	r1, [r7, #16]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073c2:	460b      	mov	r3, r1
 80073c4:	4313      	orrs	r3, r2
 80073c6:	d011      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	3328      	adds	r3, #40	@ 0x28
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fc21 	bl	8007c18 <RCCEx_PLL3_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80073dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	2100      	movs	r1, #0
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007402:	460b      	mov	r3, r1
 8007404:	4313      	orrs	r3, r2
 8007406:	d011      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740c:	3328      	adds	r3, #40	@ 0x28
 800740e:	2101      	movs	r1, #1
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fc01 	bl	8007c18 <RCCEx_PLL3_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800741c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	2100      	movs	r1, #0
 8007436:	6039      	str	r1, [r7, #0]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007442:	460b      	mov	r3, r1
 8007444:	4313      	orrs	r3, r2
 8007446:	d011      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	3328      	adds	r3, #40	@ 0x28
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fbe1 	bl	8007c18 <RCCEx_PLL3_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800745c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800746c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	e000      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
}
 800747a:	4618      	mov	r0, r3
 800747c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007480:	46bd      	mov	sp, r7
 8007482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007486:	bf00      	nop
 8007488:	58024400 	.word	0x58024400

0800748c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007490:	f7fe fe00 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 8007494:	4602      	mov	r2, r0
 8007496:	4b06      	ldr	r3, [pc, #24]	@ (80074b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	091b      	lsrs	r3, r3, #4
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	4904      	ldr	r1, [pc, #16]	@ (80074b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074a2:	5ccb      	ldrb	r3, [r1, r3]
 80074a4:	f003 031f 	and.w	r3, r3, #31
 80074a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	58024400 	.word	0x58024400
 80074b4:	0800cd2c 	.word	0x0800cd2c

080074b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	@ 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	f003 0303 	and.w	r3, r3, #3
 80074c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80074ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ce:	0b1b      	lsrs	r3, r3, #12
 80074d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80074d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80074e2:	4b99      	ldr	r3, [pc, #612]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e6:	08db      	lsrs	r3, r3, #3
 80074e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8111 	beq.w	8007728 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b02      	cmp	r3, #2
 800750a:	f000 8083 	beq.w	8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b02      	cmp	r3, #2
 8007512:	f200 80a1 	bhi.w	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d056      	beq.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007522:	e099      	b.n	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007524:	4b88      	ldr	r3, [pc, #544]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d02d      	beq.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007530:	4b85      	ldr	r3, [pc, #532]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	08db      	lsrs	r3, r3, #3
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	4a84      	ldr	r2, [pc, #528]	@ (800774c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
 8007540:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b7b      	ldr	r3, [pc, #492]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800758a:	e087      	b.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007754 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b6a      	ldr	r3, [pc, #424]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ce:	e065      	b.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e2:	4b59      	ldr	r3, [pc, #356]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007612:	e043      	b.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800775c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007626:	4b48      	ldr	r3, [pc, #288]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007636:	ed97 6a03 	vldr	s12, [r7, #12]
 800763a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800763e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800764a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007656:	e021      	b.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766a:	4b37      	ldr	r3, [pc, #220]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800766c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767a:	ed97 6a03 	vldr	s12, [r7, #12]
 800767e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800769a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800769c:	4b2a      	ldr	r3, [pc, #168]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800769e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a0:	0a5b      	lsrs	r3, r3, #9
 80076a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c2:	ee17 2a90 	vmov	r2, s15
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80076ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ce:	0c1b      	lsrs	r3, r3, #16
 80076d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f0:	ee17 2a90 	vmov	r2, s15
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80076f8:	4b13      	ldr	r3, [pc, #76]	@ (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fc:	0e1b      	lsrs	r3, r3, #24
 80076fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800770e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007712:	edd7 6a07 	vldr	s13, [r7, #28]
 8007716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800771a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800771e:	ee17 2a90 	vmov	r2, s15
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007726:	e008      	b.n	800773a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	609a      	str	r2, [r3, #8]
}
 800773a:	bf00      	nop
 800773c:	3724      	adds	r7, #36	@ 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
 800774c:	03d09000 	.word	0x03d09000
 8007750:	46000000 	.word	0x46000000
 8007754:	4c742400 	.word	0x4c742400
 8007758:	4a742400 	.word	0x4a742400
 800775c:	4af42400 	.word	0x4af42400

08007760 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007760:	b480      	push	{r7}
 8007762:	b089      	sub	sp, #36	@ 0x24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007768:	4ba1      	ldr	r3, [pc, #644]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800776a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007772:	4b9f      	ldr	r3, [pc, #636]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007776:	0d1b      	lsrs	r3, r3, #20
 8007778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800777c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800777e:	4b9c      	ldr	r3, [pc, #624]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	0a1b      	lsrs	r3, r3, #8
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800778a:	4b99      	ldr	r3, [pc, #612]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800778c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800778e:	08db      	lsrs	r3, r3, #3
 8007790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8111 	beq.w	80079d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	f000 8083 	beq.w	80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	f200 80a1 	bhi.w	8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d056      	beq.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80077ca:	e099      	b.n	8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077cc:	4b88      	ldr	r3, [pc, #544]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d02d      	beq.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077d8:	4b85      	ldr	r3, [pc, #532]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	08db      	lsrs	r3, r3, #3
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	4a84      	ldr	r2, [pc, #528]	@ (80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b7b      	ldr	r3, [pc, #492]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a03 	vldr	s12, [r7, #12]
 8007816:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007832:	e087      	b.n	8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80079fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b6a      	ldr	r3, [pc, #424]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a03 	vldr	s12, [r7, #12]
 800785a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007876:	e065      	b.n	8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788a:	4b59      	ldr	r3, [pc, #356]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789a:	ed97 6a03 	vldr	s12, [r7, #12]
 800789e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ba:	e043      	b.n	8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80078ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ce:	4b48      	ldr	r3, [pc, #288]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078de:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078fe:	e021      	b.n	8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800790e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007912:	4b37      	ldr	r3, [pc, #220]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007922:	ed97 6a03 	vldr	s12, [r7, #12]
 8007926:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800792a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007942:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007944:	4b2a      	ldr	r3, [pc, #168]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007948:	0a5b      	lsrs	r3, r3, #9
 800794a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800795a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800795e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800796a:	ee17 2a90 	vmov	r2, s15
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007972:	4b1f      	ldr	r3, [pc, #124]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	0c1b      	lsrs	r3, r3, #16
 8007978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800798c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007998:	ee17 2a90 	vmov	r2, s15
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80079a0:	4b13      	ldr	r3, [pc, #76]	@ (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a4:	0e1b      	lsrs	r3, r3, #24
 80079a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80079be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079c6:	ee17 2a90 	vmov	r2, s15
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80079ce:	e008      	b.n	80079e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	609a      	str	r2, [r3, #8]
}
 80079e2:	bf00      	nop
 80079e4:	3724      	adds	r7, #36	@ 0x24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
 80079f4:	03d09000 	.word	0x03d09000
 80079f8:	46000000 	.word	0x46000000
 80079fc:	4c742400 	.word	0x4c742400
 8007a00:	4a742400 	.word	0x4a742400
 8007a04:	4af42400 	.word	0x4af42400

08007a08 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007a10:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <HAL_RCCEx_CRSConfig+0xa4>)
 8007a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a16:	4a25      	ldr	r2, [pc, #148]	@ (8007aac <HAL_RCCEx_CRSConfig+0xa4>)
 8007a18:	f043 0302 	orr.w	r3, r3, #2
 8007a1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007a20:	4b22      	ldr	r3, [pc, #136]	@ (8007aac <HAL_RCCEx_CRSConfig+0xa4>)
 8007a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a26:	4a21      	ldr	r2, [pc, #132]	@ (8007aac <HAL_RCCEx_CRSConfig+0xa4>)
 8007a28:	f023 0302 	bic.w	r3, r3, #2
 8007a2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007a30:	f7fa fed4 	bl	80027dc <HAL_GetREVID>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d80b      	bhi.n	8007a56 <HAL_RCCEx_CRSConfig+0x4e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a46:	d106      	bne.n	8007a56 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e008      	b.n	8007a68 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	041b      	lsls	r3, r3, #16
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ab0 <HAL_RCCEx_CRSConfig+0xa8>)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007a84:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <HAL_RCCEx_CRSConfig+0xa8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	4907      	ldr	r1, [pc, #28]	@ (8007ab0 <HAL_RCCEx_CRSConfig+0xa8>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <HAL_RCCEx_CRSConfig+0xa8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a04      	ldr	r2, [pc, #16]	@ (8007ab0 <HAL_RCCEx_CRSConfig+0xa8>)
 8007a9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007aa2:	6013      	str	r3, [r2, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	58024400 	.word	0x58024400
 8007ab0:	40008400 	.word	0x40008400

08007ab4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ac2:	4b53      	ldr	r3, [pc, #332]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d101      	bne.n	8007ad2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e099      	b.n	8007c06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007ad8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ade:	f7fa fe71 	bl	80027c4 <HAL_GetTick>
 8007ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ae4:	e008      	b.n	8007af8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ae6:	f7fa fe6d 	bl	80027c4 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e086      	b.n	8007c06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007af8:	4b45      	ldr	r3, [pc, #276]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1f0      	bne.n	8007ae6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b04:	4b42      	ldr	r3, [pc, #264]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	031b      	lsls	r3, r3, #12
 8007b12:	493f      	ldr	r1, [pc, #252]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	025b      	lsls	r3, r3, #9
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	041b      	lsls	r3, r3, #16
 8007b36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	061b      	lsls	r3, r3, #24
 8007b44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b48:	4931      	ldr	r1, [pc, #196]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b4e:	4b30      	ldr	r3, [pc, #192]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	492d      	ldr	r1, [pc, #180]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b60:	4b2b      	ldr	r3, [pc, #172]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b64:	f023 0220 	bic.w	r2, r3, #32
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	4928      	ldr	r1, [pc, #160]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b72:	4b27      	ldr	r3, [pc, #156]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	4a26      	ldr	r2, [pc, #152]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b78:	f023 0310 	bic.w	r3, r3, #16
 8007b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b7e:	4b24      	ldr	r3, [pc, #144]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b82:	4b24      	ldr	r3, [pc, #144]	@ (8007c14 <RCCEx_PLL2_Config+0x160>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	69d2      	ldr	r2, [r2, #28]
 8007b8a:	00d2      	lsls	r2, r2, #3
 8007b8c:	4920      	ldr	r1, [pc, #128]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b92:	4b1f      	ldr	r3, [pc, #124]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b96:	4a1e      	ldr	r2, [pc, #120]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007b98:	f043 0310 	orr.w	r3, r3, #16
 8007b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d106      	bne.n	8007bb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	4a19      	ldr	r2, [pc, #100]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007baa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bb0:	e00f      	b.n	8007bd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d106      	bne.n	8007bc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bb8:	4b15      	ldr	r3, [pc, #84]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbc:	4a14      	ldr	r2, [pc, #80]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bc4:	e005      	b.n	8007bd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bc6:	4b12      	ldr	r3, [pc, #72]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bca:	4a11      	ldr	r2, [pc, #68]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007bcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bde:	f7fa fdf1 	bl	80027c4 <HAL_GetTick>
 8007be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007be4:	e008      	b.n	8007bf8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007be6:	f7fa fded 	bl	80027c4 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e006      	b.n	8007c06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bf8:	4b05      	ldr	r3, [pc, #20]	@ (8007c10 <RCCEx_PLL2_Config+0x15c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0f0      	beq.n	8007be6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	58024400 	.word	0x58024400
 8007c14:	ffff0007 	.word	0xffff0007

08007c18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c26:	4b53      	ldr	r3, [pc, #332]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d101      	bne.n	8007c36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e099      	b.n	8007d6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c36:	4b4f      	ldr	r3, [pc, #316]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a4e      	ldr	r2, [pc, #312]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007c3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c42:	f7fa fdbf 	bl	80027c4 <HAL_GetTick>
 8007c46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c48:	e008      	b.n	8007c5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c4a:	f7fa fdbb 	bl	80027c4 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e086      	b.n	8007d6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c5c:	4b45      	ldr	r3, [pc, #276]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f0      	bne.n	8007c4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c68:	4b42      	ldr	r3, [pc, #264]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	051b      	lsls	r3, r3, #20
 8007c76:	493f      	ldr	r1, [pc, #252]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	025b      	lsls	r3, r3, #9
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	041b      	lsls	r3, r3, #16
 8007c9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	061b      	lsls	r3, r3, #24
 8007ca8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007cac:	4931      	ldr	r1, [pc, #196]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cb2:	4b30      	ldr	r3, [pc, #192]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	492d      	ldr	r1, [pc, #180]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	4928      	ldr	r1, [pc, #160]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cd6:	4b27      	ldr	r3, [pc, #156]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cda:	4a26      	ldr	r2, [pc, #152]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ce2:	4b24      	ldr	r3, [pc, #144]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ce6:	4b24      	ldr	r3, [pc, #144]	@ (8007d78 <RCCEx_PLL3_Config+0x160>)
 8007ce8:	4013      	ands	r3, r2
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	69d2      	ldr	r2, [r2, #28]
 8007cee:	00d2      	lsls	r2, r2, #3
 8007cf0:	4920      	ldr	r1, [pc, #128]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d08:	4b1a      	ldr	r3, [pc, #104]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0c:	4a19      	ldr	r2, [pc, #100]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d14:	e00f      	b.n	8007d36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d106      	bne.n	8007d2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d1c:	4b15      	ldr	r3, [pc, #84]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d20:	4a14      	ldr	r2, [pc, #80]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d28:	e005      	b.n	8007d36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d2a:	4b12      	ldr	r3, [pc, #72]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2e:	4a11      	ldr	r2, [pc, #68]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d36:	4b0f      	ldr	r3, [pc, #60]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d42:	f7fa fd3f 	bl	80027c4 <HAL_GetTick>
 8007d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d48:	e008      	b.n	8007d5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d4a:	f7fa fd3b 	bl	80027c4 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d901      	bls.n	8007d5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e006      	b.n	8007d6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <RCCEx_PLL3_Config+0x15c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0f0      	beq.n	8007d4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	58024400 	.word	0x58024400
 8007d78:	ffff0007 	.word	0xffff0007

08007d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e049      	b.n	8007e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7fa f9f2 	bl	800218c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f000 fae4 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d001      	beq.n	8007e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e05e      	b.n	8007f02 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a2b      	ldr	r2, [pc, #172]	@ (8007f10 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d02c      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6e:	d027      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a27      	ldr	r2, [pc, #156]	@ (8007f14 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d022      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a26      	ldr	r2, [pc, #152]	@ (8007f18 <HAL_TIM_Base_Start_IT+0xec>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d01d      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a24      	ldr	r2, [pc, #144]	@ (8007f1c <HAL_TIM_Base_Start_IT+0xf0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a23      	ldr	r2, [pc, #140]	@ (8007f20 <HAL_TIM_Base_Start_IT+0xf4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a21      	ldr	r2, [pc, #132]	@ (8007f24 <HAL_TIM_Base_Start_IT+0xf8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a20      	ldr	r2, [pc, #128]	@ (8007f28 <HAL_TIM_Base_Start_IT+0xfc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8007f2c <HAL_TIM_Base_Start_IT+0x100>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x94>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1d      	ldr	r2, [pc, #116]	@ (8007f30 <HAL_TIM_Base_Start_IT+0x104>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d115      	bne.n	8007eec <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f34 <HAL_TIM_Base_Start_IT+0x108>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b06      	cmp	r3, #6
 8007ed0:	d015      	beq.n	8007efe <HAL_TIM_Base_Start_IT+0xd2>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed8:	d011      	beq.n	8007efe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eea:	e008      	b.n	8007efe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	e000      	b.n	8007f00 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40010400 	.word	0x40010400
 8007f24:	40001800 	.word	0x40001800
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	4000e000 	.word	0x4000e000
 8007f30:	4000e400 	.word	0x4000e400
 8007f34:	00010007 	.word	0x00010007

08007f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d020      	beq.n	8007f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01b      	beq.n	8007f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f06f 0202 	mvn.w	r2, #2
 8007f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9e2 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007f88:	e005      	b.n	8007f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f9d4 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f9e5 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d020      	beq.n	8007fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01b      	beq.n	8007fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0204 	mvn.w	r2, #4
 8007fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f9bc 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007fd4:	e005      	b.n	8007fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f9ae 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f9bf 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d020      	beq.n	8008034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f003 0308 	and.w	r3, r3, #8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01b      	beq.n	8008034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f06f 0208 	mvn.w	r2, #8
 8008004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2204      	movs	r2, #4
 800800a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f996 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8008020:	e005      	b.n	800802e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f988 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f999 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	2b00      	cmp	r3, #0
 800803c:	d020      	beq.n	8008080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01b      	beq.n	8008080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0210 	mvn.w	r2, #16
 8008050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2208      	movs	r2, #8
 8008056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f970 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 800806c:	e005      	b.n	800807a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f962 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f973 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00c      	beq.n	80080a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d007      	beq.n	80080a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0201 	mvn.w	r2, #1
 800809c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7f8 fcf2 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d104      	bne.n	80080b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80080ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb51 	bl	8008774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80080ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb49 	bl	8008788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00c      	beq.n	800811a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d007      	beq.n	800811a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f92d 	bl	8008374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00c      	beq.n	800813e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f06f 0220 	mvn.w	r2, #32
 8008136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fb11 	bl	8008760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800813e:	bf00      	nop
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800815c:	2b01      	cmp	r3, #1
 800815e:	d101      	bne.n	8008164 <HAL_TIM_ConfigClockSource+0x1c>
 8008160:	2302      	movs	r3, #2
 8008162:	e0dc      	b.n	800831e <HAL_TIM_ConfigClockSource+0x1d6>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	4b6a      	ldr	r3, [pc, #424]	@ (8008328 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008180:	4013      	ands	r3, r2
 8008182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800818a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a64      	ldr	r2, [pc, #400]	@ (800832c <HAL_TIM_ConfigClockSource+0x1e4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	f000 80a9 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80081a0:	4a62      	ldr	r2, [pc, #392]	@ (800832c <HAL_TIM_ConfigClockSource+0x1e4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f200 80ae 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 80081a8:	4a61      	ldr	r2, [pc, #388]	@ (8008330 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	f000 80a1 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80081b0:	4a5f      	ldr	r2, [pc, #380]	@ (8008330 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	f200 80a6 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 80081b8:	4a5e      	ldr	r2, [pc, #376]	@ (8008334 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	f000 8099 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80081c0:	4a5c      	ldr	r2, [pc, #368]	@ (8008334 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	f200 809e 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 80081c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081cc:	f000 8091 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80081d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081d4:	f200 8096 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 80081d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081dc:	f000 8089 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80081e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081e4:	f200 808e 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 80081e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ec:	d03e      	beq.n	800826c <HAL_TIM_ConfigClockSource+0x124>
 80081ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f2:	f200 8087 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 80081f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081fa:	f000 8086 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1c2>
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008202:	d87f      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 8008204:	2b70      	cmp	r3, #112	@ 0x70
 8008206:	d01a      	beq.n	800823e <HAL_TIM_ConfigClockSource+0xf6>
 8008208:	2b70      	cmp	r3, #112	@ 0x70
 800820a:	d87b      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 800820c:	2b60      	cmp	r3, #96	@ 0x60
 800820e:	d050      	beq.n	80082b2 <HAL_TIM_ConfigClockSource+0x16a>
 8008210:	2b60      	cmp	r3, #96	@ 0x60
 8008212:	d877      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 8008214:	2b50      	cmp	r3, #80	@ 0x50
 8008216:	d03c      	beq.n	8008292 <HAL_TIM_ConfigClockSource+0x14a>
 8008218:	2b50      	cmp	r3, #80	@ 0x50
 800821a:	d873      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 800821c:	2b40      	cmp	r3, #64	@ 0x40
 800821e:	d058      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x18a>
 8008220:	2b40      	cmp	r3, #64	@ 0x40
 8008222:	d86f      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 8008224:	2b30      	cmp	r3, #48	@ 0x30
 8008226:	d064      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008228:	2b30      	cmp	r3, #48	@ 0x30
 800822a:	d86b      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 800822c:	2b20      	cmp	r3, #32
 800822e:	d060      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008230:	2b20      	cmp	r3, #32
 8008232:	d867      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d05c      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008238:	2b10      	cmp	r3, #16
 800823a:	d05a      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800823c:	e062      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800824e:	f000 f9cb 	bl	80085e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	609a      	str	r2, [r3, #8]
      break;
 800826a:	e04f      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800827c:	f000 f9b4 	bl	80085e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800828e:	609a      	str	r2, [r3, #8]
      break;
 8008290:	e03c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800829e:	461a      	mov	r2, r3
 80082a0:	f000 f924 	bl	80084ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2150      	movs	r1, #80	@ 0x50
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 f97e 	bl	80085ac <TIM_ITRx_SetConfig>
      break;
 80082b0:	e02c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082be:	461a      	mov	r2, r3
 80082c0:	f000 f943 	bl	800854a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2160      	movs	r1, #96	@ 0x60
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f96e 	bl	80085ac <TIM_ITRx_SetConfig>
      break;
 80082d0:	e01c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082de:	461a      	mov	r2, r3
 80082e0:	f000 f904 	bl	80084ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2140      	movs	r1, #64	@ 0x40
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f95e 	bl	80085ac <TIM_ITRx_SetConfig>
      break;
 80082f0:	e00c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f000 f955 	bl	80085ac <TIM_ITRx_SetConfig>
      break;
 8008302:	e003      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
      break;
 8008308:	e000      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800830a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	ffceff88 	.word	0xffceff88
 800832c:	00100040 	.word	0x00100040
 8008330:	00100030 	.word	0x00100030
 8008334:	00100020 	.word	0x00100020

08008338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a4a      	ldr	r2, [pc, #296]	@ (80084c4 <TIM_Base_SetConfig+0x13c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d013      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a6:	d00f      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a47      	ldr	r2, [pc, #284]	@ (80084c8 <TIM_Base_SetConfig+0x140>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a46      	ldr	r2, [pc, #280]	@ (80084cc <TIM_Base_SetConfig+0x144>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a45      	ldr	r2, [pc, #276]	@ (80084d0 <TIM_Base_SetConfig+0x148>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a44      	ldr	r2, [pc, #272]	@ (80084d4 <TIM_Base_SetConfig+0x14c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d108      	bne.n	80083da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a39      	ldr	r2, [pc, #228]	@ (80084c4 <TIM_Base_SetConfig+0x13c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d027      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e8:	d023      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a36      	ldr	r2, [pc, #216]	@ (80084c8 <TIM_Base_SetConfig+0x140>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d01f      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a35      	ldr	r2, [pc, #212]	@ (80084cc <TIM_Base_SetConfig+0x144>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01b      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a34      	ldr	r2, [pc, #208]	@ (80084d0 <TIM_Base_SetConfig+0x148>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d017      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a33      	ldr	r2, [pc, #204]	@ (80084d4 <TIM_Base_SetConfig+0x14c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d013      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a32      	ldr	r2, [pc, #200]	@ (80084d8 <TIM_Base_SetConfig+0x150>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00f      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a31      	ldr	r2, [pc, #196]	@ (80084dc <TIM_Base_SetConfig+0x154>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00b      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a30      	ldr	r2, [pc, #192]	@ (80084e0 <TIM_Base_SetConfig+0x158>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d007      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a2f      	ldr	r2, [pc, #188]	@ (80084e4 <TIM_Base_SetConfig+0x15c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2e      	ldr	r2, [pc, #184]	@ (80084e8 <TIM_Base_SetConfig+0x160>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d108      	bne.n	8008444 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a16      	ldr	r2, [pc, #88]	@ (80084c4 <TIM_Base_SetConfig+0x13c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00f      	beq.n	8008490 <TIM_Base_SetConfig+0x108>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a18      	ldr	r2, [pc, #96]	@ (80084d4 <TIM_Base_SetConfig+0x14c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00b      	beq.n	8008490 <TIM_Base_SetConfig+0x108>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a17      	ldr	r2, [pc, #92]	@ (80084d8 <TIM_Base_SetConfig+0x150>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <TIM_Base_SetConfig+0x108>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a16      	ldr	r2, [pc, #88]	@ (80084dc <TIM_Base_SetConfig+0x154>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_Base_SetConfig+0x108>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a15      	ldr	r2, [pc, #84]	@ (80084e0 <TIM_Base_SetConfig+0x158>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d103      	bne.n	8008498 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d105      	bne.n	80084b6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f023 0201 	bic.w	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	611a      	str	r2, [r3, #16]
  }
}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40010000 	.word	0x40010000
 80084c8:	40000400 	.word	0x40000400
 80084cc:	40000800 	.word	0x40000800
 80084d0:	40000c00 	.word	0x40000c00
 80084d4:	40010400 	.word	0x40010400
 80084d8:	40014000 	.word	0x40014000
 80084dc:	40014400 	.word	0x40014400
 80084e0:	40014800 	.word	0x40014800
 80084e4:	4000e000 	.word	0x4000e000
 80084e8:	4000e400 	.word	0x4000e400

080084ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f023 0201 	bic.w	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f023 030a 	bic.w	r3, r3, #10
 8008528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	621a      	str	r2, [r3, #32]
}
 800853e:	bf00      	nop
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800854a:	b480      	push	{r7}
 800854c:	b087      	sub	sp, #28
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	f023 0210 	bic.w	r2, r3, #16
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	031b      	lsls	r3, r3, #12
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	4313      	orrs	r3, r2
 800857e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
	...

080085ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4b09      	ldr	r3, [pc, #36]	@ (80085e4 <TIM_ITRx_SetConfig+0x38>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f043 0307 	orr.w	r3, r3, #7
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	609a      	str	r2, [r3, #8]
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	ffcfff8f 	.word	0xffcfff8f

080085e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	021a      	lsls	r2, r3, #8
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	431a      	orrs	r2, r3
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4313      	orrs	r3, r2
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	609a      	str	r2, [r3, #8]
}
 800861c:	bf00      	nop
 800861e:	371c      	adds	r7, #28
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800863c:	2302      	movs	r3, #2
 800863e:	e077      	b.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a35      	ldr	r2, [pc, #212]	@ (800873c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a34      	ldr	r2, [pc, #208]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d108      	bne.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800867a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800868c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a25      	ldr	r2, [pc, #148]	@ (800873c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d02c      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b2:	d027      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a22      	ldr	r2, [pc, #136]	@ (8008744 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d022      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a21      	ldr	r2, [pc, #132]	@ (8008748 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d01d      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1f      	ldr	r2, [pc, #124]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d018      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00e      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008754 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d009      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a18      	ldr	r2, [pc, #96]	@ (8008758 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a17      	ldr	r2, [pc, #92]	@ (800875c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d10c      	bne.n	800871e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800870a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	4313      	orrs	r3, r2
 8008714:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	40010000 	.word	0x40010000
 8008740:	40010400 	.word	0x40010400
 8008744:	40000400 	.word	0x40000400
 8008748:	40000800 	.word	0x40000800
 800874c:	40000c00 	.word	0x40000c00
 8008750:	40001800 	.word	0x40001800
 8008754:	40014000 	.word	0x40014000
 8008758:	4000e000 	.word	0x4000e000
 800875c:	4000e400 	.word	0x4000e400

08008760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e042      	b.n	8008834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7f9 fd29 	bl	8002218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2224      	movs	r2, #36	@ 0x24
 80087ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0201 	bic.w	r2, r2, #1
 80087dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 ff8e 	bl	8009708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f91f 	bl	8008a30 <UART_SetConfig>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e01b      	b.n	8008834 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800880a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800881a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 f80d 	bl	800984c <UART_CheckIdleState>
 8008832:	4603      	mov	r3, r0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	@ 0x28
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	4613      	mov	r3, r2
 800884a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008852:	2b20      	cmp	r3, #32
 8008854:	d17b      	bne.n	800894e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <HAL_UART_Transmit+0x26>
 800885c:	88fb      	ldrh	r3, [r7, #6]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e074      	b.n	8008950 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2221      	movs	r2, #33	@ 0x21
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008876:	f7f9 ffa5 	bl	80027c4 <HAL_GetTick>
 800887a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	88fa      	ldrh	r2, [r7, #6]
 8008880:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	88fa      	ldrh	r2, [r7, #6]
 8008888:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008894:	d108      	bne.n	80088a8 <HAL_UART_Transmit+0x6c>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d104      	bne.n	80088a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	61bb      	str	r3, [r7, #24]
 80088a6:	e003      	b.n	80088b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088b0:	e030      	b.n	8008914 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2200      	movs	r2, #0
 80088ba:	2180      	movs	r1, #128	@ 0x80
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f001 f86f 	bl	80099a0 <UART_WaitOnFlagUntilTimeout>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e03d      	b.n	8008950 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	3302      	adds	r3, #2
 80088ee:	61bb      	str	r3, [r7, #24]
 80088f0:	e007      	b.n	8008902 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	3301      	adds	r3, #1
 8008900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008908:	b29b      	uxth	r3, r3
 800890a:	3b01      	subs	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1c8      	bne.n	80088b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2200      	movs	r2, #0
 8008928:	2140      	movs	r1, #64	@ 0x40
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f001 f838 	bl	80099a0 <UART_WaitOnFlagUntilTimeout>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e006      	b.n	8008950 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	e000      	b.n	8008950 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800894e:	2302      	movs	r3, #2
  }
}
 8008950:	4618      	mov	r0, r3
 8008952:	3720      	adds	r7, #32
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08a      	sub	sp, #40	@ 0x28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800896c:	2b20      	cmp	r3, #32
 800896e:	d137      	bne.n	80089e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_UART_Receive_DMA+0x24>
 8008976:	88fb      	ldrh	r3, [r7, #6]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e030      	b.n	80089e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a18      	ldr	r2, [pc, #96]	@ (80089ec <HAL_UART_Receive_DMA+0x94>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d01f      	beq.n	80089d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d018      	beq.n	80089d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	613b      	str	r3, [r7, #16]
   return(result);
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	623b      	str	r3, [r7, #32]
 80089be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	69f9      	ldr	r1, [r7, #28]
 80089c2:	6a3a      	ldr	r2, [r7, #32]
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e6      	bne.n	800899e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	461a      	mov	r2, r3
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 f850 	bl	8009a7c <UART_Start_Receive_DMA>
 80089dc:	4603      	mov	r3, r0
 80089de:	e000      	b.n	80089e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089e0:	2302      	movs	r3, #2
  }
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3728      	adds	r7, #40	@ 0x28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	58000c00 	.word	0x58000c00

080089f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a34:	b092      	sub	sp, #72	@ 0x48
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	4bbe      	ldr	r3, [pc, #760]	@ (8008d58 <UART_SetConfig+0x328>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a68:	430b      	orrs	r3, r1
 8008a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4ab3      	ldr	r2, [pc, #716]	@ (8008d5c <UART_SetConfig+0x32c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d004      	beq.n	8008a9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	4baf      	ldr	r3, [pc, #700]	@ (8008d60 <UART_SetConfig+0x330>)
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	6812      	ldr	r2, [r2, #0]
 8008aaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008aac:	430b      	orrs	r3, r1
 8008aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	f023 010f 	bic.w	r1, r3, #15
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4aa6      	ldr	r2, [pc, #664]	@ (8008d64 <UART_SetConfig+0x334>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d177      	bne.n	8008bc0 <UART_SetConfig+0x190>
 8008ad0:	4ba5      	ldr	r3, [pc, #660]	@ (8008d68 <UART_SetConfig+0x338>)
 8008ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ad8:	2b28      	cmp	r3, #40	@ 0x28
 8008ada:	d86d      	bhi.n	8008bb8 <UART_SetConfig+0x188>
 8008adc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae4 <UART_SetConfig+0xb4>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008b89 	.word	0x08008b89
 8008ae8:	08008bb9 	.word	0x08008bb9
 8008aec:	08008bb9 	.word	0x08008bb9
 8008af0:	08008bb9 	.word	0x08008bb9
 8008af4:	08008bb9 	.word	0x08008bb9
 8008af8:	08008bb9 	.word	0x08008bb9
 8008afc:	08008bb9 	.word	0x08008bb9
 8008b00:	08008bb9 	.word	0x08008bb9
 8008b04:	08008b91 	.word	0x08008b91
 8008b08:	08008bb9 	.word	0x08008bb9
 8008b0c:	08008bb9 	.word	0x08008bb9
 8008b10:	08008bb9 	.word	0x08008bb9
 8008b14:	08008bb9 	.word	0x08008bb9
 8008b18:	08008bb9 	.word	0x08008bb9
 8008b1c:	08008bb9 	.word	0x08008bb9
 8008b20:	08008bb9 	.word	0x08008bb9
 8008b24:	08008b99 	.word	0x08008b99
 8008b28:	08008bb9 	.word	0x08008bb9
 8008b2c:	08008bb9 	.word	0x08008bb9
 8008b30:	08008bb9 	.word	0x08008bb9
 8008b34:	08008bb9 	.word	0x08008bb9
 8008b38:	08008bb9 	.word	0x08008bb9
 8008b3c:	08008bb9 	.word	0x08008bb9
 8008b40:	08008bb9 	.word	0x08008bb9
 8008b44:	08008ba1 	.word	0x08008ba1
 8008b48:	08008bb9 	.word	0x08008bb9
 8008b4c:	08008bb9 	.word	0x08008bb9
 8008b50:	08008bb9 	.word	0x08008bb9
 8008b54:	08008bb9 	.word	0x08008bb9
 8008b58:	08008bb9 	.word	0x08008bb9
 8008b5c:	08008bb9 	.word	0x08008bb9
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008ba9 	.word	0x08008ba9
 8008b68:	08008bb9 	.word	0x08008bb9
 8008b6c:	08008bb9 	.word	0x08008bb9
 8008b70:	08008bb9 	.word	0x08008bb9
 8008b74:	08008bb9 	.word	0x08008bb9
 8008b78:	08008bb9 	.word	0x08008bb9
 8008b7c:	08008bb9 	.word	0x08008bb9
 8008b80:	08008bb9 	.word	0x08008bb9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8e:	e326      	b.n	80091de <UART_SetConfig+0x7ae>
 8008b90:	2304      	movs	r3, #4
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b96:	e322      	b.n	80091de <UART_SetConfig+0x7ae>
 8008b98:	2308      	movs	r3, #8
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9e:	e31e      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e31a      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ba8:	2320      	movs	r3, #32
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e316      	b.n	80091de <UART_SetConfig+0x7ae>
 8008bb0:	2340      	movs	r3, #64	@ 0x40
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e312      	b.n	80091de <UART_SetConfig+0x7ae>
 8008bb8:	2380      	movs	r3, #128	@ 0x80
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bbe:	e30e      	b.n	80091de <UART_SetConfig+0x7ae>
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a69      	ldr	r2, [pc, #420]	@ (8008d6c <UART_SetConfig+0x33c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d130      	bne.n	8008c2c <UART_SetConfig+0x1fc>
 8008bca:	4b67      	ldr	r3, [pc, #412]	@ (8008d68 <UART_SetConfig+0x338>)
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d826      	bhi.n	8008c24 <UART_SetConfig+0x1f4>
 8008bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bdc <UART_SetConfig+0x1ac>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008bf5 	.word	0x08008bf5
 8008be0:	08008bfd 	.word	0x08008bfd
 8008be4:	08008c05 	.word	0x08008c05
 8008be8:	08008c0d 	.word	0x08008c0d
 8008bec:	08008c15 	.word	0x08008c15
 8008bf0:	08008c1d 	.word	0x08008c1d
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfa:	e2f0      	b.n	80091de <UART_SetConfig+0x7ae>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c02:	e2ec      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0a:	e2e8      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e2e4      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c14:	2320      	movs	r3, #32
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e2e0      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c1c:	2340      	movs	r3, #64	@ 0x40
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e2dc      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c24:	2380      	movs	r3, #128	@ 0x80
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2a:	e2d8      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a4f      	ldr	r2, [pc, #316]	@ (8008d70 <UART_SetConfig+0x340>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d130      	bne.n	8008c98 <UART_SetConfig+0x268>
 8008c36:	4b4c      	ldr	r3, [pc, #304]	@ (8008d68 <UART_SetConfig+0x338>)
 8008c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	2b05      	cmp	r3, #5
 8008c40:	d826      	bhi.n	8008c90 <UART_SetConfig+0x260>
 8008c42:	a201      	add	r2, pc, #4	@ (adr r2, 8008c48 <UART_SetConfig+0x218>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c61 	.word	0x08008c61
 8008c4c:	08008c69 	.word	0x08008c69
 8008c50:	08008c71 	.word	0x08008c71
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c81 	.word	0x08008c81
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	2300      	movs	r3, #0
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e2ba      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c68:	2304      	movs	r3, #4
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e2b6      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c70:	2308      	movs	r3, #8
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e2b2      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e2ae      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c80:	2320      	movs	r3, #32
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e2aa      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c88:	2340      	movs	r3, #64	@ 0x40
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e2a6      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c90:	2380      	movs	r3, #128	@ 0x80
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e2a2      	b.n	80091de <UART_SetConfig+0x7ae>
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a35      	ldr	r2, [pc, #212]	@ (8008d74 <UART_SetConfig+0x344>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d130      	bne.n	8008d04 <UART_SetConfig+0x2d4>
 8008ca2:	4b31      	ldr	r3, [pc, #196]	@ (8008d68 <UART_SetConfig+0x338>)
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	d826      	bhi.n	8008cfc <UART_SetConfig+0x2cc>
 8008cae:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <UART_SetConfig+0x284>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008ccd 	.word	0x08008ccd
 8008cb8:	08008cd5 	.word	0x08008cd5
 8008cbc:	08008cdd 	.word	0x08008cdd
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008ced 	.word	0x08008ced
 8008cc8:	08008cf5 	.word	0x08008cf5
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e284      	b.n	80091de <UART_SetConfig+0x7ae>
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e280      	b.n	80091de <UART_SetConfig+0x7ae>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e27c      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e278      	b.n	80091de <UART_SetConfig+0x7ae>
 8008cec:	2320      	movs	r3, #32
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e274      	b.n	80091de <UART_SetConfig+0x7ae>
 8008cf4:	2340      	movs	r3, #64	@ 0x40
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e270      	b.n	80091de <UART_SetConfig+0x7ae>
 8008cfc:	2380      	movs	r3, #128	@ 0x80
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e26c      	b.n	80091de <UART_SetConfig+0x7ae>
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a1b      	ldr	r2, [pc, #108]	@ (8008d78 <UART_SetConfig+0x348>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d142      	bne.n	8008d94 <UART_SetConfig+0x364>
 8008d0e:	4b16      	ldr	r3, [pc, #88]	@ (8008d68 <UART_SetConfig+0x338>)
 8008d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b05      	cmp	r3, #5
 8008d18:	d838      	bhi.n	8008d8c <UART_SetConfig+0x35c>
 8008d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <UART_SetConfig+0x2f0>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d39 	.word	0x08008d39
 8008d24:	08008d41 	.word	0x08008d41
 8008d28:	08008d49 	.word	0x08008d49
 8008d2c:	08008d51 	.word	0x08008d51
 8008d30:	08008d7d 	.word	0x08008d7d
 8008d34:	08008d85 	.word	0x08008d85
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3e:	e24e      	b.n	80091de <UART_SetConfig+0x7ae>
 8008d40:	2304      	movs	r3, #4
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d46:	e24a      	b.n	80091de <UART_SetConfig+0x7ae>
 8008d48:	2308      	movs	r3, #8
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4e:	e246      	b.n	80091de <UART_SetConfig+0x7ae>
 8008d50:	2310      	movs	r3, #16
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d56:	e242      	b.n	80091de <UART_SetConfig+0x7ae>
 8008d58:	cfff69f3 	.word	0xcfff69f3
 8008d5c:	58000c00 	.word	0x58000c00
 8008d60:	11fff4ff 	.word	0x11fff4ff
 8008d64:	40011000 	.word	0x40011000
 8008d68:	58024400 	.word	0x58024400
 8008d6c:	40004400 	.word	0x40004400
 8008d70:	40004800 	.word	0x40004800
 8008d74:	40004c00 	.word	0x40004c00
 8008d78:	40005000 	.word	0x40005000
 8008d7c:	2320      	movs	r3, #32
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d82:	e22c      	b.n	80091de <UART_SetConfig+0x7ae>
 8008d84:	2340      	movs	r3, #64	@ 0x40
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8a:	e228      	b.n	80091de <UART_SetConfig+0x7ae>
 8008d8c:	2380      	movs	r3, #128	@ 0x80
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d92:	e224      	b.n	80091de <UART_SetConfig+0x7ae>
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4ab1      	ldr	r2, [pc, #708]	@ (8009060 <UART_SetConfig+0x630>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d176      	bne.n	8008e8c <UART_SetConfig+0x45c>
 8008d9e:	4bb1      	ldr	r3, [pc, #708]	@ (8009064 <UART_SetConfig+0x634>)
 8008da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008da6:	2b28      	cmp	r3, #40	@ 0x28
 8008da8:	d86c      	bhi.n	8008e84 <UART_SetConfig+0x454>
 8008daa:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <UART_SetConfig+0x380>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008e55 	.word	0x08008e55
 8008db4:	08008e85 	.word	0x08008e85
 8008db8:	08008e85 	.word	0x08008e85
 8008dbc:	08008e85 	.word	0x08008e85
 8008dc0:	08008e85 	.word	0x08008e85
 8008dc4:	08008e85 	.word	0x08008e85
 8008dc8:	08008e85 	.word	0x08008e85
 8008dcc:	08008e85 	.word	0x08008e85
 8008dd0:	08008e5d 	.word	0x08008e5d
 8008dd4:	08008e85 	.word	0x08008e85
 8008dd8:	08008e85 	.word	0x08008e85
 8008ddc:	08008e85 	.word	0x08008e85
 8008de0:	08008e85 	.word	0x08008e85
 8008de4:	08008e85 	.word	0x08008e85
 8008de8:	08008e85 	.word	0x08008e85
 8008dec:	08008e85 	.word	0x08008e85
 8008df0:	08008e65 	.word	0x08008e65
 8008df4:	08008e85 	.word	0x08008e85
 8008df8:	08008e85 	.word	0x08008e85
 8008dfc:	08008e85 	.word	0x08008e85
 8008e00:	08008e85 	.word	0x08008e85
 8008e04:	08008e85 	.word	0x08008e85
 8008e08:	08008e85 	.word	0x08008e85
 8008e0c:	08008e85 	.word	0x08008e85
 8008e10:	08008e6d 	.word	0x08008e6d
 8008e14:	08008e85 	.word	0x08008e85
 8008e18:	08008e85 	.word	0x08008e85
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e85 	.word	0x08008e85
 8008e24:	08008e85 	.word	0x08008e85
 8008e28:	08008e85 	.word	0x08008e85
 8008e2c:	08008e85 	.word	0x08008e85
 8008e30:	08008e75 	.word	0x08008e75
 8008e34:	08008e85 	.word	0x08008e85
 8008e38:	08008e85 	.word	0x08008e85
 8008e3c:	08008e85 	.word	0x08008e85
 8008e40:	08008e85 	.word	0x08008e85
 8008e44:	08008e85 	.word	0x08008e85
 8008e48:	08008e85 	.word	0x08008e85
 8008e4c:	08008e85 	.word	0x08008e85
 8008e50:	08008e7d 	.word	0x08008e7d
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e1c0      	b.n	80091de <UART_SetConfig+0x7ae>
 8008e5c:	2304      	movs	r3, #4
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e1bc      	b.n	80091de <UART_SetConfig+0x7ae>
 8008e64:	2308      	movs	r3, #8
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e1b8      	b.n	80091de <UART_SetConfig+0x7ae>
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e1b4      	b.n	80091de <UART_SetConfig+0x7ae>
 8008e74:	2320      	movs	r3, #32
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e1b0      	b.n	80091de <UART_SetConfig+0x7ae>
 8008e7c:	2340      	movs	r3, #64	@ 0x40
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e1ac      	b.n	80091de <UART_SetConfig+0x7ae>
 8008e84:	2380      	movs	r3, #128	@ 0x80
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8a:	e1a8      	b.n	80091de <UART_SetConfig+0x7ae>
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a75      	ldr	r2, [pc, #468]	@ (8009068 <UART_SetConfig+0x638>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d130      	bne.n	8008ef8 <UART_SetConfig+0x4c8>
 8008e96:	4b73      	ldr	r3, [pc, #460]	@ (8009064 <UART_SetConfig+0x634>)
 8008e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e9a:	f003 0307 	and.w	r3, r3, #7
 8008e9e:	2b05      	cmp	r3, #5
 8008ea0:	d826      	bhi.n	8008ef0 <UART_SetConfig+0x4c0>
 8008ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea8 <UART_SetConfig+0x478>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008ec1 	.word	0x08008ec1
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08008ed9 	.word	0x08008ed9
 8008eb8:	08008ee1 	.word	0x08008ee1
 8008ebc:	08008ee9 	.word	0x08008ee9
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e18a      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e186      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e182      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e17e      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e17a      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ee8:	2340      	movs	r3, #64	@ 0x40
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e176      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ef0:	2380      	movs	r3, #128	@ 0x80
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e172      	b.n	80091de <UART_SetConfig+0x7ae>
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a5b      	ldr	r2, [pc, #364]	@ (800906c <UART_SetConfig+0x63c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d130      	bne.n	8008f64 <UART_SetConfig+0x534>
 8008f02:	4b58      	ldr	r3, [pc, #352]	@ (8009064 <UART_SetConfig+0x634>)
 8008f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d826      	bhi.n	8008f5c <UART_SetConfig+0x52c>
 8008f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f14 <UART_SetConfig+0x4e4>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f2d 	.word	0x08008f2d
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f3d 	.word	0x08008f3d
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f55 	.word	0x08008f55
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e154      	b.n	80091de <UART_SetConfig+0x7ae>
 8008f34:	2304      	movs	r3, #4
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e150      	b.n	80091de <UART_SetConfig+0x7ae>
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e14c      	b.n	80091de <UART_SetConfig+0x7ae>
 8008f44:	2310      	movs	r3, #16
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e148      	b.n	80091de <UART_SetConfig+0x7ae>
 8008f4c:	2320      	movs	r3, #32
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f52:	e144      	b.n	80091de <UART_SetConfig+0x7ae>
 8008f54:	2340      	movs	r3, #64	@ 0x40
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5a:	e140      	b.n	80091de <UART_SetConfig+0x7ae>
 8008f5c:	2380      	movs	r3, #128	@ 0x80
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f62:	e13c      	b.n	80091de <UART_SetConfig+0x7ae>
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a41      	ldr	r2, [pc, #260]	@ (8009070 <UART_SetConfig+0x640>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	f040 8082 	bne.w	8009074 <UART_SetConfig+0x644>
 8008f70:	4b3c      	ldr	r3, [pc, #240]	@ (8009064 <UART_SetConfig+0x634>)
 8008f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f78:	2b28      	cmp	r3, #40	@ 0x28
 8008f7a:	d86d      	bhi.n	8009058 <UART_SetConfig+0x628>
 8008f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f84 <UART_SetConfig+0x554>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08009029 	.word	0x08009029
 8008f88:	08009059 	.word	0x08009059
 8008f8c:	08009059 	.word	0x08009059
 8008f90:	08009059 	.word	0x08009059
 8008f94:	08009059 	.word	0x08009059
 8008f98:	08009059 	.word	0x08009059
 8008f9c:	08009059 	.word	0x08009059
 8008fa0:	08009059 	.word	0x08009059
 8008fa4:	08009031 	.word	0x08009031
 8008fa8:	08009059 	.word	0x08009059
 8008fac:	08009059 	.word	0x08009059
 8008fb0:	08009059 	.word	0x08009059
 8008fb4:	08009059 	.word	0x08009059
 8008fb8:	08009059 	.word	0x08009059
 8008fbc:	08009059 	.word	0x08009059
 8008fc0:	08009059 	.word	0x08009059
 8008fc4:	08009039 	.word	0x08009039
 8008fc8:	08009059 	.word	0x08009059
 8008fcc:	08009059 	.word	0x08009059
 8008fd0:	08009059 	.word	0x08009059
 8008fd4:	08009059 	.word	0x08009059
 8008fd8:	08009059 	.word	0x08009059
 8008fdc:	08009059 	.word	0x08009059
 8008fe0:	08009059 	.word	0x08009059
 8008fe4:	08009041 	.word	0x08009041
 8008fe8:	08009059 	.word	0x08009059
 8008fec:	08009059 	.word	0x08009059
 8008ff0:	08009059 	.word	0x08009059
 8008ff4:	08009059 	.word	0x08009059
 8008ff8:	08009059 	.word	0x08009059
 8008ffc:	08009059 	.word	0x08009059
 8009000:	08009059 	.word	0x08009059
 8009004:	08009049 	.word	0x08009049
 8009008:	08009059 	.word	0x08009059
 800900c:	08009059 	.word	0x08009059
 8009010:	08009059 	.word	0x08009059
 8009014:	08009059 	.word	0x08009059
 8009018:	08009059 	.word	0x08009059
 800901c:	08009059 	.word	0x08009059
 8009020:	08009059 	.word	0x08009059
 8009024:	08009051 	.word	0x08009051
 8009028:	2301      	movs	r3, #1
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e0d6      	b.n	80091de <UART_SetConfig+0x7ae>
 8009030:	2304      	movs	r3, #4
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e0d2      	b.n	80091de <UART_SetConfig+0x7ae>
 8009038:	2308      	movs	r3, #8
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e0ce      	b.n	80091de <UART_SetConfig+0x7ae>
 8009040:	2310      	movs	r3, #16
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e0ca      	b.n	80091de <UART_SetConfig+0x7ae>
 8009048:	2320      	movs	r3, #32
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904e:	e0c6      	b.n	80091de <UART_SetConfig+0x7ae>
 8009050:	2340      	movs	r3, #64	@ 0x40
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009056:	e0c2      	b.n	80091de <UART_SetConfig+0x7ae>
 8009058:	2380      	movs	r3, #128	@ 0x80
 800905a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905e:	e0be      	b.n	80091de <UART_SetConfig+0x7ae>
 8009060:	40011400 	.word	0x40011400
 8009064:	58024400 	.word	0x58024400
 8009068:	40007800 	.word	0x40007800
 800906c:	40007c00 	.word	0x40007c00
 8009070:	40011800 	.word	0x40011800
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4aad      	ldr	r2, [pc, #692]	@ (8009330 <UART_SetConfig+0x900>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d176      	bne.n	800916c <UART_SetConfig+0x73c>
 800907e:	4bad      	ldr	r3, [pc, #692]	@ (8009334 <UART_SetConfig+0x904>)
 8009080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009086:	2b28      	cmp	r3, #40	@ 0x28
 8009088:	d86c      	bhi.n	8009164 <UART_SetConfig+0x734>
 800908a:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <UART_SetConfig+0x660>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	08009135 	.word	0x08009135
 8009094:	08009165 	.word	0x08009165
 8009098:	08009165 	.word	0x08009165
 800909c:	08009165 	.word	0x08009165
 80090a0:	08009165 	.word	0x08009165
 80090a4:	08009165 	.word	0x08009165
 80090a8:	08009165 	.word	0x08009165
 80090ac:	08009165 	.word	0x08009165
 80090b0:	0800913d 	.word	0x0800913d
 80090b4:	08009165 	.word	0x08009165
 80090b8:	08009165 	.word	0x08009165
 80090bc:	08009165 	.word	0x08009165
 80090c0:	08009165 	.word	0x08009165
 80090c4:	08009165 	.word	0x08009165
 80090c8:	08009165 	.word	0x08009165
 80090cc:	08009165 	.word	0x08009165
 80090d0:	08009145 	.word	0x08009145
 80090d4:	08009165 	.word	0x08009165
 80090d8:	08009165 	.word	0x08009165
 80090dc:	08009165 	.word	0x08009165
 80090e0:	08009165 	.word	0x08009165
 80090e4:	08009165 	.word	0x08009165
 80090e8:	08009165 	.word	0x08009165
 80090ec:	08009165 	.word	0x08009165
 80090f0:	0800914d 	.word	0x0800914d
 80090f4:	08009165 	.word	0x08009165
 80090f8:	08009165 	.word	0x08009165
 80090fc:	08009165 	.word	0x08009165
 8009100:	08009165 	.word	0x08009165
 8009104:	08009165 	.word	0x08009165
 8009108:	08009165 	.word	0x08009165
 800910c:	08009165 	.word	0x08009165
 8009110:	08009155 	.word	0x08009155
 8009114:	08009165 	.word	0x08009165
 8009118:	08009165 	.word	0x08009165
 800911c:	08009165 	.word	0x08009165
 8009120:	08009165 	.word	0x08009165
 8009124:	08009165 	.word	0x08009165
 8009128:	08009165 	.word	0x08009165
 800912c:	08009165 	.word	0x08009165
 8009130:	0800915d 	.word	0x0800915d
 8009134:	2301      	movs	r3, #1
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e050      	b.n	80091de <UART_SetConfig+0x7ae>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e04c      	b.n	80091de <UART_SetConfig+0x7ae>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e048      	b.n	80091de <UART_SetConfig+0x7ae>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e044      	b.n	80091de <UART_SetConfig+0x7ae>
 8009154:	2320      	movs	r3, #32
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e040      	b.n	80091de <UART_SetConfig+0x7ae>
 800915c:	2340      	movs	r3, #64	@ 0x40
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e03c      	b.n	80091de <UART_SetConfig+0x7ae>
 8009164:	2380      	movs	r3, #128	@ 0x80
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e038      	b.n	80091de <UART_SetConfig+0x7ae>
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a71      	ldr	r2, [pc, #452]	@ (8009338 <UART_SetConfig+0x908>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d130      	bne.n	80091d8 <UART_SetConfig+0x7a8>
 8009176:	4b6f      	ldr	r3, [pc, #444]	@ (8009334 <UART_SetConfig+0x904>)
 8009178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	2b05      	cmp	r3, #5
 8009180:	d826      	bhi.n	80091d0 <UART_SetConfig+0x7a0>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <UART_SetConfig+0x758>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091a1 	.word	0x080091a1
 800918c:	080091a9 	.word	0x080091a9
 8009190:	080091b1 	.word	0x080091b1
 8009194:	080091b9 	.word	0x080091b9
 8009198:	080091c1 	.word	0x080091c1
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	2302      	movs	r3, #2
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e01a      	b.n	80091de <UART_SetConfig+0x7ae>
 80091a8:	2304      	movs	r3, #4
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e016      	b.n	80091de <UART_SetConfig+0x7ae>
 80091b0:	2308      	movs	r3, #8
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e012      	b.n	80091de <UART_SetConfig+0x7ae>
 80091b8:	2310      	movs	r3, #16
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e00e      	b.n	80091de <UART_SetConfig+0x7ae>
 80091c0:	2320      	movs	r3, #32
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e00a      	b.n	80091de <UART_SetConfig+0x7ae>
 80091c8:	2340      	movs	r3, #64	@ 0x40
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e006      	b.n	80091de <UART_SetConfig+0x7ae>
 80091d0:	2380      	movs	r3, #128	@ 0x80
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e002      	b.n	80091de <UART_SetConfig+0x7ae>
 80091d8:	2380      	movs	r3, #128	@ 0x80
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a55      	ldr	r2, [pc, #340]	@ (8009338 <UART_SetConfig+0x908>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	f040 80f8 	bne.w	80093da <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	dc46      	bgt.n	8009280 <UART_SetConfig+0x850>
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	db75      	blt.n	80092e2 <UART_SetConfig+0x8b2>
 80091f6:	3b02      	subs	r3, #2
 80091f8:	2b1e      	cmp	r3, #30
 80091fa:	d872      	bhi.n	80092e2 <UART_SetConfig+0x8b2>
 80091fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009204 <UART_SetConfig+0x7d4>)
 80091fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009202:	bf00      	nop
 8009204:	08009287 	.word	0x08009287
 8009208:	080092e3 	.word	0x080092e3
 800920c:	0800928f 	.word	0x0800928f
 8009210:	080092e3 	.word	0x080092e3
 8009214:	080092e3 	.word	0x080092e3
 8009218:	080092e3 	.word	0x080092e3
 800921c:	0800929f 	.word	0x0800929f
 8009220:	080092e3 	.word	0x080092e3
 8009224:	080092e3 	.word	0x080092e3
 8009228:	080092e3 	.word	0x080092e3
 800922c:	080092e3 	.word	0x080092e3
 8009230:	080092e3 	.word	0x080092e3
 8009234:	080092e3 	.word	0x080092e3
 8009238:	080092e3 	.word	0x080092e3
 800923c:	080092af 	.word	0x080092af
 8009240:	080092e3 	.word	0x080092e3
 8009244:	080092e3 	.word	0x080092e3
 8009248:	080092e3 	.word	0x080092e3
 800924c:	080092e3 	.word	0x080092e3
 8009250:	080092e3 	.word	0x080092e3
 8009254:	080092e3 	.word	0x080092e3
 8009258:	080092e3 	.word	0x080092e3
 800925c:	080092e3 	.word	0x080092e3
 8009260:	080092e3 	.word	0x080092e3
 8009264:	080092e3 	.word	0x080092e3
 8009268:	080092e3 	.word	0x080092e3
 800926c:	080092e3 	.word	0x080092e3
 8009270:	080092e3 	.word	0x080092e3
 8009274:	080092e3 	.word	0x080092e3
 8009278:	080092e3 	.word	0x080092e3
 800927c:	080092d5 	.word	0x080092d5
 8009280:	2b40      	cmp	r3, #64	@ 0x40
 8009282:	d02a      	beq.n	80092da <UART_SetConfig+0x8aa>
 8009284:	e02d      	b.n	80092e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009286:	f7fe f901 	bl	800748c <HAL_RCCEx_GetD3PCLK1Freq>
 800928a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800928c:	e02f      	b.n	80092ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800928e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe f910 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929c:	e027      	b.n	80092ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929e:	f107 0318 	add.w	r3, r7, #24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe fa5c 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ac:	e01f      	b.n	80092ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ae:	4b21      	ldr	r3, [pc, #132]	@ (8009334 <UART_SetConfig+0x904>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d009      	beq.n	80092ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009334 <UART_SetConfig+0x904>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	08db      	lsrs	r3, r3, #3
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	4a1d      	ldr	r2, [pc, #116]	@ (800933c <UART_SetConfig+0x90c>)
 80092c6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092cc:	e00f      	b.n	80092ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092ce:	4b1b      	ldr	r3, [pc, #108]	@ (800933c <UART_SetConfig+0x90c>)
 80092d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d2:	e00c      	b.n	80092ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009340 <UART_SetConfig+0x910>)
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d8:	e009      	b.n	80092ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e0:	e005      	b.n	80092ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 81ee 	beq.w	80096d2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fa:	4a12      	ldr	r2, [pc, #72]	@ (8009344 <UART_SetConfig+0x914>)
 80092fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009300:	461a      	mov	r2, r3
 8009302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009304:	fbb3 f3f2 	udiv	r3, r3, r2
 8009308:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	4613      	mov	r3, r2
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	4413      	add	r3, r2
 8009314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009316:	429a      	cmp	r2, r3
 8009318:	d305      	bcc.n	8009326 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009322:	429a      	cmp	r2, r3
 8009324:	d910      	bls.n	8009348 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800932c:	e1d1      	b.n	80096d2 <UART_SetConfig+0xca2>
 800932e:	bf00      	nop
 8009330:	40011c00 	.word	0x40011c00
 8009334:	58024400 	.word	0x58024400
 8009338:	58000c00 	.word	0x58000c00
 800933c:	03d09000 	.word	0x03d09000
 8009340:	003d0900 	.word	0x003d0900
 8009344:	0800cd44 	.word	0x0800cd44
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800934a:	2200      	movs	r2, #0
 800934c:	60bb      	str	r3, [r7, #8]
 800934e:	60fa      	str	r2, [r7, #12]
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	4ac0      	ldr	r2, [pc, #768]	@ (8009658 <UART_SetConfig+0xc28>)
 8009356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800935a:	b29b      	uxth	r3, r3
 800935c:	2200      	movs	r2, #0
 800935e:	603b      	str	r3, [r7, #0]
 8009360:	607a      	str	r2, [r7, #4]
 8009362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009366:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800936a:	f7f7 f9dd 	bl	8000728 <__aeabi_uldivmod>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4610      	mov	r0, r2
 8009374:	4619      	mov	r1, r3
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	020b      	lsls	r3, r1, #8
 8009380:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009384:	0202      	lsls	r2, r0, #8
 8009386:	6979      	ldr	r1, [r7, #20]
 8009388:	6849      	ldr	r1, [r1, #4]
 800938a:	0849      	lsrs	r1, r1, #1
 800938c:	2000      	movs	r0, #0
 800938e:	460c      	mov	r4, r1
 8009390:	4605      	mov	r5, r0
 8009392:	eb12 0804 	adds.w	r8, r2, r4
 8009396:	eb43 0905 	adc.w	r9, r3, r5
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	469a      	mov	sl, r3
 80093a2:	4693      	mov	fp, r2
 80093a4:	4652      	mov	r2, sl
 80093a6:	465b      	mov	r3, fp
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f7 f9bc 	bl	8000728 <__aeabi_uldivmod>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4613      	mov	r3, r2
 80093b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093be:	d308      	bcc.n	80093d2 <UART_SetConfig+0x9a2>
 80093c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093c6:	d204      	bcs.n	80093d2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093ce:	60da      	str	r2, [r3, #12]
 80093d0:	e17f      	b.n	80096d2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093d8:	e17b      	b.n	80096d2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093e2:	f040 80bd 	bne.w	8009560 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80093e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	dc48      	bgt.n	8009480 <UART_SetConfig+0xa50>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	db7b      	blt.n	80094ea <UART_SetConfig+0xaba>
 80093f2:	2b20      	cmp	r3, #32
 80093f4:	d879      	bhi.n	80094ea <UART_SetConfig+0xaba>
 80093f6:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0x9cc>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	08009487 	.word	0x08009487
 8009400:	0800948f 	.word	0x0800948f
 8009404:	080094eb 	.word	0x080094eb
 8009408:	080094eb 	.word	0x080094eb
 800940c:	08009497 	.word	0x08009497
 8009410:	080094eb 	.word	0x080094eb
 8009414:	080094eb 	.word	0x080094eb
 8009418:	080094eb 	.word	0x080094eb
 800941c:	080094a7 	.word	0x080094a7
 8009420:	080094eb 	.word	0x080094eb
 8009424:	080094eb 	.word	0x080094eb
 8009428:	080094eb 	.word	0x080094eb
 800942c:	080094eb 	.word	0x080094eb
 8009430:	080094eb 	.word	0x080094eb
 8009434:	080094eb 	.word	0x080094eb
 8009438:	080094eb 	.word	0x080094eb
 800943c:	080094b7 	.word	0x080094b7
 8009440:	080094eb 	.word	0x080094eb
 8009444:	080094eb 	.word	0x080094eb
 8009448:	080094eb 	.word	0x080094eb
 800944c:	080094eb 	.word	0x080094eb
 8009450:	080094eb 	.word	0x080094eb
 8009454:	080094eb 	.word	0x080094eb
 8009458:	080094eb 	.word	0x080094eb
 800945c:	080094eb 	.word	0x080094eb
 8009460:	080094eb 	.word	0x080094eb
 8009464:	080094eb 	.word	0x080094eb
 8009468:	080094eb 	.word	0x080094eb
 800946c:	080094eb 	.word	0x080094eb
 8009470:	080094eb 	.word	0x080094eb
 8009474:	080094eb 	.word	0x080094eb
 8009478:	080094eb 	.word	0x080094eb
 800947c:	080094dd 	.word	0x080094dd
 8009480:	2b40      	cmp	r3, #64	@ 0x40
 8009482:	d02e      	beq.n	80094e2 <UART_SetConfig+0xab2>
 8009484:	e031      	b.n	80094ea <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009486:	f7fc fe35 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 800948a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800948c:	e033      	b.n	80094f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800948e:	f7fc fe47 	bl	8006120 <HAL_RCC_GetPCLK2Freq>
 8009492:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009494:	e02f      	b.n	80094f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe f80c 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a4:	e027      	b.n	80094f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094a6:	f107 0318 	add.w	r3, r7, #24
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe f958 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b4:	e01f      	b.n	80094f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094b6:	4b69      	ldr	r3, [pc, #420]	@ (800965c <UART_SetConfig+0xc2c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094c2:	4b66      	ldr	r3, [pc, #408]	@ (800965c <UART_SetConfig+0xc2c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	08db      	lsrs	r3, r3, #3
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	4a64      	ldr	r2, [pc, #400]	@ (8009660 <UART_SetConfig+0xc30>)
 80094ce:	fa22 f303 	lsr.w	r3, r2, r3
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094d4:	e00f      	b.n	80094f6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80094d6:	4b62      	ldr	r3, [pc, #392]	@ (8009660 <UART_SetConfig+0xc30>)
 80094d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094da:	e00c      	b.n	80094f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094dc:	4b61      	ldr	r3, [pc, #388]	@ (8009664 <UART_SetConfig+0xc34>)
 80094de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e0:	e009      	b.n	80094f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e8:	e005      	b.n	80094f6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 80ea 	beq.w	80096d2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009502:	4a55      	ldr	r2, [pc, #340]	@ (8009658 <UART_SetConfig+0xc28>)
 8009504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009508:	461a      	mov	r2, r3
 800950a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800950c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009510:	005a      	lsls	r2, r3, #1
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	441a      	add	r2, r3
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009522:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	2b0f      	cmp	r3, #15
 8009528:	d916      	bls.n	8009558 <UART_SetConfig+0xb28>
 800952a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009530:	d212      	bcs.n	8009558 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	b29b      	uxth	r3, r3
 8009536:	f023 030f 	bic.w	r3, r3, #15
 800953a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	085b      	lsrs	r3, r3, #1
 8009540:	b29b      	uxth	r3, r3
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	b29a      	uxth	r2, r3
 8009548:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800954a:	4313      	orrs	r3, r2
 800954c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009554:	60da      	str	r2, [r3, #12]
 8009556:	e0bc      	b.n	80096d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800955e:	e0b8      	b.n	80096d2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009560:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009564:	2b20      	cmp	r3, #32
 8009566:	dc4b      	bgt.n	8009600 <UART_SetConfig+0xbd0>
 8009568:	2b00      	cmp	r3, #0
 800956a:	f2c0 8087 	blt.w	800967c <UART_SetConfig+0xc4c>
 800956e:	2b20      	cmp	r3, #32
 8009570:	f200 8084 	bhi.w	800967c <UART_SetConfig+0xc4c>
 8009574:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <UART_SetConfig+0xb4c>)
 8009576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957a:	bf00      	nop
 800957c:	08009607 	.word	0x08009607
 8009580:	0800960f 	.word	0x0800960f
 8009584:	0800967d 	.word	0x0800967d
 8009588:	0800967d 	.word	0x0800967d
 800958c:	08009617 	.word	0x08009617
 8009590:	0800967d 	.word	0x0800967d
 8009594:	0800967d 	.word	0x0800967d
 8009598:	0800967d 	.word	0x0800967d
 800959c:	08009627 	.word	0x08009627
 80095a0:	0800967d 	.word	0x0800967d
 80095a4:	0800967d 	.word	0x0800967d
 80095a8:	0800967d 	.word	0x0800967d
 80095ac:	0800967d 	.word	0x0800967d
 80095b0:	0800967d 	.word	0x0800967d
 80095b4:	0800967d 	.word	0x0800967d
 80095b8:	0800967d 	.word	0x0800967d
 80095bc:	08009637 	.word	0x08009637
 80095c0:	0800967d 	.word	0x0800967d
 80095c4:	0800967d 	.word	0x0800967d
 80095c8:	0800967d 	.word	0x0800967d
 80095cc:	0800967d 	.word	0x0800967d
 80095d0:	0800967d 	.word	0x0800967d
 80095d4:	0800967d 	.word	0x0800967d
 80095d8:	0800967d 	.word	0x0800967d
 80095dc:	0800967d 	.word	0x0800967d
 80095e0:	0800967d 	.word	0x0800967d
 80095e4:	0800967d 	.word	0x0800967d
 80095e8:	0800967d 	.word	0x0800967d
 80095ec:	0800967d 	.word	0x0800967d
 80095f0:	0800967d 	.word	0x0800967d
 80095f4:	0800967d 	.word	0x0800967d
 80095f8:	0800967d 	.word	0x0800967d
 80095fc:	0800966f 	.word	0x0800966f
 8009600:	2b40      	cmp	r3, #64	@ 0x40
 8009602:	d037      	beq.n	8009674 <UART_SetConfig+0xc44>
 8009604:	e03a      	b.n	800967c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009606:	f7fc fd75 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 800960a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800960c:	e03c      	b.n	8009688 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800960e:	f7fc fd87 	bl	8006120 <HAL_RCC_GetPCLK2Freq>
 8009612:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009614:	e038      	b.n	8009688 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800961a:	4618      	mov	r0, r3
 800961c:	f7fd ff4c 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009624:	e030      	b.n	8009688 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009626:	f107 0318 	add.w	r3, r7, #24
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe f898 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009634:	e028      	b.n	8009688 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009636:	4b09      	ldr	r3, [pc, #36]	@ (800965c <UART_SetConfig+0xc2c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0320 	and.w	r3, r3, #32
 800963e:	2b00      	cmp	r3, #0
 8009640:	d012      	beq.n	8009668 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009642:	4b06      	ldr	r3, [pc, #24]	@ (800965c <UART_SetConfig+0xc2c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	08db      	lsrs	r3, r3, #3
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	4a04      	ldr	r2, [pc, #16]	@ (8009660 <UART_SetConfig+0xc30>)
 800964e:	fa22 f303 	lsr.w	r3, r2, r3
 8009652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009654:	e018      	b.n	8009688 <UART_SetConfig+0xc58>
 8009656:	bf00      	nop
 8009658:	0800cd44 	.word	0x0800cd44
 800965c:	58024400 	.word	0x58024400
 8009660:	03d09000 	.word	0x03d09000
 8009664:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009668:	4b24      	ldr	r3, [pc, #144]	@ (80096fc <UART_SetConfig+0xccc>)
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800966c:	e00c      	b.n	8009688 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800966e:	4b24      	ldr	r3, [pc, #144]	@ (8009700 <UART_SetConfig+0xcd0>)
 8009670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009672:	e009      	b.n	8009688 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967a:	e005      	b.n	8009688 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009686:	bf00      	nop
    }

    if (pclk != 0U)
 8009688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d021      	beq.n	80096d2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009692:	4a1c      	ldr	r2, [pc, #112]	@ (8009704 <UART_SetConfig+0xcd4>)
 8009694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009698:	461a      	mov	r2, r3
 800969a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800969c:	fbb3 f2f2 	udiv	r2, r3, r2
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	085b      	lsrs	r3, r3, #1
 80096a6:	441a      	add	r2, r3
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b4:	2b0f      	cmp	r3, #15
 80096b6:	d909      	bls.n	80096cc <UART_SetConfig+0xc9c>
 80096b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096be:	d205      	bcs.n	80096cc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60da      	str	r2, [r3, #12]
 80096ca:	e002      	b.n	80096d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2201      	movs	r2, #1
 80096de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2200      	movs	r2, #0
 80096e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2200      	movs	r2, #0
 80096ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80096ee:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3748      	adds	r7, #72	@ 0x48
 80096f6:	46bd      	mov	sp, r7
 80096f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096fc:	03d09000 	.word	0x03d09000
 8009700:	003d0900 	.word	0x003d0900
 8009704:	0800cd44 	.word	0x0800cd44

08009708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009714:	f003 0308 	and.w	r3, r3, #8
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00a      	beq.n	8009732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00a      	beq.n	8009776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00a      	beq.n	8009798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979c:	f003 0310 	and.w	r3, r3, #16
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00a      	beq.n	80097ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00a      	beq.n	80097dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01a      	beq.n	800981e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009806:	d10a      	bne.n	800981e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	430a      	orrs	r2, r1
 800983e:	605a      	str	r2, [r3, #4]
  }
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b098      	sub	sp, #96	@ 0x60
 8009850:	af02      	add	r7, sp, #8
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800985c:	f7f8 ffb2 	bl	80027c4 <HAL_GetTick>
 8009860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0308 	and.w	r3, r3, #8
 800986c:	2b08      	cmp	r3, #8
 800986e:	d12f      	bne.n	80098d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009878:	2200      	movs	r2, #0
 800987a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f88e 	bl	80099a0 <UART_WaitOnFlagUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d022      	beq.n	80098d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800989e:	653b      	str	r3, [r7, #80]	@ 0x50
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	461a      	mov	r2, r3
 80098a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80098aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e6      	bne.n	800988a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2220      	movs	r2, #32
 80098c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e063      	b.n	8009998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0304 	and.w	r3, r3, #4
 80098da:	2b04      	cmp	r3, #4
 80098dc:	d149      	bne.n	8009972 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098e6:	2200      	movs	r2, #0
 80098e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f857 	bl	80099a0 <UART_WaitOnFlagUntilTimeout>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d03c      	beq.n	8009972 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	623b      	str	r3, [r7, #32]
   return(result);
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800990c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009916:	633b      	str	r3, [r7, #48]	@ 0x30
 8009918:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800991c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e6      	bne.n	80098f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3308      	adds	r3, #8
 8009930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	60fb      	str	r3, [r7, #12]
   return(result);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f023 0301 	bic.w	r3, r3, #1
 8009940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3308      	adds	r3, #8
 8009948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800994a:	61fa      	str	r2, [r7, #28]
 800994c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	69b9      	ldr	r1, [r7, #24]
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	617b      	str	r3, [r7, #20]
   return(result);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e5      	bne.n	800992a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e012      	b.n	8009998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2220      	movs	r2, #32
 8009976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2220      	movs	r2, #32
 800997e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3758      	adds	r7, #88	@ 0x58
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b0:	e04f      	b.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d04b      	beq.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ba:	f7f8 ff03 	bl	80027c4 <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	69ba      	ldr	r2, [r7, #24]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d302      	bcc.n	80099d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e04e      	b.n	8009a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d037      	beq.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b80      	cmp	r3, #128	@ 0x80
 80099e6:	d034      	beq.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b40      	cmp	r3, #64	@ 0x40
 80099ec:	d031      	beq.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	f003 0308 	and.w	r3, r3, #8
 80099f8:	2b08      	cmp	r3, #8
 80099fa:	d110      	bne.n	8009a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2208      	movs	r2, #8
 8009a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 f921 	bl	8009c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e029      	b.n	8009a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a2c:	d111      	bne.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f907 	bl	8009c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e00f      	b.n	8009a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69da      	ldr	r2, [r3, #28]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	bf0c      	ite	eq
 8009a62:	2301      	moveq	r3, #1
 8009a64:	2300      	movne	r3, #0
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	461a      	mov	r2, r3
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d0a0      	beq.n	80099b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b096      	sub	sp, #88	@ 0x58
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	4613      	mov	r3, r2
 8009a88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	88fa      	ldrh	r2, [r7, #6]
 8009a94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2222      	movs	r2, #34	@ 0x22
 8009aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d02d      	beq.n	8009b0e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab8:	4a40      	ldr	r2, [pc, #256]	@ (8009bbc <UART_Start_Receive_DMA+0x140>)
 8009aba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8009bc0 <UART_Start_Receive_DMA+0x144>)
 8009ac4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009acc:	4a3d      	ldr	r2, [pc, #244]	@ (8009bc4 <UART_Start_Receive_DMA+0x148>)
 8009ace:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3324      	adds	r3, #36	@ 0x24
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aec:	461a      	mov	r2, r3
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	f7f9 fae8 	bl	80030c4 <HAL_DMA_Start_IT>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d009      	beq.n	8009b0e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2210      	movs	r2, #16
 8009afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e051      	b.n	8009bb2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d018      	beq.n	8009b48 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b36:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e6      	bne.n	8009b16 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b68:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e5      	bne.n	8009b48 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3308      	adds	r3, #8
 8009b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b9c:	623a      	str	r2, [r7, #32]
 8009b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	69f9      	ldr	r1, [r7, #28]
 8009ba2:	6a3a      	ldr	r2, [r7, #32]
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e5      	bne.n	8009b7c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3758      	adds	r7, #88	@ 0x58
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	08009d19 	.word	0x08009d19
 8009bc0:	08009e41 	.word	0x08009e41
 8009bc4:	08009e7f 	.word	0x08009e7f

08009bc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b08f      	sub	sp, #60	@ 0x3c
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bf0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bf6:	e841 2300 	strex	r3, r2, [r1]
 8009bfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e6      	bne.n	8009bd0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3308      	adds	r3, #8
 8009c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c22:	61ba      	str	r2, [r7, #24]
 8009c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6979      	ldr	r1, [r7, #20]
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e5      	bne.n	8009c02 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2220      	movs	r2, #32
 8009c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009c3e:	bf00      	nop
 8009c40:	373c      	adds	r7, #60	@ 0x3c
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
	...

08009c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b095      	sub	sp, #84	@ 0x54
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5c:	e853 3f00 	ldrex	r3, [r3]
 8009c60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c7a:	e841 2300 	strex	r3, r2, [r1]
 8009c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1e6      	bne.n	8009c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c96:	69fa      	ldr	r2, [r7, #28]
 8009c98:	4b1e      	ldr	r3, [pc, #120]	@ (8009d14 <UART_EndRxTransfer+0xc8>)
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e5      	bne.n	8009c86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d118      	bne.n	8009cf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	e853 3f00 	ldrex	r3, [r3]
 8009cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f023 0310 	bic.w	r3, r3, #16
 8009cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ce0:	61bb      	str	r3, [r7, #24]
 8009ce2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	6979      	ldr	r1, [r7, #20]
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	613b      	str	r3, [r7, #16]
   return(result);
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e6      	bne.n	8009cc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d08:	bf00      	nop
 8009d0a:	3754      	adds	r7, #84	@ 0x54
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	effffffe 	.word	0xeffffffe

08009d18 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b09c      	sub	sp, #112	@ 0x70
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d24:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d2e:	d071      	beq.n	8009e14 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e6      	bne.n	8009d38 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7c:	f023 0301 	bic.w	r3, r3, #1
 8009d80:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3308      	adds	r3, #8
 8009d88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e5      	bne.n	8009d6a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	623b      	str	r3, [r7, #32]
   return(result);
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009db4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e5      	bne.n	8009d9e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d118      	bne.n	8009e14 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0310 	bic.w	r3, r3, #16
 8009df6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e00:	61fb      	str	r3, [r7, #28]
 8009e02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	69b9      	ldr	r1, [r7, #24]
 8009e06:	69fa      	ldr	r2, [r7, #28]
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e6      	bne.n	8009de2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e16:	2200      	movs	r2, #0
 8009e18:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d107      	bne.n	8009e32 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e2c:	f7fe fdf4 	bl	8008a18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e30:	e002      	b.n	8009e38 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009e32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e34:	f7f7 f88a 	bl	8000f4c <HAL_UART_RxCpltCallback>
}
 8009e38:	bf00      	nop
 8009e3a:	3770      	adds	r7, #112	@ 0x70
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d109      	bne.n	8009e70 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e62:	085b      	lsrs	r3, r3, #1
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	4619      	mov	r1, r3
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f7fe fdd5 	bl	8008a18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e6e:	e002      	b.n	8009e76 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7fe fdbd 	bl	80089f0 <HAL_UART_RxHalfCpltCallback>
}
 8009e76:	bf00      	nop
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b086      	sub	sp, #24
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e92:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ea6:	2b80      	cmp	r3, #128	@ 0x80
 8009ea8:	d109      	bne.n	8009ebe <UART_DMAError+0x40>
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	2b21      	cmp	r3, #33	@ 0x21
 8009eae:	d106      	bne.n	8009ebe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009eb8:	6978      	ldr	r0, [r7, #20]
 8009eba:	f7ff fe85 	bl	8009bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec8:	2b40      	cmp	r3, #64	@ 0x40
 8009eca:	d109      	bne.n	8009ee0 <UART_DMAError+0x62>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b22      	cmp	r3, #34	@ 0x22
 8009ed0:	d106      	bne.n	8009ee0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009eda:	6978      	ldr	r0, [r7, #20]
 8009edc:	f7ff feb6 	bl	8009c4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee6:	f043 0210 	orr.w	r2, r3, #16
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ef0:	6978      	ldr	r0, [r7, #20]
 8009ef2:	f7fe fd87 	bl	8008a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ef6:	bf00      	nop
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d101      	bne.n	8009f14 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e027      	b.n	8009f64 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2224      	movs	r2, #36	@ 0x24
 8009f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 0201 	bic.w	r2, r2, #1
 8009f3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2220      	movs	r2, #32
 8009f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d101      	bne.n	8009f88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f84:	2302      	movs	r3, #2
 8009f86:	e02d      	b.n	8009fe4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2224      	movs	r2, #36	@ 0x24
 8009f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0201 	bic.w	r2, r2, #1
 8009fae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f84f 	bl	800a068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d101      	bne.n	800a004 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a000:	2302      	movs	r3, #2
 800a002:	e02d      	b.n	800a060 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2224      	movs	r2, #36	@ 0x24
 800a010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0201 	bic.w	r2, r2, #1
 800a02a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f811 	bl	800a068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a074:	2b00      	cmp	r3, #0
 800a076:	d108      	bne.n	800a08a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a088:	e031      	b.n	800a0ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a08a:	2310      	movs	r3, #16
 800a08c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a08e:	2310      	movs	r3, #16
 800a090:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	0e5b      	lsrs	r3, r3, #25
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	f003 0307 	and.w	r3, r3, #7
 800a0a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	0f5b      	lsrs	r3, r3, #29
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	f003 0307 	and.w	r3, r3, #7
 800a0b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	7b3a      	ldrb	r2, [r7, #12]
 800a0b6:	4911      	ldr	r1, [pc, #68]	@ (800a0fc <UARTEx_SetNbDataToProcess+0x94>)
 800a0b8:	5c8a      	ldrb	r2, [r1, r2]
 800a0ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0be:	7b3a      	ldrb	r2, [r7, #12]
 800a0c0:	490f      	ldr	r1, [pc, #60]	@ (800a100 <UARTEx_SetNbDataToProcess+0x98>)
 800a0c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	7b7a      	ldrb	r2, [r7, #13]
 800a0d4:	4909      	ldr	r1, [pc, #36]	@ (800a0fc <UARTEx_SetNbDataToProcess+0x94>)
 800a0d6:	5c8a      	ldrb	r2, [r1, r2]
 800a0d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0dc:	7b7a      	ldrb	r2, [r7, #13]
 800a0de:	4908      	ldr	r1, [pc, #32]	@ (800a100 <UARTEx_SetNbDataToProcess+0x98>)
 800a0e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0ee:	bf00      	nop
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	0800cd5c 	.word	0x0800cd5c
 800a100:	0800cd64 	.word	0x0800cd64

0800a104 <atof>:
 800a104:	2100      	movs	r1, #0
 800a106:	f000 be75 	b.w	800adf4 <strtod>

0800a10a <_calloc_r>:
 800a10a:	b570      	push	{r4, r5, r6, lr}
 800a10c:	fba1 5402 	umull	r5, r4, r1, r2
 800a110:	b93c      	cbnz	r4, 800a122 <_calloc_r+0x18>
 800a112:	4629      	mov	r1, r5
 800a114:	f000 f830 	bl	800a178 <_malloc_r>
 800a118:	4606      	mov	r6, r0
 800a11a:	b928      	cbnz	r0, 800a128 <_calloc_r+0x1e>
 800a11c:	2600      	movs	r6, #0
 800a11e:	4630      	mov	r0, r6
 800a120:	bd70      	pop	{r4, r5, r6, pc}
 800a122:	220c      	movs	r2, #12
 800a124:	6002      	str	r2, [r0, #0]
 800a126:	e7f9      	b.n	800a11c <_calloc_r+0x12>
 800a128:	462a      	mov	r2, r5
 800a12a:	4621      	mov	r1, r4
 800a12c:	f000 ff73 	bl	800b016 <memset>
 800a130:	e7f5      	b.n	800a11e <_calloc_r+0x14>
	...

0800a134 <sbrk_aligned>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	4e0f      	ldr	r6, [pc, #60]	@ (800a174 <sbrk_aligned+0x40>)
 800a138:	460c      	mov	r4, r1
 800a13a:	6831      	ldr	r1, [r6, #0]
 800a13c:	4605      	mov	r5, r0
 800a13e:	b911      	cbnz	r1, 800a146 <sbrk_aligned+0x12>
 800a140:	f001 f814 	bl	800b16c <_sbrk_r>
 800a144:	6030      	str	r0, [r6, #0]
 800a146:	4621      	mov	r1, r4
 800a148:	4628      	mov	r0, r5
 800a14a:	f001 f80f 	bl	800b16c <_sbrk_r>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d103      	bne.n	800a15a <sbrk_aligned+0x26>
 800a152:	f04f 34ff 	mov.w	r4, #4294967295
 800a156:	4620      	mov	r0, r4
 800a158:	bd70      	pop	{r4, r5, r6, pc}
 800a15a:	1cc4      	adds	r4, r0, #3
 800a15c:	f024 0403 	bic.w	r4, r4, #3
 800a160:	42a0      	cmp	r0, r4
 800a162:	d0f8      	beq.n	800a156 <sbrk_aligned+0x22>
 800a164:	1a21      	subs	r1, r4, r0
 800a166:	4628      	mov	r0, r5
 800a168:	f001 f800 	bl	800b16c <_sbrk_r>
 800a16c:	3001      	adds	r0, #1
 800a16e:	d1f2      	bne.n	800a156 <sbrk_aligned+0x22>
 800a170:	e7ef      	b.n	800a152 <sbrk_aligned+0x1e>
 800a172:	bf00      	nop
 800a174:	24000548 	.word	0x24000548

0800a178 <_malloc_r>:
 800a178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a17c:	1ccd      	adds	r5, r1, #3
 800a17e:	f025 0503 	bic.w	r5, r5, #3
 800a182:	3508      	adds	r5, #8
 800a184:	2d0c      	cmp	r5, #12
 800a186:	bf38      	it	cc
 800a188:	250c      	movcc	r5, #12
 800a18a:	2d00      	cmp	r5, #0
 800a18c:	4606      	mov	r6, r0
 800a18e:	db01      	blt.n	800a194 <_malloc_r+0x1c>
 800a190:	42a9      	cmp	r1, r5
 800a192:	d904      	bls.n	800a19e <_malloc_r+0x26>
 800a194:	230c      	movs	r3, #12
 800a196:	6033      	str	r3, [r6, #0]
 800a198:	2000      	movs	r0, #0
 800a19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a274 <_malloc_r+0xfc>
 800a1a2:	f000 f869 	bl	800a278 <__malloc_lock>
 800a1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1aa:	461c      	mov	r4, r3
 800a1ac:	bb44      	cbnz	r4, 800a200 <_malloc_r+0x88>
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f7ff ffbf 	bl	800a134 <sbrk_aligned>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	d158      	bne.n	800a26e <_malloc_r+0xf6>
 800a1bc:	f8d8 4000 	ldr.w	r4, [r8]
 800a1c0:	4627      	mov	r7, r4
 800a1c2:	2f00      	cmp	r7, #0
 800a1c4:	d143      	bne.n	800a24e <_malloc_r+0xd6>
 800a1c6:	2c00      	cmp	r4, #0
 800a1c8:	d04b      	beq.n	800a262 <_malloc_r+0xea>
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	eb04 0903 	add.w	r9, r4, r3
 800a1d4:	f000 ffca 	bl	800b16c <_sbrk_r>
 800a1d8:	4581      	cmp	r9, r0
 800a1da:	d142      	bne.n	800a262 <_malloc_r+0xea>
 800a1dc:	6821      	ldr	r1, [r4, #0]
 800a1de:	1a6d      	subs	r5, r5, r1
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7ff ffa6 	bl	800a134 <sbrk_aligned>
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	d03a      	beq.n	800a262 <_malloc_r+0xea>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	442b      	add	r3, r5
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	bb62      	cbnz	r2, 800a254 <_malloc_r+0xdc>
 800a1fa:	f8c8 7000 	str.w	r7, [r8]
 800a1fe:	e00f      	b.n	800a220 <_malloc_r+0xa8>
 800a200:	6822      	ldr	r2, [r4, #0]
 800a202:	1b52      	subs	r2, r2, r5
 800a204:	d420      	bmi.n	800a248 <_malloc_r+0xd0>
 800a206:	2a0b      	cmp	r2, #11
 800a208:	d917      	bls.n	800a23a <_malloc_r+0xc2>
 800a20a:	1961      	adds	r1, r4, r5
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	6025      	str	r5, [r4, #0]
 800a210:	bf18      	it	ne
 800a212:	6059      	strne	r1, [r3, #4]
 800a214:	6863      	ldr	r3, [r4, #4]
 800a216:	bf08      	it	eq
 800a218:	f8c8 1000 	streq.w	r1, [r8]
 800a21c:	5162      	str	r2, [r4, r5]
 800a21e:	604b      	str	r3, [r1, #4]
 800a220:	4630      	mov	r0, r6
 800a222:	f000 f82f 	bl	800a284 <__malloc_unlock>
 800a226:	f104 000b 	add.w	r0, r4, #11
 800a22a:	1d23      	adds	r3, r4, #4
 800a22c:	f020 0007 	bic.w	r0, r0, #7
 800a230:	1ac2      	subs	r2, r0, r3
 800a232:	bf1c      	itt	ne
 800a234:	1a1b      	subne	r3, r3, r0
 800a236:	50a3      	strne	r3, [r4, r2]
 800a238:	e7af      	b.n	800a19a <_malloc_r+0x22>
 800a23a:	6862      	ldr	r2, [r4, #4]
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	bf0c      	ite	eq
 800a240:	f8c8 2000 	streq.w	r2, [r8]
 800a244:	605a      	strne	r2, [r3, #4]
 800a246:	e7eb      	b.n	800a220 <_malloc_r+0xa8>
 800a248:	4623      	mov	r3, r4
 800a24a:	6864      	ldr	r4, [r4, #4]
 800a24c:	e7ae      	b.n	800a1ac <_malloc_r+0x34>
 800a24e:	463c      	mov	r4, r7
 800a250:	687f      	ldr	r7, [r7, #4]
 800a252:	e7b6      	b.n	800a1c2 <_malloc_r+0x4a>
 800a254:	461a      	mov	r2, r3
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	42a3      	cmp	r3, r4
 800a25a:	d1fb      	bne.n	800a254 <_malloc_r+0xdc>
 800a25c:	2300      	movs	r3, #0
 800a25e:	6053      	str	r3, [r2, #4]
 800a260:	e7de      	b.n	800a220 <_malloc_r+0xa8>
 800a262:	230c      	movs	r3, #12
 800a264:	6033      	str	r3, [r6, #0]
 800a266:	4630      	mov	r0, r6
 800a268:	f000 f80c 	bl	800a284 <__malloc_unlock>
 800a26c:	e794      	b.n	800a198 <_malloc_r+0x20>
 800a26e:	6005      	str	r5, [r0, #0]
 800a270:	e7d6      	b.n	800a220 <_malloc_r+0xa8>
 800a272:	bf00      	nop
 800a274:	2400054c 	.word	0x2400054c

0800a278 <__malloc_lock>:
 800a278:	4801      	ldr	r0, [pc, #4]	@ (800a280 <__malloc_lock+0x8>)
 800a27a:	f000 bfc4 	b.w	800b206 <__retarget_lock_acquire_recursive>
 800a27e:	bf00      	nop
 800a280:	24000690 	.word	0x24000690

0800a284 <__malloc_unlock>:
 800a284:	4801      	ldr	r0, [pc, #4]	@ (800a28c <__malloc_unlock+0x8>)
 800a286:	f000 bfbf 	b.w	800b208 <__retarget_lock_release_recursive>
 800a28a:	bf00      	nop
 800a28c:	24000690 	.word	0x24000690

0800a290 <sulp>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	4604      	mov	r4, r0
 800a294:	460d      	mov	r5, r1
 800a296:	4616      	mov	r6, r2
 800a298:	ec45 4b10 	vmov	d0, r4, r5
 800a29c:	f001 fefc 	bl	800c098 <__ulp>
 800a2a0:	b17e      	cbz	r6, 800a2c2 <sulp+0x32>
 800a2a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dd09      	ble.n	800a2c2 <sulp+0x32>
 800a2ae:	051b      	lsls	r3, r3, #20
 800a2b0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a2ba:	ec41 0b17 	vmov	d7, r0, r1
 800a2be:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a2c2:	bd70      	pop	{r4, r5, r6, pc}
 800a2c4:	0000      	movs	r0, r0
	...

0800a2c8 <_strtod_l>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	ed2d 8b0a 	vpush	{d8-d12}
 800a2d0:	b097      	sub	sp, #92	@ 0x5c
 800a2d2:	4688      	mov	r8, r1
 800a2d4:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	9212      	str	r2, [sp, #72]	@ 0x48
 800a2da:	9005      	str	r0, [sp, #20]
 800a2dc:	f04f 0a00 	mov.w	sl, #0
 800a2e0:	f04f 0b00 	mov.w	fp, #0
 800a2e4:	460a      	mov	r2, r1
 800a2e6:	9211      	str	r2, [sp, #68]	@ 0x44
 800a2e8:	7811      	ldrb	r1, [r2, #0]
 800a2ea:	292b      	cmp	r1, #43	@ 0x2b
 800a2ec:	d04c      	beq.n	800a388 <_strtod_l+0xc0>
 800a2ee:	d839      	bhi.n	800a364 <_strtod_l+0x9c>
 800a2f0:	290d      	cmp	r1, #13
 800a2f2:	d833      	bhi.n	800a35c <_strtod_l+0x94>
 800a2f4:	2908      	cmp	r1, #8
 800a2f6:	d833      	bhi.n	800a360 <_strtod_l+0x98>
 800a2f8:	2900      	cmp	r1, #0
 800a2fa:	d03c      	beq.n	800a376 <_strtod_l+0xae>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	9208      	str	r2, [sp, #32]
 800a300:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a302:	782a      	ldrb	r2, [r5, #0]
 800a304:	2a30      	cmp	r2, #48	@ 0x30
 800a306:	f040 80b5 	bne.w	800a474 <_strtod_l+0x1ac>
 800a30a:	786a      	ldrb	r2, [r5, #1]
 800a30c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a310:	2a58      	cmp	r2, #88	@ 0x58
 800a312:	d170      	bne.n	800a3f6 <_strtod_l+0x12e>
 800a314:	9302      	str	r3, [sp, #8]
 800a316:	9b08      	ldr	r3, [sp, #32]
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	ab12      	add	r3, sp, #72	@ 0x48
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	4a8b      	ldr	r2, [pc, #556]	@ (800a54c <_strtod_l+0x284>)
 800a320:	9805      	ldr	r0, [sp, #20]
 800a322:	ab13      	add	r3, sp, #76	@ 0x4c
 800a324:	a911      	add	r1, sp, #68	@ 0x44
 800a326:	f001 f857 	bl	800b3d8 <__gethex>
 800a32a:	f010 060f 	ands.w	r6, r0, #15
 800a32e:	4604      	mov	r4, r0
 800a330:	d005      	beq.n	800a33e <_strtod_l+0x76>
 800a332:	2e06      	cmp	r6, #6
 800a334:	d12a      	bne.n	800a38c <_strtod_l+0xc4>
 800a336:	3501      	adds	r5, #1
 800a338:	2300      	movs	r3, #0
 800a33a:	9511      	str	r5, [sp, #68]	@ 0x44
 800a33c:	9308      	str	r3, [sp, #32]
 800a33e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a340:	2b00      	cmp	r3, #0
 800a342:	f040 852f 	bne.w	800ada4 <_strtod_l+0xadc>
 800a346:	9b08      	ldr	r3, [sp, #32]
 800a348:	ec4b ab10 	vmov	d0, sl, fp
 800a34c:	b1cb      	cbz	r3, 800a382 <_strtod_l+0xba>
 800a34e:	eeb1 0b40 	vneg.f64	d0, d0
 800a352:	b017      	add	sp, #92	@ 0x5c
 800a354:	ecbd 8b0a 	vpop	{d8-d12}
 800a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35c:	2920      	cmp	r1, #32
 800a35e:	d1cd      	bne.n	800a2fc <_strtod_l+0x34>
 800a360:	3201      	adds	r2, #1
 800a362:	e7c0      	b.n	800a2e6 <_strtod_l+0x1e>
 800a364:	292d      	cmp	r1, #45	@ 0x2d
 800a366:	d1c9      	bne.n	800a2fc <_strtod_l+0x34>
 800a368:	2101      	movs	r1, #1
 800a36a:	9108      	str	r1, [sp, #32]
 800a36c:	1c51      	adds	r1, r2, #1
 800a36e:	9111      	str	r1, [sp, #68]	@ 0x44
 800a370:	7852      	ldrb	r2, [r2, #1]
 800a372:	2a00      	cmp	r2, #0
 800a374:	d1c4      	bne.n	800a300 <_strtod_l+0x38>
 800a376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a378:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f040 850f 	bne.w	800ada0 <_strtod_l+0xad8>
 800a382:	ec4b ab10 	vmov	d0, sl, fp
 800a386:	e7e4      	b.n	800a352 <_strtod_l+0x8a>
 800a388:	2100      	movs	r1, #0
 800a38a:	e7ee      	b.n	800a36a <_strtod_l+0xa2>
 800a38c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a38e:	b13a      	cbz	r2, 800a3a0 <_strtod_l+0xd8>
 800a390:	2135      	movs	r1, #53	@ 0x35
 800a392:	a814      	add	r0, sp, #80	@ 0x50
 800a394:	f001 ff77 	bl	800c286 <__copybits>
 800a398:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a39a:	9805      	ldr	r0, [sp, #20]
 800a39c:	f001 fb48 	bl	800ba30 <_Bfree>
 800a3a0:	1e73      	subs	r3, r6, #1
 800a3a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	d806      	bhi.n	800a3b6 <_strtod_l+0xee>
 800a3a8:	e8df f003 	tbb	[pc, r3]
 800a3ac:	201d0314 	.word	0x201d0314
 800a3b0:	14          	.byte	0x14
 800a3b1:	00          	.byte	0x00
 800a3b2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a3b6:	05e3      	lsls	r3, r4, #23
 800a3b8:	bf48      	it	mi
 800a3ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a3be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3c2:	0d1b      	lsrs	r3, r3, #20
 800a3c4:	051b      	lsls	r3, r3, #20
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1b9      	bne.n	800a33e <_strtod_l+0x76>
 800a3ca:	f000 fef1 	bl	800b1b0 <__errno>
 800a3ce:	2322      	movs	r3, #34	@ 0x22
 800a3d0:	6003      	str	r3, [r0, #0]
 800a3d2:	e7b4      	b.n	800a33e <_strtod_l+0x76>
 800a3d4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a3d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a3dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a3e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a3e4:	e7e7      	b.n	800a3b6 <_strtod_l+0xee>
 800a3e6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800a554 <_strtod_l+0x28c>
 800a3ea:	e7e4      	b.n	800a3b6 <_strtod_l+0xee>
 800a3ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a3f0:	f04f 3aff 	mov.w	sl, #4294967295
 800a3f4:	e7df      	b.n	800a3b6 <_strtod_l+0xee>
 800a3f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	9211      	str	r2, [sp, #68]	@ 0x44
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	2b30      	cmp	r3, #48	@ 0x30
 800a400:	d0f9      	beq.n	800a3f6 <_strtod_l+0x12e>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d09b      	beq.n	800a33e <_strtod_l+0x76>
 800a406:	2301      	movs	r3, #1
 800a408:	2600      	movs	r6, #0
 800a40a:	9307      	str	r3, [sp, #28]
 800a40c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a40e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a410:	46b1      	mov	r9, r6
 800a412:	4635      	mov	r5, r6
 800a414:	220a      	movs	r2, #10
 800a416:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a418:	7804      	ldrb	r4, [r0, #0]
 800a41a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a41e:	b2d9      	uxtb	r1, r3
 800a420:	2909      	cmp	r1, #9
 800a422:	d929      	bls.n	800a478 <_strtod_l+0x1b0>
 800a424:	494a      	ldr	r1, [pc, #296]	@ (800a550 <_strtod_l+0x288>)
 800a426:	2201      	movs	r2, #1
 800a428:	f000 fdfd 	bl	800b026 <strncmp>
 800a42c:	b378      	cbz	r0, 800a48e <_strtod_l+0x1c6>
 800a42e:	2000      	movs	r0, #0
 800a430:	4622      	mov	r2, r4
 800a432:	462b      	mov	r3, r5
 800a434:	4607      	mov	r7, r0
 800a436:	9006      	str	r0, [sp, #24]
 800a438:	2a65      	cmp	r2, #101	@ 0x65
 800a43a:	d001      	beq.n	800a440 <_strtod_l+0x178>
 800a43c:	2a45      	cmp	r2, #69	@ 0x45
 800a43e:	d117      	bne.n	800a470 <_strtod_l+0x1a8>
 800a440:	b91b      	cbnz	r3, 800a44a <_strtod_l+0x182>
 800a442:	9b07      	ldr	r3, [sp, #28]
 800a444:	4303      	orrs	r3, r0
 800a446:	d096      	beq.n	800a376 <_strtod_l+0xae>
 800a448:	2300      	movs	r3, #0
 800a44a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a44e:	f108 0201 	add.w	r2, r8, #1
 800a452:	9211      	str	r2, [sp, #68]	@ 0x44
 800a454:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a458:	2a2b      	cmp	r2, #43	@ 0x2b
 800a45a:	d06b      	beq.n	800a534 <_strtod_l+0x26c>
 800a45c:	2a2d      	cmp	r2, #45	@ 0x2d
 800a45e:	d071      	beq.n	800a544 <_strtod_l+0x27c>
 800a460:	f04f 0e00 	mov.w	lr, #0
 800a464:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a468:	2c09      	cmp	r4, #9
 800a46a:	d979      	bls.n	800a560 <_strtod_l+0x298>
 800a46c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a470:	2400      	movs	r4, #0
 800a472:	e094      	b.n	800a59e <_strtod_l+0x2d6>
 800a474:	2300      	movs	r3, #0
 800a476:	e7c7      	b.n	800a408 <_strtod_l+0x140>
 800a478:	2d08      	cmp	r5, #8
 800a47a:	f100 0001 	add.w	r0, r0, #1
 800a47e:	bfd4      	ite	le
 800a480:	fb02 3909 	mlale	r9, r2, r9, r3
 800a484:	fb02 3606 	mlagt	r6, r2, r6, r3
 800a488:	3501      	adds	r5, #1
 800a48a:	9011      	str	r0, [sp, #68]	@ 0x44
 800a48c:	e7c3      	b.n	800a416 <_strtod_l+0x14e>
 800a48e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	9211      	str	r2, [sp, #68]	@ 0x44
 800a494:	785a      	ldrb	r2, [r3, #1]
 800a496:	b375      	cbz	r5, 800a4f6 <_strtod_l+0x22e>
 800a498:	4607      	mov	r7, r0
 800a49a:	462b      	mov	r3, r5
 800a49c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a4a0:	2909      	cmp	r1, #9
 800a4a2:	d913      	bls.n	800a4cc <_strtod_l+0x204>
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	9106      	str	r1, [sp, #24]
 800a4a8:	e7c6      	b.n	800a438 <_strtod_l+0x170>
 800a4aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	9211      	str	r2, [sp, #68]	@ 0x44
 800a4b0:	785a      	ldrb	r2, [r3, #1]
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	2a30      	cmp	r2, #48	@ 0x30
 800a4b6:	d0f8      	beq.n	800a4aa <_strtod_l+0x1e2>
 800a4b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	f200 8476 	bhi.w	800adae <_strtod_l+0xae6>
 800a4c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	3a30      	subs	r2, #48	@ 0x30
 800a4ce:	f100 0101 	add.w	r1, r0, #1
 800a4d2:	d023      	beq.n	800a51c <_strtod_l+0x254>
 800a4d4:	440f      	add	r7, r1
 800a4d6:	eb00 0c03 	add.w	ip, r0, r3
 800a4da:	4619      	mov	r1, r3
 800a4dc:	240a      	movs	r4, #10
 800a4de:	4561      	cmp	r1, ip
 800a4e0:	d10b      	bne.n	800a4fa <_strtod_l+0x232>
 800a4e2:	1c5c      	adds	r4, r3, #1
 800a4e4:	4403      	add	r3, r0
 800a4e6:	2b08      	cmp	r3, #8
 800a4e8:	4404      	add	r4, r0
 800a4ea:	dc11      	bgt.n	800a510 <_strtod_l+0x248>
 800a4ec:	230a      	movs	r3, #10
 800a4ee:	fb03 2909 	mla	r9, r3, r9, r2
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	e013      	b.n	800a51e <_strtod_l+0x256>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	e7dc      	b.n	800a4b4 <_strtod_l+0x1ec>
 800a4fa:	2908      	cmp	r1, #8
 800a4fc:	f101 0101 	add.w	r1, r1, #1
 800a500:	dc02      	bgt.n	800a508 <_strtod_l+0x240>
 800a502:	fb04 f909 	mul.w	r9, r4, r9
 800a506:	e7ea      	b.n	800a4de <_strtod_l+0x216>
 800a508:	2910      	cmp	r1, #16
 800a50a:	bfd8      	it	le
 800a50c:	4366      	mulle	r6, r4
 800a50e:	e7e6      	b.n	800a4de <_strtod_l+0x216>
 800a510:	2b0f      	cmp	r3, #15
 800a512:	dcee      	bgt.n	800a4f2 <_strtod_l+0x22a>
 800a514:	230a      	movs	r3, #10
 800a516:	fb03 2606 	mla	r6, r3, r6, r2
 800a51a:	e7ea      	b.n	800a4f2 <_strtod_l+0x22a>
 800a51c:	461c      	mov	r4, r3
 800a51e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	9211      	str	r2, [sp, #68]	@ 0x44
 800a524:	785a      	ldrb	r2, [r3, #1]
 800a526:	4608      	mov	r0, r1
 800a528:	4623      	mov	r3, r4
 800a52a:	e7b7      	b.n	800a49c <_strtod_l+0x1d4>
 800a52c:	2301      	movs	r3, #1
 800a52e:	2700      	movs	r7, #0
 800a530:	9306      	str	r3, [sp, #24]
 800a532:	e786      	b.n	800a442 <_strtod_l+0x17a>
 800a534:	f04f 0e00 	mov.w	lr, #0
 800a538:	f108 0202 	add.w	r2, r8, #2
 800a53c:	9211      	str	r2, [sp, #68]	@ 0x44
 800a53e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a542:	e78f      	b.n	800a464 <_strtod_l+0x19c>
 800a544:	f04f 0e01 	mov.w	lr, #1
 800a548:	e7f6      	b.n	800a538 <_strtod_l+0x270>
 800a54a:	bf00      	nop
 800a54c:	0800cd90 	.word	0x0800cd90
 800a550:	0800cd6c 	.word	0x0800cd6c
 800a554:	7ff00000 	.word	0x7ff00000
 800a558:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a55a:	1c54      	adds	r4, r2, #1
 800a55c:	9411      	str	r4, [sp, #68]	@ 0x44
 800a55e:	7852      	ldrb	r2, [r2, #1]
 800a560:	2a30      	cmp	r2, #48	@ 0x30
 800a562:	d0f9      	beq.n	800a558 <_strtod_l+0x290>
 800a564:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a568:	2c08      	cmp	r4, #8
 800a56a:	d881      	bhi.n	800a470 <_strtod_l+0x1a8>
 800a56c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a570:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a572:	9209      	str	r2, [sp, #36]	@ 0x24
 800a574:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a576:	1c51      	adds	r1, r2, #1
 800a578:	9111      	str	r1, [sp, #68]	@ 0x44
 800a57a:	7852      	ldrb	r2, [r2, #1]
 800a57c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a580:	2c09      	cmp	r4, #9
 800a582:	d938      	bls.n	800a5f6 <_strtod_l+0x32e>
 800a584:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a586:	1b0c      	subs	r4, r1, r4
 800a588:	2c08      	cmp	r4, #8
 800a58a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a58e:	dc02      	bgt.n	800a596 <_strtod_l+0x2ce>
 800a590:	4564      	cmp	r4, ip
 800a592:	bfa8      	it	ge
 800a594:	4664      	movge	r4, ip
 800a596:	f1be 0f00 	cmp.w	lr, #0
 800a59a:	d000      	beq.n	800a59e <_strtod_l+0x2d6>
 800a59c:	4264      	negs	r4, r4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d14e      	bne.n	800a640 <_strtod_l+0x378>
 800a5a2:	9b07      	ldr	r3, [sp, #28]
 800a5a4:	4318      	orrs	r0, r3
 800a5a6:	f47f aeca 	bne.w	800a33e <_strtod_l+0x76>
 800a5aa:	9b06      	ldr	r3, [sp, #24]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f47f aee2 	bne.w	800a376 <_strtod_l+0xae>
 800a5b2:	2a69      	cmp	r2, #105	@ 0x69
 800a5b4:	d027      	beq.n	800a606 <_strtod_l+0x33e>
 800a5b6:	dc24      	bgt.n	800a602 <_strtod_l+0x33a>
 800a5b8:	2a49      	cmp	r2, #73	@ 0x49
 800a5ba:	d024      	beq.n	800a606 <_strtod_l+0x33e>
 800a5bc:	2a4e      	cmp	r2, #78	@ 0x4e
 800a5be:	f47f aeda 	bne.w	800a376 <_strtod_l+0xae>
 800a5c2:	4997      	ldr	r1, [pc, #604]	@ (800a820 <_strtod_l+0x558>)
 800a5c4:	a811      	add	r0, sp, #68	@ 0x44
 800a5c6:	f001 f929 	bl	800b81c <__match>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	f43f aed3 	beq.w	800a376 <_strtod_l+0xae>
 800a5d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b28      	cmp	r3, #40	@ 0x28
 800a5d6:	d12d      	bne.n	800a634 <_strtod_l+0x36c>
 800a5d8:	4992      	ldr	r1, [pc, #584]	@ (800a824 <_strtod_l+0x55c>)
 800a5da:	aa14      	add	r2, sp, #80	@ 0x50
 800a5dc:	a811      	add	r0, sp, #68	@ 0x44
 800a5de:	f001 f931 	bl	800b844 <__hexnan>
 800a5e2:	2805      	cmp	r0, #5
 800a5e4:	d126      	bne.n	800a634 <_strtod_l+0x36c>
 800a5e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a5e8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a5ec:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a5f0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a5f4:	e6a3      	b.n	800a33e <_strtod_l+0x76>
 800a5f6:	240a      	movs	r4, #10
 800a5f8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a5fc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a600:	e7b8      	b.n	800a574 <_strtod_l+0x2ac>
 800a602:	2a6e      	cmp	r2, #110	@ 0x6e
 800a604:	e7db      	b.n	800a5be <_strtod_l+0x2f6>
 800a606:	4988      	ldr	r1, [pc, #544]	@ (800a828 <_strtod_l+0x560>)
 800a608:	a811      	add	r0, sp, #68	@ 0x44
 800a60a:	f001 f907 	bl	800b81c <__match>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f43f aeb1 	beq.w	800a376 <_strtod_l+0xae>
 800a614:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a616:	4985      	ldr	r1, [pc, #532]	@ (800a82c <_strtod_l+0x564>)
 800a618:	3b01      	subs	r3, #1
 800a61a:	a811      	add	r0, sp, #68	@ 0x44
 800a61c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a61e:	f001 f8fd 	bl	800b81c <__match>
 800a622:	b910      	cbnz	r0, 800a62a <_strtod_l+0x362>
 800a624:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a626:	3301      	adds	r3, #1
 800a628:	9311      	str	r3, [sp, #68]	@ 0x44
 800a62a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800a840 <_strtod_l+0x578>
 800a62e:	f04f 0a00 	mov.w	sl, #0
 800a632:	e684      	b.n	800a33e <_strtod_l+0x76>
 800a634:	487e      	ldr	r0, [pc, #504]	@ (800a830 <_strtod_l+0x568>)
 800a636:	f000 fdf7 	bl	800b228 <nan>
 800a63a:	ec5b ab10 	vmov	sl, fp, d0
 800a63e:	e67e      	b.n	800a33e <_strtod_l+0x76>
 800a640:	ee07 9a90 	vmov	s15, r9
 800a644:	1be2      	subs	r2, r4, r7
 800a646:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a64a:	2d00      	cmp	r5, #0
 800a64c:	bf08      	it	eq
 800a64e:	461d      	moveq	r5, r3
 800a650:	2b10      	cmp	r3, #16
 800a652:	9209      	str	r2, [sp, #36]	@ 0x24
 800a654:	461a      	mov	r2, r3
 800a656:	bfa8      	it	ge
 800a658:	2210      	movge	r2, #16
 800a65a:	2b09      	cmp	r3, #9
 800a65c:	ec5b ab17 	vmov	sl, fp, d7
 800a660:	dc15      	bgt.n	800a68e <_strtod_l+0x3c6>
 800a662:	1be1      	subs	r1, r4, r7
 800a664:	2900      	cmp	r1, #0
 800a666:	f43f ae6a 	beq.w	800a33e <_strtod_l+0x76>
 800a66a:	eba4 0107 	sub.w	r1, r4, r7
 800a66e:	dd72      	ble.n	800a756 <_strtod_l+0x48e>
 800a670:	2916      	cmp	r1, #22
 800a672:	dc59      	bgt.n	800a728 <_strtod_l+0x460>
 800a674:	4b6f      	ldr	r3, [pc, #444]	@ (800a834 <_strtod_l+0x56c>)
 800a676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a67c:	ed93 7b00 	vldr	d7, [r3]
 800a680:	ec4b ab16 	vmov	d6, sl, fp
 800a684:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a688:	ec5b ab17 	vmov	sl, fp, d7
 800a68c:	e657      	b.n	800a33e <_strtod_l+0x76>
 800a68e:	4969      	ldr	r1, [pc, #420]	@ (800a834 <_strtod_l+0x56c>)
 800a690:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a694:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a698:	ee06 6a90 	vmov	s13, r6
 800a69c:	2b0f      	cmp	r3, #15
 800a69e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a6a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a6a6:	ec5b ab16 	vmov	sl, fp, d6
 800a6aa:	ddda      	ble.n	800a662 <_strtod_l+0x39a>
 800a6ac:	1a9a      	subs	r2, r3, r2
 800a6ae:	1be1      	subs	r1, r4, r7
 800a6b0:	440a      	add	r2, r1
 800a6b2:	2a00      	cmp	r2, #0
 800a6b4:	f340 8094 	ble.w	800a7e0 <_strtod_l+0x518>
 800a6b8:	f012 000f 	ands.w	r0, r2, #15
 800a6bc:	d00a      	beq.n	800a6d4 <_strtod_l+0x40c>
 800a6be:	495d      	ldr	r1, [pc, #372]	@ (800a834 <_strtod_l+0x56c>)
 800a6c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a6c4:	ed91 7b00 	vldr	d7, [r1]
 800a6c8:	ec4b ab16 	vmov	d6, sl, fp
 800a6cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a6d0:	ec5b ab17 	vmov	sl, fp, d7
 800a6d4:	f032 020f 	bics.w	r2, r2, #15
 800a6d8:	d073      	beq.n	800a7c2 <_strtod_l+0x4fa>
 800a6da:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a6de:	dd47      	ble.n	800a770 <_strtod_l+0x4a8>
 800a6e0:	2400      	movs	r4, #0
 800a6e2:	4625      	mov	r5, r4
 800a6e4:	9407      	str	r4, [sp, #28]
 800a6e6:	4626      	mov	r6, r4
 800a6e8:	9a05      	ldr	r2, [sp, #20]
 800a6ea:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a840 <_strtod_l+0x578>
 800a6ee:	2322      	movs	r3, #34	@ 0x22
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	f04f 0a00 	mov.w	sl, #0
 800a6f6:	9b07      	ldr	r3, [sp, #28]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f43f ae20 	beq.w	800a33e <_strtod_l+0x76>
 800a6fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a700:	9805      	ldr	r0, [sp, #20]
 800a702:	f001 f995 	bl	800ba30 <_Bfree>
 800a706:	9805      	ldr	r0, [sp, #20]
 800a708:	4631      	mov	r1, r6
 800a70a:	f001 f991 	bl	800ba30 <_Bfree>
 800a70e:	9805      	ldr	r0, [sp, #20]
 800a710:	4629      	mov	r1, r5
 800a712:	f001 f98d 	bl	800ba30 <_Bfree>
 800a716:	9907      	ldr	r1, [sp, #28]
 800a718:	9805      	ldr	r0, [sp, #20]
 800a71a:	f001 f989 	bl	800ba30 <_Bfree>
 800a71e:	9805      	ldr	r0, [sp, #20]
 800a720:	4621      	mov	r1, r4
 800a722:	f001 f985 	bl	800ba30 <_Bfree>
 800a726:	e60a      	b.n	800a33e <_strtod_l+0x76>
 800a728:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a72c:	1be0      	subs	r0, r4, r7
 800a72e:	4281      	cmp	r1, r0
 800a730:	dbbc      	blt.n	800a6ac <_strtod_l+0x3e4>
 800a732:	4a40      	ldr	r2, [pc, #256]	@ (800a834 <_strtod_l+0x56c>)
 800a734:	f1c3 030f 	rsb	r3, r3, #15
 800a738:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a73c:	ed91 7b00 	vldr	d7, [r1]
 800a740:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a742:	ec4b ab16 	vmov	d6, sl, fp
 800a746:	1acb      	subs	r3, r1, r3
 800a748:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a74c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a750:	ed92 6b00 	vldr	d6, [r2]
 800a754:	e796      	b.n	800a684 <_strtod_l+0x3bc>
 800a756:	3116      	adds	r1, #22
 800a758:	dba8      	blt.n	800a6ac <_strtod_l+0x3e4>
 800a75a:	4b36      	ldr	r3, [pc, #216]	@ (800a834 <_strtod_l+0x56c>)
 800a75c:	1b3c      	subs	r4, r7, r4
 800a75e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a762:	ed94 7b00 	vldr	d7, [r4]
 800a766:	ec4b ab16 	vmov	d6, sl, fp
 800a76a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a76e:	e78b      	b.n	800a688 <_strtod_l+0x3c0>
 800a770:	2000      	movs	r0, #0
 800a772:	ec4b ab17 	vmov	d7, sl, fp
 800a776:	4e30      	ldr	r6, [pc, #192]	@ (800a838 <_strtod_l+0x570>)
 800a778:	1112      	asrs	r2, r2, #4
 800a77a:	4601      	mov	r1, r0
 800a77c:	2a01      	cmp	r2, #1
 800a77e:	dc23      	bgt.n	800a7c8 <_strtod_l+0x500>
 800a780:	b108      	cbz	r0, 800a786 <_strtod_l+0x4be>
 800a782:	ec5b ab17 	vmov	sl, fp, d7
 800a786:	4a2c      	ldr	r2, [pc, #176]	@ (800a838 <_strtod_l+0x570>)
 800a788:	482c      	ldr	r0, [pc, #176]	@ (800a83c <_strtod_l+0x574>)
 800a78a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a78e:	ed92 7b00 	vldr	d7, [r2]
 800a792:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a796:	ec4b ab16 	vmov	d6, sl, fp
 800a79a:	4a29      	ldr	r2, [pc, #164]	@ (800a840 <_strtod_l+0x578>)
 800a79c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7a0:	ee17 1a90 	vmov	r1, s15
 800a7a4:	400a      	ands	r2, r1
 800a7a6:	4282      	cmp	r2, r0
 800a7a8:	ec5b ab17 	vmov	sl, fp, d7
 800a7ac:	d898      	bhi.n	800a6e0 <_strtod_l+0x418>
 800a7ae:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a7b2:	4282      	cmp	r2, r0
 800a7b4:	bf86      	itte	hi
 800a7b6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a844 <_strtod_l+0x57c>
 800a7ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800a7be:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	9206      	str	r2, [sp, #24]
 800a7c6:	e076      	b.n	800a8b6 <_strtod_l+0x5ee>
 800a7c8:	f012 0f01 	tst.w	r2, #1
 800a7cc:	d004      	beq.n	800a7d8 <_strtod_l+0x510>
 800a7ce:	ed96 6b00 	vldr	d6, [r6]
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7d8:	3101      	adds	r1, #1
 800a7da:	1052      	asrs	r2, r2, #1
 800a7dc:	3608      	adds	r6, #8
 800a7de:	e7cd      	b.n	800a77c <_strtod_l+0x4b4>
 800a7e0:	d0ef      	beq.n	800a7c2 <_strtod_l+0x4fa>
 800a7e2:	4252      	negs	r2, r2
 800a7e4:	f012 000f 	ands.w	r0, r2, #15
 800a7e8:	d00a      	beq.n	800a800 <_strtod_l+0x538>
 800a7ea:	4912      	ldr	r1, [pc, #72]	@ (800a834 <_strtod_l+0x56c>)
 800a7ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a7f0:	ed91 7b00 	vldr	d7, [r1]
 800a7f4:	ec4b ab16 	vmov	d6, sl, fp
 800a7f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a7fc:	ec5b ab17 	vmov	sl, fp, d7
 800a800:	1112      	asrs	r2, r2, #4
 800a802:	d0de      	beq.n	800a7c2 <_strtod_l+0x4fa>
 800a804:	2a1f      	cmp	r2, #31
 800a806:	dd1f      	ble.n	800a848 <_strtod_l+0x580>
 800a808:	2400      	movs	r4, #0
 800a80a:	4625      	mov	r5, r4
 800a80c:	9407      	str	r4, [sp, #28]
 800a80e:	4626      	mov	r6, r4
 800a810:	9a05      	ldr	r2, [sp, #20]
 800a812:	2322      	movs	r3, #34	@ 0x22
 800a814:	f04f 0a00 	mov.w	sl, #0
 800a818:	f04f 0b00 	mov.w	fp, #0
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	e76a      	b.n	800a6f6 <_strtod_l+0x42e>
 800a820:	0800cd77 	.word	0x0800cd77
 800a824:	0800cd7c 	.word	0x0800cd7c
 800a828:	0800cd6e 	.word	0x0800cd6e
 800a82c:	0800cd71 	.word	0x0800cd71
 800a830:	0800ce84 	.word	0x0800ce84
 800a834:	0800cf88 	.word	0x0800cf88
 800a838:	0800cf60 	.word	0x0800cf60
 800a83c:	7ca00000 	.word	0x7ca00000
 800a840:	7ff00000 	.word	0x7ff00000
 800a844:	7fefffff 	.word	0x7fefffff
 800a848:	f012 0110 	ands.w	r1, r2, #16
 800a84c:	bf18      	it	ne
 800a84e:	216a      	movne	r1, #106	@ 0x6a
 800a850:	9106      	str	r1, [sp, #24]
 800a852:	ec4b ab17 	vmov	d7, sl, fp
 800a856:	49b0      	ldr	r1, [pc, #704]	@ (800ab18 <_strtod_l+0x850>)
 800a858:	2000      	movs	r0, #0
 800a85a:	07d6      	lsls	r6, r2, #31
 800a85c:	d504      	bpl.n	800a868 <_strtod_l+0x5a0>
 800a85e:	ed91 6b00 	vldr	d6, [r1]
 800a862:	2001      	movs	r0, #1
 800a864:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a868:	1052      	asrs	r2, r2, #1
 800a86a:	f101 0108 	add.w	r1, r1, #8
 800a86e:	d1f4      	bne.n	800a85a <_strtod_l+0x592>
 800a870:	b108      	cbz	r0, 800a876 <_strtod_l+0x5ae>
 800a872:	ec5b ab17 	vmov	sl, fp, d7
 800a876:	9a06      	ldr	r2, [sp, #24]
 800a878:	b1b2      	cbz	r2, 800a8a8 <_strtod_l+0x5e0>
 800a87a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800a87e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800a882:	2a00      	cmp	r2, #0
 800a884:	4658      	mov	r0, fp
 800a886:	dd0f      	ble.n	800a8a8 <_strtod_l+0x5e0>
 800a888:	2a1f      	cmp	r2, #31
 800a88a:	dd55      	ble.n	800a938 <_strtod_l+0x670>
 800a88c:	2a34      	cmp	r2, #52	@ 0x34
 800a88e:	bfde      	ittt	le
 800a890:	f04f 32ff 	movle.w	r2, #4294967295
 800a894:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800a898:	408a      	lslle	r2, r1
 800a89a:	f04f 0a00 	mov.w	sl, #0
 800a89e:	bfcc      	ite	gt
 800a8a0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a8a4:	ea02 0b00 	andle.w	fp, r2, r0
 800a8a8:	ec4b ab17 	vmov	d7, sl, fp
 800a8ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b4:	d0a8      	beq.n	800a808 <_strtod_l+0x540>
 800a8b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8b8:	9805      	ldr	r0, [sp, #20]
 800a8ba:	f8cd 9000 	str.w	r9, [sp]
 800a8be:	462a      	mov	r2, r5
 800a8c0:	f001 f91e 	bl	800bb00 <__s2b>
 800a8c4:	9007      	str	r0, [sp, #28]
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	f43f af0a 	beq.w	800a6e0 <_strtod_l+0x418>
 800a8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ce:	1b3f      	subs	r7, r7, r4
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	bfb4      	ite	lt
 800a8d4:	463b      	movlt	r3, r7
 800a8d6:	2300      	movge	r3, #0
 800a8d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8dc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800ab08 <_strtod_l+0x840>
 800a8e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8e4:	2400      	movs	r4, #0
 800a8e6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8e8:	4625      	mov	r5, r4
 800a8ea:	9b07      	ldr	r3, [sp, #28]
 800a8ec:	9805      	ldr	r0, [sp, #20]
 800a8ee:	6859      	ldr	r1, [r3, #4]
 800a8f0:	f001 f85e 	bl	800b9b0 <_Balloc>
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	f43f aef6 	beq.w	800a6e8 <_strtod_l+0x420>
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	691a      	ldr	r2, [r3, #16]
 800a900:	ec4b ab19 	vmov	d9, sl, fp
 800a904:	3202      	adds	r2, #2
 800a906:	f103 010c 	add.w	r1, r3, #12
 800a90a:	0092      	lsls	r2, r2, #2
 800a90c:	300c      	adds	r0, #12
 800a90e:	f000 fc7c 	bl	800b20a <memcpy>
 800a912:	eeb0 0b49 	vmov.f64	d0, d9
 800a916:	9805      	ldr	r0, [sp, #20]
 800a918:	aa14      	add	r2, sp, #80	@ 0x50
 800a91a:	a913      	add	r1, sp, #76	@ 0x4c
 800a91c:	f001 fc2c 	bl	800c178 <__d2b>
 800a920:	9012      	str	r0, [sp, #72]	@ 0x48
 800a922:	2800      	cmp	r0, #0
 800a924:	f43f aee0 	beq.w	800a6e8 <_strtod_l+0x420>
 800a928:	9805      	ldr	r0, [sp, #20]
 800a92a:	2101      	movs	r1, #1
 800a92c:	f001 f97e 	bl	800bc2c <__i2b>
 800a930:	4605      	mov	r5, r0
 800a932:	b940      	cbnz	r0, 800a946 <_strtod_l+0x67e>
 800a934:	2500      	movs	r5, #0
 800a936:	e6d7      	b.n	800a6e8 <_strtod_l+0x420>
 800a938:	f04f 31ff 	mov.w	r1, #4294967295
 800a93c:	fa01 f202 	lsl.w	r2, r1, r2
 800a940:	ea02 0a0a 	and.w	sl, r2, sl
 800a944:	e7b0      	b.n	800a8a8 <_strtod_l+0x5e0>
 800a946:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800a948:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a94a:	2f00      	cmp	r7, #0
 800a94c:	bfab      	itete	ge
 800a94e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800a950:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800a952:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800a956:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800a95a:	bfac      	ite	ge
 800a95c:	eb07 0903 	addge.w	r9, r7, r3
 800a960:	eba3 0807 	sublt.w	r8, r3, r7
 800a964:	9b06      	ldr	r3, [sp, #24]
 800a966:	1aff      	subs	r7, r7, r3
 800a968:	4417      	add	r7, r2
 800a96a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800a96e:	4a6b      	ldr	r2, [pc, #428]	@ (800ab1c <_strtod_l+0x854>)
 800a970:	3f01      	subs	r7, #1
 800a972:	4297      	cmp	r7, r2
 800a974:	da51      	bge.n	800aa1a <_strtod_l+0x752>
 800a976:	1bd1      	subs	r1, r2, r7
 800a978:	291f      	cmp	r1, #31
 800a97a:	eba3 0301 	sub.w	r3, r3, r1
 800a97e:	f04f 0201 	mov.w	r2, #1
 800a982:	dc3e      	bgt.n	800aa02 <_strtod_l+0x73a>
 800a984:	408a      	lsls	r2, r1
 800a986:	920c      	str	r2, [sp, #48]	@ 0x30
 800a988:	2200      	movs	r2, #0
 800a98a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a98c:	eb09 0703 	add.w	r7, r9, r3
 800a990:	4498      	add	r8, r3
 800a992:	9b06      	ldr	r3, [sp, #24]
 800a994:	45b9      	cmp	r9, r7
 800a996:	4498      	add	r8, r3
 800a998:	464b      	mov	r3, r9
 800a99a:	bfa8      	it	ge
 800a99c:	463b      	movge	r3, r7
 800a99e:	4543      	cmp	r3, r8
 800a9a0:	bfa8      	it	ge
 800a9a2:	4643      	movge	r3, r8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bfc2      	ittt	gt
 800a9a8:	1aff      	subgt	r7, r7, r3
 800a9aa:	eba8 0803 	subgt.w	r8, r8, r3
 800a9ae:	eba9 0903 	subgt.w	r9, r9, r3
 800a9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	dd16      	ble.n	800a9e6 <_strtod_l+0x71e>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	9805      	ldr	r0, [sp, #20]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f001 f9f5 	bl	800bdac <__pow5mult>
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d0b5      	beq.n	800a934 <_strtod_l+0x66c>
 800a9c8:	4601      	mov	r1, r0
 800a9ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a9cc:	9805      	ldr	r0, [sp, #20]
 800a9ce:	f001 f943 	bl	800bc58 <__multiply>
 800a9d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	f43f ae87 	beq.w	800a6e8 <_strtod_l+0x420>
 800a9da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a9dc:	9805      	ldr	r0, [sp, #20]
 800a9de:	f001 f827 	bl	800ba30 <_Bfree>
 800a9e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e4:	9312      	str	r3, [sp, #72]	@ 0x48
 800a9e6:	2f00      	cmp	r7, #0
 800a9e8:	dc1b      	bgt.n	800aa22 <_strtod_l+0x75a>
 800a9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	dd21      	ble.n	800aa34 <_strtod_l+0x76c>
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a9f4:	9805      	ldr	r0, [sp, #20]
 800a9f6:	f001 f9d9 	bl	800bdac <__pow5mult>
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	b9d0      	cbnz	r0, 800aa34 <_strtod_l+0x76c>
 800a9fe:	2600      	movs	r6, #0
 800aa00:	e672      	b.n	800a6e8 <_strtod_l+0x420>
 800aa02:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800aa06:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800aa0a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800aa0e:	37e2      	adds	r7, #226	@ 0xe2
 800aa10:	fa02 f107 	lsl.w	r1, r2, r7
 800aa14:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa16:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa18:	e7b8      	b.n	800a98c <_strtod_l+0x6c4>
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aa1e:	2201      	movs	r2, #1
 800aa20:	e7f9      	b.n	800aa16 <_strtod_l+0x74e>
 800aa22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aa24:	9805      	ldr	r0, [sp, #20]
 800aa26:	463a      	mov	r2, r7
 800aa28:	f001 fa1a 	bl	800be60 <__lshift>
 800aa2c:	9012      	str	r0, [sp, #72]	@ 0x48
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d1db      	bne.n	800a9ea <_strtod_l+0x722>
 800aa32:	e659      	b.n	800a6e8 <_strtod_l+0x420>
 800aa34:	f1b8 0f00 	cmp.w	r8, #0
 800aa38:	dd07      	ble.n	800aa4a <_strtod_l+0x782>
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	9805      	ldr	r0, [sp, #20]
 800aa3e:	4642      	mov	r2, r8
 800aa40:	f001 fa0e 	bl	800be60 <__lshift>
 800aa44:	4606      	mov	r6, r0
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d0d9      	beq.n	800a9fe <_strtod_l+0x736>
 800aa4a:	f1b9 0f00 	cmp.w	r9, #0
 800aa4e:	dd08      	ble.n	800aa62 <_strtod_l+0x79a>
 800aa50:	4629      	mov	r1, r5
 800aa52:	9805      	ldr	r0, [sp, #20]
 800aa54:	464a      	mov	r2, r9
 800aa56:	f001 fa03 	bl	800be60 <__lshift>
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f43f ae43 	beq.w	800a6e8 <_strtod_l+0x420>
 800aa62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aa64:	9805      	ldr	r0, [sp, #20]
 800aa66:	4632      	mov	r2, r6
 800aa68:	f001 fa82 	bl	800bf70 <__mdiff>
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	f43f ae3a 	beq.w	800a6e8 <_strtod_l+0x420>
 800aa74:	2300      	movs	r3, #0
 800aa76:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800aa7a:	60c3      	str	r3, [r0, #12]
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	f001 fa5b 	bl	800bf38 <__mcmp>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	da4e      	bge.n	800ab24 <_strtod_l+0x85c>
 800aa86:	ea58 080a 	orrs.w	r8, r8, sl
 800aa8a:	d174      	bne.n	800ab76 <_strtod_l+0x8ae>
 800aa8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d170      	bne.n	800ab76 <_strtod_l+0x8ae>
 800aa94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa98:	0d1b      	lsrs	r3, r3, #20
 800aa9a:	051b      	lsls	r3, r3, #20
 800aa9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aaa0:	d969      	bls.n	800ab76 <_strtod_l+0x8ae>
 800aaa2:	6963      	ldr	r3, [r4, #20]
 800aaa4:	b913      	cbnz	r3, 800aaac <_strtod_l+0x7e4>
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	dd64      	ble.n	800ab76 <_strtod_l+0x8ae>
 800aaac:	4621      	mov	r1, r4
 800aaae:	2201      	movs	r2, #1
 800aab0:	9805      	ldr	r0, [sp, #20]
 800aab2:	f001 f9d5 	bl	800be60 <__lshift>
 800aab6:	4629      	mov	r1, r5
 800aab8:	4604      	mov	r4, r0
 800aaba:	f001 fa3d 	bl	800bf38 <__mcmp>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	dd59      	ble.n	800ab76 <_strtod_l+0x8ae>
 800aac2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aac6:	9a06      	ldr	r2, [sp, #24]
 800aac8:	0d1b      	lsrs	r3, r3, #20
 800aaca:	051b      	lsls	r3, r3, #20
 800aacc:	2a00      	cmp	r2, #0
 800aace:	d070      	beq.n	800abb2 <_strtod_l+0x8ea>
 800aad0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aad4:	d86d      	bhi.n	800abb2 <_strtod_l+0x8ea>
 800aad6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aada:	f67f ae99 	bls.w	800a810 <_strtod_l+0x548>
 800aade:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800ab10 <_strtod_l+0x848>
 800aae2:	ec4b ab16 	vmov	d6, sl, fp
 800aae6:	4b0e      	ldr	r3, [pc, #56]	@ (800ab20 <_strtod_l+0x858>)
 800aae8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800aaec:	ee17 2a90 	vmov	r2, s15
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	ec5b ab17 	vmov	sl, fp, d7
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f47f ae01 	bne.w	800a6fe <_strtod_l+0x436>
 800aafc:	9a05      	ldr	r2, [sp, #20]
 800aafe:	2322      	movs	r3, #34	@ 0x22
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	e5fc      	b.n	800a6fe <_strtod_l+0x436>
 800ab04:	f3af 8000 	nop.w
 800ab08:	ffc00000 	.word	0xffc00000
 800ab0c:	41dfffff 	.word	0x41dfffff
 800ab10:	00000000 	.word	0x00000000
 800ab14:	39500000 	.word	0x39500000
 800ab18:	0800cda8 	.word	0x0800cda8
 800ab1c:	fffffc02 	.word	0xfffffc02
 800ab20:	7ff00000 	.word	0x7ff00000
 800ab24:	46d9      	mov	r9, fp
 800ab26:	d15d      	bne.n	800abe4 <_strtod_l+0x91c>
 800ab28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab2c:	f1b8 0f00 	cmp.w	r8, #0
 800ab30:	d02a      	beq.n	800ab88 <_strtod_l+0x8c0>
 800ab32:	4aab      	ldr	r2, [pc, #684]	@ (800ade0 <_strtod_l+0xb18>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d12a      	bne.n	800ab8e <_strtod_l+0x8c6>
 800ab38:	9b06      	ldr	r3, [sp, #24]
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	b1fb      	cbz	r3, 800ab7e <_strtod_l+0x8b6>
 800ab3e:	4ba9      	ldr	r3, [pc, #676]	@ (800ade4 <_strtod_l+0xb1c>)
 800ab40:	ea0b 0303 	and.w	r3, fp, r3
 800ab44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ab48:	f04f 31ff 	mov.w	r1, #4294967295
 800ab4c:	d81a      	bhi.n	800ab84 <_strtod_l+0x8bc>
 800ab4e:	0d1b      	lsrs	r3, r3, #20
 800ab50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab54:	fa01 f303 	lsl.w	r3, r1, r3
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d118      	bne.n	800ab8e <_strtod_l+0x8c6>
 800ab5c:	4ba2      	ldr	r3, [pc, #648]	@ (800ade8 <_strtod_l+0xb20>)
 800ab5e:	4599      	cmp	r9, r3
 800ab60:	d102      	bne.n	800ab68 <_strtod_l+0x8a0>
 800ab62:	3201      	adds	r2, #1
 800ab64:	f43f adc0 	beq.w	800a6e8 <_strtod_l+0x420>
 800ab68:	4b9e      	ldr	r3, [pc, #632]	@ (800ade4 <_strtod_l+0xb1c>)
 800ab6a:	ea09 0303 	and.w	r3, r9, r3
 800ab6e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ab72:	f04f 0a00 	mov.w	sl, #0
 800ab76:	9b06      	ldr	r3, [sp, #24]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1b0      	bne.n	800aade <_strtod_l+0x816>
 800ab7c:	e5bf      	b.n	800a6fe <_strtod_l+0x436>
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab82:	e7e9      	b.n	800ab58 <_strtod_l+0x890>
 800ab84:	460b      	mov	r3, r1
 800ab86:	e7e7      	b.n	800ab58 <_strtod_l+0x890>
 800ab88:	ea53 030a 	orrs.w	r3, r3, sl
 800ab8c:	d099      	beq.n	800aac2 <_strtod_l+0x7fa>
 800ab8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab90:	b1c3      	cbz	r3, 800abc4 <_strtod_l+0x8fc>
 800ab92:	ea13 0f09 	tst.w	r3, r9
 800ab96:	d0ee      	beq.n	800ab76 <_strtod_l+0x8ae>
 800ab98:	9a06      	ldr	r2, [sp, #24]
 800ab9a:	4650      	mov	r0, sl
 800ab9c:	4659      	mov	r1, fp
 800ab9e:	f1b8 0f00 	cmp.w	r8, #0
 800aba2:	d013      	beq.n	800abcc <_strtod_l+0x904>
 800aba4:	f7ff fb74 	bl	800a290 <sulp>
 800aba8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800abac:	ec5b ab17 	vmov	sl, fp, d7
 800abb0:	e7e1      	b.n	800ab76 <_strtod_l+0x8ae>
 800abb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800abb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800abba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800abbe:	f04f 3aff 	mov.w	sl, #4294967295
 800abc2:	e7d8      	b.n	800ab76 <_strtod_l+0x8ae>
 800abc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abc6:	ea13 0f0a 	tst.w	r3, sl
 800abca:	e7e4      	b.n	800ab96 <_strtod_l+0x8ce>
 800abcc:	f7ff fb60 	bl	800a290 <sulp>
 800abd0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800abd4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800abd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abdc:	ec5b ab10 	vmov	sl, fp, d0
 800abe0:	d1c9      	bne.n	800ab76 <_strtod_l+0x8ae>
 800abe2:	e615      	b.n	800a810 <_strtod_l+0x548>
 800abe4:	4629      	mov	r1, r5
 800abe6:	4620      	mov	r0, r4
 800abe8:	f001 fb1e 	bl	800c228 <__ratio>
 800abec:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800abf0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800abf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf8:	d85d      	bhi.n	800acb6 <_strtod_l+0x9ee>
 800abfa:	f1b8 0f00 	cmp.w	r8, #0
 800abfe:	d164      	bne.n	800acca <_strtod_l+0xa02>
 800ac00:	f1ba 0f00 	cmp.w	sl, #0
 800ac04:	d14b      	bne.n	800ac9e <_strtod_l+0x9d6>
 800ac06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac0a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d160      	bne.n	800acd4 <_strtod_l+0xa0c>
 800ac12:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ac16:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ac1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1e:	d401      	bmi.n	800ac24 <_strtod_l+0x95c>
 800ac20:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ac24:	eeb1 ab48 	vneg.f64	d10, d8
 800ac28:	486e      	ldr	r0, [pc, #440]	@ (800ade4 <_strtod_l+0xb1c>)
 800ac2a:	4970      	ldr	r1, [pc, #448]	@ (800adec <_strtod_l+0xb24>)
 800ac2c:	ea09 0700 	and.w	r7, r9, r0
 800ac30:	428f      	cmp	r7, r1
 800ac32:	ec53 2b1a 	vmov	r2, r3, d10
 800ac36:	d17d      	bne.n	800ad34 <_strtod_l+0xa6c>
 800ac38:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ac3c:	ec4b ab1c 	vmov	d12, sl, fp
 800ac40:	eeb0 0b4c 	vmov.f64	d0, d12
 800ac44:	f001 fa28 	bl	800c098 <__ulp>
 800ac48:	4866      	ldr	r0, [pc, #408]	@ (800ade4 <_strtod_l+0xb1c>)
 800ac4a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ac4e:	ee1c 3a90 	vmov	r3, s25
 800ac52:	4a67      	ldr	r2, [pc, #412]	@ (800adf0 <_strtod_l+0xb28>)
 800ac54:	ea03 0100 	and.w	r1, r3, r0
 800ac58:	4291      	cmp	r1, r2
 800ac5a:	ec5b ab1c 	vmov	sl, fp, d12
 800ac5e:	d93c      	bls.n	800acda <_strtod_l+0xa12>
 800ac60:	ee19 2a90 	vmov	r2, s19
 800ac64:	4b60      	ldr	r3, [pc, #384]	@ (800ade8 <_strtod_l+0xb20>)
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d104      	bne.n	800ac74 <_strtod_l+0x9ac>
 800ac6a:	ee19 3a10 	vmov	r3, s18
 800ac6e:	3301      	adds	r3, #1
 800ac70:	f43f ad3a 	beq.w	800a6e8 <_strtod_l+0x420>
 800ac74:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ade8 <_strtod_l+0xb20>
 800ac78:	f04f 3aff 	mov.w	sl, #4294967295
 800ac7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ac7e:	9805      	ldr	r0, [sp, #20]
 800ac80:	f000 fed6 	bl	800ba30 <_Bfree>
 800ac84:	9805      	ldr	r0, [sp, #20]
 800ac86:	4631      	mov	r1, r6
 800ac88:	f000 fed2 	bl	800ba30 <_Bfree>
 800ac8c:	9805      	ldr	r0, [sp, #20]
 800ac8e:	4629      	mov	r1, r5
 800ac90:	f000 fece 	bl	800ba30 <_Bfree>
 800ac94:	9805      	ldr	r0, [sp, #20]
 800ac96:	4621      	mov	r1, r4
 800ac98:	f000 feca 	bl	800ba30 <_Bfree>
 800ac9c:	e625      	b.n	800a8ea <_strtod_l+0x622>
 800ac9e:	f1ba 0f01 	cmp.w	sl, #1
 800aca2:	d103      	bne.n	800acac <_strtod_l+0x9e4>
 800aca4:	f1bb 0f00 	cmp.w	fp, #0
 800aca8:	f43f adb2 	beq.w	800a810 <_strtod_l+0x548>
 800acac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800acb0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800acb4:	e7b8      	b.n	800ac28 <_strtod_l+0x960>
 800acb6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800acba:	ee20 8b08 	vmul.f64	d8, d0, d8
 800acbe:	f1b8 0f00 	cmp.w	r8, #0
 800acc2:	d0af      	beq.n	800ac24 <_strtod_l+0x95c>
 800acc4:	eeb0 ab48 	vmov.f64	d10, d8
 800acc8:	e7ae      	b.n	800ac28 <_strtod_l+0x960>
 800acca:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800acce:	eeb0 8b4a 	vmov.f64	d8, d10
 800acd2:	e7a9      	b.n	800ac28 <_strtod_l+0x960>
 800acd4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800acd8:	e7a6      	b.n	800ac28 <_strtod_l+0x960>
 800acda:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	46d9      	mov	r9, fp
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1ca      	bne.n	800ac7c <_strtod_l+0x9b4>
 800ace6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acea:	0d1b      	lsrs	r3, r3, #20
 800acec:	051b      	lsls	r3, r3, #20
 800acee:	429f      	cmp	r7, r3
 800acf0:	d1c4      	bne.n	800ac7c <_strtod_l+0x9b4>
 800acf2:	ec51 0b18 	vmov	r0, r1, d8
 800acf6:	f7f5 fd2f 	bl	8000758 <__aeabi_d2lz>
 800acfa:	f7f5 fce7 	bl	80006cc <__aeabi_l2d>
 800acfe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ad02:	ec41 0b17 	vmov	d7, r0, r1
 800ad06:	ea49 090a 	orr.w	r9, r9, sl
 800ad0a:	ea59 0908 	orrs.w	r9, r9, r8
 800ad0e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ad12:	d03c      	beq.n	800ad8e <_strtod_l+0xac6>
 800ad14:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800adc8 <_strtod_l+0xb00>
 800ad18:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad20:	f53f aced 	bmi.w	800a6fe <_strtod_l+0x436>
 800ad24:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800add0 <_strtod_l+0xb08>
 800ad28:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad30:	dda4      	ble.n	800ac7c <_strtod_l+0x9b4>
 800ad32:	e4e4      	b.n	800a6fe <_strtod_l+0x436>
 800ad34:	9906      	ldr	r1, [sp, #24]
 800ad36:	b1e1      	cbz	r1, 800ad72 <_strtod_l+0xaaa>
 800ad38:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ad3c:	d819      	bhi.n	800ad72 <_strtod_l+0xaaa>
 800ad3e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ad42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad46:	d811      	bhi.n	800ad6c <_strtod_l+0xaa4>
 800ad48:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ad4c:	ee18 3a10 	vmov	r3, s16
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	bf38      	it	cc
 800ad54:	2301      	movcc	r3, #1
 800ad56:	ee08 3a10 	vmov	s16, r3
 800ad5a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ad5e:	f1b8 0f00 	cmp.w	r8, #0
 800ad62:	d111      	bne.n	800ad88 <_strtod_l+0xac0>
 800ad64:	eeb1 7b48 	vneg.f64	d7, d8
 800ad68:	ec53 2b17 	vmov	r2, r3, d7
 800ad6c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ad70:	1bcb      	subs	r3, r1, r7
 800ad72:	eeb0 0b49 	vmov.f64	d0, d9
 800ad76:	ec43 2b1a 	vmov	d10, r2, r3
 800ad7a:	f001 f98d 	bl	800c098 <__ulp>
 800ad7e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ad82:	ec5b ab19 	vmov	sl, fp, d9
 800ad86:	e7aa      	b.n	800acde <_strtod_l+0xa16>
 800ad88:	eeb0 7b48 	vmov.f64	d7, d8
 800ad8c:	e7ec      	b.n	800ad68 <_strtod_l+0xaa0>
 800ad8e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800add8 <_strtod_l+0xb10>
 800ad92:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9a:	f57f af6f 	bpl.w	800ac7c <_strtod_l+0x9b4>
 800ad9e:	e4ae      	b.n	800a6fe <_strtod_l+0x436>
 800ada0:	2300      	movs	r3, #0
 800ada2:	9308      	str	r3, [sp, #32]
 800ada4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ada6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	f7ff bacc 	b.w	800a346 <_strtod_l+0x7e>
 800adae:	2a65      	cmp	r2, #101	@ 0x65
 800adb0:	f43f abbc 	beq.w	800a52c <_strtod_l+0x264>
 800adb4:	2a45      	cmp	r2, #69	@ 0x45
 800adb6:	f43f abb9 	beq.w	800a52c <_strtod_l+0x264>
 800adba:	2301      	movs	r3, #1
 800adbc:	9306      	str	r3, [sp, #24]
 800adbe:	f7ff bbf0 	b.w	800a5a2 <_strtod_l+0x2da>
 800adc2:	bf00      	nop
 800adc4:	f3af 8000 	nop.w
 800adc8:	94a03595 	.word	0x94a03595
 800adcc:	3fdfffff 	.word	0x3fdfffff
 800add0:	35afe535 	.word	0x35afe535
 800add4:	3fe00000 	.word	0x3fe00000
 800add8:	94a03595 	.word	0x94a03595
 800addc:	3fcfffff 	.word	0x3fcfffff
 800ade0:	000fffff 	.word	0x000fffff
 800ade4:	7ff00000 	.word	0x7ff00000
 800ade8:	7fefffff 	.word	0x7fefffff
 800adec:	7fe00000 	.word	0x7fe00000
 800adf0:	7c9fffff 	.word	0x7c9fffff

0800adf4 <strtod>:
 800adf4:	460a      	mov	r2, r1
 800adf6:	4601      	mov	r1, r0
 800adf8:	4802      	ldr	r0, [pc, #8]	@ (800ae04 <strtod+0x10>)
 800adfa:	4b03      	ldr	r3, [pc, #12]	@ (800ae08 <strtod+0x14>)
 800adfc:	6800      	ldr	r0, [r0, #0]
 800adfe:	f7ff ba63 	b.w	800a2c8 <_strtod_l>
 800ae02:	bf00      	nop
 800ae04:	24000198 	.word	0x24000198
 800ae08:	2400002c 	.word	0x2400002c

0800ae0c <std>:
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	4604      	mov	r4, r0
 800ae12:	e9c0 3300 	strd	r3, r3, [r0]
 800ae16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae1a:	6083      	str	r3, [r0, #8]
 800ae1c:	8181      	strh	r1, [r0, #12]
 800ae1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae20:	81c2      	strh	r2, [r0, #14]
 800ae22:	6183      	str	r3, [r0, #24]
 800ae24:	4619      	mov	r1, r3
 800ae26:	2208      	movs	r2, #8
 800ae28:	305c      	adds	r0, #92	@ 0x5c
 800ae2a:	f000 f8f4 	bl	800b016 <memset>
 800ae2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae64 <std+0x58>)
 800ae30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae32:	4b0d      	ldr	r3, [pc, #52]	@ (800ae68 <std+0x5c>)
 800ae34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae36:	4b0d      	ldr	r3, [pc, #52]	@ (800ae6c <std+0x60>)
 800ae38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae70 <std+0x64>)
 800ae3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae74 <std+0x68>)
 800ae40:	6224      	str	r4, [r4, #32]
 800ae42:	429c      	cmp	r4, r3
 800ae44:	d006      	beq.n	800ae54 <std+0x48>
 800ae46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae4a:	4294      	cmp	r4, r2
 800ae4c:	d002      	beq.n	800ae54 <std+0x48>
 800ae4e:	33d0      	adds	r3, #208	@ 0xd0
 800ae50:	429c      	cmp	r4, r3
 800ae52:	d105      	bne.n	800ae60 <std+0x54>
 800ae54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae5c:	f000 b9d2 	b.w	800b204 <__retarget_lock_init_recursive>
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	bf00      	nop
 800ae64:	0800af91 	.word	0x0800af91
 800ae68:	0800afb3 	.word	0x0800afb3
 800ae6c:	0800afeb 	.word	0x0800afeb
 800ae70:	0800b00f 	.word	0x0800b00f
 800ae74:	24000550 	.word	0x24000550

0800ae78 <stdio_exit_handler>:
 800ae78:	4a02      	ldr	r2, [pc, #8]	@ (800ae84 <stdio_exit_handler+0xc>)
 800ae7a:	4903      	ldr	r1, [pc, #12]	@ (800ae88 <stdio_exit_handler+0x10>)
 800ae7c:	4803      	ldr	r0, [pc, #12]	@ (800ae8c <stdio_exit_handler+0x14>)
 800ae7e:	f000 b869 	b.w	800af54 <_fwalk_sglue>
 800ae82:	bf00      	nop
 800ae84:	24000020 	.word	0x24000020
 800ae88:	0800c431 	.word	0x0800c431
 800ae8c:	2400019c 	.word	0x2400019c

0800ae90 <cleanup_stdio>:
 800ae90:	6841      	ldr	r1, [r0, #4]
 800ae92:	4b0c      	ldr	r3, [pc, #48]	@ (800aec4 <cleanup_stdio+0x34>)
 800ae94:	4299      	cmp	r1, r3
 800ae96:	b510      	push	{r4, lr}
 800ae98:	4604      	mov	r4, r0
 800ae9a:	d001      	beq.n	800aea0 <cleanup_stdio+0x10>
 800ae9c:	f001 fac8 	bl	800c430 <_fflush_r>
 800aea0:	68a1      	ldr	r1, [r4, #8]
 800aea2:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <cleanup_stdio+0x38>)
 800aea4:	4299      	cmp	r1, r3
 800aea6:	d002      	beq.n	800aeae <cleanup_stdio+0x1e>
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f001 fac1 	bl	800c430 <_fflush_r>
 800aeae:	68e1      	ldr	r1, [r4, #12]
 800aeb0:	4b06      	ldr	r3, [pc, #24]	@ (800aecc <cleanup_stdio+0x3c>)
 800aeb2:	4299      	cmp	r1, r3
 800aeb4:	d004      	beq.n	800aec0 <cleanup_stdio+0x30>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aebc:	f001 bab8 	b.w	800c430 <_fflush_r>
 800aec0:	bd10      	pop	{r4, pc}
 800aec2:	bf00      	nop
 800aec4:	24000550 	.word	0x24000550
 800aec8:	240005b8 	.word	0x240005b8
 800aecc:	24000620 	.word	0x24000620

0800aed0 <global_stdio_init.part.0>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	4b0b      	ldr	r3, [pc, #44]	@ (800af00 <global_stdio_init.part.0+0x30>)
 800aed4:	4c0b      	ldr	r4, [pc, #44]	@ (800af04 <global_stdio_init.part.0+0x34>)
 800aed6:	4a0c      	ldr	r2, [pc, #48]	@ (800af08 <global_stdio_init.part.0+0x38>)
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	4620      	mov	r0, r4
 800aedc:	2200      	movs	r2, #0
 800aede:	2104      	movs	r1, #4
 800aee0:	f7ff ff94 	bl	800ae0c <std>
 800aee4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aee8:	2201      	movs	r2, #1
 800aeea:	2109      	movs	r1, #9
 800aeec:	f7ff ff8e 	bl	800ae0c <std>
 800aef0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aef4:	2202      	movs	r2, #2
 800aef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aefa:	2112      	movs	r1, #18
 800aefc:	f7ff bf86 	b.w	800ae0c <std>
 800af00:	24000688 	.word	0x24000688
 800af04:	24000550 	.word	0x24000550
 800af08:	0800ae79 	.word	0x0800ae79

0800af0c <__sfp_lock_acquire>:
 800af0c:	4801      	ldr	r0, [pc, #4]	@ (800af14 <__sfp_lock_acquire+0x8>)
 800af0e:	f000 b97a 	b.w	800b206 <__retarget_lock_acquire_recursive>
 800af12:	bf00      	nop
 800af14:	24000691 	.word	0x24000691

0800af18 <__sfp_lock_release>:
 800af18:	4801      	ldr	r0, [pc, #4]	@ (800af20 <__sfp_lock_release+0x8>)
 800af1a:	f000 b975 	b.w	800b208 <__retarget_lock_release_recursive>
 800af1e:	bf00      	nop
 800af20:	24000691 	.word	0x24000691

0800af24 <__sinit>:
 800af24:	b510      	push	{r4, lr}
 800af26:	4604      	mov	r4, r0
 800af28:	f7ff fff0 	bl	800af0c <__sfp_lock_acquire>
 800af2c:	6a23      	ldr	r3, [r4, #32]
 800af2e:	b11b      	cbz	r3, 800af38 <__sinit+0x14>
 800af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af34:	f7ff bff0 	b.w	800af18 <__sfp_lock_release>
 800af38:	4b04      	ldr	r3, [pc, #16]	@ (800af4c <__sinit+0x28>)
 800af3a:	6223      	str	r3, [r4, #32]
 800af3c:	4b04      	ldr	r3, [pc, #16]	@ (800af50 <__sinit+0x2c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1f5      	bne.n	800af30 <__sinit+0xc>
 800af44:	f7ff ffc4 	bl	800aed0 <global_stdio_init.part.0>
 800af48:	e7f2      	b.n	800af30 <__sinit+0xc>
 800af4a:	bf00      	nop
 800af4c:	0800ae91 	.word	0x0800ae91
 800af50:	24000688 	.word	0x24000688

0800af54 <_fwalk_sglue>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4607      	mov	r7, r0
 800af5a:	4688      	mov	r8, r1
 800af5c:	4614      	mov	r4, r2
 800af5e:	2600      	movs	r6, #0
 800af60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af64:	f1b9 0901 	subs.w	r9, r9, #1
 800af68:	d505      	bpl.n	800af76 <_fwalk_sglue+0x22>
 800af6a:	6824      	ldr	r4, [r4, #0]
 800af6c:	2c00      	cmp	r4, #0
 800af6e:	d1f7      	bne.n	800af60 <_fwalk_sglue+0xc>
 800af70:	4630      	mov	r0, r6
 800af72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af76:	89ab      	ldrh	r3, [r5, #12]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d907      	bls.n	800af8c <_fwalk_sglue+0x38>
 800af7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af80:	3301      	adds	r3, #1
 800af82:	d003      	beq.n	800af8c <_fwalk_sglue+0x38>
 800af84:	4629      	mov	r1, r5
 800af86:	4638      	mov	r0, r7
 800af88:	47c0      	blx	r8
 800af8a:	4306      	orrs	r6, r0
 800af8c:	3568      	adds	r5, #104	@ 0x68
 800af8e:	e7e9      	b.n	800af64 <_fwalk_sglue+0x10>

0800af90 <__sread>:
 800af90:	b510      	push	{r4, lr}
 800af92:	460c      	mov	r4, r1
 800af94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af98:	f000 f8d6 	bl	800b148 <_read_r>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	bfab      	itete	ge
 800afa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800afa2:	89a3      	ldrhlt	r3, [r4, #12]
 800afa4:	181b      	addge	r3, r3, r0
 800afa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800afaa:	bfac      	ite	ge
 800afac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800afae:	81a3      	strhlt	r3, [r4, #12]
 800afb0:	bd10      	pop	{r4, pc}

0800afb2 <__swrite>:
 800afb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb6:	461f      	mov	r7, r3
 800afb8:	898b      	ldrh	r3, [r1, #12]
 800afba:	05db      	lsls	r3, r3, #23
 800afbc:	4605      	mov	r5, r0
 800afbe:	460c      	mov	r4, r1
 800afc0:	4616      	mov	r6, r2
 800afc2:	d505      	bpl.n	800afd0 <__swrite+0x1e>
 800afc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc8:	2302      	movs	r3, #2
 800afca:	2200      	movs	r2, #0
 800afcc:	f000 f8aa 	bl	800b124 <_lseek_r>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	4632      	mov	r2, r6
 800afde:	463b      	mov	r3, r7
 800afe0:	4628      	mov	r0, r5
 800afe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afe6:	f000 b8d1 	b.w	800b18c <_write_r>

0800afea <__sseek>:
 800afea:	b510      	push	{r4, lr}
 800afec:	460c      	mov	r4, r1
 800afee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff2:	f000 f897 	bl	800b124 <_lseek_r>
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	bf15      	itete	ne
 800affc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800affe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b002:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b006:	81a3      	strheq	r3, [r4, #12]
 800b008:	bf18      	it	ne
 800b00a:	81a3      	strhne	r3, [r4, #12]
 800b00c:	bd10      	pop	{r4, pc}

0800b00e <__sclose>:
 800b00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b012:	f000 b877 	b.w	800b104 <_close_r>

0800b016 <memset>:
 800b016:	4402      	add	r2, r0
 800b018:	4603      	mov	r3, r0
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d100      	bne.n	800b020 <memset+0xa>
 800b01e:	4770      	bx	lr
 800b020:	f803 1b01 	strb.w	r1, [r3], #1
 800b024:	e7f9      	b.n	800b01a <memset+0x4>

0800b026 <strncmp>:
 800b026:	b510      	push	{r4, lr}
 800b028:	b16a      	cbz	r2, 800b046 <strncmp+0x20>
 800b02a:	3901      	subs	r1, #1
 800b02c:	1884      	adds	r4, r0, r2
 800b02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b032:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b036:	429a      	cmp	r2, r3
 800b038:	d103      	bne.n	800b042 <strncmp+0x1c>
 800b03a:	42a0      	cmp	r0, r4
 800b03c:	d001      	beq.n	800b042 <strncmp+0x1c>
 800b03e:	2a00      	cmp	r2, #0
 800b040:	d1f5      	bne.n	800b02e <strncmp+0x8>
 800b042:	1ad0      	subs	r0, r2, r3
 800b044:	bd10      	pop	{r4, pc}
 800b046:	4610      	mov	r0, r2
 800b048:	e7fc      	b.n	800b044 <strncmp+0x1e>
	...

0800b04c <strtok>:
 800b04c:	4b16      	ldr	r3, [pc, #88]	@ (800b0a8 <strtok+0x5c>)
 800b04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b052:	681f      	ldr	r7, [r3, #0]
 800b054:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b056:	4605      	mov	r5, r0
 800b058:	460e      	mov	r6, r1
 800b05a:	b9ec      	cbnz	r4, 800b098 <strtok+0x4c>
 800b05c:	2050      	movs	r0, #80	@ 0x50
 800b05e:	f000 fc8d 	bl	800b97c <malloc>
 800b062:	4602      	mov	r2, r0
 800b064:	6478      	str	r0, [r7, #68]	@ 0x44
 800b066:	b920      	cbnz	r0, 800b072 <strtok+0x26>
 800b068:	4b10      	ldr	r3, [pc, #64]	@ (800b0ac <strtok+0x60>)
 800b06a:	4811      	ldr	r0, [pc, #68]	@ (800b0b0 <strtok+0x64>)
 800b06c:	215b      	movs	r1, #91	@ 0x5b
 800b06e:	f000 f8e3 	bl	800b238 <__assert_func>
 800b072:	e9c0 4400 	strd	r4, r4, [r0]
 800b076:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b07a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b07e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b082:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b086:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b08a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b08e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b092:	6184      	str	r4, [r0, #24]
 800b094:	7704      	strb	r4, [r0, #28]
 800b096:	6244      	str	r4, [r0, #36]	@ 0x24
 800b098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a4:	f000 b806 	b.w	800b0b4 <__strtok_r>
 800b0a8:	24000198 	.word	0x24000198
 800b0ac:	0800cdd0 	.word	0x0800cdd0
 800b0b0:	0800cde7 	.word	0x0800cde7

0800b0b4 <__strtok_r>:
 800b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	b908      	cbnz	r0, 800b0be <__strtok_r+0xa>
 800b0ba:	6814      	ldr	r4, [r2, #0]
 800b0bc:	b144      	cbz	r4, 800b0d0 <__strtok_r+0x1c>
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b0ca:	b91e      	cbnz	r6, 800b0d4 <__strtok_r+0x20>
 800b0cc:	b965      	cbnz	r5, 800b0e8 <__strtok_r+0x34>
 800b0ce:	6015      	str	r5, [r2, #0]
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	e005      	b.n	800b0e0 <__strtok_r+0x2c>
 800b0d4:	42b5      	cmp	r5, r6
 800b0d6:	d1f6      	bne.n	800b0c6 <__strtok_r+0x12>
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f0      	bne.n	800b0be <__strtok_r+0xa>
 800b0dc:	6014      	str	r4, [r2, #0]
 800b0de:	7003      	strb	r3, [r0, #0]
 800b0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e2:	461c      	mov	r4, r3
 800b0e4:	e00c      	b.n	800b100 <__strtok_r+0x4c>
 800b0e6:	b915      	cbnz	r5, 800b0ee <__strtok_r+0x3a>
 800b0e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0ec:	460e      	mov	r6, r1
 800b0ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b0f2:	42ab      	cmp	r3, r5
 800b0f4:	d1f7      	bne.n	800b0e6 <__strtok_r+0x32>
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d0f3      	beq.n	800b0e2 <__strtok_r+0x2e>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b100:	6014      	str	r4, [r2, #0]
 800b102:	e7ed      	b.n	800b0e0 <__strtok_r+0x2c>

0800b104 <_close_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4d06      	ldr	r5, [pc, #24]	@ (800b120 <_close_r+0x1c>)
 800b108:	2300      	movs	r3, #0
 800b10a:	4604      	mov	r4, r0
 800b10c:	4608      	mov	r0, r1
 800b10e:	602b      	str	r3, [r5, #0]
 800b110:	f7f7 f9c6 	bl	80024a0 <_close>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	d102      	bne.n	800b11e <_close_r+0x1a>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	b103      	cbz	r3, 800b11e <_close_r+0x1a>
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	2400068c 	.word	0x2400068c

0800b124 <_lseek_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4d07      	ldr	r5, [pc, #28]	@ (800b144 <_lseek_r+0x20>)
 800b128:	4604      	mov	r4, r0
 800b12a:	4608      	mov	r0, r1
 800b12c:	4611      	mov	r1, r2
 800b12e:	2200      	movs	r2, #0
 800b130:	602a      	str	r2, [r5, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	f7f7 f9db 	bl	80024ee <_lseek>
 800b138:	1c43      	adds	r3, r0, #1
 800b13a:	d102      	bne.n	800b142 <_lseek_r+0x1e>
 800b13c:	682b      	ldr	r3, [r5, #0]
 800b13e:	b103      	cbz	r3, 800b142 <_lseek_r+0x1e>
 800b140:	6023      	str	r3, [r4, #0]
 800b142:	bd38      	pop	{r3, r4, r5, pc}
 800b144:	2400068c 	.word	0x2400068c

0800b148 <_read_r>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	4d07      	ldr	r5, [pc, #28]	@ (800b168 <_read_r+0x20>)
 800b14c:	4604      	mov	r4, r0
 800b14e:	4608      	mov	r0, r1
 800b150:	4611      	mov	r1, r2
 800b152:	2200      	movs	r2, #0
 800b154:	602a      	str	r2, [r5, #0]
 800b156:	461a      	mov	r2, r3
 800b158:	f7f7 f969 	bl	800242e <_read>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d102      	bne.n	800b166 <_read_r+0x1e>
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	b103      	cbz	r3, 800b166 <_read_r+0x1e>
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	bd38      	pop	{r3, r4, r5, pc}
 800b168:	2400068c 	.word	0x2400068c

0800b16c <_sbrk_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d06      	ldr	r5, [pc, #24]	@ (800b188 <_sbrk_r+0x1c>)
 800b170:	2300      	movs	r3, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	602b      	str	r3, [r5, #0]
 800b178:	f7f7 f9c6 	bl	8002508 <_sbrk>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_sbrk_r+0x1a>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_sbrk_r+0x1a>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	2400068c 	.word	0x2400068c

0800b18c <_write_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4d07      	ldr	r5, [pc, #28]	@ (800b1ac <_write_r+0x20>)
 800b190:	4604      	mov	r4, r0
 800b192:	4608      	mov	r0, r1
 800b194:	4611      	mov	r1, r2
 800b196:	2200      	movs	r2, #0
 800b198:	602a      	str	r2, [r5, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	f7f7 f964 	bl	8002468 <_write>
 800b1a0:	1c43      	adds	r3, r0, #1
 800b1a2:	d102      	bne.n	800b1aa <_write_r+0x1e>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	b103      	cbz	r3, 800b1aa <_write_r+0x1e>
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	2400068c 	.word	0x2400068c

0800b1b0 <__errno>:
 800b1b0:	4b01      	ldr	r3, [pc, #4]	@ (800b1b8 <__errno+0x8>)
 800b1b2:	6818      	ldr	r0, [r3, #0]
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	24000198 	.word	0x24000198

0800b1bc <__libc_init_array>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4d0d      	ldr	r5, [pc, #52]	@ (800b1f4 <__libc_init_array+0x38>)
 800b1c0:	4c0d      	ldr	r4, [pc, #52]	@ (800b1f8 <__libc_init_array+0x3c>)
 800b1c2:	1b64      	subs	r4, r4, r5
 800b1c4:	10a4      	asrs	r4, r4, #2
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	42a6      	cmp	r6, r4
 800b1ca:	d109      	bne.n	800b1e0 <__libc_init_array+0x24>
 800b1cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b1fc <__libc_init_array+0x40>)
 800b1ce:	4c0c      	ldr	r4, [pc, #48]	@ (800b200 <__libc_init_array+0x44>)
 800b1d0:	f001 fd9a 	bl	800cd08 <_init>
 800b1d4:	1b64      	subs	r4, r4, r5
 800b1d6:	10a4      	asrs	r4, r4, #2
 800b1d8:	2600      	movs	r6, #0
 800b1da:	42a6      	cmp	r6, r4
 800b1dc:	d105      	bne.n	800b1ea <__libc_init_array+0x2e>
 800b1de:	bd70      	pop	{r4, r5, r6, pc}
 800b1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e4:	4798      	blx	r3
 800b1e6:	3601      	adds	r6, #1
 800b1e8:	e7ee      	b.n	800b1c8 <__libc_init_array+0xc>
 800b1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ee:	4798      	blx	r3
 800b1f0:	3601      	adds	r6, #1
 800b1f2:	e7f2      	b.n	800b1da <__libc_init_array+0x1e>
 800b1f4:	0800d18c 	.word	0x0800d18c
 800b1f8:	0800d18c 	.word	0x0800d18c
 800b1fc:	0800d18c 	.word	0x0800d18c
 800b200:	0800d190 	.word	0x0800d190

0800b204 <__retarget_lock_init_recursive>:
 800b204:	4770      	bx	lr

0800b206 <__retarget_lock_acquire_recursive>:
 800b206:	4770      	bx	lr

0800b208 <__retarget_lock_release_recursive>:
 800b208:	4770      	bx	lr

0800b20a <memcpy>:
 800b20a:	440a      	add	r2, r1
 800b20c:	4291      	cmp	r1, r2
 800b20e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b212:	d100      	bne.n	800b216 <memcpy+0xc>
 800b214:	4770      	bx	lr
 800b216:	b510      	push	{r4, lr}
 800b218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b21c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b220:	4291      	cmp	r1, r2
 800b222:	d1f9      	bne.n	800b218 <memcpy+0xe>
 800b224:	bd10      	pop	{r4, pc}
	...

0800b228 <nan>:
 800b228:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b230 <nan+0x8>
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	00000000 	.word	0x00000000
 800b234:	7ff80000 	.word	0x7ff80000

0800b238 <__assert_func>:
 800b238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b23a:	4614      	mov	r4, r2
 800b23c:	461a      	mov	r2, r3
 800b23e:	4b09      	ldr	r3, [pc, #36]	@ (800b264 <__assert_func+0x2c>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4605      	mov	r5, r0
 800b244:	68d8      	ldr	r0, [r3, #12]
 800b246:	b954      	cbnz	r4, 800b25e <__assert_func+0x26>
 800b248:	4b07      	ldr	r3, [pc, #28]	@ (800b268 <__assert_func+0x30>)
 800b24a:	461c      	mov	r4, r3
 800b24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b250:	9100      	str	r1, [sp, #0]
 800b252:	462b      	mov	r3, r5
 800b254:	4905      	ldr	r1, [pc, #20]	@ (800b26c <__assert_func+0x34>)
 800b256:	f001 f913 	bl	800c480 <fiprintf>
 800b25a:	f001 f923 	bl	800c4a4 <abort>
 800b25e:	4b04      	ldr	r3, [pc, #16]	@ (800b270 <__assert_func+0x38>)
 800b260:	e7f4      	b.n	800b24c <__assert_func+0x14>
 800b262:	bf00      	nop
 800b264:	24000198 	.word	0x24000198
 800b268:	0800ce84 	.word	0x0800ce84
 800b26c:	0800ce56 	.word	0x0800ce56
 800b270:	0800ce49 	.word	0x0800ce49

0800b274 <_free_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4605      	mov	r5, r0
 800b278:	2900      	cmp	r1, #0
 800b27a:	d041      	beq.n	800b300 <_free_r+0x8c>
 800b27c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b280:	1f0c      	subs	r4, r1, #4
 800b282:	2b00      	cmp	r3, #0
 800b284:	bfb8      	it	lt
 800b286:	18e4      	addlt	r4, r4, r3
 800b288:	f7fe fff6 	bl	800a278 <__malloc_lock>
 800b28c:	4a1d      	ldr	r2, [pc, #116]	@ (800b304 <_free_r+0x90>)
 800b28e:	6813      	ldr	r3, [r2, #0]
 800b290:	b933      	cbnz	r3, 800b2a0 <_free_r+0x2c>
 800b292:	6063      	str	r3, [r4, #4]
 800b294:	6014      	str	r4, [r2, #0]
 800b296:	4628      	mov	r0, r5
 800b298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b29c:	f7fe bff2 	b.w	800a284 <__malloc_unlock>
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	d908      	bls.n	800b2b6 <_free_r+0x42>
 800b2a4:	6820      	ldr	r0, [r4, #0]
 800b2a6:	1821      	adds	r1, r4, r0
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	bf01      	itttt	eq
 800b2ac:	6819      	ldreq	r1, [r3, #0]
 800b2ae:	685b      	ldreq	r3, [r3, #4]
 800b2b0:	1809      	addeq	r1, r1, r0
 800b2b2:	6021      	streq	r1, [r4, #0]
 800b2b4:	e7ed      	b.n	800b292 <_free_r+0x1e>
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	b10b      	cbz	r3, 800b2c0 <_free_r+0x4c>
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d9fa      	bls.n	800b2b6 <_free_r+0x42>
 800b2c0:	6811      	ldr	r1, [r2, #0]
 800b2c2:	1850      	adds	r0, r2, r1
 800b2c4:	42a0      	cmp	r0, r4
 800b2c6:	d10b      	bne.n	800b2e0 <_free_r+0x6c>
 800b2c8:	6820      	ldr	r0, [r4, #0]
 800b2ca:	4401      	add	r1, r0
 800b2cc:	1850      	adds	r0, r2, r1
 800b2ce:	4283      	cmp	r3, r0
 800b2d0:	6011      	str	r1, [r2, #0]
 800b2d2:	d1e0      	bne.n	800b296 <_free_r+0x22>
 800b2d4:	6818      	ldr	r0, [r3, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	6053      	str	r3, [r2, #4]
 800b2da:	4408      	add	r0, r1
 800b2dc:	6010      	str	r0, [r2, #0]
 800b2de:	e7da      	b.n	800b296 <_free_r+0x22>
 800b2e0:	d902      	bls.n	800b2e8 <_free_r+0x74>
 800b2e2:	230c      	movs	r3, #12
 800b2e4:	602b      	str	r3, [r5, #0]
 800b2e6:	e7d6      	b.n	800b296 <_free_r+0x22>
 800b2e8:	6820      	ldr	r0, [r4, #0]
 800b2ea:	1821      	adds	r1, r4, r0
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	bf04      	itt	eq
 800b2f0:	6819      	ldreq	r1, [r3, #0]
 800b2f2:	685b      	ldreq	r3, [r3, #4]
 800b2f4:	6063      	str	r3, [r4, #4]
 800b2f6:	bf04      	itt	eq
 800b2f8:	1809      	addeq	r1, r1, r0
 800b2fa:	6021      	streq	r1, [r4, #0]
 800b2fc:	6054      	str	r4, [r2, #4]
 800b2fe:	e7ca      	b.n	800b296 <_free_r+0x22>
 800b300:	bd38      	pop	{r3, r4, r5, pc}
 800b302:	bf00      	nop
 800b304:	2400054c 	.word	0x2400054c

0800b308 <rshift>:
 800b308:	6903      	ldr	r3, [r0, #16]
 800b30a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b30e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b312:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b316:	f100 0414 	add.w	r4, r0, #20
 800b31a:	dd45      	ble.n	800b3a8 <rshift+0xa0>
 800b31c:	f011 011f 	ands.w	r1, r1, #31
 800b320:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b324:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b328:	d10c      	bne.n	800b344 <rshift+0x3c>
 800b32a:	f100 0710 	add.w	r7, r0, #16
 800b32e:	4629      	mov	r1, r5
 800b330:	42b1      	cmp	r1, r6
 800b332:	d334      	bcc.n	800b39e <rshift+0x96>
 800b334:	1a9b      	subs	r3, r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	1eea      	subs	r2, r5, #3
 800b33a:	4296      	cmp	r6, r2
 800b33c:	bf38      	it	cc
 800b33e:	2300      	movcc	r3, #0
 800b340:	4423      	add	r3, r4
 800b342:	e015      	b.n	800b370 <rshift+0x68>
 800b344:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b348:	f1c1 0820 	rsb	r8, r1, #32
 800b34c:	40cf      	lsrs	r7, r1
 800b34e:	f105 0e04 	add.w	lr, r5, #4
 800b352:	46a1      	mov	r9, r4
 800b354:	4576      	cmp	r6, lr
 800b356:	46f4      	mov	ip, lr
 800b358:	d815      	bhi.n	800b386 <rshift+0x7e>
 800b35a:	1a9a      	subs	r2, r3, r2
 800b35c:	0092      	lsls	r2, r2, #2
 800b35e:	3a04      	subs	r2, #4
 800b360:	3501      	adds	r5, #1
 800b362:	42ae      	cmp	r6, r5
 800b364:	bf38      	it	cc
 800b366:	2200      	movcc	r2, #0
 800b368:	18a3      	adds	r3, r4, r2
 800b36a:	50a7      	str	r7, [r4, r2]
 800b36c:	b107      	cbz	r7, 800b370 <rshift+0x68>
 800b36e:	3304      	adds	r3, #4
 800b370:	1b1a      	subs	r2, r3, r4
 800b372:	42a3      	cmp	r3, r4
 800b374:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b378:	bf08      	it	eq
 800b37a:	2300      	moveq	r3, #0
 800b37c:	6102      	str	r2, [r0, #16]
 800b37e:	bf08      	it	eq
 800b380:	6143      	streq	r3, [r0, #20]
 800b382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b386:	f8dc c000 	ldr.w	ip, [ip]
 800b38a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b38e:	ea4c 0707 	orr.w	r7, ip, r7
 800b392:	f849 7b04 	str.w	r7, [r9], #4
 800b396:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b39a:	40cf      	lsrs	r7, r1
 800b39c:	e7da      	b.n	800b354 <rshift+0x4c>
 800b39e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3a6:	e7c3      	b.n	800b330 <rshift+0x28>
 800b3a8:	4623      	mov	r3, r4
 800b3aa:	e7e1      	b.n	800b370 <rshift+0x68>

0800b3ac <__hexdig_fun>:
 800b3ac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b3b0:	2b09      	cmp	r3, #9
 800b3b2:	d802      	bhi.n	800b3ba <__hexdig_fun+0xe>
 800b3b4:	3820      	subs	r0, #32
 800b3b6:	b2c0      	uxtb	r0, r0
 800b3b8:	4770      	bx	lr
 800b3ba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b3be:	2b05      	cmp	r3, #5
 800b3c0:	d801      	bhi.n	800b3c6 <__hexdig_fun+0x1a>
 800b3c2:	3847      	subs	r0, #71	@ 0x47
 800b3c4:	e7f7      	b.n	800b3b6 <__hexdig_fun+0xa>
 800b3c6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b3ca:	2b05      	cmp	r3, #5
 800b3cc:	d801      	bhi.n	800b3d2 <__hexdig_fun+0x26>
 800b3ce:	3827      	subs	r0, #39	@ 0x27
 800b3d0:	e7f1      	b.n	800b3b6 <__hexdig_fun+0xa>
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	4770      	bx	lr
	...

0800b3d8 <__gethex>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	b085      	sub	sp, #20
 800b3de:	468a      	mov	sl, r1
 800b3e0:	9302      	str	r3, [sp, #8]
 800b3e2:	680b      	ldr	r3, [r1, #0]
 800b3e4:	9001      	str	r0, [sp, #4]
 800b3e6:	4690      	mov	r8, r2
 800b3e8:	1c9c      	adds	r4, r3, #2
 800b3ea:	46a1      	mov	r9, r4
 800b3ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b3f0:	2830      	cmp	r0, #48	@ 0x30
 800b3f2:	d0fa      	beq.n	800b3ea <__gethex+0x12>
 800b3f4:	eba9 0303 	sub.w	r3, r9, r3
 800b3f8:	f1a3 0b02 	sub.w	fp, r3, #2
 800b3fc:	f7ff ffd6 	bl	800b3ac <__hexdig_fun>
 800b400:	4605      	mov	r5, r0
 800b402:	2800      	cmp	r0, #0
 800b404:	d168      	bne.n	800b4d8 <__gethex+0x100>
 800b406:	49a0      	ldr	r1, [pc, #640]	@ (800b688 <__gethex+0x2b0>)
 800b408:	2201      	movs	r2, #1
 800b40a:	4648      	mov	r0, r9
 800b40c:	f7ff fe0b 	bl	800b026 <strncmp>
 800b410:	4607      	mov	r7, r0
 800b412:	2800      	cmp	r0, #0
 800b414:	d167      	bne.n	800b4e6 <__gethex+0x10e>
 800b416:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b41a:	4626      	mov	r6, r4
 800b41c:	f7ff ffc6 	bl	800b3ac <__hexdig_fun>
 800b420:	2800      	cmp	r0, #0
 800b422:	d062      	beq.n	800b4ea <__gethex+0x112>
 800b424:	4623      	mov	r3, r4
 800b426:	7818      	ldrb	r0, [r3, #0]
 800b428:	2830      	cmp	r0, #48	@ 0x30
 800b42a:	4699      	mov	r9, r3
 800b42c:	f103 0301 	add.w	r3, r3, #1
 800b430:	d0f9      	beq.n	800b426 <__gethex+0x4e>
 800b432:	f7ff ffbb 	bl	800b3ac <__hexdig_fun>
 800b436:	fab0 f580 	clz	r5, r0
 800b43a:	096d      	lsrs	r5, r5, #5
 800b43c:	f04f 0b01 	mov.w	fp, #1
 800b440:	464a      	mov	r2, r9
 800b442:	4616      	mov	r6, r2
 800b444:	3201      	adds	r2, #1
 800b446:	7830      	ldrb	r0, [r6, #0]
 800b448:	f7ff ffb0 	bl	800b3ac <__hexdig_fun>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d1f8      	bne.n	800b442 <__gethex+0x6a>
 800b450:	498d      	ldr	r1, [pc, #564]	@ (800b688 <__gethex+0x2b0>)
 800b452:	2201      	movs	r2, #1
 800b454:	4630      	mov	r0, r6
 800b456:	f7ff fde6 	bl	800b026 <strncmp>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d13f      	bne.n	800b4de <__gethex+0x106>
 800b45e:	b944      	cbnz	r4, 800b472 <__gethex+0x9a>
 800b460:	1c74      	adds	r4, r6, #1
 800b462:	4622      	mov	r2, r4
 800b464:	4616      	mov	r6, r2
 800b466:	3201      	adds	r2, #1
 800b468:	7830      	ldrb	r0, [r6, #0]
 800b46a:	f7ff ff9f 	bl	800b3ac <__hexdig_fun>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d1f8      	bne.n	800b464 <__gethex+0x8c>
 800b472:	1ba4      	subs	r4, r4, r6
 800b474:	00a7      	lsls	r7, r4, #2
 800b476:	7833      	ldrb	r3, [r6, #0]
 800b478:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b47c:	2b50      	cmp	r3, #80	@ 0x50
 800b47e:	d13e      	bne.n	800b4fe <__gethex+0x126>
 800b480:	7873      	ldrb	r3, [r6, #1]
 800b482:	2b2b      	cmp	r3, #43	@ 0x2b
 800b484:	d033      	beq.n	800b4ee <__gethex+0x116>
 800b486:	2b2d      	cmp	r3, #45	@ 0x2d
 800b488:	d034      	beq.n	800b4f4 <__gethex+0x11c>
 800b48a:	1c71      	adds	r1, r6, #1
 800b48c:	2400      	movs	r4, #0
 800b48e:	7808      	ldrb	r0, [r1, #0]
 800b490:	f7ff ff8c 	bl	800b3ac <__hexdig_fun>
 800b494:	1e43      	subs	r3, r0, #1
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b18      	cmp	r3, #24
 800b49a:	d830      	bhi.n	800b4fe <__gethex+0x126>
 800b49c:	f1a0 0210 	sub.w	r2, r0, #16
 800b4a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4a4:	f7ff ff82 	bl	800b3ac <__hexdig_fun>
 800b4a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800b4ac:	fa5f fc8c 	uxtb.w	ip, ip
 800b4b0:	f1bc 0f18 	cmp.w	ip, #24
 800b4b4:	f04f 030a 	mov.w	r3, #10
 800b4b8:	d91e      	bls.n	800b4f8 <__gethex+0x120>
 800b4ba:	b104      	cbz	r4, 800b4be <__gethex+0xe6>
 800b4bc:	4252      	negs	r2, r2
 800b4be:	4417      	add	r7, r2
 800b4c0:	f8ca 1000 	str.w	r1, [sl]
 800b4c4:	b1ed      	cbz	r5, 800b502 <__gethex+0x12a>
 800b4c6:	f1bb 0f00 	cmp.w	fp, #0
 800b4ca:	bf0c      	ite	eq
 800b4cc:	2506      	moveq	r5, #6
 800b4ce:	2500      	movne	r5, #0
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	b005      	add	sp, #20
 800b4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d8:	2500      	movs	r5, #0
 800b4da:	462c      	mov	r4, r5
 800b4dc:	e7b0      	b.n	800b440 <__gethex+0x68>
 800b4de:	2c00      	cmp	r4, #0
 800b4e0:	d1c7      	bne.n	800b472 <__gethex+0x9a>
 800b4e2:	4627      	mov	r7, r4
 800b4e4:	e7c7      	b.n	800b476 <__gethex+0x9e>
 800b4e6:	464e      	mov	r6, r9
 800b4e8:	462f      	mov	r7, r5
 800b4ea:	2501      	movs	r5, #1
 800b4ec:	e7c3      	b.n	800b476 <__gethex+0x9e>
 800b4ee:	2400      	movs	r4, #0
 800b4f0:	1cb1      	adds	r1, r6, #2
 800b4f2:	e7cc      	b.n	800b48e <__gethex+0xb6>
 800b4f4:	2401      	movs	r4, #1
 800b4f6:	e7fb      	b.n	800b4f0 <__gethex+0x118>
 800b4f8:	fb03 0002 	mla	r0, r3, r2, r0
 800b4fc:	e7ce      	b.n	800b49c <__gethex+0xc4>
 800b4fe:	4631      	mov	r1, r6
 800b500:	e7de      	b.n	800b4c0 <__gethex+0xe8>
 800b502:	eba6 0309 	sub.w	r3, r6, r9
 800b506:	3b01      	subs	r3, #1
 800b508:	4629      	mov	r1, r5
 800b50a:	2b07      	cmp	r3, #7
 800b50c:	dc0a      	bgt.n	800b524 <__gethex+0x14c>
 800b50e:	9801      	ldr	r0, [sp, #4]
 800b510:	f000 fa4e 	bl	800b9b0 <_Balloc>
 800b514:	4604      	mov	r4, r0
 800b516:	b940      	cbnz	r0, 800b52a <__gethex+0x152>
 800b518:	4b5c      	ldr	r3, [pc, #368]	@ (800b68c <__gethex+0x2b4>)
 800b51a:	4602      	mov	r2, r0
 800b51c:	21e4      	movs	r1, #228	@ 0xe4
 800b51e:	485c      	ldr	r0, [pc, #368]	@ (800b690 <__gethex+0x2b8>)
 800b520:	f7ff fe8a 	bl	800b238 <__assert_func>
 800b524:	3101      	adds	r1, #1
 800b526:	105b      	asrs	r3, r3, #1
 800b528:	e7ef      	b.n	800b50a <__gethex+0x132>
 800b52a:	f100 0a14 	add.w	sl, r0, #20
 800b52e:	2300      	movs	r3, #0
 800b530:	4655      	mov	r5, sl
 800b532:	469b      	mov	fp, r3
 800b534:	45b1      	cmp	r9, r6
 800b536:	d337      	bcc.n	800b5a8 <__gethex+0x1d0>
 800b538:	f845 bb04 	str.w	fp, [r5], #4
 800b53c:	eba5 050a 	sub.w	r5, r5, sl
 800b540:	10ad      	asrs	r5, r5, #2
 800b542:	6125      	str	r5, [r4, #16]
 800b544:	4658      	mov	r0, fp
 800b546:	f000 fb25 	bl	800bb94 <__hi0bits>
 800b54a:	016d      	lsls	r5, r5, #5
 800b54c:	f8d8 6000 	ldr.w	r6, [r8]
 800b550:	1a2d      	subs	r5, r5, r0
 800b552:	42b5      	cmp	r5, r6
 800b554:	dd54      	ble.n	800b600 <__gethex+0x228>
 800b556:	1bad      	subs	r5, r5, r6
 800b558:	4629      	mov	r1, r5
 800b55a:	4620      	mov	r0, r4
 800b55c:	f000 feb6 	bl	800c2cc <__any_on>
 800b560:	4681      	mov	r9, r0
 800b562:	b178      	cbz	r0, 800b584 <__gethex+0x1ac>
 800b564:	1e6b      	subs	r3, r5, #1
 800b566:	1159      	asrs	r1, r3, #5
 800b568:	f003 021f 	and.w	r2, r3, #31
 800b56c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b570:	f04f 0901 	mov.w	r9, #1
 800b574:	fa09 f202 	lsl.w	r2, r9, r2
 800b578:	420a      	tst	r2, r1
 800b57a:	d003      	beq.n	800b584 <__gethex+0x1ac>
 800b57c:	454b      	cmp	r3, r9
 800b57e:	dc36      	bgt.n	800b5ee <__gethex+0x216>
 800b580:	f04f 0902 	mov.w	r9, #2
 800b584:	4629      	mov	r1, r5
 800b586:	4620      	mov	r0, r4
 800b588:	f7ff febe 	bl	800b308 <rshift>
 800b58c:	442f      	add	r7, r5
 800b58e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b592:	42bb      	cmp	r3, r7
 800b594:	da42      	bge.n	800b61c <__gethex+0x244>
 800b596:	9801      	ldr	r0, [sp, #4]
 800b598:	4621      	mov	r1, r4
 800b59a:	f000 fa49 	bl	800ba30 <_Bfree>
 800b59e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	25a3      	movs	r5, #163	@ 0xa3
 800b5a6:	e793      	b.n	800b4d0 <__gethex+0xf8>
 800b5a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b5ac:	2a2e      	cmp	r2, #46	@ 0x2e
 800b5ae:	d012      	beq.n	800b5d6 <__gethex+0x1fe>
 800b5b0:	2b20      	cmp	r3, #32
 800b5b2:	d104      	bne.n	800b5be <__gethex+0x1e6>
 800b5b4:	f845 bb04 	str.w	fp, [r5], #4
 800b5b8:	f04f 0b00 	mov.w	fp, #0
 800b5bc:	465b      	mov	r3, fp
 800b5be:	7830      	ldrb	r0, [r6, #0]
 800b5c0:	9303      	str	r3, [sp, #12]
 800b5c2:	f7ff fef3 	bl	800b3ac <__hexdig_fun>
 800b5c6:	9b03      	ldr	r3, [sp, #12]
 800b5c8:	f000 000f 	and.w	r0, r0, #15
 800b5cc:	4098      	lsls	r0, r3
 800b5ce:	ea4b 0b00 	orr.w	fp, fp, r0
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	e7ae      	b.n	800b534 <__gethex+0x15c>
 800b5d6:	45b1      	cmp	r9, r6
 800b5d8:	d8ea      	bhi.n	800b5b0 <__gethex+0x1d8>
 800b5da:	492b      	ldr	r1, [pc, #172]	@ (800b688 <__gethex+0x2b0>)
 800b5dc:	9303      	str	r3, [sp, #12]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7ff fd20 	bl	800b026 <strncmp>
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d1e1      	bne.n	800b5b0 <__gethex+0x1d8>
 800b5ec:	e7a2      	b.n	800b534 <__gethex+0x15c>
 800b5ee:	1ea9      	subs	r1, r5, #2
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 fe6b 	bl	800c2cc <__any_on>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d0c2      	beq.n	800b580 <__gethex+0x1a8>
 800b5fa:	f04f 0903 	mov.w	r9, #3
 800b5fe:	e7c1      	b.n	800b584 <__gethex+0x1ac>
 800b600:	da09      	bge.n	800b616 <__gethex+0x23e>
 800b602:	1b75      	subs	r5, r6, r5
 800b604:	4621      	mov	r1, r4
 800b606:	9801      	ldr	r0, [sp, #4]
 800b608:	462a      	mov	r2, r5
 800b60a:	f000 fc29 	bl	800be60 <__lshift>
 800b60e:	1b7f      	subs	r7, r7, r5
 800b610:	4604      	mov	r4, r0
 800b612:	f100 0a14 	add.w	sl, r0, #20
 800b616:	f04f 0900 	mov.w	r9, #0
 800b61a:	e7b8      	b.n	800b58e <__gethex+0x1b6>
 800b61c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b620:	42bd      	cmp	r5, r7
 800b622:	dd6f      	ble.n	800b704 <__gethex+0x32c>
 800b624:	1bed      	subs	r5, r5, r7
 800b626:	42ae      	cmp	r6, r5
 800b628:	dc34      	bgt.n	800b694 <__gethex+0x2bc>
 800b62a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d022      	beq.n	800b678 <__gethex+0x2a0>
 800b632:	2b03      	cmp	r3, #3
 800b634:	d024      	beq.n	800b680 <__gethex+0x2a8>
 800b636:	2b01      	cmp	r3, #1
 800b638:	d115      	bne.n	800b666 <__gethex+0x28e>
 800b63a:	42ae      	cmp	r6, r5
 800b63c:	d113      	bne.n	800b666 <__gethex+0x28e>
 800b63e:	2e01      	cmp	r6, #1
 800b640:	d10b      	bne.n	800b65a <__gethex+0x282>
 800b642:	9a02      	ldr	r2, [sp, #8]
 800b644:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	2301      	movs	r3, #1
 800b64c:	6123      	str	r3, [r4, #16]
 800b64e:	f8ca 3000 	str.w	r3, [sl]
 800b652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b654:	2562      	movs	r5, #98	@ 0x62
 800b656:	601c      	str	r4, [r3, #0]
 800b658:	e73a      	b.n	800b4d0 <__gethex+0xf8>
 800b65a:	1e71      	subs	r1, r6, #1
 800b65c:	4620      	mov	r0, r4
 800b65e:	f000 fe35 	bl	800c2cc <__any_on>
 800b662:	2800      	cmp	r0, #0
 800b664:	d1ed      	bne.n	800b642 <__gethex+0x26a>
 800b666:	9801      	ldr	r0, [sp, #4]
 800b668:	4621      	mov	r1, r4
 800b66a:	f000 f9e1 	bl	800ba30 <_Bfree>
 800b66e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b670:	2300      	movs	r3, #0
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	2550      	movs	r5, #80	@ 0x50
 800b676:	e72b      	b.n	800b4d0 <__gethex+0xf8>
 800b678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1f3      	bne.n	800b666 <__gethex+0x28e>
 800b67e:	e7e0      	b.n	800b642 <__gethex+0x26a>
 800b680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1dd      	bne.n	800b642 <__gethex+0x26a>
 800b686:	e7ee      	b.n	800b666 <__gethex+0x28e>
 800b688:	0800cd6c 	.word	0x0800cd6c
 800b68c:	0800ce85 	.word	0x0800ce85
 800b690:	0800ce96 	.word	0x0800ce96
 800b694:	1e6f      	subs	r7, r5, #1
 800b696:	f1b9 0f00 	cmp.w	r9, #0
 800b69a:	d130      	bne.n	800b6fe <__gethex+0x326>
 800b69c:	b127      	cbz	r7, 800b6a8 <__gethex+0x2d0>
 800b69e:	4639      	mov	r1, r7
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 fe13 	bl	800c2cc <__any_on>
 800b6a6:	4681      	mov	r9, r0
 800b6a8:	117a      	asrs	r2, r7, #5
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6b0:	f007 071f 	and.w	r7, r7, #31
 800b6b4:	40bb      	lsls	r3, r7
 800b6b6:	4213      	tst	r3, r2
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	bf18      	it	ne
 800b6be:	f049 0902 	orrne.w	r9, r9, #2
 800b6c2:	f7ff fe21 	bl	800b308 <rshift>
 800b6c6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b6ca:	1b76      	subs	r6, r6, r5
 800b6cc:	2502      	movs	r5, #2
 800b6ce:	f1b9 0f00 	cmp.w	r9, #0
 800b6d2:	d047      	beq.n	800b764 <__gethex+0x38c>
 800b6d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d015      	beq.n	800b708 <__gethex+0x330>
 800b6dc:	2b03      	cmp	r3, #3
 800b6de:	d017      	beq.n	800b710 <__gethex+0x338>
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d109      	bne.n	800b6f8 <__gethex+0x320>
 800b6e4:	f019 0f02 	tst.w	r9, #2
 800b6e8:	d006      	beq.n	800b6f8 <__gethex+0x320>
 800b6ea:	f8da 3000 	ldr.w	r3, [sl]
 800b6ee:	ea49 0903 	orr.w	r9, r9, r3
 800b6f2:	f019 0f01 	tst.w	r9, #1
 800b6f6:	d10e      	bne.n	800b716 <__gethex+0x33e>
 800b6f8:	f045 0510 	orr.w	r5, r5, #16
 800b6fc:	e032      	b.n	800b764 <__gethex+0x38c>
 800b6fe:	f04f 0901 	mov.w	r9, #1
 800b702:	e7d1      	b.n	800b6a8 <__gethex+0x2d0>
 800b704:	2501      	movs	r5, #1
 800b706:	e7e2      	b.n	800b6ce <__gethex+0x2f6>
 800b708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b70a:	f1c3 0301 	rsb	r3, r3, #1
 800b70e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0f0      	beq.n	800b6f8 <__gethex+0x320>
 800b716:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b71a:	f104 0314 	add.w	r3, r4, #20
 800b71e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b722:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b726:	f04f 0c00 	mov.w	ip, #0
 800b72a:	4618      	mov	r0, r3
 800b72c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b730:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b734:	d01b      	beq.n	800b76e <__gethex+0x396>
 800b736:	3201      	adds	r2, #1
 800b738:	6002      	str	r2, [r0, #0]
 800b73a:	2d02      	cmp	r5, #2
 800b73c:	f104 0314 	add.w	r3, r4, #20
 800b740:	d13c      	bne.n	800b7bc <__gethex+0x3e4>
 800b742:	f8d8 2000 	ldr.w	r2, [r8]
 800b746:	3a01      	subs	r2, #1
 800b748:	42b2      	cmp	r2, r6
 800b74a:	d109      	bne.n	800b760 <__gethex+0x388>
 800b74c:	1171      	asrs	r1, r6, #5
 800b74e:	2201      	movs	r2, #1
 800b750:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b754:	f006 061f 	and.w	r6, r6, #31
 800b758:	fa02 f606 	lsl.w	r6, r2, r6
 800b75c:	421e      	tst	r6, r3
 800b75e:	d13a      	bne.n	800b7d6 <__gethex+0x3fe>
 800b760:	f045 0520 	orr.w	r5, r5, #32
 800b764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b766:	601c      	str	r4, [r3, #0]
 800b768:	9b02      	ldr	r3, [sp, #8]
 800b76a:	601f      	str	r7, [r3, #0]
 800b76c:	e6b0      	b.n	800b4d0 <__gethex+0xf8>
 800b76e:	4299      	cmp	r1, r3
 800b770:	f843 cc04 	str.w	ip, [r3, #-4]
 800b774:	d8d9      	bhi.n	800b72a <__gethex+0x352>
 800b776:	68a3      	ldr	r3, [r4, #8]
 800b778:	459b      	cmp	fp, r3
 800b77a:	db17      	blt.n	800b7ac <__gethex+0x3d4>
 800b77c:	6861      	ldr	r1, [r4, #4]
 800b77e:	9801      	ldr	r0, [sp, #4]
 800b780:	3101      	adds	r1, #1
 800b782:	f000 f915 	bl	800b9b0 <_Balloc>
 800b786:	4681      	mov	r9, r0
 800b788:	b918      	cbnz	r0, 800b792 <__gethex+0x3ba>
 800b78a:	4b1a      	ldr	r3, [pc, #104]	@ (800b7f4 <__gethex+0x41c>)
 800b78c:	4602      	mov	r2, r0
 800b78e:	2184      	movs	r1, #132	@ 0x84
 800b790:	e6c5      	b.n	800b51e <__gethex+0x146>
 800b792:	6922      	ldr	r2, [r4, #16]
 800b794:	3202      	adds	r2, #2
 800b796:	f104 010c 	add.w	r1, r4, #12
 800b79a:	0092      	lsls	r2, r2, #2
 800b79c:	300c      	adds	r0, #12
 800b79e:	f7ff fd34 	bl	800b20a <memcpy>
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	9801      	ldr	r0, [sp, #4]
 800b7a6:	f000 f943 	bl	800ba30 <_Bfree>
 800b7aa:	464c      	mov	r4, r9
 800b7ac:	6923      	ldr	r3, [r4, #16]
 800b7ae:	1c5a      	adds	r2, r3, #1
 800b7b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7b4:	6122      	str	r2, [r4, #16]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	615a      	str	r2, [r3, #20]
 800b7ba:	e7be      	b.n	800b73a <__gethex+0x362>
 800b7bc:	6922      	ldr	r2, [r4, #16]
 800b7be:	455a      	cmp	r2, fp
 800b7c0:	dd0b      	ble.n	800b7da <__gethex+0x402>
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f7ff fd9f 	bl	800b308 <rshift>
 800b7ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7ce:	3701      	adds	r7, #1
 800b7d0:	42bb      	cmp	r3, r7
 800b7d2:	f6ff aee0 	blt.w	800b596 <__gethex+0x1be>
 800b7d6:	2501      	movs	r5, #1
 800b7d8:	e7c2      	b.n	800b760 <__gethex+0x388>
 800b7da:	f016 061f 	ands.w	r6, r6, #31
 800b7de:	d0fa      	beq.n	800b7d6 <__gethex+0x3fe>
 800b7e0:	4453      	add	r3, sl
 800b7e2:	f1c6 0620 	rsb	r6, r6, #32
 800b7e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b7ea:	f000 f9d3 	bl	800bb94 <__hi0bits>
 800b7ee:	42b0      	cmp	r0, r6
 800b7f0:	dbe7      	blt.n	800b7c2 <__gethex+0x3ea>
 800b7f2:	e7f0      	b.n	800b7d6 <__gethex+0x3fe>
 800b7f4:	0800ce85 	.word	0x0800ce85

0800b7f8 <L_shift>:
 800b7f8:	f1c2 0208 	rsb	r2, r2, #8
 800b7fc:	0092      	lsls	r2, r2, #2
 800b7fe:	b570      	push	{r4, r5, r6, lr}
 800b800:	f1c2 0620 	rsb	r6, r2, #32
 800b804:	6843      	ldr	r3, [r0, #4]
 800b806:	6804      	ldr	r4, [r0, #0]
 800b808:	fa03 f506 	lsl.w	r5, r3, r6
 800b80c:	432c      	orrs	r4, r5
 800b80e:	40d3      	lsrs	r3, r2
 800b810:	6004      	str	r4, [r0, #0]
 800b812:	f840 3f04 	str.w	r3, [r0, #4]!
 800b816:	4288      	cmp	r0, r1
 800b818:	d3f4      	bcc.n	800b804 <L_shift+0xc>
 800b81a:	bd70      	pop	{r4, r5, r6, pc}

0800b81c <__match>:
 800b81c:	b530      	push	{r4, r5, lr}
 800b81e:	6803      	ldr	r3, [r0, #0]
 800b820:	3301      	adds	r3, #1
 800b822:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b826:	b914      	cbnz	r4, 800b82e <__match+0x12>
 800b828:	6003      	str	r3, [r0, #0]
 800b82a:	2001      	movs	r0, #1
 800b82c:	bd30      	pop	{r4, r5, pc}
 800b82e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b832:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b836:	2d19      	cmp	r5, #25
 800b838:	bf98      	it	ls
 800b83a:	3220      	addls	r2, #32
 800b83c:	42a2      	cmp	r2, r4
 800b83e:	d0f0      	beq.n	800b822 <__match+0x6>
 800b840:	2000      	movs	r0, #0
 800b842:	e7f3      	b.n	800b82c <__match+0x10>

0800b844 <__hexnan>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	680b      	ldr	r3, [r1, #0]
 800b84a:	6801      	ldr	r1, [r0, #0]
 800b84c:	115e      	asrs	r6, r3, #5
 800b84e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b852:	f013 031f 	ands.w	r3, r3, #31
 800b856:	b087      	sub	sp, #28
 800b858:	bf18      	it	ne
 800b85a:	3604      	addne	r6, #4
 800b85c:	2500      	movs	r5, #0
 800b85e:	1f37      	subs	r7, r6, #4
 800b860:	4682      	mov	sl, r0
 800b862:	4690      	mov	r8, r2
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	f846 5c04 	str.w	r5, [r6, #-4]
 800b86a:	46b9      	mov	r9, r7
 800b86c:	463c      	mov	r4, r7
 800b86e:	9502      	str	r5, [sp, #8]
 800b870:	46ab      	mov	fp, r5
 800b872:	784a      	ldrb	r2, [r1, #1]
 800b874:	1c4b      	adds	r3, r1, #1
 800b876:	9303      	str	r3, [sp, #12]
 800b878:	b342      	cbz	r2, 800b8cc <__hexnan+0x88>
 800b87a:	4610      	mov	r0, r2
 800b87c:	9105      	str	r1, [sp, #20]
 800b87e:	9204      	str	r2, [sp, #16]
 800b880:	f7ff fd94 	bl	800b3ac <__hexdig_fun>
 800b884:	2800      	cmp	r0, #0
 800b886:	d151      	bne.n	800b92c <__hexnan+0xe8>
 800b888:	9a04      	ldr	r2, [sp, #16]
 800b88a:	9905      	ldr	r1, [sp, #20]
 800b88c:	2a20      	cmp	r2, #32
 800b88e:	d818      	bhi.n	800b8c2 <__hexnan+0x7e>
 800b890:	9b02      	ldr	r3, [sp, #8]
 800b892:	459b      	cmp	fp, r3
 800b894:	dd13      	ble.n	800b8be <__hexnan+0x7a>
 800b896:	454c      	cmp	r4, r9
 800b898:	d206      	bcs.n	800b8a8 <__hexnan+0x64>
 800b89a:	2d07      	cmp	r5, #7
 800b89c:	dc04      	bgt.n	800b8a8 <__hexnan+0x64>
 800b89e:	462a      	mov	r2, r5
 800b8a0:	4649      	mov	r1, r9
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff ffa8 	bl	800b7f8 <L_shift>
 800b8a8:	4544      	cmp	r4, r8
 800b8aa:	d952      	bls.n	800b952 <__hexnan+0x10e>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f1a4 0904 	sub.w	r9, r4, #4
 800b8b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8b6:	f8cd b008 	str.w	fp, [sp, #8]
 800b8ba:	464c      	mov	r4, r9
 800b8bc:	461d      	mov	r5, r3
 800b8be:	9903      	ldr	r1, [sp, #12]
 800b8c0:	e7d7      	b.n	800b872 <__hexnan+0x2e>
 800b8c2:	2a29      	cmp	r2, #41	@ 0x29
 800b8c4:	d157      	bne.n	800b976 <__hexnan+0x132>
 800b8c6:	3102      	adds	r1, #2
 800b8c8:	f8ca 1000 	str.w	r1, [sl]
 800b8cc:	f1bb 0f00 	cmp.w	fp, #0
 800b8d0:	d051      	beq.n	800b976 <__hexnan+0x132>
 800b8d2:	454c      	cmp	r4, r9
 800b8d4:	d206      	bcs.n	800b8e4 <__hexnan+0xa0>
 800b8d6:	2d07      	cmp	r5, #7
 800b8d8:	dc04      	bgt.n	800b8e4 <__hexnan+0xa0>
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4649      	mov	r1, r9
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f7ff ff8a 	bl	800b7f8 <L_shift>
 800b8e4:	4544      	cmp	r4, r8
 800b8e6:	d936      	bls.n	800b956 <__hexnan+0x112>
 800b8e8:	f1a8 0204 	sub.w	r2, r8, #4
 800b8ec:	4623      	mov	r3, r4
 800b8ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8f6:	429f      	cmp	r7, r3
 800b8f8:	d2f9      	bcs.n	800b8ee <__hexnan+0xaa>
 800b8fa:	1b3b      	subs	r3, r7, r4
 800b8fc:	f023 0303 	bic.w	r3, r3, #3
 800b900:	3304      	adds	r3, #4
 800b902:	3401      	adds	r4, #1
 800b904:	3e03      	subs	r6, #3
 800b906:	42b4      	cmp	r4, r6
 800b908:	bf88      	it	hi
 800b90a:	2304      	movhi	r3, #4
 800b90c:	4443      	add	r3, r8
 800b90e:	2200      	movs	r2, #0
 800b910:	f843 2b04 	str.w	r2, [r3], #4
 800b914:	429f      	cmp	r7, r3
 800b916:	d2fb      	bcs.n	800b910 <__hexnan+0xcc>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	b91b      	cbnz	r3, 800b924 <__hexnan+0xe0>
 800b91c:	4547      	cmp	r7, r8
 800b91e:	d128      	bne.n	800b972 <__hexnan+0x12e>
 800b920:	2301      	movs	r3, #1
 800b922:	603b      	str	r3, [r7, #0]
 800b924:	2005      	movs	r0, #5
 800b926:	b007      	add	sp, #28
 800b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92c:	3501      	adds	r5, #1
 800b92e:	2d08      	cmp	r5, #8
 800b930:	f10b 0b01 	add.w	fp, fp, #1
 800b934:	dd06      	ble.n	800b944 <__hexnan+0x100>
 800b936:	4544      	cmp	r4, r8
 800b938:	d9c1      	bls.n	800b8be <__hexnan+0x7a>
 800b93a:	2300      	movs	r3, #0
 800b93c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b940:	2501      	movs	r5, #1
 800b942:	3c04      	subs	r4, #4
 800b944:	6822      	ldr	r2, [r4, #0]
 800b946:	f000 000f 	and.w	r0, r0, #15
 800b94a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b94e:	6020      	str	r0, [r4, #0]
 800b950:	e7b5      	b.n	800b8be <__hexnan+0x7a>
 800b952:	2508      	movs	r5, #8
 800b954:	e7b3      	b.n	800b8be <__hexnan+0x7a>
 800b956:	9b01      	ldr	r3, [sp, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d0dd      	beq.n	800b918 <__hexnan+0xd4>
 800b95c:	f1c3 0320 	rsb	r3, r3, #32
 800b960:	f04f 32ff 	mov.w	r2, #4294967295
 800b964:	40da      	lsrs	r2, r3
 800b966:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b96a:	4013      	ands	r3, r2
 800b96c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b970:	e7d2      	b.n	800b918 <__hexnan+0xd4>
 800b972:	3f04      	subs	r7, #4
 800b974:	e7d0      	b.n	800b918 <__hexnan+0xd4>
 800b976:	2004      	movs	r0, #4
 800b978:	e7d5      	b.n	800b926 <__hexnan+0xe2>
	...

0800b97c <malloc>:
 800b97c:	4b02      	ldr	r3, [pc, #8]	@ (800b988 <malloc+0xc>)
 800b97e:	4601      	mov	r1, r0
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	f7fe bbf9 	b.w	800a178 <_malloc_r>
 800b986:	bf00      	nop
 800b988:	24000198 	.word	0x24000198

0800b98c <__ascii_mbtowc>:
 800b98c:	b082      	sub	sp, #8
 800b98e:	b901      	cbnz	r1, 800b992 <__ascii_mbtowc+0x6>
 800b990:	a901      	add	r1, sp, #4
 800b992:	b142      	cbz	r2, 800b9a6 <__ascii_mbtowc+0x1a>
 800b994:	b14b      	cbz	r3, 800b9aa <__ascii_mbtowc+0x1e>
 800b996:	7813      	ldrb	r3, [r2, #0]
 800b998:	600b      	str	r3, [r1, #0]
 800b99a:	7812      	ldrb	r2, [r2, #0]
 800b99c:	1e10      	subs	r0, r2, #0
 800b99e:	bf18      	it	ne
 800b9a0:	2001      	movne	r0, #1
 800b9a2:	b002      	add	sp, #8
 800b9a4:	4770      	bx	lr
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	e7fb      	b.n	800b9a2 <__ascii_mbtowc+0x16>
 800b9aa:	f06f 0001 	mvn.w	r0, #1
 800b9ae:	e7f8      	b.n	800b9a2 <__ascii_mbtowc+0x16>

0800b9b0 <_Balloc>:
 800b9b0:	b570      	push	{r4, r5, r6, lr}
 800b9b2:	69c6      	ldr	r6, [r0, #28]
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	460d      	mov	r5, r1
 800b9b8:	b976      	cbnz	r6, 800b9d8 <_Balloc+0x28>
 800b9ba:	2010      	movs	r0, #16
 800b9bc:	f7ff ffde 	bl	800b97c <malloc>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	61e0      	str	r0, [r4, #28]
 800b9c4:	b920      	cbnz	r0, 800b9d0 <_Balloc+0x20>
 800b9c6:	4b18      	ldr	r3, [pc, #96]	@ (800ba28 <_Balloc+0x78>)
 800b9c8:	4818      	ldr	r0, [pc, #96]	@ (800ba2c <_Balloc+0x7c>)
 800b9ca:	216b      	movs	r1, #107	@ 0x6b
 800b9cc:	f7ff fc34 	bl	800b238 <__assert_func>
 800b9d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9d4:	6006      	str	r6, [r0, #0]
 800b9d6:	60c6      	str	r6, [r0, #12]
 800b9d8:	69e6      	ldr	r6, [r4, #28]
 800b9da:	68f3      	ldr	r3, [r6, #12]
 800b9dc:	b183      	cbz	r3, 800ba00 <_Balloc+0x50>
 800b9de:	69e3      	ldr	r3, [r4, #28]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9e6:	b9b8      	cbnz	r0, 800ba18 <_Balloc+0x68>
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b9ee:	1d72      	adds	r2, r6, #5
 800b9f0:	0092      	lsls	r2, r2, #2
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f7fe fb89 	bl	800a10a <_calloc_r>
 800b9f8:	b160      	cbz	r0, 800ba14 <_Balloc+0x64>
 800b9fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9fe:	e00e      	b.n	800ba1e <_Balloc+0x6e>
 800ba00:	2221      	movs	r2, #33	@ 0x21
 800ba02:	2104      	movs	r1, #4
 800ba04:	4620      	mov	r0, r4
 800ba06:	f7fe fb80 	bl	800a10a <_calloc_r>
 800ba0a:	69e3      	ldr	r3, [r4, #28]
 800ba0c:	60f0      	str	r0, [r6, #12]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e4      	bne.n	800b9de <_Balloc+0x2e>
 800ba14:	2000      	movs	r0, #0
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	6802      	ldr	r2, [r0, #0]
 800ba1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba24:	e7f7      	b.n	800ba16 <_Balloc+0x66>
 800ba26:	bf00      	nop
 800ba28:	0800cdd0 	.word	0x0800cdd0
 800ba2c:	0800cef6 	.word	0x0800cef6

0800ba30 <_Bfree>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	69c6      	ldr	r6, [r0, #28]
 800ba34:	4605      	mov	r5, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	b976      	cbnz	r6, 800ba58 <_Bfree+0x28>
 800ba3a:	2010      	movs	r0, #16
 800ba3c:	f7ff ff9e 	bl	800b97c <malloc>
 800ba40:	4602      	mov	r2, r0
 800ba42:	61e8      	str	r0, [r5, #28]
 800ba44:	b920      	cbnz	r0, 800ba50 <_Bfree+0x20>
 800ba46:	4b09      	ldr	r3, [pc, #36]	@ (800ba6c <_Bfree+0x3c>)
 800ba48:	4809      	ldr	r0, [pc, #36]	@ (800ba70 <_Bfree+0x40>)
 800ba4a:	218f      	movs	r1, #143	@ 0x8f
 800ba4c:	f7ff fbf4 	bl	800b238 <__assert_func>
 800ba50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba54:	6006      	str	r6, [r0, #0]
 800ba56:	60c6      	str	r6, [r0, #12]
 800ba58:	b13c      	cbz	r4, 800ba6a <_Bfree+0x3a>
 800ba5a:	69eb      	ldr	r3, [r5, #28]
 800ba5c:	6862      	ldr	r2, [r4, #4]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba64:	6021      	str	r1, [r4, #0]
 800ba66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba6a:	bd70      	pop	{r4, r5, r6, pc}
 800ba6c:	0800cdd0 	.word	0x0800cdd0
 800ba70:	0800cef6 	.word	0x0800cef6

0800ba74 <__multadd>:
 800ba74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba78:	690d      	ldr	r5, [r1, #16]
 800ba7a:	4607      	mov	r7, r0
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	461e      	mov	r6, r3
 800ba80:	f101 0c14 	add.w	ip, r1, #20
 800ba84:	2000      	movs	r0, #0
 800ba86:	f8dc 3000 	ldr.w	r3, [ip]
 800ba8a:	b299      	uxth	r1, r3
 800ba8c:	fb02 6101 	mla	r1, r2, r1, r6
 800ba90:	0c1e      	lsrs	r6, r3, #16
 800ba92:	0c0b      	lsrs	r3, r1, #16
 800ba94:	fb02 3306 	mla	r3, r2, r6, r3
 800ba98:	b289      	uxth	r1, r1
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800baa0:	4285      	cmp	r5, r0
 800baa2:	f84c 1b04 	str.w	r1, [ip], #4
 800baa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800baaa:	dcec      	bgt.n	800ba86 <__multadd+0x12>
 800baac:	b30e      	cbz	r6, 800baf2 <__multadd+0x7e>
 800baae:	68a3      	ldr	r3, [r4, #8]
 800bab0:	42ab      	cmp	r3, r5
 800bab2:	dc19      	bgt.n	800bae8 <__multadd+0x74>
 800bab4:	6861      	ldr	r1, [r4, #4]
 800bab6:	4638      	mov	r0, r7
 800bab8:	3101      	adds	r1, #1
 800baba:	f7ff ff79 	bl	800b9b0 <_Balloc>
 800babe:	4680      	mov	r8, r0
 800bac0:	b928      	cbnz	r0, 800bace <__multadd+0x5a>
 800bac2:	4602      	mov	r2, r0
 800bac4:	4b0c      	ldr	r3, [pc, #48]	@ (800baf8 <__multadd+0x84>)
 800bac6:	480d      	ldr	r0, [pc, #52]	@ (800bafc <__multadd+0x88>)
 800bac8:	21ba      	movs	r1, #186	@ 0xba
 800baca:	f7ff fbb5 	bl	800b238 <__assert_func>
 800bace:	6922      	ldr	r2, [r4, #16]
 800bad0:	3202      	adds	r2, #2
 800bad2:	f104 010c 	add.w	r1, r4, #12
 800bad6:	0092      	lsls	r2, r2, #2
 800bad8:	300c      	adds	r0, #12
 800bada:	f7ff fb96 	bl	800b20a <memcpy>
 800bade:	4621      	mov	r1, r4
 800bae0:	4638      	mov	r0, r7
 800bae2:	f7ff ffa5 	bl	800ba30 <_Bfree>
 800bae6:	4644      	mov	r4, r8
 800bae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800baec:	3501      	adds	r5, #1
 800baee:	615e      	str	r6, [r3, #20]
 800baf0:	6125      	str	r5, [r4, #16]
 800baf2:	4620      	mov	r0, r4
 800baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf8:	0800ce85 	.word	0x0800ce85
 800bafc:	0800cef6 	.word	0x0800cef6

0800bb00 <__s2b>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	460c      	mov	r4, r1
 800bb06:	4615      	mov	r5, r2
 800bb08:	461f      	mov	r7, r3
 800bb0a:	2209      	movs	r2, #9
 800bb0c:	3308      	adds	r3, #8
 800bb0e:	4606      	mov	r6, r0
 800bb10:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb14:	2100      	movs	r1, #0
 800bb16:	2201      	movs	r2, #1
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	db09      	blt.n	800bb30 <__s2b+0x30>
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7ff ff47 	bl	800b9b0 <_Balloc>
 800bb22:	b940      	cbnz	r0, 800bb36 <__s2b+0x36>
 800bb24:	4602      	mov	r2, r0
 800bb26:	4b19      	ldr	r3, [pc, #100]	@ (800bb8c <__s2b+0x8c>)
 800bb28:	4819      	ldr	r0, [pc, #100]	@ (800bb90 <__s2b+0x90>)
 800bb2a:	21d3      	movs	r1, #211	@ 0xd3
 800bb2c:	f7ff fb84 	bl	800b238 <__assert_func>
 800bb30:	0052      	lsls	r2, r2, #1
 800bb32:	3101      	adds	r1, #1
 800bb34:	e7f0      	b.n	800bb18 <__s2b+0x18>
 800bb36:	9b08      	ldr	r3, [sp, #32]
 800bb38:	6143      	str	r3, [r0, #20]
 800bb3a:	2d09      	cmp	r5, #9
 800bb3c:	f04f 0301 	mov.w	r3, #1
 800bb40:	6103      	str	r3, [r0, #16]
 800bb42:	dd16      	ble.n	800bb72 <__s2b+0x72>
 800bb44:	f104 0909 	add.w	r9, r4, #9
 800bb48:	46c8      	mov	r8, r9
 800bb4a:	442c      	add	r4, r5
 800bb4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb50:	4601      	mov	r1, r0
 800bb52:	3b30      	subs	r3, #48	@ 0x30
 800bb54:	220a      	movs	r2, #10
 800bb56:	4630      	mov	r0, r6
 800bb58:	f7ff ff8c 	bl	800ba74 <__multadd>
 800bb5c:	45a0      	cmp	r8, r4
 800bb5e:	d1f5      	bne.n	800bb4c <__s2b+0x4c>
 800bb60:	f1a5 0408 	sub.w	r4, r5, #8
 800bb64:	444c      	add	r4, r9
 800bb66:	1b2d      	subs	r5, r5, r4
 800bb68:	1963      	adds	r3, r4, r5
 800bb6a:	42bb      	cmp	r3, r7
 800bb6c:	db04      	blt.n	800bb78 <__s2b+0x78>
 800bb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb72:	340a      	adds	r4, #10
 800bb74:	2509      	movs	r5, #9
 800bb76:	e7f6      	b.n	800bb66 <__s2b+0x66>
 800bb78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb7c:	4601      	mov	r1, r0
 800bb7e:	3b30      	subs	r3, #48	@ 0x30
 800bb80:	220a      	movs	r2, #10
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ff76 	bl	800ba74 <__multadd>
 800bb88:	e7ee      	b.n	800bb68 <__s2b+0x68>
 800bb8a:	bf00      	nop
 800bb8c:	0800ce85 	.word	0x0800ce85
 800bb90:	0800cef6 	.word	0x0800cef6

0800bb94 <__hi0bits>:
 800bb94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb98:	4603      	mov	r3, r0
 800bb9a:	bf36      	itet	cc
 800bb9c:	0403      	lslcc	r3, r0, #16
 800bb9e:	2000      	movcs	r0, #0
 800bba0:	2010      	movcc	r0, #16
 800bba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bba6:	bf3c      	itt	cc
 800bba8:	021b      	lslcc	r3, r3, #8
 800bbaa:	3008      	addcc	r0, #8
 800bbac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbb0:	bf3c      	itt	cc
 800bbb2:	011b      	lslcc	r3, r3, #4
 800bbb4:	3004      	addcc	r0, #4
 800bbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbba:	bf3c      	itt	cc
 800bbbc:	009b      	lslcc	r3, r3, #2
 800bbbe:	3002      	addcc	r0, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	db05      	blt.n	800bbd0 <__hi0bits+0x3c>
 800bbc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bbc8:	f100 0001 	add.w	r0, r0, #1
 800bbcc:	bf08      	it	eq
 800bbce:	2020      	moveq	r0, #32
 800bbd0:	4770      	bx	lr

0800bbd2 <__lo0bits>:
 800bbd2:	6803      	ldr	r3, [r0, #0]
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	f013 0007 	ands.w	r0, r3, #7
 800bbda:	d00b      	beq.n	800bbf4 <__lo0bits+0x22>
 800bbdc:	07d9      	lsls	r1, r3, #31
 800bbde:	d421      	bmi.n	800bc24 <__lo0bits+0x52>
 800bbe0:	0798      	lsls	r0, r3, #30
 800bbe2:	bf49      	itett	mi
 800bbe4:	085b      	lsrmi	r3, r3, #1
 800bbe6:	089b      	lsrpl	r3, r3, #2
 800bbe8:	2001      	movmi	r0, #1
 800bbea:	6013      	strmi	r3, [r2, #0]
 800bbec:	bf5c      	itt	pl
 800bbee:	6013      	strpl	r3, [r2, #0]
 800bbf0:	2002      	movpl	r0, #2
 800bbf2:	4770      	bx	lr
 800bbf4:	b299      	uxth	r1, r3
 800bbf6:	b909      	cbnz	r1, 800bbfc <__lo0bits+0x2a>
 800bbf8:	0c1b      	lsrs	r3, r3, #16
 800bbfa:	2010      	movs	r0, #16
 800bbfc:	b2d9      	uxtb	r1, r3
 800bbfe:	b909      	cbnz	r1, 800bc04 <__lo0bits+0x32>
 800bc00:	3008      	adds	r0, #8
 800bc02:	0a1b      	lsrs	r3, r3, #8
 800bc04:	0719      	lsls	r1, r3, #28
 800bc06:	bf04      	itt	eq
 800bc08:	091b      	lsreq	r3, r3, #4
 800bc0a:	3004      	addeq	r0, #4
 800bc0c:	0799      	lsls	r1, r3, #30
 800bc0e:	bf04      	itt	eq
 800bc10:	089b      	lsreq	r3, r3, #2
 800bc12:	3002      	addeq	r0, #2
 800bc14:	07d9      	lsls	r1, r3, #31
 800bc16:	d403      	bmi.n	800bc20 <__lo0bits+0x4e>
 800bc18:	085b      	lsrs	r3, r3, #1
 800bc1a:	f100 0001 	add.w	r0, r0, #1
 800bc1e:	d003      	beq.n	800bc28 <__lo0bits+0x56>
 800bc20:	6013      	str	r3, [r2, #0]
 800bc22:	4770      	bx	lr
 800bc24:	2000      	movs	r0, #0
 800bc26:	4770      	bx	lr
 800bc28:	2020      	movs	r0, #32
 800bc2a:	4770      	bx	lr

0800bc2c <__i2b>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	460c      	mov	r4, r1
 800bc30:	2101      	movs	r1, #1
 800bc32:	f7ff febd 	bl	800b9b0 <_Balloc>
 800bc36:	4602      	mov	r2, r0
 800bc38:	b928      	cbnz	r0, 800bc46 <__i2b+0x1a>
 800bc3a:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <__i2b+0x24>)
 800bc3c:	4805      	ldr	r0, [pc, #20]	@ (800bc54 <__i2b+0x28>)
 800bc3e:	f240 1145 	movw	r1, #325	@ 0x145
 800bc42:	f7ff faf9 	bl	800b238 <__assert_func>
 800bc46:	2301      	movs	r3, #1
 800bc48:	6144      	str	r4, [r0, #20]
 800bc4a:	6103      	str	r3, [r0, #16]
 800bc4c:	bd10      	pop	{r4, pc}
 800bc4e:	bf00      	nop
 800bc50:	0800ce85 	.word	0x0800ce85
 800bc54:	0800cef6 	.word	0x0800cef6

0800bc58 <__multiply>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	4614      	mov	r4, r2
 800bc5e:	690a      	ldr	r2, [r1, #16]
 800bc60:	6923      	ldr	r3, [r4, #16]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	bfa8      	it	ge
 800bc66:	4623      	movge	r3, r4
 800bc68:	460f      	mov	r7, r1
 800bc6a:	bfa4      	itt	ge
 800bc6c:	460c      	movge	r4, r1
 800bc6e:	461f      	movge	r7, r3
 800bc70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc78:	68a3      	ldr	r3, [r4, #8]
 800bc7a:	6861      	ldr	r1, [r4, #4]
 800bc7c:	eb0a 0609 	add.w	r6, sl, r9
 800bc80:	42b3      	cmp	r3, r6
 800bc82:	b085      	sub	sp, #20
 800bc84:	bfb8      	it	lt
 800bc86:	3101      	addlt	r1, #1
 800bc88:	f7ff fe92 	bl	800b9b0 <_Balloc>
 800bc8c:	b930      	cbnz	r0, 800bc9c <__multiply+0x44>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	4b44      	ldr	r3, [pc, #272]	@ (800bda4 <__multiply+0x14c>)
 800bc92:	4845      	ldr	r0, [pc, #276]	@ (800bda8 <__multiply+0x150>)
 800bc94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc98:	f7ff face 	bl	800b238 <__assert_func>
 800bc9c:	f100 0514 	add.w	r5, r0, #20
 800bca0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bca4:	462b      	mov	r3, r5
 800bca6:	2200      	movs	r2, #0
 800bca8:	4543      	cmp	r3, r8
 800bcaa:	d321      	bcc.n	800bcf0 <__multiply+0x98>
 800bcac:	f107 0114 	add.w	r1, r7, #20
 800bcb0:	f104 0214 	add.w	r2, r4, #20
 800bcb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bcb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bcbc:	9302      	str	r3, [sp, #8]
 800bcbe:	1b13      	subs	r3, r2, r4
 800bcc0:	3b15      	subs	r3, #21
 800bcc2:	f023 0303 	bic.w	r3, r3, #3
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	f104 0715 	add.w	r7, r4, #21
 800bccc:	42ba      	cmp	r2, r7
 800bcce:	bf38      	it	cc
 800bcd0:	2304      	movcc	r3, #4
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	9b02      	ldr	r3, [sp, #8]
 800bcd6:	9103      	str	r1, [sp, #12]
 800bcd8:	428b      	cmp	r3, r1
 800bcda:	d80c      	bhi.n	800bcf6 <__multiply+0x9e>
 800bcdc:	2e00      	cmp	r6, #0
 800bcde:	dd03      	ble.n	800bce8 <__multiply+0x90>
 800bce0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d05b      	beq.n	800bda0 <__multiply+0x148>
 800bce8:	6106      	str	r6, [r0, #16]
 800bcea:	b005      	add	sp, #20
 800bcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf0:	f843 2b04 	str.w	r2, [r3], #4
 800bcf4:	e7d8      	b.n	800bca8 <__multiply+0x50>
 800bcf6:	f8b1 a000 	ldrh.w	sl, [r1]
 800bcfa:	f1ba 0f00 	cmp.w	sl, #0
 800bcfe:	d024      	beq.n	800bd4a <__multiply+0xf2>
 800bd00:	f104 0e14 	add.w	lr, r4, #20
 800bd04:	46a9      	mov	r9, r5
 800bd06:	f04f 0c00 	mov.w	ip, #0
 800bd0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd0e:	f8d9 3000 	ldr.w	r3, [r9]
 800bd12:	fa1f fb87 	uxth.w	fp, r7
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	fb0a 330b 	mla	r3, sl, fp, r3
 800bd1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bd20:	f8d9 7000 	ldr.w	r7, [r9]
 800bd24:	4463      	add	r3, ip
 800bd26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd2a:	fb0a c70b 	mla	r7, sl, fp, ip
 800bd2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd38:	4572      	cmp	r2, lr
 800bd3a:	f849 3b04 	str.w	r3, [r9], #4
 800bd3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd42:	d8e2      	bhi.n	800bd0a <__multiply+0xb2>
 800bd44:	9b01      	ldr	r3, [sp, #4]
 800bd46:	f845 c003 	str.w	ip, [r5, r3]
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd50:	3104      	adds	r1, #4
 800bd52:	f1b9 0f00 	cmp.w	r9, #0
 800bd56:	d021      	beq.n	800bd9c <__multiply+0x144>
 800bd58:	682b      	ldr	r3, [r5, #0]
 800bd5a:	f104 0c14 	add.w	ip, r4, #20
 800bd5e:	46ae      	mov	lr, r5
 800bd60:	f04f 0a00 	mov.w	sl, #0
 800bd64:	f8bc b000 	ldrh.w	fp, [ip]
 800bd68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd6c:	fb09 770b 	mla	r7, r9, fp, r7
 800bd70:	4457      	add	r7, sl
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd78:	f84e 3b04 	str.w	r3, [lr], #4
 800bd7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd84:	f8be 3000 	ldrh.w	r3, [lr]
 800bd88:	fb09 330a 	mla	r3, r9, sl, r3
 800bd8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd90:	4562      	cmp	r2, ip
 800bd92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd96:	d8e5      	bhi.n	800bd64 <__multiply+0x10c>
 800bd98:	9f01      	ldr	r7, [sp, #4]
 800bd9a:	51eb      	str	r3, [r5, r7]
 800bd9c:	3504      	adds	r5, #4
 800bd9e:	e799      	b.n	800bcd4 <__multiply+0x7c>
 800bda0:	3e01      	subs	r6, #1
 800bda2:	e79b      	b.n	800bcdc <__multiply+0x84>
 800bda4:	0800ce85 	.word	0x0800ce85
 800bda8:	0800cef6 	.word	0x0800cef6

0800bdac <__pow5mult>:
 800bdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb0:	4615      	mov	r5, r2
 800bdb2:	f012 0203 	ands.w	r2, r2, #3
 800bdb6:	4607      	mov	r7, r0
 800bdb8:	460e      	mov	r6, r1
 800bdba:	d007      	beq.n	800bdcc <__pow5mult+0x20>
 800bdbc:	4c25      	ldr	r4, [pc, #148]	@ (800be54 <__pow5mult+0xa8>)
 800bdbe:	3a01      	subs	r2, #1
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdc6:	f7ff fe55 	bl	800ba74 <__multadd>
 800bdca:	4606      	mov	r6, r0
 800bdcc:	10ad      	asrs	r5, r5, #2
 800bdce:	d03d      	beq.n	800be4c <__pow5mult+0xa0>
 800bdd0:	69fc      	ldr	r4, [r7, #28]
 800bdd2:	b97c      	cbnz	r4, 800bdf4 <__pow5mult+0x48>
 800bdd4:	2010      	movs	r0, #16
 800bdd6:	f7ff fdd1 	bl	800b97c <malloc>
 800bdda:	4602      	mov	r2, r0
 800bddc:	61f8      	str	r0, [r7, #28]
 800bdde:	b928      	cbnz	r0, 800bdec <__pow5mult+0x40>
 800bde0:	4b1d      	ldr	r3, [pc, #116]	@ (800be58 <__pow5mult+0xac>)
 800bde2:	481e      	ldr	r0, [pc, #120]	@ (800be5c <__pow5mult+0xb0>)
 800bde4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bde8:	f7ff fa26 	bl	800b238 <__assert_func>
 800bdec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdf0:	6004      	str	r4, [r0, #0]
 800bdf2:	60c4      	str	r4, [r0, #12]
 800bdf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bdf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdfc:	b94c      	cbnz	r4, 800be12 <__pow5mult+0x66>
 800bdfe:	f240 2171 	movw	r1, #625	@ 0x271
 800be02:	4638      	mov	r0, r7
 800be04:	f7ff ff12 	bl	800bc2c <__i2b>
 800be08:	2300      	movs	r3, #0
 800be0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800be0e:	4604      	mov	r4, r0
 800be10:	6003      	str	r3, [r0, #0]
 800be12:	f04f 0900 	mov.w	r9, #0
 800be16:	07eb      	lsls	r3, r5, #31
 800be18:	d50a      	bpl.n	800be30 <__pow5mult+0x84>
 800be1a:	4631      	mov	r1, r6
 800be1c:	4622      	mov	r2, r4
 800be1e:	4638      	mov	r0, r7
 800be20:	f7ff ff1a 	bl	800bc58 <__multiply>
 800be24:	4631      	mov	r1, r6
 800be26:	4680      	mov	r8, r0
 800be28:	4638      	mov	r0, r7
 800be2a:	f7ff fe01 	bl	800ba30 <_Bfree>
 800be2e:	4646      	mov	r6, r8
 800be30:	106d      	asrs	r5, r5, #1
 800be32:	d00b      	beq.n	800be4c <__pow5mult+0xa0>
 800be34:	6820      	ldr	r0, [r4, #0]
 800be36:	b938      	cbnz	r0, 800be48 <__pow5mult+0x9c>
 800be38:	4622      	mov	r2, r4
 800be3a:	4621      	mov	r1, r4
 800be3c:	4638      	mov	r0, r7
 800be3e:	f7ff ff0b 	bl	800bc58 <__multiply>
 800be42:	6020      	str	r0, [r4, #0]
 800be44:	f8c0 9000 	str.w	r9, [r0]
 800be48:	4604      	mov	r4, r0
 800be4a:	e7e4      	b.n	800be16 <__pow5mult+0x6a>
 800be4c:	4630      	mov	r0, r6
 800be4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be52:	bf00      	nop
 800be54:	0800cf50 	.word	0x0800cf50
 800be58:	0800cdd0 	.word	0x0800cdd0
 800be5c:	0800cef6 	.word	0x0800cef6

0800be60 <__lshift>:
 800be60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be64:	460c      	mov	r4, r1
 800be66:	6849      	ldr	r1, [r1, #4]
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be6e:	68a3      	ldr	r3, [r4, #8]
 800be70:	4607      	mov	r7, r0
 800be72:	4691      	mov	r9, r2
 800be74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be78:	f108 0601 	add.w	r6, r8, #1
 800be7c:	42b3      	cmp	r3, r6
 800be7e:	db0b      	blt.n	800be98 <__lshift+0x38>
 800be80:	4638      	mov	r0, r7
 800be82:	f7ff fd95 	bl	800b9b0 <_Balloc>
 800be86:	4605      	mov	r5, r0
 800be88:	b948      	cbnz	r0, 800be9e <__lshift+0x3e>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b28      	ldr	r3, [pc, #160]	@ (800bf30 <__lshift+0xd0>)
 800be8e:	4829      	ldr	r0, [pc, #164]	@ (800bf34 <__lshift+0xd4>)
 800be90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be94:	f7ff f9d0 	bl	800b238 <__assert_func>
 800be98:	3101      	adds	r1, #1
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	e7ee      	b.n	800be7c <__lshift+0x1c>
 800be9e:	2300      	movs	r3, #0
 800bea0:	f100 0114 	add.w	r1, r0, #20
 800bea4:	f100 0210 	add.w	r2, r0, #16
 800bea8:	4618      	mov	r0, r3
 800beaa:	4553      	cmp	r3, sl
 800beac:	db33      	blt.n	800bf16 <__lshift+0xb6>
 800beae:	6920      	ldr	r0, [r4, #16]
 800beb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beb4:	f104 0314 	add.w	r3, r4, #20
 800beb8:	f019 091f 	ands.w	r9, r9, #31
 800bebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bec4:	d02b      	beq.n	800bf1e <__lshift+0xbe>
 800bec6:	f1c9 0e20 	rsb	lr, r9, #32
 800beca:	468a      	mov	sl, r1
 800becc:	2200      	movs	r2, #0
 800bece:	6818      	ldr	r0, [r3, #0]
 800bed0:	fa00 f009 	lsl.w	r0, r0, r9
 800bed4:	4310      	orrs	r0, r2
 800bed6:	f84a 0b04 	str.w	r0, [sl], #4
 800beda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bede:	459c      	cmp	ip, r3
 800bee0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bee4:	d8f3      	bhi.n	800bece <__lshift+0x6e>
 800bee6:	ebac 0304 	sub.w	r3, ip, r4
 800beea:	3b15      	subs	r3, #21
 800beec:	f023 0303 	bic.w	r3, r3, #3
 800bef0:	3304      	adds	r3, #4
 800bef2:	f104 0015 	add.w	r0, r4, #21
 800bef6:	4584      	cmp	ip, r0
 800bef8:	bf38      	it	cc
 800befa:	2304      	movcc	r3, #4
 800befc:	50ca      	str	r2, [r1, r3]
 800befe:	b10a      	cbz	r2, 800bf04 <__lshift+0xa4>
 800bf00:	f108 0602 	add.w	r6, r8, #2
 800bf04:	3e01      	subs	r6, #1
 800bf06:	4638      	mov	r0, r7
 800bf08:	612e      	str	r6, [r5, #16]
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	f7ff fd90 	bl	800ba30 <_Bfree>
 800bf10:	4628      	mov	r0, r5
 800bf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf16:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	e7c5      	b.n	800beaa <__lshift+0x4a>
 800bf1e:	3904      	subs	r1, #4
 800bf20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf24:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf28:	459c      	cmp	ip, r3
 800bf2a:	d8f9      	bhi.n	800bf20 <__lshift+0xc0>
 800bf2c:	e7ea      	b.n	800bf04 <__lshift+0xa4>
 800bf2e:	bf00      	nop
 800bf30:	0800ce85 	.word	0x0800ce85
 800bf34:	0800cef6 	.word	0x0800cef6

0800bf38 <__mcmp>:
 800bf38:	690a      	ldr	r2, [r1, #16]
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	6900      	ldr	r0, [r0, #16]
 800bf3e:	1a80      	subs	r0, r0, r2
 800bf40:	b530      	push	{r4, r5, lr}
 800bf42:	d10e      	bne.n	800bf62 <__mcmp+0x2a>
 800bf44:	3314      	adds	r3, #20
 800bf46:	3114      	adds	r1, #20
 800bf48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf58:	4295      	cmp	r5, r2
 800bf5a:	d003      	beq.n	800bf64 <__mcmp+0x2c>
 800bf5c:	d205      	bcs.n	800bf6a <__mcmp+0x32>
 800bf5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf62:	bd30      	pop	{r4, r5, pc}
 800bf64:	42a3      	cmp	r3, r4
 800bf66:	d3f3      	bcc.n	800bf50 <__mcmp+0x18>
 800bf68:	e7fb      	b.n	800bf62 <__mcmp+0x2a>
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	e7f9      	b.n	800bf62 <__mcmp+0x2a>
	...

0800bf70 <__mdiff>:
 800bf70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	4689      	mov	r9, r1
 800bf76:	4606      	mov	r6, r0
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4648      	mov	r0, r9
 800bf7c:	4614      	mov	r4, r2
 800bf7e:	f7ff ffdb 	bl	800bf38 <__mcmp>
 800bf82:	1e05      	subs	r5, r0, #0
 800bf84:	d112      	bne.n	800bfac <__mdiff+0x3c>
 800bf86:	4629      	mov	r1, r5
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7ff fd11 	bl	800b9b0 <_Balloc>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	b928      	cbnz	r0, 800bf9e <__mdiff+0x2e>
 800bf92:	4b3f      	ldr	r3, [pc, #252]	@ (800c090 <__mdiff+0x120>)
 800bf94:	f240 2137 	movw	r1, #567	@ 0x237
 800bf98:	483e      	ldr	r0, [pc, #248]	@ (800c094 <__mdiff+0x124>)
 800bf9a:	f7ff f94d 	bl	800b238 <__assert_func>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	b003      	add	sp, #12
 800bfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfac:	bfbc      	itt	lt
 800bfae:	464b      	movlt	r3, r9
 800bfb0:	46a1      	movlt	r9, r4
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bfb8:	bfba      	itte	lt
 800bfba:	461c      	movlt	r4, r3
 800bfbc:	2501      	movlt	r5, #1
 800bfbe:	2500      	movge	r5, #0
 800bfc0:	f7ff fcf6 	bl	800b9b0 <_Balloc>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	b918      	cbnz	r0, 800bfd0 <__mdiff+0x60>
 800bfc8:	4b31      	ldr	r3, [pc, #196]	@ (800c090 <__mdiff+0x120>)
 800bfca:	f240 2145 	movw	r1, #581	@ 0x245
 800bfce:	e7e3      	b.n	800bf98 <__mdiff+0x28>
 800bfd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bfd4:	6926      	ldr	r6, [r4, #16]
 800bfd6:	60c5      	str	r5, [r0, #12]
 800bfd8:	f109 0310 	add.w	r3, r9, #16
 800bfdc:	f109 0514 	add.w	r5, r9, #20
 800bfe0:	f104 0e14 	add.w	lr, r4, #20
 800bfe4:	f100 0b14 	add.w	fp, r0, #20
 800bfe8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bfec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	46d9      	mov	r9, fp
 800bff4:	f04f 0c00 	mov.w	ip, #0
 800bff8:	9b01      	ldr	r3, [sp, #4]
 800bffa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bffe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	fa1f f38a 	uxth.w	r3, sl
 800c008:	4619      	mov	r1, r3
 800c00a:	b283      	uxth	r3, r0
 800c00c:	1acb      	subs	r3, r1, r3
 800c00e:	0c00      	lsrs	r0, r0, #16
 800c010:	4463      	add	r3, ip
 800c012:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c016:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c020:	4576      	cmp	r6, lr
 800c022:	f849 3b04 	str.w	r3, [r9], #4
 800c026:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c02a:	d8e5      	bhi.n	800bff8 <__mdiff+0x88>
 800c02c:	1b33      	subs	r3, r6, r4
 800c02e:	3b15      	subs	r3, #21
 800c030:	f023 0303 	bic.w	r3, r3, #3
 800c034:	3415      	adds	r4, #21
 800c036:	3304      	adds	r3, #4
 800c038:	42a6      	cmp	r6, r4
 800c03a:	bf38      	it	cc
 800c03c:	2304      	movcc	r3, #4
 800c03e:	441d      	add	r5, r3
 800c040:	445b      	add	r3, fp
 800c042:	461e      	mov	r6, r3
 800c044:	462c      	mov	r4, r5
 800c046:	4544      	cmp	r4, r8
 800c048:	d30e      	bcc.n	800c068 <__mdiff+0xf8>
 800c04a:	f108 0103 	add.w	r1, r8, #3
 800c04e:	1b49      	subs	r1, r1, r5
 800c050:	f021 0103 	bic.w	r1, r1, #3
 800c054:	3d03      	subs	r5, #3
 800c056:	45a8      	cmp	r8, r5
 800c058:	bf38      	it	cc
 800c05a:	2100      	movcc	r1, #0
 800c05c:	440b      	add	r3, r1
 800c05e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c062:	b191      	cbz	r1, 800c08a <__mdiff+0x11a>
 800c064:	6117      	str	r7, [r2, #16]
 800c066:	e79d      	b.n	800bfa4 <__mdiff+0x34>
 800c068:	f854 1b04 	ldr.w	r1, [r4], #4
 800c06c:	46e6      	mov	lr, ip
 800c06e:	0c08      	lsrs	r0, r1, #16
 800c070:	fa1c fc81 	uxtah	ip, ip, r1
 800c074:	4471      	add	r1, lr
 800c076:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c07a:	b289      	uxth	r1, r1
 800c07c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c080:	f846 1b04 	str.w	r1, [r6], #4
 800c084:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c088:	e7dd      	b.n	800c046 <__mdiff+0xd6>
 800c08a:	3f01      	subs	r7, #1
 800c08c:	e7e7      	b.n	800c05e <__mdiff+0xee>
 800c08e:	bf00      	nop
 800c090:	0800ce85 	.word	0x0800ce85
 800c094:	0800cef6 	.word	0x0800cef6

0800c098 <__ulp>:
 800c098:	b082      	sub	sp, #8
 800c09a:	ed8d 0b00 	vstr	d0, [sp]
 800c09e:	9a01      	ldr	r2, [sp, #4]
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c0e0 <__ulp+0x48>)
 800c0a2:	4013      	ands	r3, r2
 800c0a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dc08      	bgt.n	800c0be <__ulp+0x26>
 800c0ac:	425b      	negs	r3, r3
 800c0ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c0b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c0b6:	da04      	bge.n	800c0c2 <__ulp+0x2a>
 800c0b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c0bc:	4113      	asrs	r3, r2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	e008      	b.n	800c0d4 <__ulp+0x3c>
 800c0c2:	f1a2 0314 	sub.w	r3, r2, #20
 800c0c6:	2b1e      	cmp	r3, #30
 800c0c8:	bfda      	itte	le
 800c0ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c0ce:	40da      	lsrle	r2, r3
 800c0d0:	2201      	movgt	r2, #1
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	ec41 0b10 	vmov	d0, r0, r1
 800c0dc:	b002      	add	sp, #8
 800c0de:	4770      	bx	lr
 800c0e0:	7ff00000 	.word	0x7ff00000

0800c0e4 <__b2d>:
 800c0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e8:	6906      	ldr	r6, [r0, #16]
 800c0ea:	f100 0814 	add.w	r8, r0, #20
 800c0ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c0f2:	1f37      	subs	r7, r6, #4
 800c0f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f7ff fd4b 	bl	800bb94 <__hi0bits>
 800c0fe:	f1c0 0320 	rsb	r3, r0, #32
 800c102:	280a      	cmp	r0, #10
 800c104:	600b      	str	r3, [r1, #0]
 800c106:	491b      	ldr	r1, [pc, #108]	@ (800c174 <__b2d+0x90>)
 800c108:	dc15      	bgt.n	800c136 <__b2d+0x52>
 800c10a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c10e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c112:	45b8      	cmp	r8, r7
 800c114:	ea43 0501 	orr.w	r5, r3, r1
 800c118:	bf34      	ite	cc
 800c11a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c11e:	2300      	movcs	r3, #0
 800c120:	3015      	adds	r0, #21
 800c122:	fa02 f000 	lsl.w	r0, r2, r0
 800c126:	fa23 f30c 	lsr.w	r3, r3, ip
 800c12a:	4303      	orrs	r3, r0
 800c12c:	461c      	mov	r4, r3
 800c12e:	ec45 4b10 	vmov	d0, r4, r5
 800c132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c136:	45b8      	cmp	r8, r7
 800c138:	bf3a      	itte	cc
 800c13a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c13e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c142:	2300      	movcs	r3, #0
 800c144:	380b      	subs	r0, #11
 800c146:	d012      	beq.n	800c16e <__b2d+0x8a>
 800c148:	f1c0 0120 	rsb	r1, r0, #32
 800c14c:	fa23 f401 	lsr.w	r4, r3, r1
 800c150:	4082      	lsls	r2, r0
 800c152:	4322      	orrs	r2, r4
 800c154:	4547      	cmp	r7, r8
 800c156:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c15a:	bf8c      	ite	hi
 800c15c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c160:	2200      	movls	r2, #0
 800c162:	4083      	lsls	r3, r0
 800c164:	40ca      	lsrs	r2, r1
 800c166:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c16a:	4313      	orrs	r3, r2
 800c16c:	e7de      	b.n	800c12c <__b2d+0x48>
 800c16e:	ea42 0501 	orr.w	r5, r2, r1
 800c172:	e7db      	b.n	800c12c <__b2d+0x48>
 800c174:	3ff00000 	.word	0x3ff00000

0800c178 <__d2b>:
 800c178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c17c:	460f      	mov	r7, r1
 800c17e:	2101      	movs	r1, #1
 800c180:	ec59 8b10 	vmov	r8, r9, d0
 800c184:	4616      	mov	r6, r2
 800c186:	f7ff fc13 	bl	800b9b0 <_Balloc>
 800c18a:	4604      	mov	r4, r0
 800c18c:	b930      	cbnz	r0, 800c19c <__d2b+0x24>
 800c18e:	4602      	mov	r2, r0
 800c190:	4b23      	ldr	r3, [pc, #140]	@ (800c220 <__d2b+0xa8>)
 800c192:	4824      	ldr	r0, [pc, #144]	@ (800c224 <__d2b+0xac>)
 800c194:	f240 310f 	movw	r1, #783	@ 0x30f
 800c198:	f7ff f84e 	bl	800b238 <__assert_func>
 800c19c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1a4:	b10d      	cbz	r5, 800c1aa <__d2b+0x32>
 800c1a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	f1b8 0300 	subs.w	r3, r8, #0
 800c1b0:	d023      	beq.n	800c1fa <__d2b+0x82>
 800c1b2:	4668      	mov	r0, sp
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	f7ff fd0c 	bl	800bbd2 <__lo0bits>
 800c1ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c1be:	b1d0      	cbz	r0, 800c1f6 <__d2b+0x7e>
 800c1c0:	f1c0 0320 	rsb	r3, r0, #32
 800c1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c8:	430b      	orrs	r3, r1
 800c1ca:	40c2      	lsrs	r2, r0
 800c1cc:	6163      	str	r3, [r4, #20]
 800c1ce:	9201      	str	r2, [sp, #4]
 800c1d0:	9b01      	ldr	r3, [sp, #4]
 800c1d2:	61a3      	str	r3, [r4, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	bf0c      	ite	eq
 800c1d8:	2201      	moveq	r2, #1
 800c1da:	2202      	movne	r2, #2
 800c1dc:	6122      	str	r2, [r4, #16]
 800c1de:	b1a5      	cbz	r5, 800c20a <__d2b+0x92>
 800c1e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c1e4:	4405      	add	r5, r0
 800c1e6:	603d      	str	r5, [r7, #0]
 800c1e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c1ec:	6030      	str	r0, [r6, #0]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	b003      	add	sp, #12
 800c1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1f6:	6161      	str	r1, [r4, #20]
 800c1f8:	e7ea      	b.n	800c1d0 <__d2b+0x58>
 800c1fa:	a801      	add	r0, sp, #4
 800c1fc:	f7ff fce9 	bl	800bbd2 <__lo0bits>
 800c200:	9b01      	ldr	r3, [sp, #4]
 800c202:	6163      	str	r3, [r4, #20]
 800c204:	3020      	adds	r0, #32
 800c206:	2201      	movs	r2, #1
 800c208:	e7e8      	b.n	800c1dc <__d2b+0x64>
 800c20a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c20e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c212:	6038      	str	r0, [r7, #0]
 800c214:	6918      	ldr	r0, [r3, #16]
 800c216:	f7ff fcbd 	bl	800bb94 <__hi0bits>
 800c21a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c21e:	e7e5      	b.n	800c1ec <__d2b+0x74>
 800c220:	0800ce85 	.word	0x0800ce85
 800c224:	0800cef6 	.word	0x0800cef6

0800c228 <__ratio>:
 800c228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	4688      	mov	r8, r1
 800c22e:	4669      	mov	r1, sp
 800c230:	4681      	mov	r9, r0
 800c232:	f7ff ff57 	bl	800c0e4 <__b2d>
 800c236:	a901      	add	r1, sp, #4
 800c238:	4640      	mov	r0, r8
 800c23a:	ec55 4b10 	vmov	r4, r5, d0
 800c23e:	f7ff ff51 	bl	800c0e4 <__b2d>
 800c242:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c246:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c24a:	1ad2      	subs	r2, r2, r3
 800c24c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c250:	1a5b      	subs	r3, r3, r1
 800c252:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c256:	ec57 6b10 	vmov	r6, r7, d0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	bfd6      	itet	le
 800c25e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c262:	462a      	movgt	r2, r5
 800c264:	463a      	movle	r2, r7
 800c266:	46ab      	mov	fp, r5
 800c268:	46a2      	mov	sl, r4
 800c26a:	bfce      	itee	gt
 800c26c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c270:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c274:	ee00 3a90 	vmovle	s1, r3
 800c278:	ec4b ab17 	vmov	d7, sl, fp
 800c27c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c280:	b003      	add	sp, #12
 800c282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c286 <__copybits>:
 800c286:	3901      	subs	r1, #1
 800c288:	b570      	push	{r4, r5, r6, lr}
 800c28a:	1149      	asrs	r1, r1, #5
 800c28c:	6914      	ldr	r4, [r2, #16]
 800c28e:	3101      	adds	r1, #1
 800c290:	f102 0314 	add.w	r3, r2, #20
 800c294:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c298:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c29c:	1f05      	subs	r5, r0, #4
 800c29e:	42a3      	cmp	r3, r4
 800c2a0:	d30c      	bcc.n	800c2bc <__copybits+0x36>
 800c2a2:	1aa3      	subs	r3, r4, r2
 800c2a4:	3b11      	subs	r3, #17
 800c2a6:	f023 0303 	bic.w	r3, r3, #3
 800c2aa:	3211      	adds	r2, #17
 800c2ac:	42a2      	cmp	r2, r4
 800c2ae:	bf88      	it	hi
 800c2b0:	2300      	movhi	r3, #0
 800c2b2:	4418      	add	r0, r3
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4288      	cmp	r0, r1
 800c2b8:	d305      	bcc.n	800c2c6 <__copybits+0x40>
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	f853 6b04 	ldr.w	r6, [r3], #4
 800c2c0:	f845 6f04 	str.w	r6, [r5, #4]!
 800c2c4:	e7eb      	b.n	800c29e <__copybits+0x18>
 800c2c6:	f840 3b04 	str.w	r3, [r0], #4
 800c2ca:	e7f4      	b.n	800c2b6 <__copybits+0x30>

0800c2cc <__any_on>:
 800c2cc:	f100 0214 	add.w	r2, r0, #20
 800c2d0:	6900      	ldr	r0, [r0, #16]
 800c2d2:	114b      	asrs	r3, r1, #5
 800c2d4:	4298      	cmp	r0, r3
 800c2d6:	b510      	push	{r4, lr}
 800c2d8:	db11      	blt.n	800c2fe <__any_on+0x32>
 800c2da:	dd0a      	ble.n	800c2f2 <__any_on+0x26>
 800c2dc:	f011 011f 	ands.w	r1, r1, #31
 800c2e0:	d007      	beq.n	800c2f2 <__any_on+0x26>
 800c2e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c2e6:	fa24 f001 	lsr.w	r0, r4, r1
 800c2ea:	fa00 f101 	lsl.w	r1, r0, r1
 800c2ee:	428c      	cmp	r4, r1
 800c2f0:	d10b      	bne.n	800c30a <__any_on+0x3e>
 800c2f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d803      	bhi.n	800c302 <__any_on+0x36>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	4603      	mov	r3, r0
 800c300:	e7f7      	b.n	800c2f2 <__any_on+0x26>
 800c302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c306:	2900      	cmp	r1, #0
 800c308:	d0f5      	beq.n	800c2f6 <__any_on+0x2a>
 800c30a:	2001      	movs	r0, #1
 800c30c:	e7f6      	b.n	800c2fc <__any_on+0x30>

0800c30e <__ascii_wctomb>:
 800c30e:	4603      	mov	r3, r0
 800c310:	4608      	mov	r0, r1
 800c312:	b141      	cbz	r1, 800c326 <__ascii_wctomb+0x18>
 800c314:	2aff      	cmp	r2, #255	@ 0xff
 800c316:	d904      	bls.n	800c322 <__ascii_wctomb+0x14>
 800c318:	228a      	movs	r2, #138	@ 0x8a
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	f04f 30ff 	mov.w	r0, #4294967295
 800c320:	4770      	bx	lr
 800c322:	700a      	strb	r2, [r1, #0]
 800c324:	2001      	movs	r0, #1
 800c326:	4770      	bx	lr

0800c328 <__sflush_r>:
 800c328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	0716      	lsls	r6, r2, #28
 800c332:	4605      	mov	r5, r0
 800c334:	460c      	mov	r4, r1
 800c336:	d454      	bmi.n	800c3e2 <__sflush_r+0xba>
 800c338:	684b      	ldr	r3, [r1, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	dc02      	bgt.n	800c344 <__sflush_r+0x1c>
 800c33e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	dd48      	ble.n	800c3d6 <__sflush_r+0xae>
 800c344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c346:	2e00      	cmp	r6, #0
 800c348:	d045      	beq.n	800c3d6 <__sflush_r+0xae>
 800c34a:	2300      	movs	r3, #0
 800c34c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c350:	682f      	ldr	r7, [r5, #0]
 800c352:	6a21      	ldr	r1, [r4, #32]
 800c354:	602b      	str	r3, [r5, #0]
 800c356:	d030      	beq.n	800c3ba <__sflush_r+0x92>
 800c358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	0759      	lsls	r1, r3, #29
 800c35e:	d505      	bpl.n	800c36c <__sflush_r+0x44>
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	1ad2      	subs	r2, r2, r3
 800c364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c366:	b10b      	cbz	r3, 800c36c <__sflush_r+0x44>
 800c368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c36a:	1ad2      	subs	r2, r2, r3
 800c36c:	2300      	movs	r3, #0
 800c36e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c370:	6a21      	ldr	r1, [r4, #32]
 800c372:	4628      	mov	r0, r5
 800c374:	47b0      	blx	r6
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	d106      	bne.n	800c38a <__sflush_r+0x62>
 800c37c:	6829      	ldr	r1, [r5, #0]
 800c37e:	291d      	cmp	r1, #29
 800c380:	d82b      	bhi.n	800c3da <__sflush_r+0xb2>
 800c382:	4a2a      	ldr	r2, [pc, #168]	@ (800c42c <__sflush_r+0x104>)
 800c384:	410a      	asrs	r2, r1
 800c386:	07d6      	lsls	r6, r2, #31
 800c388:	d427      	bmi.n	800c3da <__sflush_r+0xb2>
 800c38a:	2200      	movs	r2, #0
 800c38c:	6062      	str	r2, [r4, #4]
 800c38e:	04d9      	lsls	r1, r3, #19
 800c390:	6922      	ldr	r2, [r4, #16]
 800c392:	6022      	str	r2, [r4, #0]
 800c394:	d504      	bpl.n	800c3a0 <__sflush_r+0x78>
 800c396:	1c42      	adds	r2, r0, #1
 800c398:	d101      	bne.n	800c39e <__sflush_r+0x76>
 800c39a:	682b      	ldr	r3, [r5, #0]
 800c39c:	b903      	cbnz	r3, 800c3a0 <__sflush_r+0x78>
 800c39e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3a2:	602f      	str	r7, [r5, #0]
 800c3a4:	b1b9      	cbz	r1, 800c3d6 <__sflush_r+0xae>
 800c3a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3aa:	4299      	cmp	r1, r3
 800c3ac:	d002      	beq.n	800c3b4 <__sflush_r+0x8c>
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f7fe ff60 	bl	800b274 <_free_r>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3b8:	e00d      	b.n	800c3d6 <__sflush_r+0xae>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b0      	blx	r6
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	1c50      	adds	r0, r2, #1
 800c3c4:	d1c9      	bne.n	800c35a <__sflush_r+0x32>
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0c6      	beq.n	800c35a <__sflush_r+0x32>
 800c3cc:	2b1d      	cmp	r3, #29
 800c3ce:	d001      	beq.n	800c3d4 <__sflush_r+0xac>
 800c3d0:	2b16      	cmp	r3, #22
 800c3d2:	d11e      	bne.n	800c412 <__sflush_r+0xea>
 800c3d4:	602f      	str	r7, [r5, #0]
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	e022      	b.n	800c420 <__sflush_r+0xf8>
 800c3da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3de:	b21b      	sxth	r3, r3
 800c3e0:	e01b      	b.n	800c41a <__sflush_r+0xf2>
 800c3e2:	690f      	ldr	r7, [r1, #16]
 800c3e4:	2f00      	cmp	r7, #0
 800c3e6:	d0f6      	beq.n	800c3d6 <__sflush_r+0xae>
 800c3e8:	0793      	lsls	r3, r2, #30
 800c3ea:	680e      	ldr	r6, [r1, #0]
 800c3ec:	bf08      	it	eq
 800c3ee:	694b      	ldreq	r3, [r1, #20]
 800c3f0:	600f      	str	r7, [r1, #0]
 800c3f2:	bf18      	it	ne
 800c3f4:	2300      	movne	r3, #0
 800c3f6:	eba6 0807 	sub.w	r8, r6, r7
 800c3fa:	608b      	str	r3, [r1, #8]
 800c3fc:	f1b8 0f00 	cmp.w	r8, #0
 800c400:	dde9      	ble.n	800c3d6 <__sflush_r+0xae>
 800c402:	6a21      	ldr	r1, [r4, #32]
 800c404:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c406:	4643      	mov	r3, r8
 800c408:	463a      	mov	r2, r7
 800c40a:	4628      	mov	r0, r5
 800c40c:	47b0      	blx	r6
 800c40e:	2800      	cmp	r0, #0
 800c410:	dc08      	bgt.n	800c424 <__sflush_r+0xfc>
 800c412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295
 800c420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c424:	4407      	add	r7, r0
 800c426:	eba8 0800 	sub.w	r8, r8, r0
 800c42a:	e7e7      	b.n	800c3fc <__sflush_r+0xd4>
 800c42c:	dfbffffe 	.word	0xdfbffffe

0800c430 <_fflush_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	690b      	ldr	r3, [r1, #16]
 800c434:	4605      	mov	r5, r0
 800c436:	460c      	mov	r4, r1
 800c438:	b913      	cbnz	r3, 800c440 <_fflush_r+0x10>
 800c43a:	2500      	movs	r5, #0
 800c43c:	4628      	mov	r0, r5
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	b118      	cbz	r0, 800c44a <_fflush_r+0x1a>
 800c442:	6a03      	ldr	r3, [r0, #32]
 800c444:	b90b      	cbnz	r3, 800c44a <_fflush_r+0x1a>
 800c446:	f7fe fd6d 	bl	800af24 <__sinit>
 800c44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0f3      	beq.n	800c43a <_fflush_r+0xa>
 800c452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c454:	07d0      	lsls	r0, r2, #31
 800c456:	d404      	bmi.n	800c462 <_fflush_r+0x32>
 800c458:	0599      	lsls	r1, r3, #22
 800c45a:	d402      	bmi.n	800c462 <_fflush_r+0x32>
 800c45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c45e:	f7fe fed2 	bl	800b206 <__retarget_lock_acquire_recursive>
 800c462:	4628      	mov	r0, r5
 800c464:	4621      	mov	r1, r4
 800c466:	f7ff ff5f 	bl	800c328 <__sflush_r>
 800c46a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c46c:	07da      	lsls	r2, r3, #31
 800c46e:	4605      	mov	r5, r0
 800c470:	d4e4      	bmi.n	800c43c <_fflush_r+0xc>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	059b      	lsls	r3, r3, #22
 800c476:	d4e1      	bmi.n	800c43c <_fflush_r+0xc>
 800c478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c47a:	f7fe fec5 	bl	800b208 <__retarget_lock_release_recursive>
 800c47e:	e7dd      	b.n	800c43c <_fflush_r+0xc>

0800c480 <fiprintf>:
 800c480:	b40e      	push	{r1, r2, r3}
 800c482:	b503      	push	{r0, r1, lr}
 800c484:	4601      	mov	r1, r0
 800c486:	ab03      	add	r3, sp, #12
 800c488:	4805      	ldr	r0, [pc, #20]	@ (800c4a0 <fiprintf+0x20>)
 800c48a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c48e:	6800      	ldr	r0, [r0, #0]
 800c490:	9301      	str	r3, [sp, #4]
 800c492:	f000 f837 	bl	800c504 <_vfiprintf_r>
 800c496:	b002      	add	sp, #8
 800c498:	f85d eb04 	ldr.w	lr, [sp], #4
 800c49c:	b003      	add	sp, #12
 800c49e:	4770      	bx	lr
 800c4a0:	24000198 	.word	0x24000198

0800c4a4 <abort>:
 800c4a4:	b508      	push	{r3, lr}
 800c4a6:	2006      	movs	r0, #6
 800c4a8:	f000 fb8e 	bl	800cbc8 <raise>
 800c4ac:	2001      	movs	r0, #1
 800c4ae:	f7f5 ffb3 	bl	8002418 <_exit>

0800c4b2 <__sfputc_r>:
 800c4b2:	6893      	ldr	r3, [r2, #8]
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	b410      	push	{r4}
 800c4ba:	6093      	str	r3, [r2, #8]
 800c4bc:	da08      	bge.n	800c4d0 <__sfputc_r+0x1e>
 800c4be:	6994      	ldr	r4, [r2, #24]
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	db01      	blt.n	800c4c8 <__sfputc_r+0x16>
 800c4c4:	290a      	cmp	r1, #10
 800c4c6:	d103      	bne.n	800c4d0 <__sfputc_r+0x1e>
 800c4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4cc:	f000 bac0 	b.w	800ca50 <__swbuf_r>
 800c4d0:	6813      	ldr	r3, [r2, #0]
 800c4d2:	1c58      	adds	r0, r3, #1
 800c4d4:	6010      	str	r0, [r2, #0]
 800c4d6:	7019      	strb	r1, [r3, #0]
 800c4d8:	4608      	mov	r0, r1
 800c4da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <__sfputs_r>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	460f      	mov	r7, r1
 800c4e6:	4614      	mov	r4, r2
 800c4e8:	18d5      	adds	r5, r2, r3
 800c4ea:	42ac      	cmp	r4, r5
 800c4ec:	d101      	bne.n	800c4f2 <__sfputs_r+0x12>
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	e007      	b.n	800c502 <__sfputs_r+0x22>
 800c4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f6:	463a      	mov	r2, r7
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f7ff ffda 	bl	800c4b2 <__sfputc_r>
 800c4fe:	1c43      	adds	r3, r0, #1
 800c500:	d1f3      	bne.n	800c4ea <__sfputs_r+0xa>
 800c502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c504 <_vfiprintf_r>:
 800c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	460d      	mov	r5, r1
 800c50a:	b09d      	sub	sp, #116	@ 0x74
 800c50c:	4614      	mov	r4, r2
 800c50e:	4698      	mov	r8, r3
 800c510:	4606      	mov	r6, r0
 800c512:	b118      	cbz	r0, 800c51c <_vfiprintf_r+0x18>
 800c514:	6a03      	ldr	r3, [r0, #32]
 800c516:	b90b      	cbnz	r3, 800c51c <_vfiprintf_r+0x18>
 800c518:	f7fe fd04 	bl	800af24 <__sinit>
 800c51c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c51e:	07d9      	lsls	r1, r3, #31
 800c520:	d405      	bmi.n	800c52e <_vfiprintf_r+0x2a>
 800c522:	89ab      	ldrh	r3, [r5, #12]
 800c524:	059a      	lsls	r2, r3, #22
 800c526:	d402      	bmi.n	800c52e <_vfiprintf_r+0x2a>
 800c528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c52a:	f7fe fe6c 	bl	800b206 <__retarget_lock_acquire_recursive>
 800c52e:	89ab      	ldrh	r3, [r5, #12]
 800c530:	071b      	lsls	r3, r3, #28
 800c532:	d501      	bpl.n	800c538 <_vfiprintf_r+0x34>
 800c534:	692b      	ldr	r3, [r5, #16]
 800c536:	b99b      	cbnz	r3, 800c560 <_vfiprintf_r+0x5c>
 800c538:	4629      	mov	r1, r5
 800c53a:	4630      	mov	r0, r6
 800c53c:	f000 fac6 	bl	800cacc <__swsetup_r>
 800c540:	b170      	cbz	r0, 800c560 <_vfiprintf_r+0x5c>
 800c542:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c544:	07dc      	lsls	r4, r3, #31
 800c546:	d504      	bpl.n	800c552 <_vfiprintf_r+0x4e>
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	b01d      	add	sp, #116	@ 0x74
 800c54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	0598      	lsls	r0, r3, #22
 800c556:	d4f7      	bmi.n	800c548 <_vfiprintf_r+0x44>
 800c558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c55a:	f7fe fe55 	bl	800b208 <__retarget_lock_release_recursive>
 800c55e:	e7f3      	b.n	800c548 <_vfiprintf_r+0x44>
 800c560:	2300      	movs	r3, #0
 800c562:	9309      	str	r3, [sp, #36]	@ 0x24
 800c564:	2320      	movs	r3, #32
 800c566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c56a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c56e:	2330      	movs	r3, #48	@ 0x30
 800c570:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c720 <_vfiprintf_r+0x21c>
 800c574:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c578:	f04f 0901 	mov.w	r9, #1
 800c57c:	4623      	mov	r3, r4
 800c57e:	469a      	mov	sl, r3
 800c580:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c584:	b10a      	cbz	r2, 800c58a <_vfiprintf_r+0x86>
 800c586:	2a25      	cmp	r2, #37	@ 0x25
 800c588:	d1f9      	bne.n	800c57e <_vfiprintf_r+0x7a>
 800c58a:	ebba 0b04 	subs.w	fp, sl, r4
 800c58e:	d00b      	beq.n	800c5a8 <_vfiprintf_r+0xa4>
 800c590:	465b      	mov	r3, fp
 800c592:	4622      	mov	r2, r4
 800c594:	4629      	mov	r1, r5
 800c596:	4630      	mov	r0, r6
 800c598:	f7ff ffa2 	bl	800c4e0 <__sfputs_r>
 800c59c:	3001      	adds	r0, #1
 800c59e:	f000 80a7 	beq.w	800c6f0 <_vfiprintf_r+0x1ec>
 800c5a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5a4:	445a      	add	r2, fp
 800c5a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f000 809f 	beq.w	800c6f0 <_vfiprintf_r+0x1ec>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5bc:	f10a 0a01 	add.w	sl, sl, #1
 800c5c0:	9304      	str	r3, [sp, #16]
 800c5c2:	9307      	str	r3, [sp, #28]
 800c5c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5ca:	4654      	mov	r4, sl
 800c5cc:	2205      	movs	r2, #5
 800c5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d2:	4853      	ldr	r0, [pc, #332]	@ (800c720 <_vfiprintf_r+0x21c>)
 800c5d4:	f7f3 fe9c 	bl	8000310 <memchr>
 800c5d8:	9a04      	ldr	r2, [sp, #16]
 800c5da:	b9d8      	cbnz	r0, 800c614 <_vfiprintf_r+0x110>
 800c5dc:	06d1      	lsls	r1, r2, #27
 800c5de:	bf44      	itt	mi
 800c5e0:	2320      	movmi	r3, #32
 800c5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5e6:	0713      	lsls	r3, r2, #28
 800c5e8:	bf44      	itt	mi
 800c5ea:	232b      	movmi	r3, #43	@ 0x2b
 800c5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5f6:	d015      	beq.n	800c624 <_vfiprintf_r+0x120>
 800c5f8:	9a07      	ldr	r2, [sp, #28]
 800c5fa:	4654      	mov	r4, sl
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	f04f 0c0a 	mov.w	ip, #10
 800c602:	4621      	mov	r1, r4
 800c604:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c608:	3b30      	subs	r3, #48	@ 0x30
 800c60a:	2b09      	cmp	r3, #9
 800c60c:	d94b      	bls.n	800c6a6 <_vfiprintf_r+0x1a2>
 800c60e:	b1b0      	cbz	r0, 800c63e <_vfiprintf_r+0x13a>
 800c610:	9207      	str	r2, [sp, #28]
 800c612:	e014      	b.n	800c63e <_vfiprintf_r+0x13a>
 800c614:	eba0 0308 	sub.w	r3, r0, r8
 800c618:	fa09 f303 	lsl.w	r3, r9, r3
 800c61c:	4313      	orrs	r3, r2
 800c61e:	9304      	str	r3, [sp, #16]
 800c620:	46a2      	mov	sl, r4
 800c622:	e7d2      	b.n	800c5ca <_vfiprintf_r+0xc6>
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	1d19      	adds	r1, r3, #4
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	9103      	str	r1, [sp, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	bfbb      	ittet	lt
 800c630:	425b      	neglt	r3, r3
 800c632:	f042 0202 	orrlt.w	r2, r2, #2
 800c636:	9307      	strge	r3, [sp, #28]
 800c638:	9307      	strlt	r3, [sp, #28]
 800c63a:	bfb8      	it	lt
 800c63c:	9204      	strlt	r2, [sp, #16]
 800c63e:	7823      	ldrb	r3, [r4, #0]
 800c640:	2b2e      	cmp	r3, #46	@ 0x2e
 800c642:	d10a      	bne.n	800c65a <_vfiprintf_r+0x156>
 800c644:	7863      	ldrb	r3, [r4, #1]
 800c646:	2b2a      	cmp	r3, #42	@ 0x2a
 800c648:	d132      	bne.n	800c6b0 <_vfiprintf_r+0x1ac>
 800c64a:	9b03      	ldr	r3, [sp, #12]
 800c64c:	1d1a      	adds	r2, r3, #4
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	9203      	str	r2, [sp, #12]
 800c652:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c656:	3402      	adds	r4, #2
 800c658:	9305      	str	r3, [sp, #20]
 800c65a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c730 <_vfiprintf_r+0x22c>
 800c65e:	7821      	ldrb	r1, [r4, #0]
 800c660:	2203      	movs	r2, #3
 800c662:	4650      	mov	r0, sl
 800c664:	f7f3 fe54 	bl	8000310 <memchr>
 800c668:	b138      	cbz	r0, 800c67a <_vfiprintf_r+0x176>
 800c66a:	9b04      	ldr	r3, [sp, #16]
 800c66c:	eba0 000a 	sub.w	r0, r0, sl
 800c670:	2240      	movs	r2, #64	@ 0x40
 800c672:	4082      	lsls	r2, r0
 800c674:	4313      	orrs	r3, r2
 800c676:	3401      	adds	r4, #1
 800c678:	9304      	str	r3, [sp, #16]
 800c67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67e:	4829      	ldr	r0, [pc, #164]	@ (800c724 <_vfiprintf_r+0x220>)
 800c680:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c684:	2206      	movs	r2, #6
 800c686:	f7f3 fe43 	bl	8000310 <memchr>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d03f      	beq.n	800c70e <_vfiprintf_r+0x20a>
 800c68e:	4b26      	ldr	r3, [pc, #152]	@ (800c728 <_vfiprintf_r+0x224>)
 800c690:	bb1b      	cbnz	r3, 800c6da <_vfiprintf_r+0x1d6>
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	3307      	adds	r3, #7
 800c696:	f023 0307 	bic.w	r3, r3, #7
 800c69a:	3308      	adds	r3, #8
 800c69c:	9303      	str	r3, [sp, #12]
 800c69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a0:	443b      	add	r3, r7
 800c6a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6a4:	e76a      	b.n	800c57c <_vfiprintf_r+0x78>
 800c6a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	2001      	movs	r0, #1
 800c6ae:	e7a8      	b.n	800c602 <_vfiprintf_r+0xfe>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	3401      	adds	r4, #1
 800c6b4:	9305      	str	r3, [sp, #20]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	f04f 0c0a 	mov.w	ip, #10
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6c2:	3a30      	subs	r2, #48	@ 0x30
 800c6c4:	2a09      	cmp	r2, #9
 800c6c6:	d903      	bls.n	800c6d0 <_vfiprintf_r+0x1cc>
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d0c6      	beq.n	800c65a <_vfiprintf_r+0x156>
 800c6cc:	9105      	str	r1, [sp, #20]
 800c6ce:	e7c4      	b.n	800c65a <_vfiprintf_r+0x156>
 800c6d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e7f0      	b.n	800c6bc <_vfiprintf_r+0x1b8>
 800c6da:	ab03      	add	r3, sp, #12
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	462a      	mov	r2, r5
 800c6e0:	4b12      	ldr	r3, [pc, #72]	@ (800c72c <_vfiprintf_r+0x228>)
 800c6e2:	a904      	add	r1, sp, #16
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f3af 8000 	nop.w
 800c6ea:	4607      	mov	r7, r0
 800c6ec:	1c78      	adds	r0, r7, #1
 800c6ee:	d1d6      	bne.n	800c69e <_vfiprintf_r+0x19a>
 800c6f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6f2:	07d9      	lsls	r1, r3, #31
 800c6f4:	d405      	bmi.n	800c702 <_vfiprintf_r+0x1fe>
 800c6f6:	89ab      	ldrh	r3, [r5, #12]
 800c6f8:	059a      	lsls	r2, r3, #22
 800c6fa:	d402      	bmi.n	800c702 <_vfiprintf_r+0x1fe>
 800c6fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6fe:	f7fe fd83 	bl	800b208 <__retarget_lock_release_recursive>
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	065b      	lsls	r3, r3, #25
 800c706:	f53f af1f 	bmi.w	800c548 <_vfiprintf_r+0x44>
 800c70a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c70c:	e71e      	b.n	800c54c <_vfiprintf_r+0x48>
 800c70e:	ab03      	add	r3, sp, #12
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	462a      	mov	r2, r5
 800c714:	4b05      	ldr	r3, [pc, #20]	@ (800c72c <_vfiprintf_r+0x228>)
 800c716:	a904      	add	r1, sp, #16
 800c718:	4630      	mov	r0, r6
 800c71a:	f000 f879 	bl	800c810 <_printf_i>
 800c71e:	e7e4      	b.n	800c6ea <_vfiprintf_r+0x1e6>
 800c720:	0800d151 	.word	0x0800d151
 800c724:	0800d15b 	.word	0x0800d15b
 800c728:	00000000 	.word	0x00000000
 800c72c:	0800c4e1 	.word	0x0800c4e1
 800c730:	0800d157 	.word	0x0800d157

0800c734 <_printf_common>:
 800c734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c738:	4616      	mov	r6, r2
 800c73a:	4698      	mov	r8, r3
 800c73c:	688a      	ldr	r2, [r1, #8]
 800c73e:	690b      	ldr	r3, [r1, #16]
 800c740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c744:	4293      	cmp	r3, r2
 800c746:	bfb8      	it	lt
 800c748:	4613      	movlt	r3, r2
 800c74a:	6033      	str	r3, [r6, #0]
 800c74c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c750:	4607      	mov	r7, r0
 800c752:	460c      	mov	r4, r1
 800c754:	b10a      	cbz	r2, 800c75a <_printf_common+0x26>
 800c756:	3301      	adds	r3, #1
 800c758:	6033      	str	r3, [r6, #0]
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	0699      	lsls	r1, r3, #26
 800c75e:	bf42      	ittt	mi
 800c760:	6833      	ldrmi	r3, [r6, #0]
 800c762:	3302      	addmi	r3, #2
 800c764:	6033      	strmi	r3, [r6, #0]
 800c766:	6825      	ldr	r5, [r4, #0]
 800c768:	f015 0506 	ands.w	r5, r5, #6
 800c76c:	d106      	bne.n	800c77c <_printf_common+0x48>
 800c76e:	f104 0a19 	add.w	sl, r4, #25
 800c772:	68e3      	ldr	r3, [r4, #12]
 800c774:	6832      	ldr	r2, [r6, #0]
 800c776:	1a9b      	subs	r3, r3, r2
 800c778:	42ab      	cmp	r3, r5
 800c77a:	dc26      	bgt.n	800c7ca <_printf_common+0x96>
 800c77c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c780:	6822      	ldr	r2, [r4, #0]
 800c782:	3b00      	subs	r3, #0
 800c784:	bf18      	it	ne
 800c786:	2301      	movne	r3, #1
 800c788:	0692      	lsls	r2, r2, #26
 800c78a:	d42b      	bmi.n	800c7e4 <_printf_common+0xb0>
 800c78c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c790:	4641      	mov	r1, r8
 800c792:	4638      	mov	r0, r7
 800c794:	47c8      	blx	r9
 800c796:	3001      	adds	r0, #1
 800c798:	d01e      	beq.n	800c7d8 <_printf_common+0xa4>
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	6922      	ldr	r2, [r4, #16]
 800c79e:	f003 0306 	and.w	r3, r3, #6
 800c7a2:	2b04      	cmp	r3, #4
 800c7a4:	bf02      	ittt	eq
 800c7a6:	68e5      	ldreq	r5, [r4, #12]
 800c7a8:	6833      	ldreq	r3, [r6, #0]
 800c7aa:	1aed      	subeq	r5, r5, r3
 800c7ac:	68a3      	ldr	r3, [r4, #8]
 800c7ae:	bf0c      	ite	eq
 800c7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7b4:	2500      	movne	r5, #0
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	bfc4      	itt	gt
 800c7ba:	1a9b      	subgt	r3, r3, r2
 800c7bc:	18ed      	addgt	r5, r5, r3
 800c7be:	2600      	movs	r6, #0
 800c7c0:	341a      	adds	r4, #26
 800c7c2:	42b5      	cmp	r5, r6
 800c7c4:	d11a      	bne.n	800c7fc <_printf_common+0xc8>
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	e008      	b.n	800c7dc <_printf_common+0xa8>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	4652      	mov	r2, sl
 800c7ce:	4641      	mov	r1, r8
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	47c8      	blx	r9
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	d103      	bne.n	800c7e0 <_printf_common+0xac>
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e0:	3501      	adds	r5, #1
 800c7e2:	e7c6      	b.n	800c772 <_printf_common+0x3e>
 800c7e4:	18e1      	adds	r1, r4, r3
 800c7e6:	1c5a      	adds	r2, r3, #1
 800c7e8:	2030      	movs	r0, #48	@ 0x30
 800c7ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7ee:	4422      	add	r2, r4
 800c7f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7f8:	3302      	adds	r3, #2
 800c7fa:	e7c7      	b.n	800c78c <_printf_common+0x58>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	4622      	mov	r2, r4
 800c800:	4641      	mov	r1, r8
 800c802:	4638      	mov	r0, r7
 800c804:	47c8      	blx	r9
 800c806:	3001      	adds	r0, #1
 800c808:	d0e6      	beq.n	800c7d8 <_printf_common+0xa4>
 800c80a:	3601      	adds	r6, #1
 800c80c:	e7d9      	b.n	800c7c2 <_printf_common+0x8e>
	...

0800c810 <_printf_i>:
 800c810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c814:	7e0f      	ldrb	r7, [r1, #24]
 800c816:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c818:	2f78      	cmp	r7, #120	@ 0x78
 800c81a:	4691      	mov	r9, r2
 800c81c:	4680      	mov	r8, r0
 800c81e:	460c      	mov	r4, r1
 800c820:	469a      	mov	sl, r3
 800c822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c826:	d807      	bhi.n	800c838 <_printf_i+0x28>
 800c828:	2f62      	cmp	r7, #98	@ 0x62
 800c82a:	d80a      	bhi.n	800c842 <_printf_i+0x32>
 800c82c:	2f00      	cmp	r7, #0
 800c82e:	f000 80d2 	beq.w	800c9d6 <_printf_i+0x1c6>
 800c832:	2f58      	cmp	r7, #88	@ 0x58
 800c834:	f000 80b9 	beq.w	800c9aa <_printf_i+0x19a>
 800c838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c83c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c840:	e03a      	b.n	800c8b8 <_printf_i+0xa8>
 800c842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c846:	2b15      	cmp	r3, #21
 800c848:	d8f6      	bhi.n	800c838 <_printf_i+0x28>
 800c84a:	a101      	add	r1, pc, #4	@ (adr r1, 800c850 <_printf_i+0x40>)
 800c84c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c850:	0800c8a9 	.word	0x0800c8a9
 800c854:	0800c8bd 	.word	0x0800c8bd
 800c858:	0800c839 	.word	0x0800c839
 800c85c:	0800c839 	.word	0x0800c839
 800c860:	0800c839 	.word	0x0800c839
 800c864:	0800c839 	.word	0x0800c839
 800c868:	0800c8bd 	.word	0x0800c8bd
 800c86c:	0800c839 	.word	0x0800c839
 800c870:	0800c839 	.word	0x0800c839
 800c874:	0800c839 	.word	0x0800c839
 800c878:	0800c839 	.word	0x0800c839
 800c87c:	0800c9bd 	.word	0x0800c9bd
 800c880:	0800c8e7 	.word	0x0800c8e7
 800c884:	0800c977 	.word	0x0800c977
 800c888:	0800c839 	.word	0x0800c839
 800c88c:	0800c839 	.word	0x0800c839
 800c890:	0800c9df 	.word	0x0800c9df
 800c894:	0800c839 	.word	0x0800c839
 800c898:	0800c8e7 	.word	0x0800c8e7
 800c89c:	0800c839 	.word	0x0800c839
 800c8a0:	0800c839 	.word	0x0800c839
 800c8a4:	0800c97f 	.word	0x0800c97f
 800c8a8:	6833      	ldr	r3, [r6, #0]
 800c8aa:	1d1a      	adds	r2, r3, #4
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	6032      	str	r2, [r6, #0]
 800c8b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e09d      	b.n	800c9f8 <_printf_i+0x1e8>
 800c8bc:	6833      	ldr	r3, [r6, #0]
 800c8be:	6820      	ldr	r0, [r4, #0]
 800c8c0:	1d19      	adds	r1, r3, #4
 800c8c2:	6031      	str	r1, [r6, #0]
 800c8c4:	0606      	lsls	r6, r0, #24
 800c8c6:	d501      	bpl.n	800c8cc <_printf_i+0xbc>
 800c8c8:	681d      	ldr	r5, [r3, #0]
 800c8ca:	e003      	b.n	800c8d4 <_printf_i+0xc4>
 800c8cc:	0645      	lsls	r5, r0, #25
 800c8ce:	d5fb      	bpl.n	800c8c8 <_printf_i+0xb8>
 800c8d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c8d4:	2d00      	cmp	r5, #0
 800c8d6:	da03      	bge.n	800c8e0 <_printf_i+0xd0>
 800c8d8:	232d      	movs	r3, #45	@ 0x2d
 800c8da:	426d      	negs	r5, r5
 800c8dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8e0:	4859      	ldr	r0, [pc, #356]	@ (800ca48 <_printf_i+0x238>)
 800c8e2:	230a      	movs	r3, #10
 800c8e4:	e011      	b.n	800c90a <_printf_i+0xfa>
 800c8e6:	6821      	ldr	r1, [r4, #0]
 800c8e8:	6833      	ldr	r3, [r6, #0]
 800c8ea:	0608      	lsls	r0, r1, #24
 800c8ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8f0:	d402      	bmi.n	800c8f8 <_printf_i+0xe8>
 800c8f2:	0649      	lsls	r1, r1, #25
 800c8f4:	bf48      	it	mi
 800c8f6:	b2ad      	uxthmi	r5, r5
 800c8f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8fa:	4853      	ldr	r0, [pc, #332]	@ (800ca48 <_printf_i+0x238>)
 800c8fc:	6033      	str	r3, [r6, #0]
 800c8fe:	bf14      	ite	ne
 800c900:	230a      	movne	r3, #10
 800c902:	2308      	moveq	r3, #8
 800c904:	2100      	movs	r1, #0
 800c906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c90a:	6866      	ldr	r6, [r4, #4]
 800c90c:	60a6      	str	r6, [r4, #8]
 800c90e:	2e00      	cmp	r6, #0
 800c910:	bfa2      	ittt	ge
 800c912:	6821      	ldrge	r1, [r4, #0]
 800c914:	f021 0104 	bicge.w	r1, r1, #4
 800c918:	6021      	strge	r1, [r4, #0]
 800c91a:	b90d      	cbnz	r5, 800c920 <_printf_i+0x110>
 800c91c:	2e00      	cmp	r6, #0
 800c91e:	d04b      	beq.n	800c9b8 <_printf_i+0x1a8>
 800c920:	4616      	mov	r6, r2
 800c922:	fbb5 f1f3 	udiv	r1, r5, r3
 800c926:	fb03 5711 	mls	r7, r3, r1, r5
 800c92a:	5dc7      	ldrb	r7, [r0, r7]
 800c92c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c930:	462f      	mov	r7, r5
 800c932:	42bb      	cmp	r3, r7
 800c934:	460d      	mov	r5, r1
 800c936:	d9f4      	bls.n	800c922 <_printf_i+0x112>
 800c938:	2b08      	cmp	r3, #8
 800c93a:	d10b      	bne.n	800c954 <_printf_i+0x144>
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	07df      	lsls	r7, r3, #31
 800c940:	d508      	bpl.n	800c954 <_printf_i+0x144>
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	6861      	ldr	r1, [r4, #4]
 800c946:	4299      	cmp	r1, r3
 800c948:	bfde      	ittt	le
 800c94a:	2330      	movle	r3, #48	@ 0x30
 800c94c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c950:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c954:	1b92      	subs	r2, r2, r6
 800c956:	6122      	str	r2, [r4, #16]
 800c958:	f8cd a000 	str.w	sl, [sp]
 800c95c:	464b      	mov	r3, r9
 800c95e:	aa03      	add	r2, sp, #12
 800c960:	4621      	mov	r1, r4
 800c962:	4640      	mov	r0, r8
 800c964:	f7ff fee6 	bl	800c734 <_printf_common>
 800c968:	3001      	adds	r0, #1
 800c96a:	d14a      	bne.n	800ca02 <_printf_i+0x1f2>
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295
 800c970:	b004      	add	sp, #16
 800c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	f043 0320 	orr.w	r3, r3, #32
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	4833      	ldr	r0, [pc, #204]	@ (800ca4c <_printf_i+0x23c>)
 800c980:	2778      	movs	r7, #120	@ 0x78
 800c982:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	6831      	ldr	r1, [r6, #0]
 800c98a:	061f      	lsls	r7, r3, #24
 800c98c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c990:	d402      	bmi.n	800c998 <_printf_i+0x188>
 800c992:	065f      	lsls	r7, r3, #25
 800c994:	bf48      	it	mi
 800c996:	b2ad      	uxthmi	r5, r5
 800c998:	6031      	str	r1, [r6, #0]
 800c99a:	07d9      	lsls	r1, r3, #31
 800c99c:	bf44      	itt	mi
 800c99e:	f043 0320 	orrmi.w	r3, r3, #32
 800c9a2:	6023      	strmi	r3, [r4, #0]
 800c9a4:	b11d      	cbz	r5, 800c9ae <_printf_i+0x19e>
 800c9a6:	2310      	movs	r3, #16
 800c9a8:	e7ac      	b.n	800c904 <_printf_i+0xf4>
 800c9aa:	4827      	ldr	r0, [pc, #156]	@ (800ca48 <_printf_i+0x238>)
 800c9ac:	e7e9      	b.n	800c982 <_printf_i+0x172>
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	f023 0320 	bic.w	r3, r3, #32
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	e7f6      	b.n	800c9a6 <_printf_i+0x196>
 800c9b8:	4616      	mov	r6, r2
 800c9ba:	e7bd      	b.n	800c938 <_printf_i+0x128>
 800c9bc:	6833      	ldr	r3, [r6, #0]
 800c9be:	6825      	ldr	r5, [r4, #0]
 800c9c0:	6961      	ldr	r1, [r4, #20]
 800c9c2:	1d18      	adds	r0, r3, #4
 800c9c4:	6030      	str	r0, [r6, #0]
 800c9c6:	062e      	lsls	r6, r5, #24
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	d501      	bpl.n	800c9d0 <_printf_i+0x1c0>
 800c9cc:	6019      	str	r1, [r3, #0]
 800c9ce:	e002      	b.n	800c9d6 <_printf_i+0x1c6>
 800c9d0:	0668      	lsls	r0, r5, #25
 800c9d2:	d5fb      	bpl.n	800c9cc <_printf_i+0x1bc>
 800c9d4:	8019      	strh	r1, [r3, #0]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	4616      	mov	r6, r2
 800c9dc:	e7bc      	b.n	800c958 <_printf_i+0x148>
 800c9de:	6833      	ldr	r3, [r6, #0]
 800c9e0:	1d1a      	adds	r2, r3, #4
 800c9e2:	6032      	str	r2, [r6, #0]
 800c9e4:	681e      	ldr	r6, [r3, #0]
 800c9e6:	6862      	ldr	r2, [r4, #4]
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f7f3 fc90 	bl	8000310 <memchr>
 800c9f0:	b108      	cbz	r0, 800c9f6 <_printf_i+0x1e6>
 800c9f2:	1b80      	subs	r0, r0, r6
 800c9f4:	6060      	str	r0, [r4, #4]
 800c9f6:	6863      	ldr	r3, [r4, #4]
 800c9f8:	6123      	str	r3, [r4, #16]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca00:	e7aa      	b.n	800c958 <_printf_i+0x148>
 800ca02:	6923      	ldr	r3, [r4, #16]
 800ca04:	4632      	mov	r2, r6
 800ca06:	4649      	mov	r1, r9
 800ca08:	4640      	mov	r0, r8
 800ca0a:	47d0      	blx	sl
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	d0ad      	beq.n	800c96c <_printf_i+0x15c>
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	079b      	lsls	r3, r3, #30
 800ca14:	d413      	bmi.n	800ca3e <_printf_i+0x22e>
 800ca16:	68e0      	ldr	r0, [r4, #12]
 800ca18:	9b03      	ldr	r3, [sp, #12]
 800ca1a:	4298      	cmp	r0, r3
 800ca1c:	bfb8      	it	lt
 800ca1e:	4618      	movlt	r0, r3
 800ca20:	e7a6      	b.n	800c970 <_printf_i+0x160>
 800ca22:	2301      	movs	r3, #1
 800ca24:	4632      	mov	r2, r6
 800ca26:	4649      	mov	r1, r9
 800ca28:	4640      	mov	r0, r8
 800ca2a:	47d0      	blx	sl
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	d09d      	beq.n	800c96c <_printf_i+0x15c>
 800ca30:	3501      	adds	r5, #1
 800ca32:	68e3      	ldr	r3, [r4, #12]
 800ca34:	9903      	ldr	r1, [sp, #12]
 800ca36:	1a5b      	subs	r3, r3, r1
 800ca38:	42ab      	cmp	r3, r5
 800ca3a:	dcf2      	bgt.n	800ca22 <_printf_i+0x212>
 800ca3c:	e7eb      	b.n	800ca16 <_printf_i+0x206>
 800ca3e:	2500      	movs	r5, #0
 800ca40:	f104 0619 	add.w	r6, r4, #25
 800ca44:	e7f5      	b.n	800ca32 <_printf_i+0x222>
 800ca46:	bf00      	nop
 800ca48:	0800d162 	.word	0x0800d162
 800ca4c:	0800d173 	.word	0x0800d173

0800ca50 <__swbuf_r>:
 800ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca52:	460e      	mov	r6, r1
 800ca54:	4614      	mov	r4, r2
 800ca56:	4605      	mov	r5, r0
 800ca58:	b118      	cbz	r0, 800ca62 <__swbuf_r+0x12>
 800ca5a:	6a03      	ldr	r3, [r0, #32]
 800ca5c:	b90b      	cbnz	r3, 800ca62 <__swbuf_r+0x12>
 800ca5e:	f7fe fa61 	bl	800af24 <__sinit>
 800ca62:	69a3      	ldr	r3, [r4, #24]
 800ca64:	60a3      	str	r3, [r4, #8]
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	071a      	lsls	r2, r3, #28
 800ca6a:	d501      	bpl.n	800ca70 <__swbuf_r+0x20>
 800ca6c:	6923      	ldr	r3, [r4, #16]
 800ca6e:	b943      	cbnz	r3, 800ca82 <__swbuf_r+0x32>
 800ca70:	4621      	mov	r1, r4
 800ca72:	4628      	mov	r0, r5
 800ca74:	f000 f82a 	bl	800cacc <__swsetup_r>
 800ca78:	b118      	cbz	r0, 800ca82 <__swbuf_r+0x32>
 800ca7a:	f04f 37ff 	mov.w	r7, #4294967295
 800ca7e:	4638      	mov	r0, r7
 800ca80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	6922      	ldr	r2, [r4, #16]
 800ca86:	1a98      	subs	r0, r3, r2
 800ca88:	6963      	ldr	r3, [r4, #20]
 800ca8a:	b2f6      	uxtb	r6, r6
 800ca8c:	4283      	cmp	r3, r0
 800ca8e:	4637      	mov	r7, r6
 800ca90:	dc05      	bgt.n	800ca9e <__swbuf_r+0x4e>
 800ca92:	4621      	mov	r1, r4
 800ca94:	4628      	mov	r0, r5
 800ca96:	f7ff fccb 	bl	800c430 <_fflush_r>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d1ed      	bne.n	800ca7a <__swbuf_r+0x2a>
 800ca9e:	68a3      	ldr	r3, [r4, #8]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	60a3      	str	r3, [r4, #8]
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	1c5a      	adds	r2, r3, #1
 800caa8:	6022      	str	r2, [r4, #0]
 800caaa:	701e      	strb	r6, [r3, #0]
 800caac:	6962      	ldr	r2, [r4, #20]
 800caae:	1c43      	adds	r3, r0, #1
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d004      	beq.n	800cabe <__swbuf_r+0x6e>
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	07db      	lsls	r3, r3, #31
 800cab8:	d5e1      	bpl.n	800ca7e <__swbuf_r+0x2e>
 800caba:	2e0a      	cmp	r6, #10
 800cabc:	d1df      	bne.n	800ca7e <__swbuf_r+0x2e>
 800cabe:	4621      	mov	r1, r4
 800cac0:	4628      	mov	r0, r5
 800cac2:	f7ff fcb5 	bl	800c430 <_fflush_r>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d0d9      	beq.n	800ca7e <__swbuf_r+0x2e>
 800caca:	e7d6      	b.n	800ca7a <__swbuf_r+0x2a>

0800cacc <__swsetup_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4b29      	ldr	r3, [pc, #164]	@ (800cb74 <__swsetup_r+0xa8>)
 800cad0:	4605      	mov	r5, r0
 800cad2:	6818      	ldr	r0, [r3, #0]
 800cad4:	460c      	mov	r4, r1
 800cad6:	b118      	cbz	r0, 800cae0 <__swsetup_r+0x14>
 800cad8:	6a03      	ldr	r3, [r0, #32]
 800cada:	b90b      	cbnz	r3, 800cae0 <__swsetup_r+0x14>
 800cadc:	f7fe fa22 	bl	800af24 <__sinit>
 800cae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae4:	0719      	lsls	r1, r3, #28
 800cae6:	d422      	bmi.n	800cb2e <__swsetup_r+0x62>
 800cae8:	06da      	lsls	r2, r3, #27
 800caea:	d407      	bmi.n	800cafc <__swsetup_r+0x30>
 800caec:	2209      	movs	r2, #9
 800caee:	602a      	str	r2, [r5, #0]
 800caf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caf4:	81a3      	strh	r3, [r4, #12]
 800caf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cafa:	e033      	b.n	800cb64 <__swsetup_r+0x98>
 800cafc:	0758      	lsls	r0, r3, #29
 800cafe:	d512      	bpl.n	800cb26 <__swsetup_r+0x5a>
 800cb00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb02:	b141      	cbz	r1, 800cb16 <__swsetup_r+0x4a>
 800cb04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb08:	4299      	cmp	r1, r3
 800cb0a:	d002      	beq.n	800cb12 <__swsetup_r+0x46>
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	f7fe fbb1 	bl	800b274 <_free_r>
 800cb12:	2300      	movs	r3, #0
 800cb14:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb1c:	81a3      	strh	r3, [r4, #12]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	6063      	str	r3, [r4, #4]
 800cb22:	6923      	ldr	r3, [r4, #16]
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	f043 0308 	orr.w	r3, r3, #8
 800cb2c:	81a3      	strh	r3, [r4, #12]
 800cb2e:	6923      	ldr	r3, [r4, #16]
 800cb30:	b94b      	cbnz	r3, 800cb46 <__swsetup_r+0x7a>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb3c:	d003      	beq.n	800cb46 <__swsetup_r+0x7a>
 800cb3e:	4621      	mov	r1, r4
 800cb40:	4628      	mov	r0, r5
 800cb42:	f000 f883 	bl	800cc4c <__smakebuf_r>
 800cb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb4a:	f013 0201 	ands.w	r2, r3, #1
 800cb4e:	d00a      	beq.n	800cb66 <__swsetup_r+0x9a>
 800cb50:	2200      	movs	r2, #0
 800cb52:	60a2      	str	r2, [r4, #8]
 800cb54:	6962      	ldr	r2, [r4, #20]
 800cb56:	4252      	negs	r2, r2
 800cb58:	61a2      	str	r2, [r4, #24]
 800cb5a:	6922      	ldr	r2, [r4, #16]
 800cb5c:	b942      	cbnz	r2, 800cb70 <__swsetup_r+0xa4>
 800cb5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb62:	d1c5      	bne.n	800caf0 <__swsetup_r+0x24>
 800cb64:	bd38      	pop	{r3, r4, r5, pc}
 800cb66:	0799      	lsls	r1, r3, #30
 800cb68:	bf58      	it	pl
 800cb6a:	6962      	ldrpl	r2, [r4, #20]
 800cb6c:	60a2      	str	r2, [r4, #8]
 800cb6e:	e7f4      	b.n	800cb5a <__swsetup_r+0x8e>
 800cb70:	2000      	movs	r0, #0
 800cb72:	e7f7      	b.n	800cb64 <__swsetup_r+0x98>
 800cb74:	24000198 	.word	0x24000198

0800cb78 <_raise_r>:
 800cb78:	291f      	cmp	r1, #31
 800cb7a:	b538      	push	{r3, r4, r5, lr}
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	460c      	mov	r4, r1
 800cb80:	d904      	bls.n	800cb8c <_raise_r+0x14>
 800cb82:	2316      	movs	r3, #22
 800cb84:	6003      	str	r3, [r0, #0]
 800cb86:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
 800cb8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb8e:	b112      	cbz	r2, 800cb96 <_raise_r+0x1e>
 800cb90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb94:	b94b      	cbnz	r3, 800cbaa <_raise_r+0x32>
 800cb96:	4628      	mov	r0, r5
 800cb98:	f000 f830 	bl	800cbfc <_getpid_r>
 800cb9c:	4622      	mov	r2, r4
 800cb9e:	4601      	mov	r1, r0
 800cba0:	4628      	mov	r0, r5
 800cba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cba6:	f000 b817 	b.w	800cbd8 <_kill_r>
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d00a      	beq.n	800cbc4 <_raise_r+0x4c>
 800cbae:	1c59      	adds	r1, r3, #1
 800cbb0:	d103      	bne.n	800cbba <_raise_r+0x42>
 800cbb2:	2316      	movs	r3, #22
 800cbb4:	6003      	str	r3, [r0, #0]
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	e7e7      	b.n	800cb8a <_raise_r+0x12>
 800cbba:	2100      	movs	r1, #0
 800cbbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	4798      	blx	r3
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	e7e0      	b.n	800cb8a <_raise_r+0x12>

0800cbc8 <raise>:
 800cbc8:	4b02      	ldr	r3, [pc, #8]	@ (800cbd4 <raise+0xc>)
 800cbca:	4601      	mov	r1, r0
 800cbcc:	6818      	ldr	r0, [r3, #0]
 800cbce:	f7ff bfd3 	b.w	800cb78 <_raise_r>
 800cbd2:	bf00      	nop
 800cbd4:	24000198 	.word	0x24000198

0800cbd8 <_kill_r>:
 800cbd8:	b538      	push	{r3, r4, r5, lr}
 800cbda:	4d07      	ldr	r5, [pc, #28]	@ (800cbf8 <_kill_r+0x20>)
 800cbdc:	2300      	movs	r3, #0
 800cbde:	4604      	mov	r4, r0
 800cbe0:	4608      	mov	r0, r1
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	602b      	str	r3, [r5, #0]
 800cbe6:	f7f5 fc07 	bl	80023f8 <_kill>
 800cbea:	1c43      	adds	r3, r0, #1
 800cbec:	d102      	bne.n	800cbf4 <_kill_r+0x1c>
 800cbee:	682b      	ldr	r3, [r5, #0]
 800cbf0:	b103      	cbz	r3, 800cbf4 <_kill_r+0x1c>
 800cbf2:	6023      	str	r3, [r4, #0]
 800cbf4:	bd38      	pop	{r3, r4, r5, pc}
 800cbf6:	bf00      	nop
 800cbf8:	2400068c 	.word	0x2400068c

0800cbfc <_getpid_r>:
 800cbfc:	f7f5 bbf4 	b.w	80023e8 <_getpid>

0800cc00 <__swhatbuf_r>:
 800cc00:	b570      	push	{r4, r5, r6, lr}
 800cc02:	460c      	mov	r4, r1
 800cc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc08:	2900      	cmp	r1, #0
 800cc0a:	b096      	sub	sp, #88	@ 0x58
 800cc0c:	4615      	mov	r5, r2
 800cc0e:	461e      	mov	r6, r3
 800cc10:	da0d      	bge.n	800cc2e <__swhatbuf_r+0x2e>
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc18:	f04f 0100 	mov.w	r1, #0
 800cc1c:	bf14      	ite	ne
 800cc1e:	2340      	movne	r3, #64	@ 0x40
 800cc20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc24:	2000      	movs	r0, #0
 800cc26:	6031      	str	r1, [r6, #0]
 800cc28:	602b      	str	r3, [r5, #0]
 800cc2a:	b016      	add	sp, #88	@ 0x58
 800cc2c:	bd70      	pop	{r4, r5, r6, pc}
 800cc2e:	466a      	mov	r2, sp
 800cc30:	f000 f848 	bl	800ccc4 <_fstat_r>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	dbec      	blt.n	800cc12 <__swhatbuf_r+0x12>
 800cc38:	9901      	ldr	r1, [sp, #4]
 800cc3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc42:	4259      	negs	r1, r3
 800cc44:	4159      	adcs	r1, r3
 800cc46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc4a:	e7eb      	b.n	800cc24 <__swhatbuf_r+0x24>

0800cc4c <__smakebuf_r>:
 800cc4c:	898b      	ldrh	r3, [r1, #12]
 800cc4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc50:	079d      	lsls	r5, r3, #30
 800cc52:	4606      	mov	r6, r0
 800cc54:	460c      	mov	r4, r1
 800cc56:	d507      	bpl.n	800cc68 <__smakebuf_r+0x1c>
 800cc58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	6123      	str	r3, [r4, #16]
 800cc60:	2301      	movs	r3, #1
 800cc62:	6163      	str	r3, [r4, #20]
 800cc64:	b003      	add	sp, #12
 800cc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc68:	ab01      	add	r3, sp, #4
 800cc6a:	466a      	mov	r2, sp
 800cc6c:	f7ff ffc8 	bl	800cc00 <__swhatbuf_r>
 800cc70:	9f00      	ldr	r7, [sp, #0]
 800cc72:	4605      	mov	r5, r0
 800cc74:	4639      	mov	r1, r7
 800cc76:	4630      	mov	r0, r6
 800cc78:	f7fd fa7e 	bl	800a178 <_malloc_r>
 800cc7c:	b948      	cbnz	r0, 800cc92 <__smakebuf_r+0x46>
 800cc7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc82:	059a      	lsls	r2, r3, #22
 800cc84:	d4ee      	bmi.n	800cc64 <__smakebuf_r+0x18>
 800cc86:	f023 0303 	bic.w	r3, r3, #3
 800cc8a:	f043 0302 	orr.w	r3, r3, #2
 800cc8e:	81a3      	strh	r3, [r4, #12]
 800cc90:	e7e2      	b.n	800cc58 <__smakebuf_r+0xc>
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	6020      	str	r0, [r4, #0]
 800cc96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc9a:	81a3      	strh	r3, [r4, #12]
 800cc9c:	9b01      	ldr	r3, [sp, #4]
 800cc9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cca2:	b15b      	cbz	r3, 800ccbc <__smakebuf_r+0x70>
 800cca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cca8:	4630      	mov	r0, r6
 800ccaa:	f000 f81d 	bl	800cce8 <_isatty_r>
 800ccae:	b128      	cbz	r0, 800ccbc <__smakebuf_r+0x70>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f023 0303 	bic.w	r3, r3, #3
 800ccb6:	f043 0301 	orr.w	r3, r3, #1
 800ccba:	81a3      	strh	r3, [r4, #12]
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	431d      	orrs	r5, r3
 800ccc0:	81a5      	strh	r5, [r4, #12]
 800ccc2:	e7cf      	b.n	800cc64 <__smakebuf_r+0x18>

0800ccc4 <_fstat_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4d07      	ldr	r5, [pc, #28]	@ (800cce4 <_fstat_r+0x20>)
 800ccc8:	2300      	movs	r3, #0
 800ccca:	4604      	mov	r4, r0
 800cccc:	4608      	mov	r0, r1
 800ccce:	4611      	mov	r1, r2
 800ccd0:	602b      	str	r3, [r5, #0]
 800ccd2:	f7f5 fbf1 	bl	80024b8 <_fstat>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	d102      	bne.n	800cce0 <_fstat_r+0x1c>
 800ccda:	682b      	ldr	r3, [r5, #0]
 800ccdc:	b103      	cbz	r3, 800cce0 <_fstat_r+0x1c>
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	bd38      	pop	{r3, r4, r5, pc}
 800cce2:	bf00      	nop
 800cce4:	2400068c 	.word	0x2400068c

0800cce8 <_isatty_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d06      	ldr	r5, [pc, #24]	@ (800cd04 <_isatty_r+0x1c>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	602b      	str	r3, [r5, #0]
 800ccf4:	f7f5 fbf0 	bl	80024d8 <_isatty>
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	d102      	bne.n	800cd02 <_isatty_r+0x1a>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	b103      	cbz	r3, 800cd02 <_isatty_r+0x1a>
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	2400068c 	.word	0x2400068c

0800cd08 <_init>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	bf00      	nop
 800cd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0e:	bc08      	pop	{r3}
 800cd10:	469e      	mov	lr, r3
 800cd12:	4770      	bx	lr

0800cd14 <_fini>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	bf00      	nop
 800cd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1a:	bc08      	pop	{r3}
 800cd1c:	469e      	mov	lr, r3
 800cd1e:	4770      	bx	lr
