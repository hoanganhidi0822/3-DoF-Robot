
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004f10  08004f10  00005f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  08004f18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000208  24000014  08004f2c  00006014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400021c  08004f2c  0000621c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011d41  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002221  00000000  00000000  00017d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001028  00000000  00000000  00019fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ca2  00000000  00000000  0001afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000266f  00000000  00000000  0001bc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013fad  00000000  00000000  0001e2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001450ff  00000000  00000000  0003228e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0017738d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044d4  00000000  00000000  001773d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  0017b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08004ee8 	.word	0x08004ee8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	08004ee8 	.word	0x08004ee8

08000310 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//----------------------Ngat Sensor----------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

	//------------
	if (htim->Instance==htim2.Instance)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b5f      	ldr	r3, [pc, #380]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	d110      	bne.n	8000346 <HAL_TIM_PeriodElapsedCallback+0x36>
	{

		angleControl(target_angle_1,target_angle_2,target_angle_3);
 8000324:	4b5e      	ldr	r3, [pc, #376]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000326:	edd3 7a00 	vldr	s15, [r3]
 800032a:	4b5e      	ldr	r3, [pc, #376]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800032c:	ed93 7a00 	vldr	s14, [r3]
 8000330:	4b5d      	ldr	r3, [pc, #372]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000332:	edd3 6a00 	vldr	s13, [r3]
 8000336:	eeb0 1a66 	vmov.f32	s2, s13
 800033a:	eef0 0a47 	vmov.f32	s1, s14
 800033e:	eeb0 0a67 	vmov.f32	s0, s15
 8000342:	f000 f97b 	bl	800063c <angleControl>

	}


	if (htim->Instance == TIM4)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a58      	ldr	r2, [pc, #352]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800034c:	4293      	cmp	r3, r2
 800034e:	f040 80a1 	bne.w	8000494 <HAL_TIM_PeriodElapsedCallback+0x184>
	{  // Ensure the correct timer is being checked

		//HAL_GPIO_TogglePin(GPIOB, motorL1_Pin);
		// Handle Motor 1
		if (countPulseL1 > 0) {
 8000352:	4b57      	ldr	r3, [pc, #348]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	dd1f      	ble.n	800039a <HAL_TIM_PeriodElapsedCallback+0x8a>
			softCounter1++;  // Increment soft counter for motor 1
 800035a:	4b56      	ldr	r3, [pc, #344]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3301      	adds	r3, #1
 8000360:	4a54      	ldr	r2, [pc, #336]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000362:	6013      	str	r3, [r2, #0]
			if (softCounter1 >= periodMotor1) {  // If soft counter reaches the desired period
 8000364:	4b53      	ldr	r3, [pc, #332]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	429a      	cmp	r2, r3
 800036e:	db19      	blt.n	80003a4 <HAL_TIM_PeriodElapsedCallback+0x94>
				HAL_GPIO_TogglePin(GPIOB, motorL1_Pin);  // Toggle Motor 1 pin (generate pulse)
 8000370:	2101      	movs	r1, #1
 8000372:	4852      	ldr	r0, [pc, #328]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000374:	f001 fc8b 	bl	8001c8e <HAL_GPIO_TogglePin>

				softCounter1 = 0;  // Reset the soft counter for motor 1
 8000378:	4b4e      	ldr	r3, [pc, #312]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
				countPulseL1--;    // Decrement the pulse count
 800037e:	4b4c      	ldr	r3, [pc, #304]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	3b01      	subs	r3, #1
 8000384:	4a4a      	ldr	r2, [pc, #296]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000386:	6013      	str	r3, [r2, #0]
				//e = 360/(44800*2);
				update_current_angle(1,1,dir1);
 8000388:	4b4d      	ldr	r3, [pc, #308]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4619      	mov	r1, r3
 800038e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000392:	2001      	movs	r0, #1
 8000394:	f000 f8a8 	bl	80004e8 <update_current_angle>
 8000398:	e004      	b.n	80003a4 <HAL_TIM_PeriodElapsedCallback+0x94>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL1_Pin, GPIO_PIN_RESET);  // Stop Motor 1
 800039a:	2200      	movs	r2, #0
 800039c:	2101      	movs	r1, #1
 800039e:	4847      	ldr	r0, [pc, #284]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80003a0:	f001 fc5c 	bl	8001c5c <HAL_GPIO_WritePin>
		}

		// Handle Motor 2
		if (countPulseL2 > 0) {
 80003a4:	4b47      	ldr	r3, [pc, #284]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	dd1f      	ble.n	80003ec <HAL_TIM_PeriodElapsedCallback+0xdc>
			softCounter2++;  // Increment soft counter for motor 2
 80003ac:	4b46      	ldr	r3, [pc, #280]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	3301      	adds	r3, #1
 80003b2:	4a45      	ldr	r2, [pc, #276]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80003b4:	6013      	str	r3, [r2, #0]
			if (softCounter2 >= periodMotor2) {  // If soft counter reaches the desired period
 80003b6:	4b44      	ldr	r3, [pc, #272]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b44      	ldr	r3, [pc, #272]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	429a      	cmp	r2, r3
 80003c0:	db19      	blt.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0xe6>
				HAL_GPIO_TogglePin(GPIOB, motorL2_Pin);  // Toggle Motor 2 pin (generate pulse)
 80003c2:	2102      	movs	r1, #2
 80003c4:	483d      	ldr	r0, [pc, #244]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80003c6:	f001 fc62 	bl	8001c8e <HAL_GPIO_TogglePin>

				softCounter2 = 0;  // Reset the soft counter for motor 2
 80003ca:	4b3f      	ldr	r3, [pc, #252]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
				countPulseL2--;    // Decrement the pulse count
 80003d0:	4b3c      	ldr	r3, [pc, #240]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	4a3b      	ldr	r2, [pc, #236]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80003d8:	6013      	str	r3, [r2, #0]
				update_current_angle(2,1,dir2);
 80003da:	4b3d      	ldr	r3, [pc, #244]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80003e4:	2002      	movs	r0, #2
 80003e6:	f000 f87f 	bl	80004e8 <update_current_angle>
 80003ea:	e004      	b.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0xe6>

			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL2_Pin, GPIO_PIN_RESET);  // Stop Motor 2
 80003ec:	2200      	movs	r2, #0
 80003ee:	2102      	movs	r1, #2
 80003f0:	4832      	ldr	r0, [pc, #200]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80003f2:	f001 fc33 	bl	8001c5c <HAL_GPIO_WritePin>
		}

		// Handle Motor 3
		if (countPulseL3 > 0) {
 80003f6:	4b37      	ldr	r3, [pc, #220]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	dd45      	ble.n	800048a <HAL_TIM_PeriodElapsedCallback+0x17a>
			softCounter3++;  // Increment soft counter for motor 3
 80003fe:	4b36      	ldr	r3, [pc, #216]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	4a34      	ldr	r2, [pc, #208]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000406:	6013      	str	r3, [r2, #0]
			if (softCounter3 >= periodMotor3) {  // If soft counter reaches the desired period
 8000408:	4b33      	ldr	r3, [pc, #204]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b33      	ldr	r3, [pc, #204]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	429a      	cmp	r2, r3
 8000412:	db3f      	blt.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x184>
				HAL_GPIO_TogglePin(GPIOB, motorL3_Pin);  // Toggle Motor 3 pin (generate pulse)
 8000414:	2104      	movs	r1, #4
 8000416:	4829      	ldr	r0, [pc, #164]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000418:	f001 fc39 	bl	8001c8e <HAL_GPIO_TogglePin>

				softCounter3 = 0;  // Reset the soft counter for motor 3
 800041c:	4b2e      	ldr	r3, [pc, #184]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
				countPulseL3--;    // Decrement the pulse count
 8000422:	4b2c      	ldr	r3, [pc, #176]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3b01      	subs	r3, #1
 8000428:	4a2a      	ldr	r2, [pc, #168]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800042a:	6013      	str	r3, [r2, #0]
				d = 1/(target_angle_2 + target_angle_3);
 800042c:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800042e:	ed93 7a00 	vldr	s14, [r3]
 8000432:	4b1d      	ldr	r3, [pc, #116]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000434:	edd3 7a00 	vldr	s15, [r3]
 8000438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800043c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000444:	4b26      	ldr	r3, [pc, #152]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000446:	edc3 7a00 	vstr	s15, [r3]
				update_current_angle(3,abs(target_angle_3)/(target_angle_2 + target_angle_3), dir3);
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800044c:	edd3 7a00 	vldr	s15, [r3]
 8000450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000454:	eeb0 0b47 	vmov.f64	d0, d7
 8000458:	f004 fd16 	bl	8004e88 <abs>
 800045c:	ee07 0a90 	vmov	s15, r0
 8000460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000466:	edd3 6a00 	vldr	s13, [r3]
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800046c:	edd3 7a00 	vldr	s15, [r3]
 8000470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000474:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000478:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	eeb0 0a66 	vmov.f32	s0, s13
 8000482:	2003      	movs	r0, #3
 8000484:	f000 f830 	bl	80004e8 <update_current_angle>
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
		}
	}

}
 8000488:	e004      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x184>
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
 800048a:	2200      	movs	r2, #0
 800048c:	2104      	movs	r1, #4
 800048e:	480b      	ldr	r0, [pc, #44]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000490:	f001 fbe4 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	2400012c 	.word	0x2400012c
 80004a0:	2400020c 	.word	0x2400020c
 80004a4:	24000210 	.word	0x24000210
 80004a8:	24000214 	.word	0x24000214
 80004ac:	40000800 	.word	0x40000800
 80004b0:	240001d0 	.word	0x240001d0
 80004b4:	240001f4 	.word	0x240001f4
 80004b8:	24000200 	.word	0x24000200
 80004bc:	58020400 	.word	0x58020400
 80004c0:	240001ec 	.word	0x240001ec
 80004c4:	240001d4 	.word	0x240001d4
 80004c8:	240001f8 	.word	0x240001f8
 80004cc:	24000204 	.word	0x24000204
 80004d0:	240001f0 	.word	0x240001f0
 80004d4:	240001d8 	.word	0x240001d8
 80004d8:	240001fc 	.word	0x240001fc
 80004dc:	24000208 	.word	0x24000208
 80004e0:	240001e8 	.word	0x240001e8
 80004e4:	24000000 	.word	0x24000000

080004e8 <update_current_angle>:
    // Read raw angle from angleL3 sensor
    AS5600_GetRawAngle(angleL3, &angle3);

}

void update_current_angle(int motor_index, float steps, int direction) {
 80004e8:	b480      	push	{r7}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80004f4:	6079      	str	r1, [r7, #4]
    float angle_change = steps * 360.0 / (44800.0 * 2); // Calculate the change in angle
 80004f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80004fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80004fe:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8000590 <update_current_angle+0xa8>
 8000502:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000506:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8000598 <update_current_angle+0xb0>
 800050a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800050e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000512:	edc7 7a05 	vstr	s15, [r7, #20]

    // If direction is negative, reverse the angle change
    if (direction < 0) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	da05      	bge.n	8000528 <update_current_angle+0x40>
        angle_change = -angle_change;
 800051c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000520:	eef1 7a67 	vneg.f32	s15, s15
 8000524:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    switch (motor_index) {
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b03      	cmp	r3, #3
 800052c:	d01f      	beq.n	800056e <update_current_angle+0x86>
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b03      	cmp	r3, #3
 8000532:	dc27      	bgt.n	8000584 <update_current_angle+0x9c>
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d003      	beq.n	8000542 <update_current_angle+0x5a>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d00b      	beq.n	8000558 <update_current_angle+0x70>
            break;
        case 3:
            angle3 += angle_change; // Update current angle for motor 3
            break;
    }
}
 8000540:	e020      	b.n	8000584 <update_current_angle+0x9c>
            angle1 += angle_change; // Update current angle for motor 1
 8000542:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <update_current_angle+0xb8>)
 8000544:	ed93 7a00 	vldr	s14, [r3]
 8000548:	edd7 7a05 	vldr	s15, [r7, #20]
 800054c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000550:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <update_current_angle+0xb8>)
 8000552:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000556:	e015      	b.n	8000584 <update_current_angle+0x9c>
            angle2 += angle_change; // Update current angle for motor 2
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <update_current_angle+0xbc>)
 800055a:	ed93 7a00 	vldr	s14, [r3]
 800055e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <update_current_angle+0xbc>)
 8000568:	edc3 7a00 	vstr	s15, [r3]
            break;
 800056c:	e00a      	b.n	8000584 <update_current_angle+0x9c>
            angle3 += angle_change; // Update current angle for motor 3
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <update_current_angle+0xc0>)
 8000570:	ed93 7a00 	vldr	s14, [r3]
 8000574:	edd7 7a05 	vldr	s15, [r7, #20]
 8000578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800057c:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <update_current_angle+0xc0>)
 800057e:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000582:	bf00      	nop
}
 8000584:	bf00      	nop
 8000586:	371c      	adds	r7, #28
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	00000000 	.word	0x00000000
 8000594:	40768000 	.word	0x40768000
 8000598:	00000000 	.word	0x00000000
 800059c:	40f5e000 	.word	0x40f5e000
 80005a0:	240001c4 	.word	0x240001c4
 80005a4:	240001c8 	.word	0x240001c8
 80005a8:	240001cc 	.word	0x240001cc

080005ac <calculate_steps>:
//
//    }
//}

int calculate_steps(float current_angle, float target_angle)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005b6:	edc7 0a00 	vstr	s1, [r7]
    // Calculate the angular difference

    float angular_difference ;

	angular_difference = target_angle - current_angle;
 80005ba:	ed97 7a00 	vldr	s14, [r7]
 80005be:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    // Convert angular difference to steps
    int steps_needed = (int)((angular_difference / 360) * 44800*2);
 80005ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80005ce:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80005fc <calculate_steps+0x50>
 80005d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000600 <calculate_steps+0x54>
 80005da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005e6:	ee17 3a90 	vmov	r3, s15
 80005ea:	60bb      	str	r3, [r7, #8]

    // Return the absolute number of steps (stepper motors can't move negative steps)
    return steps_needed;
 80005ec:	68bb      	ldr	r3, [r7, #8]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	43b40000 	.word	0x43b40000
 8000600:	472f0000 	.word	0x472f0000

08000604 <maxSteps>:

int maxSteps(int steps_motor_1, int steps_motor_2, int steps_motor_3)
{
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
    int max_value = steps_motor_1;  // Assume motor 1 has the maximum steps
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	617b      	str	r3, [r7, #20]

    if (steps_motor_2 > max_value) {
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	429a      	cmp	r2, r3
 800061a:	dd01      	ble.n	8000620 <maxSteps+0x1c>
        max_value = steps_motor_2;  // Update if motor 2 has more steps
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	617b      	str	r3, [r7, #20]
    }

    if (steps_motor_3 > max_value) {
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	429a      	cmp	r2, r3
 8000626:	dd01      	ble.n	800062c <maxSteps+0x28>
        max_value = steps_motor_3;  // Update if motor 3 has more steps
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	617b      	str	r3, [r7, #20]
    }

    return max_value;  // Return the largest number of steps
 800062c:	697b      	ldr	r3, [r7, #20]
}
 800062e:	4618      	mov	r0, r3
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <angleControl>:


void angleControl(float target_angle_1, float target_angle_2, float target_angle_3) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	ed87 0a03 	vstr	s0, [r7, #12]
 8000646:	edc7 0a02 	vstr	s1, [r7, #8]
 800064a:	ed87 1a01 	vstr	s2, [r7, #4]
	// Read the current angles from the sensors
	//Read_Angles();

	// Calculate the required steps for each motor based on current and target angles
	int steps_motor_1 = calculate_steps(angle1, target_angle_1);
 800064e:	4b76      	ldr	r3, [pc, #472]	@ (8000828 <angleControl+0x1ec>)
 8000650:	edd3 7a00 	vldr	s15, [r3]
 8000654:	edd7 0a03 	vldr	s1, [r7, #12]
 8000658:	eeb0 0a67 	vmov.f32	s0, s15
 800065c:	f7ff ffa6 	bl	80005ac <calculate_steps>
 8000660:	61f8      	str	r0, [r7, #28]
	int steps_motor_2 = calculate_steps(angle2, target_angle_2);
 8000662:	4b72      	ldr	r3, [pc, #456]	@ (800082c <angleControl+0x1f0>)
 8000664:	edd3 7a00 	vldr	s15, [r3]
 8000668:	edd7 0a02 	vldr	s1, [r7, #8]
 800066c:	eeb0 0a67 	vmov.f32	s0, s15
 8000670:	f7ff ff9c 	bl	80005ac <calculate_steps>
 8000674:	61b8      	str	r0, [r7, #24]
	int steps_motor_3 = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]

	steps_motor_3 = calculate_steps(angle3, (target_angle_3 + target_angle_2));
 800067a:	4b6d      	ldr	r3, [pc, #436]	@ (8000830 <angleControl+0x1f4>)
 800067c:	edd3 6a00 	vldr	s13, [r3]
 8000680:	ed97 7a01 	vldr	s14, [r7, #4]
 8000684:	edd7 7a02 	vldr	s15, [r7, #8]
 8000688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800068c:	eef0 0a67 	vmov.f32	s1, s15
 8000690:	eeb0 0a66 	vmov.f32	s0, s13
 8000694:	f7ff ff8a 	bl	80005ac <calculate_steps>
 8000698:	6178      	str	r0, [r7, #20]



	// Set the pulse counts for each motor
	countPulseL1 = abs(steps_motor_1);
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	2b00      	cmp	r3, #0
 800069e:	bfb8      	it	lt
 80006a0:	425b      	neglt	r3, r3
 80006a2:	4a64      	ldr	r2, [pc, #400]	@ (8000834 <angleControl+0x1f8>)
 80006a4:	6013      	str	r3, [r2, #0]
	countPulseL2 = abs(steps_motor_2);
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	bfb8      	it	lt
 80006ac:	425b      	neglt	r3, r3
 80006ae:	4a62      	ldr	r2, [pc, #392]	@ (8000838 <angleControl+0x1fc>)
 80006b0:	6013      	str	r3, [r2, #0]
	countPulseL3 = abs(steps_motor_3);
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	bfb8      	it	lt
 80006b8:	425b      	neglt	r3, r3
 80006ba:	4a60      	ldr	r2, [pc, #384]	@ (800083c <angleControl+0x200>)
 80006bc:	6013      	str	r3, [r2, #0]

	// Determine the direction for each motor and set control pins accordingly
	if (target_angle_1 > angle1) {
 80006be:	4b5a      	ldr	r3, [pc, #360]	@ (8000828 <angleControl+0x1ec>)
 80006c0:	edd3 7a00 	vldr	s15, [r3]
 80006c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80006c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d0:	dd09      	ble.n	80006e6 <angleControl+0xaa>
		// Move motor 1 clockwise
		dir1 = 1;
 80006d2:	4b5b      	ldr	r3, [pc, #364]	@ (8000840 <angleControl+0x204>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006de:	4859      	ldr	r0, [pc, #356]	@ (8000844 <angleControl+0x208>)
 80006e0:	f001 fabc 	bl	8001c5c <HAL_GPIO_WritePin>
 80006e4:	e009      	b.n	80006fa <angleControl+0xbe>

	} else {
		dir1 = -1;
 80006e6:	4b56      	ldr	r3, [pc, #344]	@ (8000840 <angleControl+0x204>)
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ec:	601a      	str	r2, [r3, #0]
		// Move motor 1 counterclockwise
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f4:	4853      	ldr	r0, [pc, #332]	@ (8000844 <angleControl+0x208>)
 80006f6:	f001 fab1 	bl	8001c5c <HAL_GPIO_WritePin>
	}

	if (target_angle_2 > angle2) {
 80006fa:	4b4c      	ldr	r3, [pc, #304]	@ (800082c <angleControl+0x1f0>)
 80006fc:	edd3 7a00 	vldr	s15, [r3]
 8000700:	ed97 7a02 	vldr	s14, [r7, #8]
 8000704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070c:	dd09      	ble.n	8000722 <angleControl+0xe6>
		// Move motor 2 clockwise
		dir2 = 1;
 800070e:	4b4e      	ldr	r3, [pc, #312]	@ (8000848 <angleControl+0x20c>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071a:	484a      	ldr	r0, [pc, #296]	@ (8000844 <angleControl+0x208>)
 800071c:	f001 fa9e 	bl	8001c5c <HAL_GPIO_WritePin>
 8000720:	e009      	b.n	8000736 <angleControl+0xfa>
	} else {
		// Move motor 2 counterclockwise
		dir2 = -1;
 8000722:	4b49      	ldr	r3, [pc, #292]	@ (8000848 <angleControl+0x20c>)
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000730:	4844      	ldr	r0, [pc, #272]	@ (8000844 <angleControl+0x208>)
 8000732:	f001 fa93 	bl	8001c5c <HAL_GPIO_WritePin>
	}

	if (target_angle_3 > angle3) {
 8000736:	4b3e      	ldr	r3, [pc, #248]	@ (8000830 <angleControl+0x1f4>)
 8000738:	edd3 7a00 	vldr	s15, [r3]
 800073c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000748:	dd09      	ble.n	800075e <angleControl+0x122>
		// Move motor 3 clockwise
		dir3 = 1;
 800074a:	4b40      	ldr	r3, [pc, #256]	@ (800084c <angleControl+0x210>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000756:	483b      	ldr	r0, [pc, #236]	@ (8000844 <angleControl+0x208>)
 8000758:	f001 fa80 	bl	8001c5c <HAL_GPIO_WritePin>
 800075c:	e009      	b.n	8000772 <angleControl+0x136>
	} else {
		// Move motor 3 counterclockwise
		dir3 = -1;
 800075e:	4b3b      	ldr	r3, [pc, #236]	@ (800084c <angleControl+0x210>)
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800076c:	4835      	ldr	r0, [pc, #212]	@ (8000844 <angleControl+0x208>)
 800076e:	f001 fa75 	bl	8001c5c <HAL_GPIO_WritePin>
	}

	// Determine the maximum steps needed to synchronize the motors
	int max_steps = maxSteps(abs(steps_motor_1), abs(steps_motor_2), abs(steps_motor_3));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8000778:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000782:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	2b00      	cmp	r3, #0
 800078a:	bfb8      	it	lt
 800078c:	425b      	neglt	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	f7ff ff38 	bl	8000604 <maxSteps>
 8000794:	6138      	str	r0, [r7, #16]

	// Calculate the pulse periods for each motor based on the maximum steps
	periodMotor1 = (int)(((float)max_steps / abs(steps_motor_1)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	ee07 3a90 	vmov	s15, r3
 800079c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bfb8      	it	lt
 80007a6:	425b      	neglt	r3, r3
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007bc:	ee17 2a90 	vmov	r2, s15
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <angleControl+0x214>)
 80007c2:	601a      	str	r2, [r3, #0]
	periodMotor2 = (int)(((float)max_steps / abs(steps_motor_2)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	ee07 3a90 	vmov	s15, r3
 80007ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bfb8      	it	lt
 80007d4:	425b      	neglt	r3, r3
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ea:	ee17 2a90 	vmov	r2, s15
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <angleControl+0x218>)
 80007f0:	601a      	str	r2, [r3, #0]
	periodMotor3 = (int)(((float)max_steps / abs(steps_motor_3)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	ee07 3a90 	vmov	s15, r3
 80007f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bfb8      	it	lt
 8000802:	425b      	neglt	r3, r3
 8000804:	ee07 3a90 	vmov	s15, r3
 8000808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800080c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000810:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000818:	ee17 2a90 	vmov	r2, s15
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <angleControl+0x21c>)
 800081e:	601a      	str	r2, [r3, #0]

	// Start the timer if it is not already running (ensure the timer has been initialized)
	//HAL_TIM_Base_Start_IT(&htim4);
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	240001c4 	.word	0x240001c4
 800082c:	240001c8 	.word	0x240001c8
 8000830:	240001cc 	.word	0x240001cc
 8000834:	240001d0 	.word	0x240001d0
 8000838:	240001d4 	.word	0x240001d4
 800083c:	240001d8 	.word	0x240001d8
 8000840:	240001ec 	.word	0x240001ec
 8000844:	58021400 	.word	0x58021400
 8000848:	240001f0 	.word	0x240001f0
 800084c:	24000000 	.word	0x24000000
 8000850:	24000200 	.word	0x24000200
 8000854:	24000204 	.word	0x24000204
 8000858:	24000208 	.word	0x24000208

0800085c <autoHomeMotors>:



void autoHomeMotors(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    // Set initial movement direction for homing (assumes motors move towards the limit switches)
    HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET); // Move Motor 1 in the homing direction
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000866:	481b      	ldr	r0, [pc, #108]	@ (80008d4 <autoHomeMotors+0x78>)
 8000868:	f001 f9f8 	bl	8001c5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET); // Move Motor 2 in the homing direction
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000872:	4818      	ldr	r0, [pc, #96]	@ (80008d4 <autoHomeMotors+0x78>)
 8000874:	f001 f9f2 	bl	8001c5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET); // Move Motor 3 in the homing direction
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800087e:	4815      	ldr	r0, [pc, #84]	@ (80008d4 <autoHomeMotors+0x78>)
 8000880:	f001 f9ec 	bl	8001c5c <HAL_GPIO_WritePin>

    // Start moving the motors
    countPulseL1 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <autoHomeMotors+0x7c>)
 8000886:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800088a:	601a      	str	r2, [r3, #0]
    countPulseL2 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <autoHomeMotors+0x80>)
 800088e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000892:	601a      	str	r2, [r3, #0]
    countPulseL3 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <autoHomeMotors+0x84>)
 8000896:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800089a:	601a      	str	r2, [r3, #0]

    periodMotor1 = 4;
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <autoHomeMotors+0x88>)
 800089e:	2204      	movs	r2, #4
 80008a0:	601a      	str	r2, [r3, #0]
	periodMotor2 = 4;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <autoHomeMotors+0x8c>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	601a      	str	r2, [r3, #0]
	periodMotor3 = 4;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <autoHomeMotors+0x90>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	601a      	str	r2, [r3, #0]

    // Wait until all limit switches are triggered
    while (a == 0 || b == 0 || c == 0) {
 80008ae:	e001      	b.n	80008b4 <autoHomeMotors+0x58>
        checkLimitSwitches(); // Continuously check the limit switches
 80008b0:	f000 f83e 	bl	8000930 <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0) {
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <autoHomeMotors+0x94>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f9      	beq.n	80008b0 <autoHomeMotors+0x54>
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <autoHomeMotors+0x98>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d0f5      	beq.n	80008b0 <autoHomeMotors+0x54>
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <autoHomeMotors+0x9c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0f1      	beq.n	80008b0 <autoHomeMotors+0x54>
    }

    // Set the home angle once all limit switches are activated
    setHomeAngles();
 80008cc:	f000 f816 	bl	80008fc <setHomeAngles>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58021400 	.word	0x58021400
 80008d8:	240001d0 	.word	0x240001d0
 80008dc:	240001d4 	.word	0x240001d4
 80008e0:	240001d8 	.word	0x240001d8
 80008e4:	24000200 	.word	0x24000200
 80008e8:	24000204 	.word	0x24000204
 80008ec:	24000208 	.word	0x24000208
 80008f0:	240001dc 	.word	0x240001dc
 80008f4:	240001e0 	.word	0x240001e0
 80008f8:	240001e4 	.word	0x240001e4

080008fc <setHomeAngles>:

void setHomeAngles(void) {
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
    // Set the current angle to zero or a specific home angle as needed
    angle1 = 0.0; // Home position for Motor 1
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <setHomeAngles+0x24>)
 8000902:	f04f 0200 	mov.w	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
    angle2 = 0.0; // Home position for Motor 2
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <setHomeAngles+0x28>)
 800090a:	f04f 0200 	mov.w	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
    angle3 = -65.0; // Home position for Motor 3
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <setHomeAngles+0x2c>)
 8000912:	4a06      	ldr	r2, [pc, #24]	@ (800092c <setHomeAngles+0x30>)
 8000914:	601a      	str	r2, [r3, #0]

    // Optionally print a message for debugging
    //printf("Motors homed. Home positions set.\n");
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	240001c4 	.word	0x240001c4
 8000924:	240001c8 	.word	0x240001c8
 8000928:	240001cc 	.word	0x240001cc
 800092c:	c2820000 	.word	0xc2820000

08000930 <checkLimitSwitches>:

void checkLimitSwitches(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    // Check and handle limit switch 1
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 8000934:	2120      	movs	r1, #32
 8000936:	4820      	ldr	r0, [pc, #128]	@ (80009b8 <checkLimitSwitches+0x88>)
 8000938:	f001 f978 	bl	8001c2c <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d106      	bne.n	8000950 <checkLimitSwitches+0x20>
        a = 1;
 8000942:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <checkLimitSwitches+0x8c>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
        countPulseL1 = 0;  // Stop Motor 1 if limit switch 1 is triggered
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <checkLimitSwitches+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	e002      	b.n	8000956 <checkLimitSwitches+0x26>
    } else {
        a = 0;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <checkLimitSwitches+0x8c>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
    }

    // Check and handle limit switch 2, ensuring that it only works if limit switch 3 is not active
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 8000956:	2110      	movs	r1, #16
 8000958:	4817      	ldr	r0, [pc, #92]	@ (80009b8 <checkLimitSwitches+0x88>)
 800095a:	f001 f967 	bl	8001c2c <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d106      	bne.n	8000972 <checkLimitSwitches+0x42>
        b = 1;
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <checkLimitSwitches+0x94>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
        countPulseL2 = 0;  // Stop Motor 2 if limit switch 2 is triggered
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <checkLimitSwitches+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e002      	b.n	8000978 <checkLimitSwitches+0x48>
    } else {
        b = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <checkLimitSwitches+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
    }

    // Check and handle limit switch 3
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	480f      	ldr	r0, [pc, #60]	@ (80009b8 <checkLimitSwitches+0x88>)
 800097c:	f001 f956 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d10d      	bne.n	80009a2 <checkLimitSwitches+0x72>
        c = 1;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <checkLimitSwitches+0x9c>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
        countPulseL3 = countPulseL2;  // Stop Motor 3 if limit switch 3 is triggered
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <checkLimitSwitches+0x98>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <checkLimitSwitches+0xa0>)
 8000992:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);  // Stop motor direction for M3
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800099a:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <checkLimitSwitches+0xa4>)
 800099c:	f001 f95e 	bl	8001c5c <HAL_GPIO_WritePin>
    } else {
        c = 0;
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
    }
}
 80009a0:	e008      	b.n	80009b4 <checkLimitSwitches+0x84>
        c = 0;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <checkLimitSwitches+0x9c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ae:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <checkLimitSwitches+0xa4>)
 80009b0:	f001 f954 	bl	8001c5c <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58020000 	.word	0x58020000
 80009bc:	240001dc 	.word	0x240001dc
 80009c0:	240001d0 	.word	0x240001d0
 80009c4:	240001e0 	.word	0x240001e0
 80009c8:	240001d4 	.word	0x240001d4
 80009cc:	240001e4 	.word	0x240001e4
 80009d0:	240001d8 	.word	0x240001d8
 80009d4:	58021400 	.word	0x58021400

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fdac 	bl	8001538 <HAL_Init>
//	angleL3->i2cHandle= &hi2c3;
//	AS5600_Init(angleL3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f84e 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f000 fa50 	bl	8000e88 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009e8:	f000 f9b2 	bl	8000d50 <MX_TIM2_Init>
  MX_I2C1_Init();
 80009ec:	f000 f8f0 	bl	8000bd0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009f0:	f000 f92e 	bl	8000c50 <MX_I2C2_Init>
  MX_I2C3_Init();
 80009f4:	f000 f96c 	bl	8000cd0 <MX_I2C3_Init>
  MX_TIM4_Init();
 80009f8:	f000 f9f8 	bl	8000dec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80009fc:	4818      	ldr	r0, [pc, #96]	@ (8000a60 <main+0x88>)
 80009fe:	f003 fd8b 	bl	8004518 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000a02:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <main+0x8c>)
 8000a04:	f003 fd88 	bl	8004518 <HAL_TIM_Base_Start_IT>
  autoHomeMotors();
 8000a08:	f7ff ff28 	bl	800085c <autoHomeMotors>

  while (angle3 < -0.01){
 8000a0c:	e007      	b.n	8000a1e <main+0x46>
	  angleControl(0,0,0);
 8000a0e:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 8000a68 <main+0x90>
 8000a12:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8000a68 <main+0x90>
 8000a16:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8000a68 <main+0x90>
 8000a1a:	f7ff fe0f 	bl	800063c <angleControl>
  while (angle3 < -0.01){
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <main+0x94>)
 8000a20:	edd3 7a00 	vldr	s15, [r3]
 8000a24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a28:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000a58 <main+0x80>
 8000a2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a34:	d4eb      	bmi.n	8000a0e <main+0x36>
  }

  target_angle_1 = -45;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <main+0x98>)
 8000a38:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <main+0x9c>)
 8000a3a:	601a      	str	r2, [r3, #0]
  target_angle_2 = -45;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <main+0xa0>)
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <main+0x9c>)
 8000a40:	601a      	str	r2, [r3, #0]
  target_angle_3 = -45;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <main+0xa4>)
 8000a44:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <main+0x9c>)
 8000a46:	601a      	str	r2, [r3, #0]
  HAL_Delay(5000);
 8000a48:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a4c:	f000 fe06 	bl	800165c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <main+0x78>
 8000a54:	f3af 8000 	nop.w
 8000a58:	47ae147b 	.word	0x47ae147b
 8000a5c:	bf847ae1 	.word	0xbf847ae1
 8000a60:	2400012c 	.word	0x2400012c
 8000a64:	24000178 	.word	0x24000178
 8000a68:	00000000 	.word	0x00000000
 8000a6c:	240001cc 	.word	0x240001cc
 8000a70:	2400020c 	.word	0x2400020c
 8000a74:	c2340000 	.word	0xc2340000
 8000a78:	24000210 	.word	0x24000210
 8000a7c:	24000214 	.word	0x24000214

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0a4      	sub	sp, #144	@ 0x90
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a8a:	224c      	movs	r2, #76	@ 0x4c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 f9fe 	bl	8004e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	2220      	movs	r2, #32
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 f9f7 	bl	8004e90 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f001 fa39 	bl	8001f2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b41      	ldr	r3, [pc, #260]	@ (8000bc4 <SystemClock_Config+0x144>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8000bc4 <SystemClock_Config+0x144>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc4 <SystemClock_Config+0x144>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ada:	bf00      	nop
 8000adc:	4b39      	ldr	r3, [pc, #228]	@ (8000bc4 <SystemClock_Config+0x144>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ae8:	d1f8      	bne.n	8000adc <SystemClock_Config+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000aea:	2330      	movs	r3, #48	@ 0x30
 8000aec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000af2:	2380      	movs	r3, #128	@ 0x80
 8000af4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000af6:	2310      	movs	r3, #16
 8000af8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000afe:	2301      	movs	r3, #1
 8000b00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b02:	2304      	movs	r3, #4
 8000b04:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b06:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b0a:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b20:	2302      	movs	r3, #2
 8000b22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fa35 	bl	8001fa0 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b3c:	f000 fa80 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	233f      	movs	r3, #63	@ 0x3f
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2303      	movs	r3, #3
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b52:	2340      	movs	r3, #64	@ 0x40
 8000b54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b56:	2340      	movs	r3, #64	@ 0x40
 8000b58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b60:	2340      	movs	r3, #64	@ 0x40
 8000b62:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fdf2 	bl	8002754 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000b76:	f000 fa63 	bl	8001040 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <SystemClock_Config+0x148>)
 8000b7c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b80:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <SystemClock_Config+0x148>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <SystemClock_Config+0x148>)
 8000b8c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB1;
 8000b9c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ba0:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <SystemClock_Config+0x14c>)
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000baa:	2322      	movs	r3, #34	@ 0x22
 8000bac:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 fa9c 	bl	80040f4 <HAL_RCCEx_CRSConfig>
}
 8000bbc:	bf00      	nop
 8000bbe:	3790      	adds	r7, #144	@ 0x90
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024800 	.word	0x58024800
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	02dc6bff 	.word	0x02dc6bff

08000bd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <MX_I2C1_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <MX_I2C1_Init+0x7c>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000c0c:	f001 f85a 	bl	8001cc4 <HAL_I2C_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c16:	f000 fa13 	bl	8001040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000c1e:	f001 f8ed 	bl	8001dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c28:	f000 fa0a 	bl	8001040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_I2C1_Init+0x74>)
 8000c30:	f001 f92f 	bl	8001e92 <HAL_I2CEx_ConfigDigitalFilter>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 fa01 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	24000030 	.word	0x24000030
 8000c48:	40005400 	.word	0x40005400
 8000c4c:	00a0a3f7 	.word	0x00a0a3f7

08000c50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <MX_I2C2_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A0A3F7;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <MX_I2C2_Init+0x7c>)
 8000c5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c8a:	480e      	ldr	r0, [pc, #56]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c8c:	f001 f81a 	bl	8001cc4 <HAL_I2C_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c96:	f000 f9d3 	bl	8001040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c9e:	f001 f8ad 	bl	8001dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f000 f9ca 	bl	8001040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000cb0:	f001 f8ef 	bl	8001e92 <HAL_I2CEx_ConfigDigitalFilter>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 f9c1 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	24000084 	.word	0x24000084
 8000cc8:	40005800 	.word	0x40005800
 8000ccc:	00a0a3f7 	.word	0x00a0a3f7

08000cd0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d48 <MX_I2C3_Init+0x78>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00A0A3F7;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <MX_I2C3_Init+0x7c>)
 8000cde:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d0a:	480e      	ldr	r0, [pc, #56]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000d0c:	f000 ffda 	bl	8001cc4 <HAL_I2C_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d16:	f000 f993 	bl	8001040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000d1e:	f001 f86d 	bl	8001dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d28:	f000 f98a 	bl	8001040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_I2C3_Init+0x74>)
 8000d30:	f001 f8af 	bl	8001e92 <HAL_I2CEx_ConfigDigitalFilter>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 f981 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	240000d8 	.word	0x240000d8
 8000d48:	40005c00 	.word	0x40005c00
 8000d4c:	00a0a3f7 	.word	0x00a0a3f7

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d78:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8000d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d96:	4814      	ldr	r0, [pc, #80]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d98:	f003 fb66 	bl	8004468 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000da2:	f000 f94d 	bl	8001040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000daa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000db4:	f003 fd3e 	bl	8004834 <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dbe:	f000 f93f 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000dd0:	f003 ffa0 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dda:	f000 f931 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2400012c 	.word	0x2400012c

08000dec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e84 <MX_TIM4_Init+0x98>)
 8000e0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e12:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8000e16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e30:	4813      	ldr	r0, [pc, #76]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e32:	f003 fb19 	bl	8004468 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000e3c:	f000 f900 	bl	8001040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e4e:	f003 fcf1 	bl	8004834 <HAL_TIM_ConfigClockSource>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000e58:	f000 f8f2 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <MX_TIM4_Init+0x94>)
 8000e6a:	f003 ff53 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f000 f8e4 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	24000178 	.word	0x24000178
 8000e84:	40000800 	.word	0x40000800

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	4b63      	ldr	r3, [pc, #396]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	4a61      	ldr	r2, [pc, #388]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eae:	4b5f      	ldr	r3, [pc, #380]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	f003 0320 	and.w	r3, r3, #32
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	4a5a      	ldr	r2, [pc, #360]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ecc:	4b57      	ldr	r3, [pc, #348]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b54      	ldr	r3, [pc, #336]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	4a52      	ldr	r2, [pc, #328]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eea:	4b50      	ldr	r3, [pc, #320]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	4a4b      	ldr	r2, [pc, #300]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f08:	4b48      	ldr	r3, [pc, #288]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b45      	ldr	r3, [pc, #276]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	4a43      	ldr	r2, [pc, #268]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f26:	4b41      	ldr	r3, [pc, #260]	@ (800102c <MX_GPIO_Init+0x1a4>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Mag_GPIO_Port, Mag_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2180      	movs	r1, #128	@ 0x80
 8000f38:	483d      	ldr	r0, [pc, #244]	@ (8001030 <MX_GPIO_Init+0x1a8>)
 8000f3a:	f000 fe8f 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorL1_Pin|motorL2_Pin|motorL3_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2107      	movs	r1, #7
 8000f42:	483c      	ldr	r0, [pc, #240]	@ (8001034 <MX_GPIO_Init+0x1ac>)
 8000f44:	f000 fe8a 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M1dir_Pin|M2dir_Pin|M3dir_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000f4e:	483a      	ldr	r0, [pc, #232]	@ (8001038 <MX_GPIO_Init+0x1b0>)
 8000f50:	f000 fe84 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2180      	movs	r1, #128	@ 0x80
 8000f58:	4838      	ldr	r0, [pc, #224]	@ (800103c <MX_GPIO_Init+0x1b4>)
 8000f5a:	f000 fe7f 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LimL1_Pin LimL2_Pin LimL3_Pin */
  GPIO_InitStruct.Pin = LimL1_Pin|LimL2_Pin|LimL3_Pin;
 8000f5e:	2370      	movs	r3, #112	@ 0x70
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	482f      	ldr	r0, [pc, #188]	@ (8001030 <MX_GPIO_Init+0x1a8>)
 8000f72:	f000 fcb3 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Mag_Pin */
  GPIO_InitStruct.Pin = Mag_Pin;
 8000f76:	2380      	movs	r3, #128	@ 0x80
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Mag_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4828      	ldr	r0, [pc, #160]	@ (8001030 <MX_GPIO_Init+0x1a8>)
 8000f8e:	f000 fca5 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : motorL1_Pin motorL2_Pin */
  GPIO_InitStruct.Pin = motorL1_Pin|motorL2_Pin;
 8000f92:	2303      	movs	r3, #3
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4822      	ldr	r0, [pc, #136]	@ (8001034 <MX_GPIO_Init+0x1ac>)
 8000faa:	f000 fc97 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : motorL3_Pin */
  GPIO_InitStruct.Pin = motorL3_Pin;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(motorL3_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481b      	ldr	r0, [pc, #108]	@ (8001034 <MX_GPIO_Init+0x1ac>)
 8000fc6:	f000 fc89 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1dir_Pin M2dir_Pin M3dir_Pin */
  GPIO_InitStruct.Pin = M1dir_Pin|M2dir_Pin|M3dir_Pin;
 8000fca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4815      	ldr	r0, [pc, #84]	@ (8001038 <MX_GPIO_Init+0x1b0>)
 8000fe4:	f000 fc7a 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480f      	ldr	r0, [pc, #60]	@ (800103c <MX_GPIO_Init+0x1b4>)
 8001000:	f000 fc6c 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001004:	2308      	movs	r3, #8
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_CRS_SYNC;
 8001014:	230a      	movs	r3, #10
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_GPIO_Init+0x1ac>)
 8001020:	f000 fc5c 	bl	80018dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	@ 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400
 8001030:	58020000 	.word	0x58020000
 8001034:	58020400 	.word	0x58020400
 8001038:	58021400 	.word	0x58021400
 800103c:	58021800 	.word	0x58021800

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001058:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_MspInit+0x30>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_MspInit+0x30>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	58024400 	.word	0x58024400

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0be      	sub	sp, #248	@ 0xf8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109c:	22b8      	movs	r2, #184	@ 0xb8
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fef5 	bl	8004e90 <memset>
  if(hi2c->Instance==I2C1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a85      	ldr	r2, [pc, #532]	@ (80012c0 <HAL_I2C_MspInit+0x240>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d146      	bne.n	800113e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010b0:	f04f 0208 	mov.w	r2, #8
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fe74 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010d2:	f7ff ffb5 	bl	8001040 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b7b      	ldr	r3, [pc, #492]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	4a79      	ldr	r2, [pc, #484]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e6:	4b77      	ldr	r3, [pc, #476]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f4:	23c0      	movs	r3, #192	@ 0xc0
 80010f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110c:	2304      	movs	r3, #4
 800110e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001116:	4619      	mov	r1, r3
 8001118:	486b      	ldr	r0, [pc, #428]	@ (80012c8 <HAL_I2C_MspInit+0x248>)
 800111a:	f000 fbdf 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111e:	4b69      	ldr	r3, [pc, #420]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001124:	4a67      	ldr	r2, [pc, #412]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001126:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800112a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800112e:	4b65      	ldr	r3, [pc, #404]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001138:	623b      	str	r3, [r7, #32]
 800113a:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800113c:	e0bc      	b.n	80012b8 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C2)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a62      	ldr	r2, [pc, #392]	@ (80012cc <HAL_I2C_MspInit+0x24c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d146      	bne.n	80011d6 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001148:	f04f 0208 	mov.w	r2, #8
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fe28 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800116a:	f7ff ff69 	bl	8001040 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	4b55      	ldr	r3, [pc, #340]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	4a53      	ldr	r2, [pc, #332]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117e:	4b51      	ldr	r3, [pc, #324]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800118c:	2303      	movs	r3, #3
 800118e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001192:	2312      	movs	r3, #18
 8001194:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011a4:	2304      	movs	r3, #4
 80011a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011aa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4847      	ldr	r0, [pc, #284]	@ (80012d0 <HAL_I2C_MspInit+0x250>)
 80011b2:	f000 fb93 	bl	80018dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011b6:	4b43      	ldr	r3, [pc, #268]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 80011b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011bc:	4a41      	ldr	r2, [pc, #260]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 80011be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011c6:	4b3f      	ldr	r3, [pc, #252]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 80011c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]
}
 80011d4:	e070      	b.n	80012b8 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C3)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a3e      	ldr	r2, [pc, #248]	@ (80012d4 <HAL_I2C_MspInit+0x254>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d16b      	bne.n	80012b8 <HAL_I2C_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011e0:	f04f 0208 	mov.w	r2, #8
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fddc 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_I2C_MspInit+0x186>
      Error_Handler();
 8001202:	f7ff ff1d 	bl	8001040 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120c:	4a2d      	ldr	r2, [pc, #180]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001216:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b27      	ldr	r3, [pc, #156]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122a:	4a26      	ldr	r2, [pc, #152]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001234:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124a:	2312      	movs	r3, #18
 800124c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800125c:	2304      	movs	r3, #4
 800125e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001266:	4619      	mov	r1, r3
 8001268:	481b      	ldr	r0, [pc, #108]	@ (80012d8 <HAL_I2C_MspInit+0x258>)
 800126a:	f000 fb37 	bl	80018dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800126e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001276:	2312      	movs	r3, #18
 8001278:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001288:	2304      	movs	r3, #4
 800128a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001292:	4619      	mov	r1, r3
 8001294:	4811      	ldr	r0, [pc, #68]	@ (80012dc <HAL_I2C_MspInit+0x25c>)
 8001296:	f000 fb21 	bl	80018dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012a0:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 80012a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_I2C_MspInit+0x244>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	bf00      	nop
 80012ba:	37f8      	adds	r7, #248	@ 0xf8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40005400 	.word	0x40005400
 80012c4:	58024400 	.word	0x58024400
 80012c8:	58020400 	.word	0x58020400
 80012cc:	40005800 	.word	0x40005800
 80012d0:	58021400 	.word	0x58021400
 80012d4:	40005c00 	.word	0x40005c00
 80012d8:	58020800 	.word	0x58020800
 80012dc:	58020000 	.word	0x58020000

080012e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f0:	d117      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <HAL_TIM_Base_MspInit+0x84>)
 80012f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001364 <HAL_TIM_Base_MspInit+0x84>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <HAL_TIM_Base_MspInit+0x84>)
 8001304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	201c      	movs	r0, #28
 8001316:	f000 faac 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800131a:	201c      	movs	r0, #28
 800131c:	f000 fac3 	bl	80018a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001320:	e01b      	b.n	800135a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <HAL_TIM_Base_MspInit+0x88>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d116      	bne.n	800135a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_TIM_Base_MspInit+0x84>)
 800132e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001332:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <HAL_TIM_Base_MspInit+0x84>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_TIM_Base_MspInit+0x84>)
 800133e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	201e      	movs	r0, #30
 8001350:	f000 fa8f 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001354:	201e      	movs	r0, #30
 8001356:	f000 faa6 	bl	80018a6 <HAL_NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	58024400 	.word	0x58024400
 8001368:	40000800 	.word	0x40000800

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <NMI_Handler+0x4>

08001374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <MemManage_Handler+0x4>

08001384 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <UsageFault_Handler+0x4>

08001394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c2:	f000 f92b 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <TIM2_IRQHandler+0x10>)
 80013d2:	f003 f927 	bl	8004624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2400012c 	.word	0x2400012c

080013e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <TIM4_IRQHandler+0x10>)
 80013e6:	f003 f91d 	bl	8004624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	24000178 	.word	0x24000178

080013f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f8:	4b32      	ldr	r3, [pc, #200]	@ (80014c4 <SystemInit+0xd0>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fe:	4a31      	ldr	r2, [pc, #196]	@ (80014c4 <SystemInit+0xd0>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001408:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <SystemInit+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	2b06      	cmp	r3, #6
 8001412:	d807      	bhi.n	8001424 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001414:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <SystemInit+0xd4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 030f 	bic.w	r3, r3, #15
 800141c:	4a2a      	ldr	r2, [pc, #168]	@ (80014c8 <SystemInit+0xd4>)
 800141e:	f043 0307 	orr.w	r3, r3, #7
 8001422:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001424:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <SystemInit+0xd8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a28      	ldr	r2, [pc, #160]	@ (80014cc <SystemInit+0xd8>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <SystemInit+0xd8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001436:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <SystemInit+0xd8>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4924      	ldr	r1, [pc, #144]	@ (80014cc <SystemInit+0xd8>)
 800143c:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <SystemInit+0xdc>)
 800143e:	4013      	ands	r3, r2
 8001440:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001442:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <SystemInit+0xd4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144e:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <SystemInit+0xd4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 030f 	bic.w	r3, r3, #15
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <SystemInit+0xd4>)
 8001458:	f043 0307 	orr.w	r3, r3, #7
 800145c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <SystemInit+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <SystemInit+0xd8>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <SystemInit+0xd8>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <SystemInit+0xd8>)
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <SystemInit+0xe0>)
 8001474:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <SystemInit+0xd8>)
 8001478:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <SystemInit+0xe4>)
 800147a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <SystemInit+0xd8>)
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <SystemInit+0xe8>)
 8001480:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001482:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <SystemInit+0xd8>)
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <SystemInit+0xd8>)
 800148a:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <SystemInit+0xe8>)
 800148c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <SystemInit+0xd8>)
 8001490:	2200      	movs	r2, #0
 8001492:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001494:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <SystemInit+0xd8>)
 8001496:	4a11      	ldr	r2, [pc, #68]	@ (80014dc <SystemInit+0xe8>)
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <SystemInit+0xd8>)
 800149c:	2200      	movs	r2, #0
 800149e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <SystemInit+0xd8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <SystemInit+0xd8>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <SystemInit+0xd8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <SystemInit+0xec>)
 80014b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00
 80014c8:	52002000 	.word	0x52002000
 80014cc:	58024400 	.word	0x58024400
 80014d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014d4:	02020200 	.word	0x02020200
 80014d8:	01ff0000 	.word	0x01ff0000
 80014dc:	01010280 	.word	0x01010280
 80014e0:	52004000 	.word	0x52004000

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800151c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e8:	f7ff ff84 	bl	80013f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	@ (8001524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	@ (8001530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f003 fcc5 	bl	8004ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff fa5f 	bl	80009d8 <main>
  bx  lr
 800151a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001520:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001524:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001528:	08004f18 	.word	0x08004f18
  ldr r2, =_sbss
 800152c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001530:	2400021c 	.word	0x2400021c

08001534 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC3_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	2003      	movs	r0, #3
 8001540:	f000 f98c 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001544:	f001 fabc 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8001548:	4602      	mov	r2, r0
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_Init+0x68>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	4913      	ldr	r1, [pc, #76]	@ (80015a4 <HAL_Init+0x6c>)
 8001556:	5ccb      	ldrb	r3, [r1, r3]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_Init+0x68>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <HAL_Init+0x6c>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
 8001578:	4a0b      	ldr	r2, [pc, #44]	@ (80015a8 <HAL_Init+0x70>)
 800157a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800157c:	4a0b      	ldr	r2, [pc, #44]	@ (80015ac <HAL_Init+0x74>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f814 	bl	80015b0 <HAL_InitTick>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e002      	b.n	8001598 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001592:	f7ff fd5b 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	58024400 	.word	0x58024400
 80015a4:	08004f00 	.word	0x08004f00
 80015a8:	24000008 	.word	0x24000008
 80015ac:	24000004 	.word	0x24000004

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <HAL_InitTick+0x60>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e021      	b.n	8001608 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_InitTick+0x64>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_InitTick+0x60>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f971 	bl	80018c2 <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f000 f93b 	bl	8001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	@ (8001618 <HAL_InitTick+0x68>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24000010 	.word	0x24000010
 8001614:	24000004 	.word	0x24000004
 8001618:	2400000c 	.word	0x2400000c

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	24000010 	.word	0x24000010
 8001640:	24000218 	.word	0x24000218

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	24000218 	.word	0x24000218

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff ffee 	bl	8001644 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffde 	bl	8001644 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24000010 	.word	0x24000010

080016a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_GetREVID+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0c1b      	lsrs	r3, r3, #16
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	5c001000 	.word	0x5c001000

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <__NVIC_SetPriorityGrouping+0x40>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x40>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00
 8001700:	05fa0000 	.word	0x05fa0000

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	2b00      	cmp	r3, #0
 8001730:	db0b      	blt.n	800174a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	f003 021f 	and.w	r2, r3, #31
 8001738:	4907      	ldr	r1, [pc, #28]	@ (8001758 <__NVIC_EnableIRQ+0x38>)
 800173a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	2001      	movs	r0, #1
 8001742:	fa00 f202 	lsl.w	r2, r0, r2
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db0a      	blt.n	8001786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	@ (80017a8 <__NVIC_SetPriority+0x4c>)
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	440b      	add	r3, r1
 8001780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001784:	e00a      	b.n	800179c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4908      	ldr	r1, [pc, #32]	@ (80017ac <__NVIC_SetPriority+0x50>)
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3b04      	subs	r3, #4
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	440b      	add	r3, r1
 800179a:	761a      	strb	r2, [r3, #24]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f1c3 0307 	rsb	r3, r3, #7
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf28      	it	cs
 80017ce:	2304      	movcs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3304      	adds	r3, #4
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d902      	bls.n	80017e0 <NVIC_EncodePriority+0x30>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3b03      	subs	r3, #3
 80017de:	e000      	b.n	80017e2 <NVIC_EncodePriority+0x32>
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	401a      	ands	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43d9      	mvns	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	4313      	orrs	r3, r2
         );
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	@ 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f7ff ff8e 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff29 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff40 	bl	8001704 <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff90 	bl	80017b0 <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5f 	bl	800175c <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff33 	bl	8001720 <__NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa4 	bl	8001818 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80018ea:	4b86      	ldr	r3, [pc, #536]	@ (8001b04 <HAL_GPIO_Init+0x228>)
 80018ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018ee:	e18c      	b.n	8001c0a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 817e 	beq.w	8001c04 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d005      	beq.n	8001920 <HAL_GPIO_Init+0x44>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d130      	bne.n	8001982 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001956:	2201      	movs	r2, #1
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 0201 	and.w	r2, r3, #1
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b03      	cmp	r3, #3
 800198c:	d017      	beq.n	80019be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d123      	bne.n	8001a12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0203 	and.w	r2, r3, #3
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80d8 	beq.w	8001c04 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a54:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <HAL_GPIO_Init+0x22c>)
 8001a56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001b08 <HAL_GPIO_Init+0x22c>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a64:	4b28      	ldr	r3, [pc, #160]	@ (8001b08 <HAL_GPIO_Init+0x22c>)
 8001a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a72:	4a26      	ldr	r2, [pc, #152]	@ (8001b0c <HAL_GPIO_Init+0x230>)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <HAL_GPIO_Init+0x234>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d04a      	beq.n	8001b34 <HAL_GPIO_Init+0x258>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b14 <HAL_GPIO_Init+0x238>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d02b      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <HAL_GPIO_Init+0x23c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d025      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b1c <HAL_GPIO_Init+0x240>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01f      	beq.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	@ (8001b20 <HAL_GPIO_Init+0x244>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_Init+0x216>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <HAL_GPIO_Init+0x248>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0x212>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a17      	ldr	r2, [pc, #92]	@ (8001b28 <HAL_GPIO_Init+0x24c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00d      	beq.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a16      	ldr	r2, [pc, #88]	@ (8001b2c <HAL_GPIO_Init+0x250>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d007      	beq.n	8001ae6 <HAL_GPIO_Init+0x20a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <HAL_GPIO_Init+0x254>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_GPIO_Init+0x206>
 8001ade:	2309      	movs	r3, #9
 8001ae0:	e029      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	e027      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	e025      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001aea:	2306      	movs	r3, #6
 8001aec:	e023      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e021      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e01f      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e01d      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e01b      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e019      	b.n	8001b36 <HAL_GPIO_Init+0x25a>
 8001b02:	bf00      	nop
 8001b04:	58000080 	.word	0x58000080
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58000400 	.word	0x58000400
 8001b10:	58020000 	.word	0x58020000
 8001b14:	58020400 	.word	0x58020400
 8001b18:	58020800 	.word	0x58020800
 8001b1c:	58020c00 	.word	0x58020c00
 8001b20:	58021000 	.word	0x58021000
 8001b24:	58021400 	.word	0x58021400
 8001b28:	58021800 	.word	0x58021800
 8001b2c:	58021c00 	.word	0x58021c00
 8001b30:	58022400 	.word	0x58022400
 8001b34:	2300      	movs	r3, #0
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b46:	4938      	ldr	r1, [pc, #224]	@ (8001c28 <HAL_GPIO_Init+0x34c>)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ba8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	3301      	adds	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f47f ae6b 	bne.w	80018f0 <HAL_GPIO_Init+0x14>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	3724      	adds	r7, #36	@ 0x24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	58000400 	.word	0x58000400

08001c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e001      	b.n	8001c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca0:	887a      	ldrh	r2, [r7, #2]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	041a      	lsls	r2, r3, #16
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	400b      	ands	r3, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e08b      	b.n	8001dee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff f9c8 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2224      	movs	r2, #36	@ 0x24
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	e006      	b.n	8001d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d108      	bne.n	8001d66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	e007      	b.n	8001d76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_I2C_Init+0x134>)
 8001d82:	430b      	orrs	r3, r1
 8001d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69d9      	ldr	r1, [r3, #28]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	02008000 	.word	0x02008000

08001dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d138      	bne.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e032      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2224      	movs	r2, #36	@ 0x24
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d139      	bne.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e033      	b.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2224      	movs	r2, #36	@ 0x24
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f34:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00a      	beq.n	8001f56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f40:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e01f      	b.n	8001f92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e01d      	b.n	8001f92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	490f      	ldr	r1, [pc, #60]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f66:	f7ff fb6d 	bl	8001644 <HAL_GetTick>
 8001f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f6c:	e009      	b.n	8001f82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f6e:	f7ff fb69 	bl	8001644 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f7c:	d901      	bls.n	8001f82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e007      	b.n	8001f92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58024800 	.word	0x58024800

08001fa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	@ 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e3c8      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8087 	beq.w	80020ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc0:	4b88      	ldr	r3, [pc, #544]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fca:	4b86      	ldr	r3, [pc, #536]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d007      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x46>
 8001fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd8:	2b18      	cmp	r3, #24
 8001fda:	d110      	bne.n	8001ffe <HAL_RCC_OscConfig+0x5e>
 8001fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d10b      	bne.n	8001ffe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d06c      	beq.n	80020cc <HAL_RCC_OscConfig+0x12c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d168      	bne.n	80020cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e3a2      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x76>
 8002008:	4b76      	ldr	r3, [pc, #472]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a75      	ldr	r2, [pc, #468]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e02e      	b.n	8002074 <HAL_RCC_OscConfig+0xd4>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x98>
 800201e:	4b71      	ldr	r3, [pc, #452]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a70      	ldr	r2, [pc, #448]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b6e      	ldr	r3, [pc, #440]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6d      	ldr	r2, [pc, #436]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002030:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0xd4>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0xbc>
 8002042:	4b68      	ldr	r3, [pc, #416]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a67      	ldr	r2, [pc, #412]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b65      	ldr	r3, [pc, #404]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a64      	ldr	r2, [pc, #400]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0xd4>
 800205c:	4b61      	ldr	r3, [pc, #388]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a60      	ldr	r2, [pc, #384]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b5e      	ldr	r3, [pc, #376]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a5d      	ldr	r2, [pc, #372]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fae2 	bl	8001644 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fade 	bl	8001644 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	@ 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e356      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002096:	4b53      	ldr	r3, [pc, #332]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0xe4>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff face 	bl	8001644 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff faca 	bl	8001644 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e342      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020be:	4b49      	ldr	r3, [pc, #292]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x10c>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 808c 	beq.w	80021f4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020dc:	4b41      	ldr	r3, [pc, #260]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020e6:	4b3f      	ldr	r3, [pc, #252]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_RCC_OscConfig+0x162>
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	2b18      	cmp	r3, #24
 80020f6:	d137      	bne.n	8002168 <HAL_RCC_OscConfig+0x1c8>
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d132      	bne.n	8002168 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002102:	4b38      	ldr	r3, [pc, #224]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_RCC_OscConfig+0x17a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e314      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800211a:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0219 	bic.w	r2, r3, #25
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	492f      	ldr	r1, [pc, #188]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fa8a 	bl	8001644 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff fa86 	bl	8001644 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e2fe      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002146:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	061b      	lsls	r3, r3, #24
 8002160:	4920      	ldr	r1, [pc, #128]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002166:	e045      	b.n	80021f4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d026      	beq.n	80021be <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002170:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 0219 	bic.w	r2, r3, #25
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4919      	ldr	r1, [pc, #100]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff fa5f 	bl	8001644 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fa5b 	bl	8001644 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e2d3      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	490b      	ldr	r1, [pc, #44]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e01a      	b.n	80021f4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a08      	ldr	r2, [pc, #32]	@ (80021e4 <HAL_RCC_OscConfig+0x244>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7ff fa3b 	bl	8001644 <HAL_GetTick>
 80021ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7ff fa37 	bl	8001644 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d903      	bls.n	80021e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e2af      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
 80021e4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021e8:	4b96      	ldr	r3, [pc, #600]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ee      	bne.n	80021d2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d06a      	beq.n	80022d6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002200:	4b90      	ldr	r3, [pc, #576]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002208:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800220a:	4b8e      	ldr	r3, [pc, #568]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b08      	cmp	r3, #8
 8002214:	d007      	beq.n	8002226 <HAL_RCC_OscConfig+0x286>
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b18      	cmp	r3, #24
 800221a:	d11b      	bne.n	8002254 <HAL_RCC_OscConfig+0x2b4>
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d116      	bne.n	8002254 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002226:	4b87      	ldr	r3, [pc, #540]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x29e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b80      	cmp	r3, #128	@ 0x80
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e282      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800223e:	4b81      	ldr	r3, [pc, #516]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	061b      	lsls	r3, r3, #24
 800224c:	497d      	ldr	r1, [pc, #500]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002252:	e040      	b.n	80022d6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d023      	beq.n	80022a4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800225c:	4b79      	ldr	r3, [pc, #484]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a78      	ldr	r2, [pc, #480]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff f9ec 	bl	8001644 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002270:	f7ff f9e8 	bl	8001644 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e260      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002282:	4b70      	ldr	r3, [pc, #448]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800228e:	4b6d      	ldr	r3, [pc, #436]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	061b      	lsls	r3, r3, #24
 800229c:	4969      	ldr	r1, [pc, #420]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	60cb      	str	r3, [r1, #12]
 80022a2:	e018      	b.n	80022d6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022a4:	4b67      	ldr	r3, [pc, #412]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a66      	ldr	r2, [pc, #408]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 80022aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7ff f9c8 	bl	8001644 <HAL_GetTick>
 80022b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80022b8:	f7ff f9c4 	bl	8001644 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e23c      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d036      	beq.n	8002350 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d019      	beq.n	800231e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ea:	4b56      	ldr	r3, [pc, #344]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 80022ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ee:	4a55      	ldr	r2, [pc, #340]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7ff f9a5 	bl	8001644 <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7ff f9a1 	bl	8001644 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e219      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002310:	4b4c      	ldr	r3, [pc, #304]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x35e>
 800231c:	e018      	b.n	8002350 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231e:	4b49      	ldr	r3, [pc, #292]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002322:	4a48      	ldr	r2, [pc, #288]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff f98b 	bl	8001644 <HAL_GetTick>
 800232e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002332:	f7ff f987 	bl	8001644 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1ff      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002344:	4b3f      	ldr	r3, [pc, #252]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d036      	beq.n	80023ca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d019      	beq.n	8002398 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002364:	4b37      	ldr	r3, [pc, #220]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a36      	ldr	r2, [pc, #216]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800236a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800236e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002370:	f7ff f968 	bl	8001644 <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002378:	f7ff f964 	bl	8001644 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1dc      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800238a:	4b2e      	ldr	r3, [pc, #184]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x3d8>
 8002396:	e018      	b.n	80023ca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a29      	ldr	r2, [pc, #164]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800239e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023a4:	f7ff f94e 	bl	8001644 <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ac:	f7ff f94a 	bl	8001644 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1c2      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8086 	beq.w	80024e4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <HAL_RCC_OscConfig+0x4a8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002448 <HAL_RCC_OscConfig+0x4a8>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023e4:	f7ff f92e 	bl	8001644 <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ec:	f7ff f92a 	bl	8001644 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1a2      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023fe:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_RCC_OscConfig+0x4a8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x480>
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002416:	4a0b      	ldr	r2, [pc, #44]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6713      	str	r3, [r2, #112]	@ 0x70
 800241e:	e032      	b.n	8002486 <HAL_RCC_OscConfig+0x4e6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <HAL_RCC_OscConfig+0x4ac>
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	@ 0x70
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002438:	4a02      	ldr	r2, [pc, #8]	@ (8002444 <HAL_RCC_OscConfig+0x4a4>)
 800243a:	f023 0304 	bic.w	r3, r3, #4
 800243e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002440:	e021      	b.n	8002486 <HAL_RCC_OscConfig+0x4e6>
 8002442:	bf00      	nop
 8002444:	58024400 	.word	0x58024400
 8002448:	58024800 	.word	0x58024800
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x4ce>
 8002454:	4b83      	ldr	r3, [pc, #524]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	4a82      	ldr	r2, [pc, #520]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002460:	4b80      	ldr	r3, [pc, #512]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	4a7f      	ldr	r2, [pc, #508]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	@ 0x70
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0x4e6>
 800246e:	4b7d      	ldr	r3, [pc, #500]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	4a7c      	ldr	r2, [pc, #496]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6713      	str	r3, [r2, #112]	@ 0x70
 800247a:	4b7a      	ldr	r3, [pc, #488]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	4a79      	ldr	r2, [pc, #484]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d015      	beq.n	80024ba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7ff f8d9 	bl	8001644 <HAL_GetTick>
 8002492:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7ff f8d5 	bl	8001644 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e14b      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0ee      	beq.n	8002496 <HAL_RCC_OscConfig+0x4f6>
 80024b8:	e014      	b.n	80024e4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7ff f8c3 	bl	8001644 <HAL_GetTick>
 80024be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7ff f8bf 	bl	8001644 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e135      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024d8:	4b62      	ldr	r3, [pc, #392]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ee      	bne.n	80024c2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 812a 	beq.w	8002742 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80024ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024f6:	2b18      	cmp	r3, #24
 80024f8:	f000 80ba 	beq.w	8002670 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	2b02      	cmp	r3, #2
 8002502:	f040 8095 	bne.w	8002630 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a56      	ldr	r2, [pc, #344]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 800250c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7ff f897 	bl	8001644 <HAL_GetTick>
 8002516:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7ff f893 	bl	8001644 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e10b      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800252c:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002538:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 800253a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800253c:	4b4a      	ldr	r3, [pc, #296]	@ (8002668 <HAL_RCC_OscConfig+0x6c8>)
 800253e:	4013      	ands	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	430a      	orrs	r2, r1
 800254c:	4945      	ldr	r1, [pc, #276]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	628b      	str	r3, [r1, #40]	@ 0x28
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	3b01      	subs	r3, #1
 8002558:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002560:	3b01      	subs	r3, #1
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	b29b      	uxth	r3, r3
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256c:	3b01      	subs	r3, #1
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257a:	3b01      	subs	r3, #1
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002582:	4938      	ldr	r1, [pc, #224]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002588:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	4a35      	ldr	r2, [pc, #212]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002594:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002598:	4b34      	ldr	r3, [pc, #208]	@ (800266c <HAL_RCC_OscConfig+0x6cc>)
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025a0:	00d2      	lsls	r2, r2, #3
 80025a2:	4930      	ldr	r1, [pc, #192]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	f023 020c 	bic.w	r2, r3, #12
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	492b      	ldr	r1, [pc, #172]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	f023 0202 	bic.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4927      	ldr	r1, [pc, #156]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	4a24      	ldr	r2, [pc, #144]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	4a21      	ldr	r2, [pc, #132]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80025f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7ff f81c 	bl	8001644 <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7ff f818 	bl	8001644 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e090      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x670>
 800262e:	e088      	b.n	8002742 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0b      	ldr	r2, [pc, #44]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff f802 	bl	8001644 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fffe 	bl	8001644 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e076      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002656:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_RCC_OscConfig+0x6c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x6a4>
 8002662:	e06e      	b.n	8002742 <HAL_RCC_OscConfig+0x7a2>
 8002664:	58024400 	.word	0x58024400
 8002668:	fffffc0c 	.word	0xfffffc0c
 800266c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002670:	4b36      	ldr	r3, [pc, #216]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002676:	4b35      	ldr	r3, [pc, #212]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	2b01      	cmp	r3, #1
 8002682:	d031      	beq.n	80026e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0203 	and.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d12a      	bne.n	80026e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d122      	bne.n	80026e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d11a      	bne.n	80026e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	0a5b      	lsrs	r3, r3, #9
 80026b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d111      	bne.n	80026e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0e1b      	lsrs	r3, r3, #24
 80026da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e02b      	b.n	8002744 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026ec:	4b17      	ldr	r3, [pc, #92]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 80026ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f0:	08db      	lsrs	r3, r3, #3
 80026f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d01f      	beq.n	8002742 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002702:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	4a11      	ldr	r2, [pc, #68]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800270e:	f7fe ff99 	bl	8001644 <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002714:	bf00      	nop
 8002716:	f7fe ff95 	bl	8001644 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	4293      	cmp	r3, r2
 8002720:	d0f9      	beq.n	8002716 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 8002724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_RCC_OscConfig+0x7b0>)
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800272e:	00d2      	lsls	r2, r2, #3
 8002730:	4906      	ldr	r1, [pc, #24]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 8002732:	4313      	orrs	r3, r2
 8002734:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	4a04      	ldr	r2, [pc, #16]	@ (800274c <HAL_RCC_OscConfig+0x7ac>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3730      	adds	r7, #48	@ 0x30
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58024400 	.word	0x58024400
 8002750:	ffff0007 	.word	0xffff0007

08002754 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e19c      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b8a      	ldr	r3, [pc, #552]	@ (8002994 <HAL_RCC_ClockConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d910      	bls.n	8002798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b87      	ldr	r3, [pc, #540]	@ (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 020f 	bic.w	r2, r3, #15
 800277e:	4985      	ldr	r1, [pc, #532]	@ (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b83      	ldr	r3, [pc, #524]	@ (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e184      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027b4:	4b78      	ldr	r3, [pc, #480]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	4975      	ldr	r1, [pc, #468]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	4b70      	ldr	r3, [pc, #448]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027de:	429a      	cmp	r2, r3
 80027e0:	d908      	bls.n	80027f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	496a      	ldr	r1, [pc, #424]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d010      	beq.n	8002822 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	4b64      	ldr	r3, [pc, #400]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800280c:	429a      	cmp	r2, r3
 800280e:	d908      	bls.n	8002822 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002810:	4b61      	ldr	r3, [pc, #388]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	495e      	ldr	r1, [pc, #376]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 800281e:	4313      	orrs	r3, r2
 8002820:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	4b59      	ldr	r3, [pc, #356]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800283a:	429a      	cmp	r2, r3
 800283c:	d908      	bls.n	8002850 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800283e:	4b56      	ldr	r3, [pc, #344]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4953      	ldr	r1, [pc, #332]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 800284c:	4313      	orrs	r3, r2
 800284e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	4b4d      	ldr	r3, [pc, #308]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	429a      	cmp	r2, r3
 800286a:	d908      	bls.n	800287e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b4a      	ldr	r3, [pc, #296]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f023 020f 	bic.w	r2, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4947      	ldr	r1, [pc, #284]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 800287a:	4313      	orrs	r3, r2
 800287c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d055      	beq.n	8002936 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800288a:	4b43      	ldr	r3, [pc, #268]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4940      	ldr	r1, [pc, #256]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002898:	4313      	orrs	r3, r2
 800289a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d121      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0f6      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028bc:	4b36      	ldr	r3, [pc, #216]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d115      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0ea      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028d4:	4b30      	ldr	r3, [pc, #192]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0de      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d6      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028f4:	4b28      	ldr	r3, [pc, #160]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f023 0207 	bic.w	r2, r3, #7
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4925      	ldr	r1, [pc, #148]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002902:	4313      	orrs	r3, r2
 8002904:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002906:	f7fe fe9d 	bl	8001644 <HAL_GetTick>
 800290a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290c:	e00a      	b.n	8002924 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290e:	f7fe fe99 	bl	8001644 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0be      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002924:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	429a      	cmp	r2, r3
 8002934:	d1eb      	bne.n	800290e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d010      	beq.n	8002964 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	429a      	cmp	r2, r3
 8002950:	d208      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002952:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f023 020f 	bic.w	r2, r3, #15
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	490e      	ldr	r1, [pc, #56]	@ (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002960:	4313      	orrs	r3, r2
 8002962:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d214      	bcs.n	800299c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 020f 	bic.w	r2, r3, #15
 800297a:	4906      	ldr	r1, [pc, #24]	@ (8002994 <HAL_RCC_ClockConfig+0x240>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e086      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
 8002994:	52002000 	.word	0x52002000
 8002998:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d208      	bcs.n	80029ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029b8:	4b3c      	ldr	r3, [pc, #240]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4939      	ldr	r1, [pc, #228]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d208      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029e6:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	492e      	ldr	r1, [pc, #184]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d010      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d208      	bcs.n	8002a26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a14:	4b25      	ldr	r3, [pc, #148]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	4922      	ldr	r1, [pc, #136]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d208      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a42:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4917      	ldr	r1, [pc, #92]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a54:	f000 f834 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	4912      	ldr	r1, [pc, #72]	@ (8002ab0 <HAL_RCC_ClockConfig+0x35c>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a72:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <HAL_RCC_ClockConfig+0x35c>)
 8002a7c:	5cd3      	ldrb	r3, [r2, r3]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
 8002a88:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <HAL_RCC_ClockConfig+0x360>)
 8002a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <HAL_RCC_ClockConfig+0x364>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_RCC_ClockConfig+0x368>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fd8a 	bl	80015b0 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	08004f00 	.word	0x08004f00
 8002ab4:	24000008 	.word	0x24000008
 8002ab8:	24000004 	.word	0x24000004
 8002abc:	2400000c 	.word	0x2400000c

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	@ 0x24
 8002ac4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac6:	4bb3      	ldr	r3, [pc, #716]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ace:	2b18      	cmp	r3, #24
 8002ad0:	f200 8155 	bhi.w	8002d7e <HAL_RCC_GetSysClockFreq+0x2be>
 8002ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8002adc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b41 	.word	0x08002b41
 8002ae0:	08002d7f 	.word	0x08002d7f
 8002ae4:	08002d7f 	.word	0x08002d7f
 8002ae8:	08002d7f 	.word	0x08002d7f
 8002aec:	08002d7f 	.word	0x08002d7f
 8002af0:	08002d7f 	.word	0x08002d7f
 8002af4:	08002d7f 	.word	0x08002d7f
 8002af8:	08002d7f 	.word	0x08002d7f
 8002afc:	08002b67 	.word	0x08002b67
 8002b00:	08002d7f 	.word	0x08002d7f
 8002b04:	08002d7f 	.word	0x08002d7f
 8002b08:	08002d7f 	.word	0x08002d7f
 8002b0c:	08002d7f 	.word	0x08002d7f
 8002b10:	08002d7f 	.word	0x08002d7f
 8002b14:	08002d7f 	.word	0x08002d7f
 8002b18:	08002d7f 	.word	0x08002d7f
 8002b1c:	08002b6d 	.word	0x08002b6d
 8002b20:	08002d7f 	.word	0x08002d7f
 8002b24:	08002d7f 	.word	0x08002d7f
 8002b28:	08002d7f 	.word	0x08002d7f
 8002b2c:	08002d7f 	.word	0x08002d7f
 8002b30:	08002d7f 	.word	0x08002d7f
 8002b34:	08002d7f 	.word	0x08002d7f
 8002b38:	08002d7f 	.word	0x08002d7f
 8002b3c:	08002b73 	.word	0x08002b73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b40:	4b94      	ldr	r3, [pc, #592]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b4c:	4b91      	ldr	r3, [pc, #580]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	4a90      	ldr	r2, [pc, #576]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b5e:	e111      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b60:	4b8d      	ldr	r3, [pc, #564]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b62:	61bb      	str	r3, [r7, #24]
      break;
 8002b64:	e10e      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b66:	4b8d      	ldr	r3, [pc, #564]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b68:	61bb      	str	r3, [r7, #24]
      break;
 8002b6a:	e10b      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b6c:	4b8c      	ldr	r3, [pc, #560]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b6e:	61bb      	str	r3, [r7, #24]
      break;
 8002b70:	e108      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b72:	4b88      	ldr	r3, [pc, #544]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b7c:	4b85      	ldr	r3, [pc, #532]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b88:	4b82      	ldr	r3, [pc, #520]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b92:	4b80      	ldr	r3, [pc, #512]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b96:	08db      	lsrs	r3, r3, #3
 8002b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002baa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80e1 	beq.w	8002d78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	f000 8083 	beq.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x204>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	f200 80a1 	bhi.w	8002d08 <HAL_RCC_GetSysClockFreq+0x248>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x114>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d056      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002bd2:	e099      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d02d      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002be0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	4a6b      	ldr	r2, [pc, #428]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0a:	4b62      	ldr	r3, [pc, #392]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002c3a:	e087      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002da8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c4e:	4b51      	ldr	r3, [pc, #324]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c7e:	e065      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002dac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c92:	4b40      	ldr	r3, [pc, #256]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ca6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cc2:	e043      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002db0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d06:	e021      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002dac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	0a5b      	lsrs	r3, r3, #9
 8002d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d56:	3301      	adds	r3, #1
 8002d58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d70:	ee17 3a90 	vmov	r3, s15
 8002d74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d76:	e005      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
      break;
 8002d7c:	e002      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d7e:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d80:	61bb      	str	r3, [r7, #24]
      break;
 8002d82:	bf00      	nop
  }

  return sysclockfreq;
 8002d84:	69bb      	ldr	r3, [r7, #24]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	@ 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	58024400 	.word	0x58024400
 8002d98:	03d09000 	.word	0x03d09000
 8002d9c:	003d0900 	.word	0x003d0900
 8002da0:	007a1200 	.word	0x007a1200
 8002da4:	46000000 	.word	0x46000000
 8002da8:	4c742400 	.word	0x4c742400
 8002dac:	4a742400 	.word	0x4a742400
 8002db0:	4af42400 	.word	0x4af42400

08002db4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db8:	b0c6      	sub	sp, #280	@ 0x118
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002dd8:	2500      	movs	r5, #0
 8002dda:	ea54 0305 	orrs.w	r3, r4, r5
 8002dde:	d049      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002de6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002dea:	d02f      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002dec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002df0:	d828      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002df2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002df6:	d01a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002df8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dfc:	d822      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e06:	d007      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e08:	e01c      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0a:	4bab      	ldr	r3, [pc, #684]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	4aaa      	ldr	r2, [pc, #680]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e16:	e01a      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	2102      	movs	r1, #2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f9bd 	bl	80041a0 <RCCEx_PLL2_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e2c:	e00f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e32:	3328      	adds	r3, #40	@ 0x28
 8002e34:	2102      	movs	r1, #2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 fa64 	bl	8004304 <RCCEx_PLL3_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e56:	4b98      	ldr	r3, [pc, #608]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e64:	4a94      	ldr	r2, [pc, #592]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e66:	430b      	orrs	r3, r1
 8002e68:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e6a:	e003      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002e80:	f04f 0900 	mov.w	r9, #0
 8002e84:	ea58 0309 	orrs.w	r3, r8, r9
 8002e88:	d047      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d82a      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e94:	a201      	add	r2, pc, #4	@ (adr r2, 8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002eb1 	.word	0x08002eb1
 8002ea0:	08002ebf 	.word	0x08002ebf
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ef3 	.word	0x08002ef3
 8002eac:	08002ef3 	.word	0x08002ef3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb0:	4b81      	ldr	r3, [pc, #516]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	4a80      	ldr	r2, [pc, #512]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ebc:	e01a      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 f96a 	bl	80041a0 <RCCEx_PLL2_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ed2:	e00f      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ed8:	3328      	adds	r3, #40	@ 0x28
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 fa11 	bl	8004304 <RCCEx_PLL3_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ee8:	e004      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efc:	4b6e      	ldr	r3, [pc, #440]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f00:	f023 0107 	bic.w	r1, r3, #7
 8002f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002f26:	f04f 0b00 	mov.w	fp, #0
 8002f2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f2e:	d05b      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f38:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002f3c:	d03b      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002f3e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002f42:	d834      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f48:	d037      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002f4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f4e:	d82e      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f54:	d033      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f56:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f5a:	d828      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f60:	d01a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f66:	d822      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002f6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f70:	d007      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002f72:	e01c      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f74:	4b50      	ldr	r3, [pc, #320]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	4a4f      	ldr	r2, [pc, #316]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f80:	e01e      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f86:	3308      	adds	r3, #8
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 f908 	bl	80041a0 <RCCEx_PLL2_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f96:	e013      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f9c:	3328      	adds	r3, #40	@ 0x28
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 f9af 	bl	8004304 <RCCEx_PLL3_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fac:	e008      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fd8:	4a37      	ldr	r2, [pc, #220]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fde:	e003      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002ffe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003002:	460b      	mov	r3, r1
 8003004:	4313      	orrs	r3, r2
 8003006:	d05d      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800300c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003010:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003014:	d03b      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003016:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800301a:	d834      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800301c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003020:	d037      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003026:	d82e      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003028:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800302c:	d033      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800302e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003032:	d828      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003034:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003038:	d01a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800303a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800303e:	d822      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003048:	d007      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800304a:	e01c      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800304c:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	4a19      	ldr	r2, [pc, #100]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003058:	e01e      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800305a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800305e:	3308      	adds	r3, #8
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f001 f89c 	bl	80041a0 <RCCEx_PLL2_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800306e:	e013      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003074:	3328      	adds	r3, #40	@ 0x28
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f001 f943 	bl	8004304 <RCCEx_PLL3_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003084:	e008      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800308c:	e004      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800308e:	bf00      	nop
 8003090:	e002      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80030a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030b0:	4a01      	ldr	r2, [pc, #4]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030b2:	430b      	orrs	r3, r1
 80030b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b6:	e005      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80030b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80030c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80030d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80030da:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80030de:	460b      	mov	r3, r1
 80030e0:	4313      	orrs	r3, r2
 80030e2:	d03a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80030e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ea:	2b30      	cmp	r3, #48	@ 0x30
 80030ec:	d01f      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80030ee:	2b30      	cmp	r3, #48	@ 0x30
 80030f0:	d819      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d00c      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d815      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d019      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d111      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003102:	4baa      	ldr	r3, [pc, #680]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	4aa9      	ldr	r2, [pc, #676]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800310e:	e011      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003114:	3308      	adds	r3, #8
 8003116:	2102      	movs	r1, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f001 f841 	bl	80041a0 <RCCEx_PLL2_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003124:	e006      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800312c:	e002      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800312e:	bf00      	nop
 8003130:	e000      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800313c:	4b9b      	ldr	r3, [pc, #620]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800313e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003140:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314a:	4a98      	ldr	r2, [pc, #608]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800314c:	430b      	orrs	r3, r1
 800314e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003150:	e003      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800315a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003170:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003174:	460b      	mov	r3, r1
 8003176:	4313      	orrs	r3, r2
 8003178:	d051      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800317a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003184:	d035      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800318a:	d82e      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 800318c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003190:	d031      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003192:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003196:	d828      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800319c:	d01a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a2:	d822      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ac:	d007      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80031ae:	e01c      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b0:	4b7e      	ldr	r3, [pc, #504]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	4a7d      	ldr	r2, [pc, #500]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031bc:	e01c      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c2:	3308      	adds	r3, #8
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 ffea 	bl	80041a0 <RCCEx_PLL2_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031d2:	e011      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d8:	3328      	adds	r3, #40	@ 0x28
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 f891 	bl	8004304 <RCCEx_PLL3_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031f0:	e002      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80031f2:	bf00      	nop
 80031f4:	e000      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80031f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003200:	4b6a      	ldr	r3, [pc, #424]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003204:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	4a67      	ldr	r2, [pc, #412]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003210:	430b      	orrs	r3, r1
 8003212:	6513      	str	r3, [r2, #80]	@ 0x50
 8003214:	e003      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800321a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800321e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800322a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003234:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003238:	460b      	mov	r3, r1
 800323a:	4313      	orrs	r3, r2
 800323c:	d053      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800323e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003248:	d033      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800324a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800324e:	d82c      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003250:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003254:	d02f      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003256:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800325a:	d826      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800325c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003260:	d02b      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003262:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003266:	d820      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800326c:	d012      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800326e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003272:	d81a      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d022      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327c:	d115      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800327e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003282:	3308      	adds	r3, #8
 8003284:	2101      	movs	r1, #1
 8003286:	4618      	mov	r0, r3
 8003288:	f000 ff8a 	bl	80041a0 <RCCEx_PLL2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003292:	e015      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003298:	3328      	adds	r3, #40	@ 0x28
 800329a:	2101      	movs	r1, #1
 800329c:	4618      	mov	r0, r3
 800329e:	f001 f831 	bl	8004304 <RCCEx_PLL3_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032a8:	e00a      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032b0:	e006      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80032b2:	bf00      	nop
 80032b4:	e004      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80032b6:	bf00      	nop
 80032b8:	e002      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80032be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032c8:	4b38      	ldr	r3, [pc, #224]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80032d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d6:	4a35      	ldr	r2, [pc, #212]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032d8:	430b      	orrs	r3, r1
 80032da:	6513      	str	r3, [r2, #80]	@ 0x50
 80032dc:	e003      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80032f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80032fc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003300:	460b      	mov	r3, r1
 8003302:	4313      	orrs	r3, r2
 8003304:	d058      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800330a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800330e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003312:	d033      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003318:	d82c      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331e:	d02f      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003324:	d826      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800332a:	d02b      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800332c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003330:	d820      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003336:	d012      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800333c:	d81a      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d022      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003346:	d115      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800334c:	3308      	adds	r3, #8
 800334e:	2101      	movs	r1, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f000 ff25 	bl	80041a0 <RCCEx_PLL2_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800335c:	e015      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800335e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003362:	3328      	adds	r3, #40	@ 0x28
 8003364:	2101      	movs	r1, #1
 8003366:	4618      	mov	r0, r3
 8003368:	f000 ffcc 	bl	8004304 <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003372:	e00a      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800337a:	e006      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800337c:	bf00      	nop
 800337e:	e004      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003380:	bf00      	nop
 8003382:	e002      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800338a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10e      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800339a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800339e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033a2:	4a02      	ldr	r2, [pc, #8]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80033aa:	bf00      	nop
 80033ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80033c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80033ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4313      	orrs	r3, r2
 80033d6:	d037      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80033d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e2:	d00e      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80033e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e8:	d816      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80033ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033f2:	d111      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4bc4      	ldr	r3, [pc, #784]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	4ac3      	ldr	r2, [pc, #780]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003400:	e00f      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003406:	3308      	adds	r3, #8
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fec8 	bl	80041a0 <RCCEx_PLL2_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003416:	e004      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800342a:	4bb7      	ldr	r3, [pc, #732]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003438:	4ab3      	ldr	r2, [pc, #716]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800343a:	430b      	orrs	r3, r1
 800343c:	6513      	str	r3, [r2, #80]	@ 0x50
 800343e:	e003      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003444:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003454:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800345e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003462:	460b      	mov	r3, r1
 8003464:	4313      	orrs	r3, r2
 8003466:	d039      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	2b03      	cmp	r3, #3
 8003470:	d81c      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003472:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	080034b5 	.word	0x080034b5
 800347c:	08003489 	.word	0x08003489
 8003480:	08003497 	.word	0x08003497
 8003484:	080034b5 	.word	0x080034b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003488:	4b9f      	ldr	r3, [pc, #636]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	4a9e      	ldr	r2, [pc, #632]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800348e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003494:	e00f      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800349a:	3308      	adds	r3, #8
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fe7e 	bl	80041a0 <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034aa:	e004      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034b2:	e000      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80034b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80034be:	4b92      	ldr	r3, [pc, #584]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c2:	f023 0103 	bic.w	r1, r3, #3
 80034c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ce:	430b      	orrs	r3, r1
 80034d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034d2:	e003      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80034e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f000 8099 	beq.w	8003630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034fe:	4b83      	ldr	r3, [pc, #524]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a82      	ldr	r2, [pc, #520]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003508:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800350a:	f7fe f89b 	bl	8001644 <HAL_GetTick>
 800350e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003512:	e00b      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003514:	f7fe f896 	bl	8001644 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b64      	cmp	r3, #100	@ 0x64
 8003522:	d903      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800352a:	e005      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800352c:	4b77      	ldr	r3, [pc, #476]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ed      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800353c:	2b00      	cmp	r3, #0
 800353e:	d173      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003540:	4b71      	ldr	r3, [pc, #452]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003542:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800354c:	4053      	eors	r3, r2
 800354e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003556:	4b6c      	ldr	r3, [pc, #432]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003562:	4b69      	ldr	r3, [pc, #420]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	4a68      	ldr	r2, [pc, #416]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800356e:	4b66      	ldr	r3, [pc, #408]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003572:	4a65      	ldr	r2, [pc, #404]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003578:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800357a:	4a63      	ldr	r2, [pc, #396]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800357c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003580:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800358a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800358e:	d118      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe f858 	bl	8001644 <HAL_GetTick>
 8003594:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003598:	e00d      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fe f853 	bl	8001644 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80035a4:	1ad2      	subs	r2, r2, r3
 80035a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d903      	bls.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80035b4:	e005      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035b6:	4b54      	ldr	r3, [pc, #336]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0eb      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80035c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d129      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035da:	d10e      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x846>
 80035dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80035e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035ec:	091a      	lsrs	r2, r3, #4
 80035ee:	4b48      	ldr	r3, [pc, #288]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	4a45      	ldr	r2, [pc, #276]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6113      	str	r3, [r2, #16]
 80035f8:	e005      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80035fa:	4b43      	ldr	r3, [pc, #268]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	4a42      	ldr	r2, [pc, #264]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003600:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003604:	6113      	str	r3, [r2, #16]
 8003606:	4b40      	ldr	r3, [pc, #256]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003608:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800360a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003616:	4a3c      	ldr	r2, [pc, #240]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003618:	430b      	orrs	r3, r1
 800361a:	6713      	str	r3, [r2, #112]	@ 0x70
 800361c:	e008      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800361e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003622:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800362c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f002 0301 	and.w	r3, r2, #1
 800363c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003646:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800364a:	460b      	mov	r3, r1
 800364c:	4313      	orrs	r3, r2
 800364e:	f000 808f 	beq.w	8003770 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003658:	2b28      	cmp	r3, #40	@ 0x28
 800365a:	d871      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003749 	.word	0x08003749
 8003668:	08003741 	.word	0x08003741
 800366c:	08003741 	.word	0x08003741
 8003670:	08003741 	.word	0x08003741
 8003674:	08003741 	.word	0x08003741
 8003678:	08003741 	.word	0x08003741
 800367c:	08003741 	.word	0x08003741
 8003680:	08003741 	.word	0x08003741
 8003684:	08003715 	.word	0x08003715
 8003688:	08003741 	.word	0x08003741
 800368c:	08003741 	.word	0x08003741
 8003690:	08003741 	.word	0x08003741
 8003694:	08003741 	.word	0x08003741
 8003698:	08003741 	.word	0x08003741
 800369c:	08003741 	.word	0x08003741
 80036a0:	08003741 	.word	0x08003741
 80036a4:	0800372b 	.word	0x0800372b
 80036a8:	08003741 	.word	0x08003741
 80036ac:	08003741 	.word	0x08003741
 80036b0:	08003741 	.word	0x08003741
 80036b4:	08003741 	.word	0x08003741
 80036b8:	08003741 	.word	0x08003741
 80036bc:	08003741 	.word	0x08003741
 80036c0:	08003741 	.word	0x08003741
 80036c4:	08003749 	.word	0x08003749
 80036c8:	08003741 	.word	0x08003741
 80036cc:	08003741 	.word	0x08003741
 80036d0:	08003741 	.word	0x08003741
 80036d4:	08003741 	.word	0x08003741
 80036d8:	08003741 	.word	0x08003741
 80036dc:	08003741 	.word	0x08003741
 80036e0:	08003741 	.word	0x08003741
 80036e4:	08003749 	.word	0x08003749
 80036e8:	08003741 	.word	0x08003741
 80036ec:	08003741 	.word	0x08003741
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003741 	.word	0x08003741
 80036f8:	08003741 	.word	0x08003741
 80036fc:	08003741 	.word	0x08003741
 8003700:	08003741 	.word	0x08003741
 8003704:	08003749 	.word	0x08003749
 8003708:	58024400 	.word	0x58024400
 800370c:	58024800 	.word	0x58024800
 8003710:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003718:	3308      	adds	r3, #8
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd3f 	bl	80041a0 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003728:	e00f      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800372a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372e:	3328      	adds	r3, #40	@ 0x28
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fde6 	bl	8004304 <RCCEx_PLL3_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800373e:	e004      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800374a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003752:	4bbf      	ldr	r3, [pc, #764]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003756:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800375a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003760:	4abb      	ldr	r2, [pc, #748]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003762:	430b      	orrs	r3, r1
 8003764:	6553      	str	r3, [r2, #84]	@ 0x54
 8003766:	e003      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800376c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f002 0302 	and.w	r3, r2, #2
 800377c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003786:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d041      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	2b05      	cmp	r3, #5
 8003798:	d824      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800379a:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037ed 	.word	0x080037ed
 80037a4:	080037b9 	.word	0x080037b9
 80037a8:	080037cf 	.word	0x080037cf
 80037ac:	080037ed 	.word	0x080037ed
 80037b0:	080037ed 	.word	0x080037ed
 80037b4:	080037ed 	.word	0x080037ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037bc:	3308      	adds	r3, #8
 80037be:	2101      	movs	r1, #1
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fced 	bl	80041a0 <RCCEx_PLL2_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037cc:	e00f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d2:	3328      	adds	r3, #40	@ 0x28
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fd94 	bl	8004304 <RCCEx_PLL3_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037f6:	4b96      	ldr	r3, [pc, #600]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fa:	f023 0107 	bic.w	r1, r3, #7
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003804:	4a92      	ldr	r2, [pc, #584]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003806:	430b      	orrs	r3, r1
 8003808:	6553      	str	r3, [r2, #84]	@ 0x54
 800380a:	e003      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f002 0304 	and.w	r3, r2, #4
 8003820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800382a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	d044      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383c:	2b05      	cmp	r3, #5
 800383e:	d825      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003840:	a201      	add	r2, pc, #4	@ (adr r2, 8003848 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	08003895 	.word	0x08003895
 800384c:	08003861 	.word	0x08003861
 8003850:	08003877 	.word	0x08003877
 8003854:	08003895 	.word	0x08003895
 8003858:	08003895 	.word	0x08003895
 800385c:	08003895 	.word	0x08003895
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003864:	3308      	adds	r3, #8
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fc99 	bl	80041a0 <RCCEx_PLL2_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003874:	e00f      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387a:	3328      	adds	r3, #40	@ 0x28
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fd40 	bl	8004304 <RCCEx_PLL3_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800388a:	e004      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003892:	e000      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003896:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800389e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	f023 0107 	bic.w	r1, r3, #7
 80038a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	4a68      	ldr	r2, [pc, #416]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f002 0320 	and.w	r3, r2, #32
 80038ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80038d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80038d8:	460b      	mov	r3, r1
 80038da:	4313      	orrs	r3, r2
 80038dc:	d055      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80038de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ea:	d033      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80038ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f0:	d82c      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f6:	d02f      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fc:	d826      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003902:	d02b      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003904:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003908:	d820      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800390a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800390e:	d012      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003914:	d81a      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d022      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800391a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800391e:	d115      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003924:	3308      	adds	r3, #8
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fc39 	bl	80041a0 <RCCEx_PLL2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003934:	e015      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800393a:	3328      	adds	r3, #40	@ 0x28
 800393c:	2102      	movs	r1, #2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fce0 	bl	8004304 <RCCEx_PLL3_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800394a:	e00a      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003952:	e006      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003954:	bf00      	nop
 8003956:	e004      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003958:	bf00      	nop
 800395a:	e002      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800396a:	4b39      	ldr	r3, [pc, #228]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800397a:	4a35      	ldr	r2, [pc, #212]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800397c:	430b      	orrs	r3, r1
 800397e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003980:	e003      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003996:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039a0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d058      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80039aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039b6:	d033      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80039b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039bc:	d82c      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c2:	d02f      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c8:	d826      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80039ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ce:	d02b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80039d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039d4:	d820      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80039d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039da:	d012      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80039dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e0:	d81a      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d022      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80039e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ea:	d115      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f0:	3308      	adds	r3, #8
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fbd3 	bl	80041a0 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a00:	e015      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a06:	3328      	adds	r3, #40	@ 0x28
 8003a08:	2102      	movs	r1, #2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fc7a 	bl	8004304 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a16:	e00a      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a1e:	e006      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003a20:	bf00      	nop
 8003a22:	e004      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10e      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a36:	4b06      	ldr	r3, [pc, #24]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a46:	4a02      	ldr	r2, [pc, #8]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4c:	e006      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003a4e:	bf00      	nop
 8003a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a76:	460b      	mov	r3, r1
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	d055      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a88:	d033      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003a8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a8e:	d82c      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a94:	d02f      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a9a:	d826      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003aa0:	d02b      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003aa2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003aa6:	d820      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aac:	d012      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab2:	d81a      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d022      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003abc:	d115      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fb6a 	bl	80041a0 <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ad2:	e015      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad8:	3328      	adds	r3, #40	@ 0x28
 8003ada:	2102      	movs	r1, #2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fc11 	bl	8004304 <RCCEx_PLL3_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b08:	4ba0      	ldr	r3, [pc, #640]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b18:	4a9c      	ldr	r2, [pc, #624]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b1e:	e003      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f002 0308 	and.w	r3, r2, #8
 8003b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b3e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	d01e      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5a:	3328      	adds	r3, #40	@ 0x28
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fbd0 	bl	8004304 <RCCEx_PLL3_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003b70:	4b86      	ldr	r3, [pc, #536]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b80:	4a82      	ldr	r2, [pc, #520]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f002 0310 	and.w	r3, r2, #16
 8003b92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b9c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d01e      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb8:	3328      	adds	r3, #40	@ 0x28
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fba1 	bl	8004304 <RCCEx_PLL3_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bce:	4b6f      	ldr	r3, [pc, #444]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bde:	4a6b      	ldr	r2, [pc, #428]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003bf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bf6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	d03e      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c0c:	d022      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003c0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c12:	d81b      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003c1e:	e015      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c24:	3308      	adds	r3, #8
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fab9 	bl	80041a0 <RCCEx_PLL2_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c34:	e00f      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3a:	3328      	adds	r3, #40	@ 0x28
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fb60 	bl	8004304 <RCCEx_PLL3_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c6e:	4a47      	ldr	r2, [pc, #284]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d03b      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ca6:	d01f      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003ca8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cac:	d818      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cb2:	d003      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003cb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cb8:	d007      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003cba:	e011      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbc:	4b33      	ldr	r3, [pc, #204]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	4a32      	ldr	r2, [pc, #200]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00f      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cce:	3328      	adds	r3, #40	@ 0x28
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fb16 	bl	8004304 <RCCEx_PLL3_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cde:	e004      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cf2:	4b26      	ldr	r3, [pc, #152]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d02:	4a22      	ldr	r2, [pc, #136]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d08:	e003      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d20:	2300      	movs	r3, #0
 8003d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d24:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	d034      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3c:	d007      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003d3e:	e011      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	4a11      	ldr	r2, [pc, #68]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d4c:	e00e      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d52:	3308      	adds	r3, #8
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fa22 	bl	80041a0 <RCCEx_PLL2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d82:	4a02      	ldr	r2, [pc, #8]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d84:	430b      	orrs	r3, r1
 8003d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d88:	e006      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003d8a:	bf00      	nop
 8003d8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003da6:	2300      	movs	r3, #0
 8003da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003daa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d00c      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db8:	3328      	adds	r3, #40	@ 0x28
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 faa1 	bl	8004304 <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003dda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ddc:	2300      	movs	r3, #0
 8003dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003de4:	460b      	mov	r3, r1
 8003de6:	4313      	orrs	r3, r2
 8003de8:	d036      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003df4:	d018      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dfa:	d811      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e00:	d014      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e06:	d80b      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d011      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e10:	d106      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e12:	4bb7      	ldr	r3, [pc, #732]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	4ab6      	ldr	r2, [pc, #728]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e1e:	e008      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e26:	e004      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003e28:	bf00      	nop
 8003e2a:	e002      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e3a:	4bad      	ldr	r3, [pc, #692]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e48:	4aa9      	ldr	r2, [pc, #676]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e64:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e66:	2300      	movs	r3, #0
 8003e68:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e74:	4b9e      	ldr	r3, [pc, #632]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	4a9b      	ldr	r2, [pc, #620]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e96:	2300      	movs	r3, #0
 8003e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ea4:	4b92      	ldr	r3, [pc, #584]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eb2:	4a8f      	ldr	r2, [pc, #572]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ed4:	4b86      	ldr	r3, [pc, #536]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	4a85      	ldr	r2, [pc, #532]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003eda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ede:	6113      	str	r3, [r2, #16]
 8003ee0:	4b83      	ldr	r3, [pc, #524]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ee2:	6919      	ldr	r1, [r3, #16]
 8003ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eec:	4a80      	ldr	r2, [pc, #512]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f00:	2300      	movs	r3, #0
 8003f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f04:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f0e:	4b78      	ldr	r3, [pc, #480]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	4a74      	ldr	r2, [pc, #464]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f30:	2300      	movs	r3, #0
 8003f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f34:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	4a68      	ldr	r2, [pc, #416]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f66:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d011      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f74:	3308      	adds	r3, #8
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f911 	bl	80041a0 <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	6239      	str	r1, [r7, #32]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d011      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f8f1 	bl	80041a0 <RCCEx_PLL2_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	2100      	movs	r1, #0
 8003fde:	61b9      	str	r1, [r7, #24]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fea:	460b      	mov	r3, r1
 8003fec:	4313      	orrs	r3, r2
 8003fee:	d011      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f8d1 	bl	80041a0 <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004010:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	2100      	movs	r1, #0
 800401e:	6139      	str	r1, [r7, #16]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d011      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004034:	3328      	adds	r3, #40	@ 0x28
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f963 	bl	8004304 <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	2100      	movs	r1, #0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800406a:	460b      	mov	r3, r1
 800406c:	4313      	orrs	r3, r2
 800406e:	d011      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004074:	3328      	adds	r3, #40	@ 0x28
 8004076:	2101      	movs	r1, #1
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f943 	bl	8004304 <RCCEx_PLL3_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	2100      	movs	r1, #0
 800409e:	6039      	str	r1, [r7, #0]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040aa:	460b      	mov	r3, r1
 80040ac:	4313      	orrs	r3, r2
 80040ae:	d011      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b4:	3328      	adds	r3, #40	@ 0x28
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f923 	bl	8004304 <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80040c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80040d4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80040e8:	46bd      	mov	sp, r7
 80040ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400

080040f4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80040fc:	4b26      	ldr	r3, [pc, #152]	@ (8004198 <HAL_RCCEx_CRSConfig+0xa4>)
 80040fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004102:	4a25      	ldr	r2, [pc, #148]	@ (8004198 <HAL_RCCEx_CRSConfig+0xa4>)
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800410c:	4b22      	ldr	r3, [pc, #136]	@ (8004198 <HAL_RCCEx_CRSConfig+0xa4>)
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004112:	4a21      	ldr	r2, [pc, #132]	@ (8004198 <HAL_RCCEx_CRSConfig+0xa4>)
 8004114:	f023 0302 	bic.w	r3, r3, #2
 8004118:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800411c:	f7fd fac2 	bl	80016a4 <HAL_GetREVID>
 8004120:	4603      	mov	r3, r0
 8004122:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004126:	4293      	cmp	r3, r2
 8004128:	d80b      	bhi.n	8004142 <HAL_RCCEx_CRSConfig+0x4e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004132:	d106      	bne.n	8004142 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e008      	b.n	8004154 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800416a:	4a0c      	ldr	r2, [pc, #48]	@ (800419c <HAL_RCCEx_CRSConfig+0xa8>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8004170:	4b0a      	ldr	r3, [pc, #40]	@ (800419c <HAL_RCCEx_CRSConfig+0xa8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	4907      	ldr	r1, [pc, #28]	@ (800419c <HAL_RCCEx_CRSConfig+0xa8>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004184:	4b05      	ldr	r3, [pc, #20]	@ (800419c <HAL_RCCEx_CRSConfig+0xa8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a04      	ldr	r2, [pc, #16]	@ (800419c <HAL_RCCEx_CRSConfig+0xa8>)
 800418a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800418e:	6013      	str	r3, [r2, #0]
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	58024400 	.word	0x58024400
 800419c:	40008400 	.word	0x40008400

080041a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041ae:	4b53      	ldr	r3, [pc, #332]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d101      	bne.n	80041be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e099      	b.n	80042f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041be:	4b4f      	ldr	r3, [pc, #316]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a4e      	ldr	r2, [pc, #312]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80041c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ca:	f7fd fa3b 	bl	8001644 <HAL_GetTick>
 80041ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041d2:	f7fd fa37 	bl	8001644 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e086      	b.n	80042f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041e4:	4b45      	ldr	r3, [pc, #276]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041f0:	4b42      	ldr	r3, [pc, #264]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	031b      	lsls	r3, r3, #12
 80041fe:	493f      	ldr	r1, [pc, #252]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	628b      	str	r3, [r1, #40]	@ 0x28
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	3b01      	subs	r3, #1
 800420a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	3b01      	subs	r3, #1
 8004214:	025b      	lsls	r3, r3, #9
 8004216:	b29b      	uxth	r3, r3
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	3b01      	subs	r3, #1
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	3b01      	subs	r3, #1
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004234:	4931      	ldr	r1, [pc, #196]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004236:	4313      	orrs	r3, r2
 8004238:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800423a:	4b30      	ldr	r3, [pc, #192]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	492d      	ldr	r1, [pc, #180]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800424c:	4b2b      	ldr	r3, [pc, #172]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	f023 0220 	bic.w	r2, r3, #32
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	4928      	ldr	r1, [pc, #160]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800425e:	4b27      	ldr	r3, [pc, #156]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004264:	f023 0310 	bic.w	r3, r3, #16
 8004268:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800426a:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 800426c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800426e:	4b24      	ldr	r3, [pc, #144]	@ (8004300 <RCCEx_PLL2_Config+0x160>)
 8004270:	4013      	ands	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	69d2      	ldr	r2, [r2, #28]
 8004276:	00d2      	lsls	r2, r2, #3
 8004278:	4920      	ldr	r1, [pc, #128]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 800427a:	4313      	orrs	r3, r2
 800427c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800427e:	4b1f      	ldr	r3, [pc, #124]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	4a1e      	ldr	r2, [pc, #120]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004284:	f043 0310 	orr.w	r3, r3, #16
 8004288:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004290:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	4a19      	ldr	r2, [pc, #100]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 8004296:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800429a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800429c:	e00f      	b.n	80042be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d106      	bne.n	80042b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042a4:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	4a14      	ldr	r2, [pc, #80]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042b0:	e005      	b.n	80042be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	4a11      	ldr	r2, [pc, #68]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80042b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042be:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a0e      	ldr	r2, [pc, #56]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80042c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ca:	f7fd f9bb 	bl	8001644 <HAL_GetTick>
 80042ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042d0:	e008      	b.n	80042e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042d2:	f7fd f9b7 	bl	8001644 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e006      	b.n	80042f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <RCCEx_PLL2_Config+0x15c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	58024400 	.word	0x58024400
 8004300:	ffff0007 	.word	0xffff0007

08004304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004312:	4b53      	ldr	r3, [pc, #332]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b03      	cmp	r3, #3
 800431c:	d101      	bne.n	8004322 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e099      	b.n	8004456 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004322:	4b4f      	ldr	r3, [pc, #316]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a4e      	ldr	r2, [pc, #312]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 8004328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800432c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432e:	f7fd f989 	bl	8001644 <HAL_GetTick>
 8004332:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004334:	e008      	b.n	8004348 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004336:	f7fd f985 	bl	8001644 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e086      	b.n	8004456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004348:	4b45      	ldr	r3, [pc, #276]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004354:	4b42      	ldr	r3, [pc, #264]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	051b      	lsls	r3, r3, #20
 8004362:	493f      	ldr	r1, [pc, #252]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	628b      	str	r3, [r1, #40]	@ 0x28
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	3b01      	subs	r3, #1
 800436e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	3b01      	subs	r3, #1
 8004378:	025b      	lsls	r3, r3, #9
 800437a:	b29b      	uxth	r3, r3
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	3b01      	subs	r3, #1
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	3b01      	subs	r3, #1
 8004392:	061b      	lsls	r3, r3, #24
 8004394:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004398:	4931      	ldr	r1, [pc, #196]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800439e:	4b30      	ldr	r3, [pc, #192]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	492d      	ldr	r1, [pc, #180]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	4928      	ldr	r1, [pc, #160]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043c2:	4b27      	ldr	r3, [pc, #156]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	4a26      	ldr	r2, [pc, #152]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043ce:	4b24      	ldr	r3, [pc, #144]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d2:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <RCCEx_PLL3_Config+0x160>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	69d2      	ldr	r2, [r2, #28]
 80043da:	00d2      	lsls	r2, r2, #3
 80043dc:	4920      	ldr	r1, [pc, #128]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f8:	4a19      	ldr	r2, [pc, #100]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 80043fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004400:	e00f      	b.n	8004422 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d106      	bne.n	8004416 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004408:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	4a14      	ldr	r2, [pc, #80]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 800440e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004414:	e005      	b.n	8004422 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004416:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	4a11      	ldr	r2, [pc, #68]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 800441c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004420:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004422:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a0e      	ldr	r2, [pc, #56]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 8004428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800442c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442e:	f7fd f909 	bl	8001644 <HAL_GetTick>
 8004432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004434:	e008      	b.n	8004448 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004436:	f7fd f905 	bl	8001644 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e006      	b.n	8004456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004448:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <RCCEx_PLL3_Config+0x15c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	58024400 	.word	0x58024400
 8004464:	ffff0007 	.word	0xffff0007

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e049      	b.n	800450e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc ff26 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f000 fae4 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e05e      	b.n	80045ee <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2b      	ldr	r2, [pc, #172]	@ (80045fc <HAL_TIM_Base_Start_IT+0xe4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02c      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455a:	d027      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a27      	ldr	r2, [pc, #156]	@ (8004600 <HAL_TIM_Base_Start_IT+0xe8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d022      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a26      	ldr	r2, [pc, #152]	@ (8004604 <HAL_TIM_Base_Start_IT+0xec>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d01d      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a24      	ldr	r2, [pc, #144]	@ (8004608 <HAL_TIM_Base_Start_IT+0xf0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d018      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a23      	ldr	r2, [pc, #140]	@ (800460c <HAL_TIM_Base_Start_IT+0xf4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <HAL_TIM_Base_Start_IT+0xf8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00e      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a20      	ldr	r2, [pc, #128]	@ (8004614 <HAL_TIM_Base_Start_IT+0xfc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1e      	ldr	r2, [pc, #120]	@ (8004618 <HAL_TIM_Base_Start_IT+0x100>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x94>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1d      	ldr	r2, [pc, #116]	@ (800461c <HAL_TIM_Base_Start_IT+0x104>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d115      	bne.n	80045d8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_TIM_Base_Start_IT+0x108>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d015      	beq.n	80045ea <HAL_TIM_Base_Start_IT+0xd2>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c4:	d011      	beq.n	80045ea <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	e008      	b.n	80045ea <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e000      	b.n	80045ec <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40010400 	.word	0x40010400
 8004610:	40001800 	.word	0x40001800
 8004614:	40014000 	.word	0x40014000
 8004618:	4000e000 	.word	0x4000e000
 800461c:	4000e400 	.word	0x4000e400
 8004620:	00010007 	.word	0x00010007

08004624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d020      	beq.n	8004688 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0202 	mvn.w	r2, #2
 8004658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9e2 	bl	8004a38 <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9d4 	bl	8004a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f9e5 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d020      	beq.n	80046d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01b      	beq.n	80046d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0204 	mvn.w	r2, #4
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9bc 	bl	8004a38 <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f9ae 	bl	8004a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f9bf 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d020      	beq.n	8004720 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01b      	beq.n	8004720 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0208 	mvn.w	r2, #8
 80046f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2204      	movs	r2, #4
 80046f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f996 	bl	8004a38 <HAL_TIM_IC_CaptureCallback>
 800470c:	e005      	b.n	800471a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f988 	bl	8004a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f999 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d020      	beq.n	800476c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01b      	beq.n	800476c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0210 	mvn.w	r2, #16
 800473c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2208      	movs	r2, #8
 8004742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f970 	bl	8004a38 <HAL_TIM_IC_CaptureCallback>
 8004758:	e005      	b.n	8004766 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f962 	bl	8004a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f973 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00c      	beq.n	8004790 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0201 	mvn.w	r2, #1
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fb fdc0 	bl	8000310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00c      	beq.n	80047be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80047b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fb51 	bl	8004e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00c      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fb49 	bl	8004e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00c      	beq.n	8004806 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f92d 	bl	8004a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00c      	beq.n	800482a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f06f 0220 	mvn.w	r2, #32
 8004822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fb11 	bl	8004e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x1c>
 800484c:	2302      	movs	r3, #2
 800484e:	e0dc      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x1d6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a14 <HAL_TIM_ConfigClockSource+0x1e0>)
 800486c:	4013      	ands	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a64      	ldr	r2, [pc, #400]	@ (8004a18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	f000 80a9 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 800488c:	4a62      	ldr	r2, [pc, #392]	@ (8004a18 <HAL_TIM_ConfigClockSource+0x1e4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	f200 80ae 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004894:	4a61      	ldr	r2, [pc, #388]	@ (8004a1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	f000 80a1 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 800489c:	4a5f      	ldr	r2, [pc, #380]	@ (8004a1c <HAL_TIM_ConfigClockSource+0x1e8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	f200 80a6 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80048a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004a20 <HAL_TIM_ConfigClockSource+0x1ec>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	f000 8099 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 80048ac:	4a5c      	ldr	r2, [pc, #368]	@ (8004a20 <HAL_TIM_ConfigClockSource+0x1ec>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	f200 809e 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80048b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048b8:	f000 8091 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 80048bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048c0:	f200 8096 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80048c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048c8:	f000 8089 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 80048cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d0:	f200 808e 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048d8:	d03e      	beq.n	8004958 <HAL_TIM_ConfigClockSource+0x124>
 80048da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048de:	f200 8087 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e6:	f000 8086 	beq.w	80049f6 <HAL_TIM_ConfigClockSource+0x1c2>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ee:	d87f      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80048f0:	2b70      	cmp	r3, #112	@ 0x70
 80048f2:	d01a      	beq.n	800492a <HAL_TIM_ConfigClockSource+0xf6>
 80048f4:	2b70      	cmp	r3, #112	@ 0x70
 80048f6:	d87b      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80048f8:	2b60      	cmp	r3, #96	@ 0x60
 80048fa:	d050      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x16a>
 80048fc:	2b60      	cmp	r3, #96	@ 0x60
 80048fe:	d877      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004900:	2b50      	cmp	r3, #80	@ 0x50
 8004902:	d03c      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x14a>
 8004904:	2b50      	cmp	r3, #80	@ 0x50
 8004906:	d873      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004908:	2b40      	cmp	r3, #64	@ 0x40
 800490a:	d058      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x18a>
 800490c:	2b40      	cmp	r3, #64	@ 0x40
 800490e:	d86f      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004910:	2b30      	cmp	r3, #48	@ 0x30
 8004912:	d064      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 8004914:	2b30      	cmp	r3, #48	@ 0x30
 8004916:	d86b      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d060      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d867      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05c      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 8004924:	2b10      	cmp	r3, #16
 8004926:	d05a      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x1aa>
 8004928:	e062      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800493a:	f000 f9cb 	bl	8004cd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800494c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	609a      	str	r2, [r3, #8]
      break;
 8004956:	e04f      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004968:	f000 f9b4 	bl	8004cd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800497a:	609a      	str	r2, [r3, #8]
      break;
 800497c:	e03c      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	461a      	mov	r2, r3
 800498c:	f000 f924 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2150      	movs	r1, #80	@ 0x50
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f97e 	bl	8004c98 <TIM_ITRx_SetConfig>
      break;
 800499c:	e02c      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049aa:	461a      	mov	r2, r3
 80049ac:	f000 f943 	bl	8004c36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2160      	movs	r1, #96	@ 0x60
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f96e 	bl	8004c98 <TIM_ITRx_SetConfig>
      break;
 80049bc:	e01c      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ca:	461a      	mov	r2, r3
 80049cc:	f000 f904 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2140      	movs	r1, #64	@ 0x40
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f95e 	bl	8004c98 <TIM_ITRx_SetConfig>
      break;
 80049dc:	e00c      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f000 f955 	bl	8004c98 <TIM_ITRx_SetConfig>
      break;
 80049ee:	e003      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	e000      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80049f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	ffceff88 	.word	0xffceff88
 8004a18:	00100040 	.word	0x00100040
 8004a1c:	00100030 	.word	0x00100030
 8004a20:	00100020 	.word	0x00100020

08004a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb0 <TIM_Base_SetConfig+0x13c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a92:	d00f      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a47      	ldr	r2, [pc, #284]	@ (8004bb4 <TIM_Base_SetConfig+0x140>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00b      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a46      	ldr	r2, [pc, #280]	@ (8004bb8 <TIM_Base_SetConfig+0x144>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a45      	ldr	r2, [pc, #276]	@ (8004bbc <TIM_Base_SetConfig+0x148>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a44      	ldr	r2, [pc, #272]	@ (8004bc0 <TIM_Base_SetConfig+0x14c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a39      	ldr	r2, [pc, #228]	@ (8004bb0 <TIM_Base_SetConfig+0x13c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d027      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad4:	d023      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a36      	ldr	r2, [pc, #216]	@ (8004bb4 <TIM_Base_SetConfig+0x140>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01f      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a35      	ldr	r2, [pc, #212]	@ (8004bb8 <TIM_Base_SetConfig+0x144>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01b      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a34      	ldr	r2, [pc, #208]	@ (8004bbc <TIM_Base_SetConfig+0x148>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d017      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a33      	ldr	r2, [pc, #204]	@ (8004bc0 <TIM_Base_SetConfig+0x14c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a32      	ldr	r2, [pc, #200]	@ (8004bc4 <TIM_Base_SetConfig+0x150>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00f      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a31      	ldr	r2, [pc, #196]	@ (8004bc8 <TIM_Base_SetConfig+0x154>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a30      	ldr	r2, [pc, #192]	@ (8004bcc <TIM_Base_SetConfig+0x158>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d007      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd0 <TIM_Base_SetConfig+0x15c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_Base_SetConfig+0xaa>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2e      	ldr	r2, [pc, #184]	@ (8004bd4 <TIM_Base_SetConfig+0x160>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d108      	bne.n	8004b30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a16      	ldr	r2, [pc, #88]	@ (8004bb0 <TIM_Base_SetConfig+0x13c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0x108>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <TIM_Base_SetConfig+0x14c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x108>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <TIM_Base_SetConfig+0x150>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x108>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a16      	ldr	r2, [pc, #88]	@ (8004bc8 <TIM_Base_SetConfig+0x154>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x108>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a15      	ldr	r2, [pc, #84]	@ (8004bcc <TIM_Base_SetConfig+0x158>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d103      	bne.n	8004b84 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d105      	bne.n	8004ba2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	611a      	str	r2, [r3, #16]
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40010400 	.word	0x40010400
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800
 8004bd0:	4000e000 	.word	0x4000e000
 8004bd4:	4000e400 	.word	0x4000e400

08004bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 030a 	bic.w	r3, r3, #10
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f023 0210 	bic.w	r2, r3, #16
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	031b      	lsls	r3, r3, #12
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <TIM_ITRx_SetConfig+0x38>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f043 0307 	orr.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	609a      	str	r2, [r3, #8]
}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	ffcfff8f 	.word	0xffcfff8f

08004cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	609a      	str	r2, [r3, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e077      	b.n	8004e1c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a35      	ldr	r2, [pc, #212]	@ (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a34      	ldr	r2, [pc, #208]	@ (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d108      	bne.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a25      	ldr	r2, [pc, #148]	@ (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02c      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9e:	d027      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a22      	ldr	r2, [pc, #136]	@ (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d022      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a21      	ldr	r2, [pc, #132]	@ (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d01d      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d018      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00e      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a18      	ldr	r2, [pc, #96]	@ (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a17      	ldr	r2, [pc, #92]	@ (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10c      	bne.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40010400 	.word	0x40010400
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40001800 	.word	0x40001800
 8004e40:	40014000 	.word	0x40014000
 8004e44:	4000e000 	.word	0x4000e000
 8004e48:	4000e400 	.word	0x4000e400

08004e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <abs>:
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	bfb8      	it	lt
 8004e8c:	4240      	neglt	r0, r0
 8004e8e:	4770      	bx	lr

08004e90 <memset>:
 8004e90:	4402      	add	r2, r0
 8004e92:	4603      	mov	r3, r0
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d100      	bne.n	8004e9a <memset+0xa>
 8004e98:	4770      	bx	lr
 8004e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9e:	e7f9      	b.n	8004e94 <memset+0x4>

08004ea0 <__libc_init_array>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8004ed8 <__libc_init_array+0x38>)
 8004ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8004edc <__libc_init_array+0x3c>)
 8004ea6:	1b64      	subs	r4, r4, r5
 8004ea8:	10a4      	asrs	r4, r4, #2
 8004eaa:	2600      	movs	r6, #0
 8004eac:	42a6      	cmp	r6, r4
 8004eae:	d109      	bne.n	8004ec4 <__libc_init_array+0x24>
 8004eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8004ee0 <__libc_init_array+0x40>)
 8004eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8004ee4 <__libc_init_array+0x44>)
 8004eb4:	f000 f818 	bl	8004ee8 <_init>
 8004eb8:	1b64      	subs	r4, r4, r5
 8004eba:	10a4      	asrs	r4, r4, #2
 8004ebc:	2600      	movs	r6, #0
 8004ebe:	42a6      	cmp	r6, r4
 8004ec0:	d105      	bne.n	8004ece <__libc_init_array+0x2e>
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec8:	4798      	blx	r3
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7ee      	b.n	8004eac <__libc_init_array+0xc>
 8004ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed2:	4798      	blx	r3
 8004ed4:	3601      	adds	r6, #1
 8004ed6:	e7f2      	b.n	8004ebe <__libc_init_array+0x1e>
 8004ed8:	08004f10 	.word	0x08004f10
 8004edc:	08004f10 	.word	0x08004f10
 8004ee0:	08004f10 	.word	0x08004f10
 8004ee4:	08004f14 	.word	0x08004f14

08004ee8 <_init>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr

08004ef4 <_fini>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	bf00      	nop
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr
