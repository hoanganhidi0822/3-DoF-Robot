
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004a28  08004a28  00005a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004a38  08004a38  00005a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004a3c  08004a3c  00005a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08004a40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f0  24000010  08004a50  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000200  08004a50  00006200  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011b60  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002180  00000000  00000000  00017b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001018  00000000  00000000  00019d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000c92  00000000  00000000  0001ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00002669  00000000  00000000  0001b9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013e4b  00000000  00000000  0001e033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00145077  00000000  00000000  00031e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00176ef5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004474  00000000  00000000  00176f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  0017b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08004a10 	.word	0x08004a10

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08004a10 	.word	0x08004a10

0800030c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//----------------------Ngat Sensor----------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]

	//------------
	if (htim->Instance==htim2.Instance){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	4b3c      	ldr	r3, [pc, #240]	@ (800040c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	429a      	cmp	r2, r3
 800031e:	d108      	bne.n	8000332 <HAL_TIM_PeriodElapsedCallback+0x26>
		target_angle_1 = 30;
 8000320:	4b3b      	ldr	r3, [pc, #236]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000322:	4a3c      	ldr	r2, [pc, #240]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000324:	601a      	str	r2, [r3, #0]
		angle1  = 0;
 8000326:	4b3c      	ldr	r3, [pc, #240]	@ (8000418 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000328:	f04f 0200 	mov.w	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
		pulseCreater();
 800032e:	f000 f8d1 	bl	80004d4 <pulseCreater>

	}


	if (htim->Instance == TIM4) {  // Ensure the correct timer is being checked
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a39      	ldr	r2, [pc, #228]	@ (800041c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d162      	bne.n	8000402 <HAL_TIM_PeriodElapsedCallback+0xf6>

		//HAL_GPIO_TogglePin(GPIOB, motorL1_Pin);
		// Handle Motor 1
		if (countPulseL1 > 0) {
 800033c:	4b38      	ldr	r3, [pc, #224]	@ (8000420 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	dd17      	ble.n	8000374 <HAL_TIM_PeriodElapsedCallback+0x68>
			softCounter1++;  // Increment soft counter for motor 1
 8000344:	4b37      	ldr	r3, [pc, #220]	@ (8000424 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	4a36      	ldr	r2, [pc, #216]	@ (8000424 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800034c:	6013      	str	r3, [r2, #0]
			if (softCounter1 >= periodMotor1) {  // If soft counter reaches the desired period
 800034e:	4b35      	ldr	r3, [pc, #212]	@ (8000424 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	4b35      	ldr	r3, [pc, #212]	@ (8000428 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	429a      	cmp	r2, r3
 8000358:	db11      	blt.n	800037e <HAL_TIM_PeriodElapsedCallback+0x72>
				HAL_GPIO_TogglePin(GPIOB, motorL1_Pin);  // Toggle Motor 1 pin (generate pulse)
 800035a:	2101      	movs	r1, #1
 800035c:	4833      	ldr	r0, [pc, #204]	@ (800042c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800035e:	f001 fa2e 	bl	80017be <HAL_GPIO_TogglePin>
				softCounter1 = 0;  // Reset the soft counter for motor 1
 8000362:	4b30      	ldr	r3, [pc, #192]	@ (8000424 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
				countPulseL1--;    // Decrement the pulse count
 8000368:	4b2d      	ldr	r3, [pc, #180]	@ (8000420 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	4a2c      	ldr	r2, [pc, #176]	@ (8000420 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000370:	6013      	str	r3, [r2, #0]
 8000372:	e004      	b.n	800037e <HAL_TIM_PeriodElapsedCallback+0x72>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL1_Pin, GPIO_PIN_RESET);  // Stop Motor 1
 8000374:	2200      	movs	r2, #0
 8000376:	2101      	movs	r1, #1
 8000378:	482c      	ldr	r0, [pc, #176]	@ (800042c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800037a:	f001 fa07 	bl	800178c <HAL_GPIO_WritePin>
		}

		// Handle Motor 2
		if (countPulseL2 > 0) {
 800037e:	4b2c      	ldr	r3, [pc, #176]	@ (8000430 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	dd17      	ble.n	80003b6 <HAL_TIM_PeriodElapsedCallback+0xaa>
			softCounter2++;  // Increment soft counter for motor 2
 8000386:	4b2b      	ldr	r3, [pc, #172]	@ (8000434 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	4a29      	ldr	r2, [pc, #164]	@ (8000434 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800038e:	6013      	str	r3, [r2, #0]
			if (softCounter2 >= periodMotor2) {  // If soft counter reaches the desired period
 8000390:	4b28      	ldr	r3, [pc, #160]	@ (8000434 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4b28      	ldr	r3, [pc, #160]	@ (8000438 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	429a      	cmp	r2, r3
 800039a:	db11      	blt.n	80003c0 <HAL_TIM_PeriodElapsedCallback+0xb4>
				HAL_GPIO_TogglePin(GPIOB, motorL2_Pin);  // Toggle Motor 2 pin (generate pulse)
 800039c:	2102      	movs	r1, #2
 800039e:	4823      	ldr	r0, [pc, #140]	@ (800042c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003a0:	f001 fa0d 	bl	80017be <HAL_GPIO_TogglePin>
				softCounter2 = 0;  // Reset the soft counter for motor 2
 80003a4:	4b23      	ldr	r3, [pc, #140]	@ (8000434 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
				countPulseL2--;    // Decrement the pulse count
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	4a1f      	ldr	r2, [pc, #124]	@ (8000430 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80003b2:	6013      	str	r3, [r2, #0]
 80003b4:	e004      	b.n	80003c0 <HAL_TIM_PeriodElapsedCallback+0xb4>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL2_Pin, GPIO_PIN_RESET);  // Stop Motor 2
 80003b6:	2200      	movs	r2, #0
 80003b8:	2102      	movs	r1, #2
 80003ba:	481c      	ldr	r0, [pc, #112]	@ (800042c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003bc:	f001 f9e6 	bl	800178c <HAL_GPIO_WritePin>
		}

		// Handle Motor 3
		if (countPulseL3 > 0) {
 80003c0:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	dd17      	ble.n	80003f8 <HAL_TIM_PeriodElapsedCallback+0xec>
			softCounter3++;  // Increment soft counter for motor 3
 80003c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000440 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000440 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003d0:	6013      	str	r3, [r2, #0]
			if (softCounter3 >= periodMotor3) {  // If soft counter reaches the desired period
 80003d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000440 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	db11      	blt.n	8000402 <HAL_TIM_PeriodElapsedCallback+0xf6>
				HAL_GPIO_TogglePin(GPIOB, motorL3_Pin);  // Toggle Motor 3 pin (generate pulse)
 80003de:	2104      	movs	r1, #4
 80003e0:	4812      	ldr	r0, [pc, #72]	@ (800042c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003e2:	f001 f9ec 	bl	80017be <HAL_GPIO_TogglePin>
				softCounter3 = 0;  // Reset the soft counter for motor 3
 80003e6:	4b16      	ldr	r3, [pc, #88]	@ (8000440 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
				countPulseL3--;    // Decrement the pulse count
 80003ec:	4b13      	ldr	r3, [pc, #76]	@ (800043c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	4a12      	ldr	r2, [pc, #72]	@ (800043c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80003f4:	6013      	str	r3, [r2, #0]
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
		}
	}

}
 80003f6:	e004      	b.n	8000402 <HAL_TIM_PeriodElapsedCallback+0xf6>
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
 80003f8:	2200      	movs	r2, #0
 80003fa:	2104      	movs	r1, #4
 80003fc:	480b      	ldr	r0, [pc, #44]	@ (800042c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003fe:	f001 f9c5 	bl	800178c <HAL_GPIO_WritePin>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	24000128 	.word	0x24000128
 8000410:	240001f0 	.word	0x240001f0
 8000414:	41f00000 	.word	0x41f00000
 8000418:	240001c0 	.word	0x240001c0
 800041c:	40000800 	.word	0x40000800
 8000420:	240001cc 	.word	0x240001cc
 8000424:	240001d8 	.word	0x240001d8
 8000428:	240001e4 	.word	0x240001e4
 800042c:	58020400 	.word	0x58020400
 8000430:	240001d0 	.word	0x240001d0
 8000434:	240001dc 	.word	0x240001dc
 8000438:	240001e8 	.word	0x240001e8
 800043c:	240001d4 	.word	0x240001d4
 8000440:	240001e0 	.word	0x240001e0
 8000444:	240001ec 	.word	0x240001ec

08000448 <calculate_steps>:
    AS5600_GetRawAngle(angleL3, &angle3);

}

int calculate_steps(float current_angle, float target_angle)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000452:	edc7 0a00 	vstr	s1, [r7]
    // Calculate the angular difference
    float angular_difference = target_angle - current_angle;
 8000456:	ed97 7a00 	vldr	s14, [r7]
 800045a:	edd7 7a01 	vldr	s15, [r7, #4]
 800045e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000462:	edc7 7a03 	vstr	s15, [r7, #12]

    // Convert angular difference to steps
    int steps_needed = (int)((angular_difference / 360) * 44800);
 8000466:	ed97 7a03 	vldr	s14, [r7, #12]
 800046a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000494 <calculate_steps+0x4c>
 800046e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000472:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000498 <calculate_steps+0x50>
 8000476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800047a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800047e:	ee17 3a90 	vmov	r3, s15
 8000482:	60bb      	str	r3, [r7, #8]

    // Return the absolute number of steps (stepper motors can't move negative steps)
    return steps_needed;
 8000484:	68bb      	ldr	r3, [r7, #8]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	43b40000 	.word	0x43b40000
 8000498:	472f0000 	.word	0x472f0000

0800049c <maxSteps>:

int maxSteps(int steps_motor_1, int steps_motor_2, int steps_motor_3)
{
 800049c:	b480      	push	{r7}
 800049e:	b087      	sub	sp, #28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
    int max_value = steps_motor_1;  // Assume motor 1 has the maximum steps
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	617b      	str	r3, [r7, #20]

    if (steps_motor_2 > max_value) {
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dd01      	ble.n	80004b8 <maxSteps+0x1c>
        max_value = steps_motor_2;  // Update if motor 2 has more steps
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	617b      	str	r3, [r7, #20]
    }

    if (steps_motor_3 > max_value) {
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dd01      	ble.n	80004c4 <maxSteps+0x28>
        max_value = steps_motor_3;  // Update if motor 3 has more steps
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	617b      	str	r3, [r7, #20]
    }

    return max_value;  // Return the largest number of steps
 80004c4:	697b      	ldr	r3, [r7, #20]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	371c      	adds	r7, #28
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <pulseCreater>:

void pulseCreater(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
    // Motor step calculation
    int steps_motor_1 = calculate_steps(angle1,target_angle_1);
 80004da:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <pulseCreater+0xe8>)
 80004dc:	edd3 7a00 	vldr	s15, [r3]
 80004e0:	4b37      	ldr	r3, [pc, #220]	@ (80005c0 <pulseCreater+0xec>)
 80004e2:	ed93 7a00 	vldr	s14, [r3]
 80004e6:	eef0 0a47 	vmov.f32	s1, s14
 80004ea:	eeb0 0a67 	vmov.f32	s0, s15
 80004ee:	f7ff ffab 	bl	8000448 <calculate_steps>
 80004f2:	60f8      	str	r0, [r7, #12]
    int steps_motor_2 = calculate_steps(angle2,target_angle_2);
 80004f4:	4b33      	ldr	r3, [pc, #204]	@ (80005c4 <pulseCreater+0xf0>)
 80004f6:	edd3 7a00 	vldr	s15, [r3]
 80004fa:	4b33      	ldr	r3, [pc, #204]	@ (80005c8 <pulseCreater+0xf4>)
 80004fc:	ed93 7a00 	vldr	s14, [r3]
 8000500:	eef0 0a47 	vmov.f32	s1, s14
 8000504:	eeb0 0a67 	vmov.f32	s0, s15
 8000508:	f7ff ff9e 	bl	8000448 <calculate_steps>
 800050c:	60b8      	str	r0, [r7, #8]
    int steps_motor_3 = calculate_steps(angle3,target_angle_3);
 800050e:	4b2f      	ldr	r3, [pc, #188]	@ (80005cc <pulseCreater+0xf8>)
 8000510:	edd3 7a00 	vldr	s15, [r3]
 8000514:	4b2e      	ldr	r3, [pc, #184]	@ (80005d0 <pulseCreater+0xfc>)
 8000516:	ed93 7a00 	vldr	s14, [r3]
 800051a:	eef0 0a47 	vmov.f32	s1, s14
 800051e:	eeb0 0a67 	vmov.f32	s0, s15
 8000522:	f7ff ff91 	bl	8000448 <calculate_steps>
 8000526:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(GPIOB, MOTOR3_DIR_PIN, GPIO_PIN_SET);  // Clockwise
//	else
//		HAL_GPIO_WritePin(GPIOB, MOTOR3_DIR_PIN, GPIO_PIN_RESET);  // Counterclockwise

    // Determine the maximum steps
    int max_steps = maxSteps(steps_motor_1, steps_motor_2, steps_motor_3);
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	68b9      	ldr	r1, [r7, #8]
 800052c:	68f8      	ldr	r0, [r7, #12]
 800052e:	f7ff ffb5 	bl	800049c <maxSteps>
 8000532:	6038      	str	r0, [r7, #0]

    // Calculate pulse period for each motor based on max steps
    periodMotor1 = (int)(((float)max_steps / steps_motor_1) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	ee07 3a90 	vmov	s15, r3
 800053a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	ee07 3a90 	vmov	s15, r3
 8000544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800054c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000550:	ee17 2a90 	vmov	r2, s15
 8000554:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <pulseCreater+0x100>)
 8000556:	601a      	str	r2, [r3, #0]
    periodMotor2 = (int)(((float)max_steps / steps_motor_2) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	ee07 3a90 	vmov	s15, r3
 800055e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	ee07 3a90 	vmov	s15, r3
 8000568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800056c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000574:	ee17 2a90 	vmov	r2, s15
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <pulseCreater+0x104>)
 800057a:	601a      	str	r2, [r3, #0]
    periodMotor3 = (int)(((float)max_steps / steps_motor_3) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	ee07 3a90 	vmov	s15, r3
 8000582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	ee07 3a90 	vmov	s15, r3
 800058c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000598:	ee17 2a90 	vmov	r2, s15
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <pulseCreater+0x108>)
 800059e:	601a      	str	r2, [r3, #0]

    // Set the number of pulses (steps) for each motor
    countPulseL1 = steps_motor_1;
 80005a0:	4a0f      	ldr	r2, [pc, #60]	@ (80005e0 <pulseCreater+0x10c>)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6013      	str	r3, [r2, #0]
    countPulseL2 = steps_motor_2;
 80005a6:	4a0f      	ldr	r2, [pc, #60]	@ (80005e4 <pulseCreater+0x110>)
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	6013      	str	r3, [r2, #0]
    countPulseL3 = steps_motor_3;
 80005ac:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <pulseCreater+0x114>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]

    // Start Timer 4 (assuming it's already initialized)
    //HAL_TIM_Base_Start_IT(&htim4);
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	240001c0 	.word	0x240001c0
 80005c0:	240001f0 	.word	0x240001f0
 80005c4:	240001c4 	.word	0x240001c4
 80005c8:	240001f4 	.word	0x240001f4
 80005cc:	240001c8 	.word	0x240001c8
 80005d0:	240001f8 	.word	0x240001f8
 80005d4:	240001e4 	.word	0x240001e4
 80005d8:	240001e8 	.word	0x240001e8
 80005dc:	240001ec 	.word	0x240001ec
 80005e0:	240001cc 	.word	0x240001cc
 80005e4:	240001d0 	.word	0x240001d0
 80005e8:	240001d4 	.word	0x240001d4

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fd76 	bl	80010e0 <HAL_Init>
//	angleL3->i2cHandle= &hi2c3;
//	AS5600_Init(angleL3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f818 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 fa1a 	bl	8000a30 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005fc:	f000 f97c 	bl	80008f8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000600:	f000 f8ba 	bl	8000778 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000604:	f000 f8f8 	bl	80007f8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000608:	f000 f936 	bl	8000878 <MX_I2C3_Init>
  MX_TIM4_Init();
 800060c:	f000 f9c2 	bl	8000994 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <main+0x34>)
 8000612:	f003 fd19 	bl	8004048 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000616:	4803      	ldr	r0, [pc, #12]	@ (8000624 <main+0x38>)
 8000618:	f003 fd16 	bl	8004048 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0x30>
 8000620:	24000128 	.word	0x24000128
 8000624:	24000174 	.word	0x24000174

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0a4      	sub	sp, #144	@ 0x90
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000632:	224c      	movs	r2, #76	@ 0x4c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f9be 	bl	80049b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000640:	2220      	movs	r2, #32
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f004 f9b7 	bl	80049b8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800065c:	2002      	movs	r0, #2
 800065e:	f001 f9fd 	bl	8001a5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	4b41      	ldr	r3, [pc, #260]	@ (800076c <SystemClock_Config+0x144>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066e:	4a3f      	ldr	r2, [pc, #252]	@ (800076c <SystemClock_Config+0x144>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemClock_Config+0x144>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000682:	bf00      	nop
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemClock_Config+0x144>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000690:	d1f8      	bne.n	8000684 <SystemClock_Config+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000692:	2330      	movs	r3, #48	@ 0x30
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800069a:	2380      	movs	r3, #128	@ 0x80
 800069c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 800069e:	2310      	movs	r3, #16
 80006a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80006a6:	2301      	movs	r3, #1
 80006a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ae:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b2:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f9f9 	bl	8001ad0 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e4:	f000 fa80 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	233f      	movs	r3, #63	@ 0x3f
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2303      	movs	r3, #3
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80006f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006fe:	2340      	movs	r3, #64	@ 0x40
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fdb6 	bl	8002284 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800071e:	f000 fa63 	bl	8000be8 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <SystemClock_Config+0x148>)
 8000724:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000728:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <SystemClock_Config+0x148>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <SystemClock_Config+0x148>)
 8000734:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB1;
 8000744:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000748:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <SystemClock_Config+0x14c>)
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000752:	2322      	movs	r3, #34	@ 0x22
 8000754:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000756:	2320      	movs	r3, #32
 8000758:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fa60 	bl	8003c24 <HAL_RCCEx_CRSConfig>
}
 8000764:	bf00      	nop
 8000766:	3790      	adds	r7, #144	@ 0x90
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	58024800 	.word	0x58024800
 8000770:	58024400 	.word	0x58024400
 8000774:	02dc6bff 	.word	0x02dc6bff

08000778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_I2C1_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	@ (80007f0 <MX_I2C1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_I2C1_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	@ (80007f4 <MX_I2C1_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_I2C1_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b2:	480e      	ldr	r0, [pc, #56]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007b4:	f001 f81e 	bl	80017f4 <HAL_I2C_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 fa13 	bl	8000be8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007c6:	f001 f8b1 	bl	800192c <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 fa0a 	bl	8000be8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007d8:	f001 f8f3 	bl	80019c2 <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 fa01 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2400002c 	.word	0x2400002c
 80007f0:	40005400 	.word	0x40005400
 80007f4:	00a0a3f7 	.word	0x00a0a3f7

080007f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_I2C2_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_I2C2_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A0A3F7;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_I2C2_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <MX_I2C2_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_I2C2_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_I2C2_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_I2C2_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_I2C2_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2C2_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2C2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <MX_I2C2_Init+0x74>)
 8000834:	f000 ffde 	bl	80017f4 <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 f9d3 	bl	8000be8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <MX_I2C2_Init+0x74>)
 8000846:	f001 f871 	bl	800192c <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 f9ca 	bl	8000be8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_I2C2_Init+0x74>)
 8000858:	f001 f8b3 	bl	80019c2 <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 f9c1 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	24000080 	.word	0x24000080
 8000870:	40005800 	.word	0x40005800
 8000874:	00a0a3f7 	.word	0x00a0a3f7

08000878 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_I2C3_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	@ (80008f0 <MX_I2C3_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00A0A3F7;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_I2C3_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <MX_I2C3_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_I2C3_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_I2C3_Init+0x74>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_I2C3_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_I2C3_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_I2C3_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_I2C3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_I2C3_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	@ (80008ec <MX_I2C3_Init+0x74>)
 80008b4:	f000 ff9e 	bl	80017f4 <HAL_I2C_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 f993 	bl	8000be8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4809      	ldr	r0, [pc, #36]	@ (80008ec <MX_I2C3_Init+0x74>)
 80008c6:	f001 f831 	bl	800192c <HAL_I2CEx_ConfigAnalogFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 f98a 	bl	8000be8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_I2C3_Init+0x74>)
 80008d8:	f001 f873 	bl	80019c2 <HAL_I2CEx_ConfigDigitalFilter>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f981 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	240000d4 	.word	0x240000d4
 80008f0:	40005c00 	.word	0x40005c00
 80008f4:	00a0a3f7 	.word	0x00a0a3f7

080008f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000918:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800091c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000920:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8000924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_TIM2_Init+0x98>)
 800092e:	2201      	movs	r2, #1
 8000930:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_TIM2_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000940:	f003 fb2a 	bl	8003f98 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800094a:	f000 f94d 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_TIM2_Init+0x98>)
 800095c:	f003 fd02 	bl	8004364 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000966:	f000 f93f 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_TIM2_Init+0x98>)
 8000978:	f003 ff64 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000982:	f000 f931 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	24000128 	.word	0x24000128

08000994 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_TIM4_Init+0x94>)
 80009b4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <MX_TIM4_Init+0x98>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_TIM4_Init+0x94>)
 80009ba:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80009be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_TIM4_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 80009c6:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_TIM4_Init+0x94>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_TIM4_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_TIM4_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009d8:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <MX_TIM4_Init+0x94>)
 80009da:	f003 fadd 	bl	8003f98 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80009e4:	f000 f900 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <MX_TIM4_Init+0x94>)
 80009f6:	f003 fcb5 	bl	8004364 <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a00:	f000 f8f2 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_TIM4_Init+0x94>)
 8000a12:	f003 ff17 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 f8e4 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000174 	.word	0x24000174
 8000a2c:	40000800 	.word	0x40000800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	4b63      	ldr	r3, [pc, #396]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4c:	4a61      	ldr	r2, [pc, #388]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a56:	4b5f      	ldr	r3, [pc, #380]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	f003 0320 	and.w	r3, r3, #32
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a74:	4b57      	ldr	r3, [pc, #348]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b54      	ldr	r3, [pc, #336]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	4a52      	ldr	r2, [pc, #328]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a92:	4b50      	ldr	r3, [pc, #320]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a4b      	ldr	r2, [pc, #300]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b48      	ldr	r3, [pc, #288]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b45      	ldr	r3, [pc, #276]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a43      	ldr	r2, [pc, #268]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b41      	ldr	r3, [pc, #260]	@ (8000bd4 <MX_GPIO_Init+0x1a4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Mag_GPIO_Port, Mag_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2180      	movs	r1, #128	@ 0x80
 8000ae0:	483d      	ldr	r0, [pc, #244]	@ (8000bd8 <MX_GPIO_Init+0x1a8>)
 8000ae2:	f000 fe53 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorL1_Pin|motorL2_Pin|motorL3_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2107      	movs	r1, #7
 8000aea:	483c      	ldr	r0, [pc, #240]	@ (8000bdc <MX_GPIO_Init+0x1ac>)
 8000aec:	f000 fe4e 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M1dir_Pin|M2dir_Pin|M3dir_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000af6:	483a      	ldr	r0, [pc, #232]	@ (8000be0 <MX_GPIO_Init+0x1b0>)
 8000af8:	f000 fe48 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2180      	movs	r1, #128	@ 0x80
 8000b00:	4838      	ldr	r0, [pc, #224]	@ (8000be4 <MX_GPIO_Init+0x1b4>)
 8000b02:	f000 fe43 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LimL1_Pin LimL2_Pin LimL3_Pin */
  GPIO_InitStruct.Pin = LimL1_Pin|LimL2_Pin|LimL3_Pin;
 8000b06:	2370      	movs	r3, #112	@ 0x70
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	482f      	ldr	r0, [pc, #188]	@ (8000bd8 <MX_GPIO_Init+0x1a8>)
 8000b1a:	f000 fc8f 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : Mag_Pin */
  GPIO_InitStruct.Pin = Mag_Pin;
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Mag_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4828      	ldr	r0, [pc, #160]	@ (8000bd8 <MX_GPIO_Init+0x1a8>)
 8000b36:	f000 fc81 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : motorL1_Pin motorL2_Pin */
  GPIO_InitStruct.Pin = motorL1_Pin|motorL2_Pin;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4822      	ldr	r0, [pc, #136]	@ (8000bdc <MX_GPIO_Init+0x1ac>)
 8000b52:	f000 fc73 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : motorL3_Pin */
  GPIO_InitStruct.Pin = motorL3_Pin;
 8000b56:	2304      	movs	r3, #4
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(motorL3_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481b      	ldr	r0, [pc, #108]	@ (8000bdc <MX_GPIO_Init+0x1ac>)
 8000b6e:	f000 fc65 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1dir_Pin M2dir_Pin M3dir_Pin */
  GPIO_InitStruct.Pin = M1dir_Pin|M2dir_Pin|M3dir_Pin;
 8000b72:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4815      	ldr	r0, [pc, #84]	@ (8000be0 <MX_GPIO_Init+0x1b0>)
 8000b8c:	f000 fc56 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480f      	ldr	r0, [pc, #60]	@ (8000be4 <MX_GPIO_Init+0x1b4>)
 8000ba8:	f000 fc48 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bac:	2308      	movs	r3, #8
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_CRS_SYNC;
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_GPIO_Init+0x1ac>)
 8000bc8:	f000 fc38 	bl	800143c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	58020000 	.word	0x58020000
 8000bdc:	58020400 	.word	0x58020400
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58021800 	.word	0x58021800

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c00:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x30>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x30>)
 8000c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	58024400 	.word	0x58024400

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0be      	sub	sp, #248	@ 0xf8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c44:	22b8      	movs	r2, #184	@ 0xb8
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 feb5 	bl	80049b8 <memset>
  if(hi2c->Instance==I2C1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a85      	ldr	r2, [pc, #532]	@ (8000e68 <HAL_I2C_MspInit+0x240>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d146      	bne.n	8000ce6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c58:	f04f 0208 	mov.w	r2, #8
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fe38 	bl	80028e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c7a:	f7ff ffb5 	bl	8000be8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	4a79      	ldr	r2, [pc, #484]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8e:	4b77      	ldr	r3, [pc, #476]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9c:	23c0      	movs	r3, #192	@ 0xc0
 8000c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca2:	2312      	movs	r3, #18
 8000ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	486b      	ldr	r0, [pc, #428]	@ (8000e70 <HAL_I2C_MspInit+0x248>)
 8000cc2:	f000 fbbb 	bl	800143c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc6:	4b69      	ldr	r3, [pc, #420]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ccc:	4a67      	ldr	r2, [pc, #412]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000cce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cd6:	4b65      	ldr	r3, [pc, #404]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce0:	623b      	str	r3, [r7, #32]
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ce4:	e0bc      	b.n	8000e60 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C2)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a62      	ldr	r2, [pc, #392]	@ (8000e74 <HAL_I2C_MspInit+0x24c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d146      	bne.n	8000d7e <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cf0:	f04f 0208 	mov.w	r2, #8
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fdec 	bl	80028e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000d12:	f7ff ff69 	bl	8000be8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d16:	4b55      	ldr	r3, [pc, #340]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1c:	4a53      	ldr	r2, [pc, #332]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d26:	4b51      	ldr	r3, [pc, #324]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2c:	f003 0320 	and.w	r3, r3, #32
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d34:	2303      	movs	r3, #3
 8000d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d52:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4847      	ldr	r0, [pc, #284]	@ (8000e78 <HAL_I2C_MspInit+0x250>)
 8000d5a:	f000 fb6f 	bl	800143c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d5e:	4b43      	ldr	r3, [pc, #268]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d64:	4a41      	ldr	r2, [pc, #260]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000d66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
}
 8000d7c:	e070      	b.n	8000e60 <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a3e      	ldr	r2, [pc, #248]	@ (8000e7c <HAL_I2C_MspInit+0x254>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d16b      	bne.n	8000e60 <HAL_I2C_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000d88:	f04f 0208 	mov.w	r2, #8
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 fda0 	bl	80028e4 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_I2C_MspInit+0x186>
      Error_Handler();
 8000daa:	f7ff ff1d 	bl	8000be8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db4:	4a2d      	ldr	r2, [pc, #180]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	4a26      	ldr	r2, [pc, #152]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ddc:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e04:	2304      	movs	r3, #4
 8000e06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481b      	ldr	r0, [pc, #108]	@ (8000e80 <HAL_I2C_MspInit+0x258>)
 8000e12:	f000 fb13 	bl	800143c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	2312      	movs	r3, #18
 8000e20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e30:	2304      	movs	r3, #4
 8000e32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <HAL_I2C_MspInit+0x25c>)
 8000e3e:	f000 fafd 	bl	800143c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e48:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000e4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_I2C_MspInit+0x244>)
 8000e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	bf00      	nop
 8000e62:	37f8      	adds	r7, #248	@ 0xf8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020400 	.word	0x58020400
 8000e74:	40005800 	.word	0x40005800
 8000e78:	58021400 	.word	0x58021400
 8000e7c:	40005c00 	.word	0x40005c00
 8000e80:	58020800 	.word	0x58020800
 8000e84:	58020000 	.word	0x58020000

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e98:	d117      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <HAL_TIM_Base_MspInit+0x84>)
 8000e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f0c <HAL_TIM_Base_MspInit+0x84>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <HAL_TIM_Base_MspInit+0x84>)
 8000eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	201c      	movs	r0, #28
 8000ebe:	f000 fa88 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec2:	201c      	movs	r0, #28
 8000ec4:	f000 fa9f 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ec8:	e01b      	b.n	8000f02 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_TIM_Base_MspInit+0x88>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d116      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <HAL_TIM_Base_MspInit+0x84>)
 8000ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eda:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <HAL_TIM_Base_MspInit+0x84>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <HAL_TIM_Base_MspInit+0x84>)
 8000ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	201e      	movs	r0, #30
 8000ef8:	f000 fa6b 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000efc:	201e      	movs	r0, #30
 8000efe:	f000 fa82 	bl	8001406 <HAL_NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	40000800 	.word	0x40000800

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6a:	f000 f92b 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <TIM2_IRQHandler+0x10>)
 8000f7a:	f003 f8eb 	bl	8004154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000128 	.word	0x24000128

08000f88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <TIM4_IRQHandler+0x10>)
 8000f8e:	f003 f8e1 	bl	8004154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	24000174 	.word	0x24000174

08000f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b32      	ldr	r3, [pc, #200]	@ (800106c <SystemInit+0xd0>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa6:	4a31      	ldr	r2, [pc, #196]	@ (800106c <SystemInit+0xd0>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001070 <SystemInit+0xd4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	2b06      	cmp	r3, #6
 8000fba:	d807      	bhi.n	8000fcc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <SystemInit+0xd4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f023 030f 	bic.w	r3, r3, #15
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8001070 <SystemInit+0xd4>)
 8000fc6:	f043 0307 	orr.w	r3, r3, #7
 8000fca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <SystemInit+0xd8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a28      	ldr	r2, [pc, #160]	@ (8001074 <SystemInit+0xd8>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <SystemInit+0xd8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fde:	4b25      	ldr	r3, [pc, #148]	@ (8001074 <SystemInit+0xd8>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4924      	ldr	r1, [pc, #144]	@ (8001074 <SystemInit+0xd8>)
 8000fe4:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <SystemInit+0xdc>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <SystemInit+0xd4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <SystemInit+0xd4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 030f 	bic.w	r3, r3, #15
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <SystemInit+0xd4>)
 8001000:	f043 0307 	orr.w	r3, r3, #7
 8001004:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <SystemInit+0xd8>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800100c:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <SystemInit+0xd8>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <SystemInit+0xd8>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <SystemInit+0xd8>)
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <SystemInit+0xe0>)
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <SystemInit+0xd8>)
 8001020:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <SystemInit+0xe4>)
 8001022:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <SystemInit+0xd8>)
 8001026:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <SystemInit+0xe8>)
 8001028:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <SystemInit+0xd8>)
 800102c:	2200      	movs	r2, #0
 800102e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <SystemInit+0xd8>)
 8001032:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <SystemInit+0xe8>)
 8001034:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <SystemInit+0xd8>)
 8001038:	2200      	movs	r2, #0
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <SystemInit+0xd8>)
 800103e:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <SystemInit+0xe8>)
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <SystemInit+0xd8>)
 8001044:	2200      	movs	r2, #0
 8001046:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <SystemInit+0xd8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <SystemInit+0xd8>)
 800104e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001052:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <SystemInit+0xd8>)
 8001056:	2200      	movs	r2, #0
 8001058:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <SystemInit+0xec>)
 800105c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001060:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	52002000 	.word	0x52002000
 8001074:	58024400 	.word	0x58024400
 8001078:	eaf6ed7f 	.word	0xeaf6ed7f
 800107c:	02020200 	.word	0x02020200
 8001080:	01ff0000 	.word	0x01ff0000
 8001084:	01010280 	.word	0x01010280
 8001088:	52004000 	.word	0x52004000

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001090:	f7ff ff84 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	@ (80010d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f003 fc85 	bl	80049c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fa95 	bl	80005ec <main>
  bx  lr
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010cc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010d0:	08004a40 	.word	0x08004a40
  ldr r2, =_sbss
 80010d4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010d8:	24000200 	.word	0x24000200

080010dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC3_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 f968 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010ec:	f001 fa80 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80010f0:	4602      	mov	r2, r0
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_Init+0x68>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	4913      	ldr	r1, [pc, #76]	@ (800114c <HAL_Init+0x6c>)
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <HAL_Init+0x68>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <HAL_Init+0x6c>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_Init+0x70>)
 8001122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <HAL_Init+0x74>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f814 	bl	8001158 <HAL_InitTick>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e002      	b.n	8001140 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800113a:	f7ff fd5b 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58024400 	.word	0x58024400
 800114c:	08004a28 	.word	0x08004a28
 8001150:	24000004 	.word	0x24000004
 8001154:	24000000 	.word	0x24000000

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_InitTick+0x60>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e021      	b.n	80011b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_InitTick+0x64>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <HAL_InitTick+0x60>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f94d 	bl	8001422 <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f917 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <HAL_InitTick+0x68>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2400000c 	.word	0x2400000c
 80011bc:	24000000 	.word	0x24000000
 80011c0:	24000008 	.word	0x24000008

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2400000c 	.word	0x2400000c
 80011e8:	240001fc 	.word	0x240001fc

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	240001fc 	.word	0x240001fc

08001204 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <HAL_GetREVID+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0c1b      	lsrs	r3, r3, #16
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	5c001000 	.word	0x5c001000

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <__NVIC_SetPriorityGrouping+0x40>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	4313      	orrs	r3, r2
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	@ (800125c <__NVIC_SetPriorityGrouping+0x40>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	05fa0000 	.word	0x05fa0000

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	@ (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff40 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff90 	bl	8001310 <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5f 	bl	80012bc <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff33 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa4 	bl	8001378 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800144a:	4b86      	ldr	r3, [pc, #536]	@ (8001664 <HAL_GPIO_Init+0x228>)
 800144c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800144e:	e18c      	b.n	800176a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 817e 	beq.w	8001764 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d005      	beq.n	8001480 <HAL_GPIO_Init+0x44>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d130      	bne.n	80014e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b6:	2201      	movs	r2, #1
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 0201 	and.w	r2, r3, #1
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d017      	beq.n	800151e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d123      	bne.n	8001572 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	08da      	lsrs	r2, r3, #3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3208      	adds	r2, #8
 800156c:	69b9      	ldr	r1, [r7, #24]
 800156e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0203 	and.w	r2, r3, #3
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80d8 	beq.w	8001764 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <HAL_GPIO_Init+0x22c>)
 80015b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001668 <HAL_GPIO_Init+0x22c>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <HAL_GPIO_Init+0x22c>)
 80015c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d2:	4a26      	ldr	r2, [pc, #152]	@ (800166c <HAL_GPIO_Init+0x230>)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001670 <HAL_GPIO_Init+0x234>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d04a      	beq.n	8001694 <HAL_GPIO_Init+0x258>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <HAL_GPIO_Init+0x238>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d02b      	beq.n	800165e <HAL_GPIO_Init+0x222>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a1b      	ldr	r2, [pc, #108]	@ (8001678 <HAL_GPIO_Init+0x23c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d025      	beq.n	800165a <HAL_GPIO_Init+0x21e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a1a      	ldr	r2, [pc, #104]	@ (800167c <HAL_GPIO_Init+0x240>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01f      	beq.n	8001656 <HAL_GPIO_Init+0x21a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_GPIO_Init+0x244>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d019      	beq.n	8001652 <HAL_GPIO_Init+0x216>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a18      	ldr	r2, [pc, #96]	@ (8001684 <HAL_GPIO_Init+0x248>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0x212>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a17      	ldr	r2, [pc, #92]	@ (8001688 <HAL_GPIO_Init+0x24c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00d      	beq.n	800164a <HAL_GPIO_Init+0x20e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a16      	ldr	r2, [pc, #88]	@ (800168c <HAL_GPIO_Init+0x250>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x20a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <HAL_GPIO_Init+0x254>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_GPIO_Init+0x206>
 800163e:	2309      	movs	r3, #9
 8001640:	e029      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 8001642:	230a      	movs	r3, #10
 8001644:	e027      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 8001646:	2307      	movs	r3, #7
 8001648:	e025      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 800164a:	2306      	movs	r3, #6
 800164c:	e023      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 800164e:	2305      	movs	r3, #5
 8001650:	e021      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 8001652:	2304      	movs	r3, #4
 8001654:	e01f      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 8001656:	2303      	movs	r3, #3
 8001658:	e01d      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 800165a:	2302      	movs	r3, #2
 800165c:	e01b      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 800165e:	2301      	movs	r3, #1
 8001660:	e019      	b.n	8001696 <HAL_GPIO_Init+0x25a>
 8001662:	bf00      	nop
 8001664:	58000080 	.word	0x58000080
 8001668:	58024400 	.word	0x58024400
 800166c:	58000400 	.word	0x58000400
 8001670:	58020000 	.word	0x58020000
 8001674:	58020400 	.word	0x58020400
 8001678:	58020800 	.word	0x58020800
 800167c:	58020c00 	.word	0x58020c00
 8001680:	58021000 	.word	0x58021000
 8001684:	58021400 	.word	0x58021400
 8001688:	58021800 	.word	0x58021800
 800168c:	58021c00 	.word	0x58021c00
 8001690:	58022400 	.word	0x58022400
 8001694:	2300      	movs	r3, #0
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	f002 0203 	and.w	r2, r2, #3
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	4093      	lsls	r3, r2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a6:	4938      	ldr	r1, [pc, #224]	@ (8001788 <HAL_GPIO_Init+0x34c>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001708:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	3301      	adds	r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f ae6b 	bne.w	8001450 <HAL_GPIO_Init+0x14>
  }
}
 800177a:	bf00      	nop
 800177c:	bf00      	nop
 800177e:	3724      	adds	r7, #36	@ 0x24
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	58000400 	.word	0x58000400

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4013      	ands	r3, r2
 80017d6:	041a      	lsls	r2, r3, #16
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43d9      	mvns	r1, r3
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	400b      	ands	r3, r1
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	619a      	str	r2, [r3, #24]
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e08b      	b.n	800191e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fa04 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2224      	movs	r2, #36	@ 0x24
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	e006      	b.n	800187c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800187a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d108      	bne.n	8001896 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	e007      	b.n	80018a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <HAL_I2C_Init+0x134>)
 80018b2:	430b      	orrs	r3, r1
 80018b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69d9      	ldr	r1, [r3, #28]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	02008000 	.word	0x02008000

0800192c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b20      	cmp	r3, #32
 8001940:	d138      	bne.n	80019b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800194c:	2302      	movs	r3, #2
 800194e:	e032      	b.n	80019b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2224      	movs	r2, #36	@ 0x24
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800197e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d139      	bne.n	8001a4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e033      	b.n	8001a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2224      	movs	r2, #36	@ 0x24
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a4c:	2302      	movs	r3, #2
  }
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_PWREx_ConfigSupply+0x70>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d00a      	beq.n	8001a86 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a70:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <HAL_PWREx_ConfigSupply+0x70>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e01f      	b.n	8001ac2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e01d      	b.n	8001ac2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_PWREx_ConfigSupply+0x70>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	490f      	ldr	r1, [pc, #60]	@ (8001acc <HAL_PWREx_ConfigSupply+0x70>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a96:	f7ff fba9 	bl	80011ec <HAL_GetTick>
 8001a9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a9c:	e009      	b.n	8001ab2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a9e:	f7ff fba5 	bl	80011ec <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001aac:	d901      	bls.n	8001ab2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e007      	b.n	8001ac2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_PWREx_ConfigSupply+0x70>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001abe:	d1ee      	bne.n	8001a9e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	58024800 	.word	0x58024800

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	@ 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e3c8      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af0:	4b88      	ldr	r3, [pc, #544]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001afa:	4b86      	ldr	r3, [pc, #536]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d007      	beq.n	8001b16 <HAL_RCC_OscConfig+0x46>
 8001b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b08:	2b18      	cmp	r3, #24
 8001b0a:	d110      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
 8001b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d10b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b16:	4b7f      	ldr	r3, [pc, #508]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d06c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x12c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d168      	bne.n	8001bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e3a2      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x76>
 8001b38:	4b76      	ldr	r3, [pc, #472]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a75      	ldr	r2, [pc, #468]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e02e      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x98>
 8001b4e:	4b71      	ldr	r3, [pc, #452]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a70      	ldr	r2, [pc, #448]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a6d      	ldr	r2, [pc, #436]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e01d      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0xbc>
 8001b72:	4b68      	ldr	r3, [pc, #416]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a67      	ldr	r2, [pc, #412]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b65      	ldr	r3, [pc, #404]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a64      	ldr	r2, [pc, #400]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b8c:	4b61      	ldr	r3, [pc, #388]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a60      	ldr	r2, [pc, #384]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b5e      	ldr	r3, [pc, #376]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d013      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fb1e 	bl	80011ec <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fb1a 	bl	80011ec <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	@ 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e356      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc6:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xe4>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fb0a 	bl	80011ec <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fb06 	bl	80011ec <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	@ 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e342      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bee:	4b49      	ldr	r3, [pc, #292]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x10c>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 808c 	beq.w	8001d24 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0c:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c16:	4b3f      	ldr	r3, [pc, #252]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_RCC_OscConfig+0x162>
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2b18      	cmp	r3, #24
 8001c26:	d137      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1c8>
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d132      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c32:	4b38      	ldr	r3, [pc, #224]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x17a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e314      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c4a:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 0219 	bic.w	r2, r3, #25
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	492f      	ldr	r1, [pc, #188]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fac6 	bl	80011ec <HAL_GetTick>
 8001c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff fac2 	bl	80011ec <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e2fe      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c76:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	4920      	ldr	r1, [pc, #128]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c96:	e045      	b.n	8001d24 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d026      	beq.n	8001cee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 0219 	bic.w	r2, r3, #25
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4919      	ldr	r1, [pc, #100]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fa9b 	bl	80011ec <HAL_GetTick>
 8001cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff fa97 	bl	80011ec <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e2d3      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	490b      	ldr	r1, [pc, #44]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
 8001cec:	e01a      	b.n	8001d24 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a08      	ldr	r2, [pc, #32]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fa77 	bl	80011ec <HAL_GetTick>
 8001cfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff fa73 	bl	80011ec <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d903      	bls.n	8001d18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e2af      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
 8001d14:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d18:	4b96      	ldr	r3, [pc, #600]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ee      	bne.n	8001d02 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d06a      	beq.n	8001e06 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d30:	4b90      	ldr	r3, [pc, #576]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d38:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d007      	beq.n	8001d56 <HAL_RCC_OscConfig+0x286>
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b18      	cmp	r3, #24
 8001d4a:	d11b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2b4>
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d116      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d56:	4b87      	ldr	r3, [pc, #540]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_RCC_OscConfig+0x29e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b80      	cmp	r3, #128	@ 0x80
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e282      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d6e:	4b81      	ldr	r3, [pc, #516]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	061b      	lsls	r3, r3, #24
 8001d7c:	497d      	ldr	r1, [pc, #500]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d82:	e040      	b.n	8001e06 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d8c:	4b79      	ldr	r3, [pc, #484]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a78      	ldr	r2, [pc, #480]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fa28 	bl	80011ec <HAL_GetTick>
 8001d9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001da0:	f7ff fa24 	bl	80011ec <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e260      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001db2:	4b70      	ldr	r3, [pc, #448]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	061b      	lsls	r3, r3, #24
 8001dcc:	4969      	ldr	r1, [pc, #420]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60cb      	str	r3, [r1, #12]
 8001dd2:	e018      	b.n	8001e06 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dd4:	4b67      	ldr	r3, [pc, #412]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a66      	ldr	r2, [pc, #408]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fa04 	bl	80011ec <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001de8:	f7ff fa00 	bl	80011ec <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e23c      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d036      	beq.n	8001e80 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b56      	ldr	r3, [pc, #344]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e1e:	4a55      	ldr	r2, [pc, #340]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff f9e1 	bl	80011ec <HAL_GetTick>
 8001e2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f9dd 	bl	80011ec <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e219      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e40:	4b4c      	ldr	r3, [pc, #304]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x35e>
 8001e4c:	e018      	b.n	8001e80 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b49      	ldr	r3, [pc, #292]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e52:	4a48      	ldr	r2, [pc, #288]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f9c7 	bl	80011ec <HAL_GetTick>
 8001e5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e62:	f7ff f9c3 	bl	80011ec <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1ff      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e74:	4b3f      	ldr	r3, [pc, #252]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d036      	beq.n	8001efa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d019      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e94:	4b37      	ldr	r3, [pc, #220]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a36      	ldr	r2, [pc, #216]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001e9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f9a4 	bl	80011ec <HAL_GetTick>
 8001ea4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea8:	f7ff f9a0 	bl	80011ec <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1dc      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001eba:	4b2e      	ldr	r3, [pc, #184]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x3d8>
 8001ec6:	e018      	b.n	8001efa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a29      	ldr	r2, [pc, #164]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001ece:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff f98a 	bl	80011ec <HAL_GetTick>
 8001ed8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001edc:	f7ff f986 	bl	80011ec <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1c2      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8086 	beq.w	8002014 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <HAL_RCC_OscConfig+0x4a8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f78 <HAL_RCC_OscConfig+0x4a8>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f14:	f7ff f96a 	bl	80011ec <HAL_GetTick>
 8001f18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7ff f966 	bl	80011ec <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1a2      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_RCC_OscConfig+0x4a8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d106      	bne.n	8001f50 <HAL_RCC_OscConfig+0x480>
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4e:	e032      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4e6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d111      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4ac>
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5c:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f68:	4a02      	ldr	r2, [pc, #8]	@ (8001f74 <HAL_RCC_OscConfig+0x4a4>)
 8001f6a:	f023 0304 	bic.w	r3, r3, #4
 8001f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f70:	e021      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4e6>
 8001f72:	bf00      	nop
 8001f74:	58024400 	.word	0x58024400
 8001f78:	58024800 	.word	0x58024800
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x4ce>
 8001f84:	4b83      	ldr	r3, [pc, #524]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f88:	4a82      	ldr	r2, [pc, #520]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f90:	4b80      	ldr	r3, [pc, #512]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f94:	4a7f      	ldr	r2, [pc, #508]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4e6>
 8001f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001faa:	4b7a      	ldr	r3, [pc, #488]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fae:	4a79      	ldr	r2, [pc, #484]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f915 	bl	80011ec <HAL_GetTick>
 8001fc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff f911 	bl	80011ec <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e14b      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fdc:	4b6d      	ldr	r3, [pc, #436]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x4f6>
 8001fe8:	e014      	b.n	8002014 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff f8ff 	bl	80011ec <HAL_GetTick>
 8001fee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff f8fb 	bl	80011ec <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e135      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002008:	4b62      	ldr	r3, [pc, #392]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 812a 	beq.w	8002272 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800201e:	4b5d      	ldr	r3, [pc, #372]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002026:	2b18      	cmp	r3, #24
 8002028:	f000 80ba 	beq.w	80021a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	2b02      	cmp	r3, #2
 8002032:	f040 8095 	bne.w	8002160 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b57      	ldr	r3, [pc, #348]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a56      	ldr	r2, [pc, #344]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800203c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff f8d3 	bl	80011ec <HAL_GetTick>
 8002046:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff f8cf 	bl	80011ec <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e10b      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800205c:	4b4d      	ldr	r3, [pc, #308]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002068:	4b4a      	ldr	r3, [pc, #296]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800206a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800206c:	4b4a      	ldr	r3, [pc, #296]	@ (8002198 <HAL_RCC_OscConfig+0x6c8>)
 800206e:	4013      	ands	r3, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	430a      	orrs	r2, r1
 800207c:	4945      	ldr	r1, [pc, #276]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	628b      	str	r3, [r1, #40]	@ 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	3b01      	subs	r3, #1
 8002088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002090:	3b01      	subs	r3, #1
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	b29b      	uxth	r3, r3
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	3b01      	subs	r3, #1
 800209e:	041b      	lsls	r3, r3, #16
 80020a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	3b01      	subs	r3, #1
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020b2:	4938      	ldr	r1, [pc, #224]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020b8:	4b36      	ldr	r3, [pc, #216]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	4a35      	ldr	r2, [pc, #212]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020c4:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020c8:	4b34      	ldr	r3, [pc, #208]	@ (800219c <HAL_RCC_OscConfig+0x6cc>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020d0:	00d2      	lsls	r2, r2, #3
 80020d2:	4930      	ldr	r1, [pc, #192]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	f023 020c 	bic.w	r2, r3, #12
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	492b      	ldr	r1, [pc, #172]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	f023 0202 	bic.w	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4927      	ldr	r1, [pc, #156]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	4a24      	ldr	r2, [pc, #144]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002108:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800210e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002114:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800211a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800211e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002120:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff f858 	bl	80011ec <HAL_GetTick>
 800213c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff f854 	bl	80011ec <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e090      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x670>
 800215e:	e088      	b.n	8002272 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0b      	ldr	r2, [pc, #44]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff f83e 	bl	80011ec <HAL_GetTick>
 8002170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f83a 	bl	80011ec <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e076      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002186:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <HAL_RCC_OscConfig+0x6c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x6a4>
 8002192:	e06e      	b.n	8002272 <HAL_RCC_OscConfig+0x7a2>
 8002194:	58024400 	.word	0x58024400
 8002198:	fffffc0c 	.word	0xfffffc0c
 800219c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021a0:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021a6:	4b35      	ldr	r3, [pc, #212]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d031      	beq.n	8002218 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0203 	and.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d12a      	bne.n	8002218 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d122      	bne.n	8002218 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d11a      	bne.n	8002218 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0a5b      	lsrs	r3, r3, #9
 80021e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d111      	bne.n	8002218 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	0e1b      	lsrs	r3, r3, #24
 800220a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002212:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e02b      	b.n	8002274 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 800221e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002226:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	429a      	cmp	r2, r3
 8002230:	d01f      	beq.n	8002272 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 8002234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002236:	4a11      	ldr	r2, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800223e:	f7fe ffd5 	bl	80011ec <HAL_GetTick>
 8002242:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002244:	bf00      	nop
 8002246:	f7fe ffd1 	bl	80011ec <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	4293      	cmp	r3, r2
 8002250:	d0f9      	beq.n	8002246 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 8002254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_RCC_OscConfig+0x7b0>)
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800225e:	00d2      	lsls	r2, r2, #3
 8002260:	4906      	ldr	r1, [pc, #24]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 8002262:	4313      	orrs	r3, r2
 8002264:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_RCC_OscConfig+0x7ac>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3730      	adds	r7, #48	@ 0x30
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	58024400 	.word	0x58024400
 8002280:	ffff0007 	.word	0xffff0007

08002284 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e19c      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b8a      	ldr	r3, [pc, #552]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d910      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b87      	ldr	r3, [pc, #540]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 020f 	bic.w	r2, r3, #15
 80022ae:	4985      	ldr	r1, [pc, #532]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b83      	ldr	r3, [pc, #524]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e184      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d010      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	4b7b      	ldr	r3, [pc, #492]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d908      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022e4:	4b78      	ldr	r3, [pc, #480]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4975      	ldr	r1, [pc, #468]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d010      	beq.n	8002324 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	4b70      	ldr	r3, [pc, #448]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800230e:	429a      	cmp	r2, r3
 8002310:	d908      	bls.n	8002324 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002312:	4b6d      	ldr	r3, [pc, #436]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	496a      	ldr	r1, [pc, #424]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	4b64      	ldr	r3, [pc, #400]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800233c:	429a      	cmp	r2, r3
 800233e:	d908      	bls.n	8002352 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002340:	4b61      	ldr	r3, [pc, #388]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	495e      	ldr	r1, [pc, #376]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 800234e:	4313      	orrs	r3, r2
 8002350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d010      	beq.n	8002380 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	4b59      	ldr	r3, [pc, #356]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800236a:	429a      	cmp	r2, r3
 800236c:	d908      	bls.n	8002380 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800236e:	4b56      	ldr	r3, [pc, #344]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4953      	ldr	r1, [pc, #332]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 800237c:	4313      	orrs	r3, r2
 800237e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4b4d      	ldr	r3, [pc, #308]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	429a      	cmp	r2, r3
 800239a:	d908      	bls.n	80023ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b4a      	ldr	r3, [pc, #296]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f023 020f 	bic.w	r2, r3, #15
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4947      	ldr	r1, [pc, #284]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d055      	beq.n	8002466 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4940      	ldr	r1, [pc, #256]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d4:	4b3c      	ldr	r3, [pc, #240]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d121      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0f6      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023ec:	4b36      	ldr	r3, [pc, #216]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d115      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0ea      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002404:	4b30      	ldr	r3, [pc, #192]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0de      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002414:	4b2c      	ldr	r3, [pc, #176]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0d6      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002424:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f023 0207 	bic.w	r2, r3, #7
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4925      	ldr	r1, [pc, #148]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002432:	4313      	orrs	r3, r2
 8002434:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002436:	f7fe fed9 	bl	80011ec <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243c:	e00a      	b.n	8002454 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243e:	f7fe fed5 	bl	80011ec <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0be      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002454:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	429a      	cmp	r2, r3
 8002464:	d1eb      	bne.n	800243e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	429a      	cmp	r2, r3
 8002480:	d208      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f023 020f 	bic.w	r2, r3, #15
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	490e      	ldr	r1, [pc, #56]	@ (80024c8 <HAL_RCC_ClockConfig+0x244>)
 8002490:	4313      	orrs	r3, r2
 8002492:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d214      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 020f 	bic.w	r2, r3, #15
 80024aa:	4906      	ldr	r1, [pc, #24]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e086      	b.n	80025d2 <HAL_RCC_ClockConfig+0x34e>
 80024c4:	52002000 	.word	0x52002000
 80024c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d208      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024e8:	4b3c      	ldr	r3, [pc, #240]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4939      	ldr	r1, [pc, #228]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d010      	beq.n	8002528 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	4b34      	ldr	r3, [pc, #208]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002512:	429a      	cmp	r2, r3
 8002514:	d208      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002516:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	492e      	ldr	r1, [pc, #184]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002524:	4313      	orrs	r3, r2
 8002526:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002540:	429a      	cmp	r2, r3
 8002542:	d208      	bcs.n	8002556 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002544:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4922      	ldr	r1, [pc, #136]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002552:	4313      	orrs	r3, r2
 8002554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800256e:	429a      	cmp	r2, r3
 8002570:	d208      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002572:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4917      	ldr	r1, [pc, #92]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 8002580:	4313      	orrs	r3, r2
 8002582:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002584:	f000 f834 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	4912      	ldr	r1, [pc, #72]	@ (80025e0 <HAL_RCC_ClockConfig+0x35c>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025a2:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <HAL_RCC_ClockConfig+0x358>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <HAL_RCC_ClockConfig+0x35c>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <HAL_RCC_ClockConfig+0x360>)
 80025ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025bc:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <HAL_RCC_ClockConfig+0x364>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025c2:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <HAL_RCC_ClockConfig+0x368>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fdc6 	bl	8001158 <HAL_InitTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	58024400 	.word	0x58024400
 80025e0:	08004a28 	.word	0x08004a28
 80025e4:	24000004 	.word	0x24000004
 80025e8:	24000000 	.word	0x24000000
 80025ec:	24000008 	.word	0x24000008

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f6:	4bb3      	ldr	r3, [pc, #716]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025fe:	2b18      	cmp	r3, #24
 8002600:	f200 8155 	bhi.w	80028ae <HAL_RCC_GetSysClockFreq+0x2be>
 8002604:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	08002671 	.word	0x08002671
 8002610:	080028af 	.word	0x080028af
 8002614:	080028af 	.word	0x080028af
 8002618:	080028af 	.word	0x080028af
 800261c:	080028af 	.word	0x080028af
 8002620:	080028af 	.word	0x080028af
 8002624:	080028af 	.word	0x080028af
 8002628:	080028af 	.word	0x080028af
 800262c:	08002697 	.word	0x08002697
 8002630:	080028af 	.word	0x080028af
 8002634:	080028af 	.word	0x080028af
 8002638:	080028af 	.word	0x080028af
 800263c:	080028af 	.word	0x080028af
 8002640:	080028af 	.word	0x080028af
 8002644:	080028af 	.word	0x080028af
 8002648:	080028af 	.word	0x080028af
 800264c:	0800269d 	.word	0x0800269d
 8002650:	080028af 	.word	0x080028af
 8002654:	080028af 	.word	0x080028af
 8002658:	080028af 	.word	0x080028af
 800265c:	080028af 	.word	0x080028af
 8002660:	080028af 	.word	0x080028af
 8002664:	080028af 	.word	0x080028af
 8002668:	080028af 	.word	0x080028af
 800266c:	080026a3 	.word	0x080026a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002670:	4b94      	ldr	r3, [pc, #592]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800267c:	4b91      	ldr	r3, [pc, #580]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	4a90      	ldr	r2, [pc, #576]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800268e:	e111      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002690:	4b8d      	ldr	r3, [pc, #564]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002692:	61bb      	str	r3, [r7, #24]
      break;
 8002694:	e10e      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002696:	4b8d      	ldr	r3, [pc, #564]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002698:	61bb      	str	r3, [r7, #24]
      break;
 800269a:	e10b      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800269c:	4b8c      	ldr	r3, [pc, #560]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800269e:	61bb      	str	r3, [r7, #24]
      break;
 80026a0:	e108      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026a2:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026ac:	4b85      	ldr	r3, [pc, #532]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026b8:	4b82      	ldr	r3, [pc, #520]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026c2:	4b80      	ldr	r3, [pc, #512]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c6:	08db      	lsrs	r3, r3, #3
 80026c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80e1 	beq.w	80028a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	f000 8083 	beq.w	80027f4 <HAL_RCC_GetSysClockFreq+0x204>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f200 80a1 	bhi.w	8002838 <HAL_RCC_GetSysClockFreq+0x248>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x114>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d056      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002702:	e099      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002704:	4b6f      	ldr	r3, [pc, #444]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d02d      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002710:	4b6c      	ldr	r3, [pc, #432]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	4a6b      	ldr	r2, [pc, #428]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800273a:	4b62      	ldr	r3, [pc, #392]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800274a:	ed97 6a02 	vldr	s12, [r7, #8]
 800274e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800275a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800275e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002766:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800276a:	e087      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002776:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80028d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800277a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800277e:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800278e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002792:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800279a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800279e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ae:	e065      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80028dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80027be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c2:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027f2:	e043      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80028e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002816:	ed97 6a02 	vldr	s12, [r7, #8]
 800281a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800281e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800282a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002836:	e021      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80028dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800284a:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800285a:	ed97 6a02 	vldr	s12, [r7, #8]
 800285e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800286a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800286e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800287a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	0a5b      	lsrs	r3, r3, #9
 8002882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002886:	3301      	adds	r3, #1
 8002888:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	ee07 3a90 	vmov	s15, r3
 8002890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002894:	edd7 6a07 	vldr	s13, [r7, #28]
 8002898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a0:	ee17 3a90 	vmov	r3, s15
 80028a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028a6:	e005      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
      break;
 80028ac:	e002      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028b0:	61bb      	str	r3, [r7, #24]
      break;
 80028b2:	bf00      	nop
  }

  return sysclockfreq;
 80028b4:	69bb      	ldr	r3, [r7, #24]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	58024400 	.word	0x58024400
 80028c8:	03d09000 	.word	0x03d09000
 80028cc:	003d0900 	.word	0x003d0900
 80028d0:	007a1200 	.word	0x007a1200
 80028d4:	46000000 	.word	0x46000000
 80028d8:	4c742400 	.word	0x4c742400
 80028dc:	4a742400 	.word	0x4a742400
 80028e0:	4af42400 	.word	0x4af42400

080028e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e8:	b0c6      	sub	sp, #280	@ 0x118
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002908:	2500      	movs	r5, #0
 800290a:	ea54 0305 	orrs.w	r3, r4, r5
 800290e:	d049      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002914:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002916:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800291a:	d02f      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800291c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002920:	d828      	bhi.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002926:	d01a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002928:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800292c:	d822      	bhi.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002936:	d007      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002938:	e01c      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293a:	4bab      	ldr	r3, [pc, #684]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	4aaa      	ldr	r2, [pc, #680]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002946:	e01a      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800294c:	3308      	adds	r3, #8
 800294e:	2102      	movs	r1, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f001 f9bd 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800295c:	e00f      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800295e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002962:	3328      	adds	r3, #40	@ 0x28
 8002964:	2102      	movs	r1, #2
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fa64 	bl	8003e34 <RCCEx_PLL3_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002972:	e004      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800297a:	e000      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800297c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002986:	4b98      	ldr	r3, [pc, #608]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800298e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002994:	4a94      	ldr	r2, [pc, #592]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002996:	430b      	orrs	r3, r1
 8002998:	6513      	str	r3, [r2, #80]	@ 0x50
 800299a:	e003      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80029a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80029b0:	f04f 0900 	mov.w	r9, #0
 80029b4:	ea58 0309 	orrs.w	r3, r8, r9
 80029b8:	d047      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80029ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d82a      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80029c4:	a201      	add	r2, pc, #4	@ (adr r2, 80029cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029e1 	.word	0x080029e1
 80029d0:	080029ef 	.word	0x080029ef
 80029d4:	08002a05 	.word	0x08002a05
 80029d8:	08002a23 	.word	0x08002a23
 80029dc:	08002a23 	.word	0x08002a23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e0:	4b81      	ldr	r3, [pc, #516]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e4:	4a80      	ldr	r2, [pc, #512]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029ec:	e01a      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029f2:	3308      	adds	r3, #8
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f96a 	bl	8003cd0 <RCCEx_PLL2_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a02:	e00f      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a08:	3328      	adds	r3, #40	@ 0x28
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f001 fa11 	bl	8003e34 <RCCEx_PLL3_Config>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a18:	e004      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a20:	e000      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a2c:	4b6e      	ldr	r3, [pc, #440]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a30:	f023 0107 	bic.w	r1, r3, #7
 8002a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	4a6b      	ldr	r2, [pc, #428]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a40:	e003      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002a56:	f04f 0b00 	mov.w	fp, #0
 8002a5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a5e:	d05b      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a68:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002a6c:	d03b      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002a6e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002a72:	d834      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a78:	d037      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002a7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a7e:	d82e      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a84:	d033      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002a86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a8a:	d828      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a90:	d01a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a96:	d822      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002a9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aa0:	d007      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002aa2:	e01c      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa4:	4b50      	ldr	r3, [pc, #320]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ab0:	e01e      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 f908 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ac6:	e013      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002acc:	3328      	adds	r3, #40	@ 0x28
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 f9af 	bl	8003e34 <RCCEx_PLL3_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002adc:	e008      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ae4:	e004      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002af8:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b08:	4a37      	ldr	r2, [pc, #220]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0e:	e003      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002b2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002b32:	460b      	mov	r3, r1
 8002b34:	4313      	orrs	r3, r2
 8002b36:	d05d      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b40:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002b44:	d03b      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002b46:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002b4a:	d834      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b50:	d037      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002b52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b56:	d82e      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b5c:	d033      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002b5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b62:	d828      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b68:	d01a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b6e:	d822      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b78:	d007      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b7a:	e01c      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b88:	e01e      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b8e:	3308      	adds	r3, #8
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 f89c 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ba4:	3328      	adds	r3, #40	@ 0x28
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 f943 	bl	8003e34 <RCCEx_PLL3_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002bbc:	e004      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002be0:	4a01      	ldr	r2, [pc, #4]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be6:	e005      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002c00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c0a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4313      	orrs	r3, r2
 8002c12:	d03a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	2b30      	cmp	r3, #48	@ 0x30
 8002c1c:	d01f      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002c1e:	2b30      	cmp	r3, #48	@ 0x30
 8002c20:	d819      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d00c      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d815      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d019      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d111      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c32:	4baa      	ldr	r3, [pc, #680]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	4aa9      	ldr	r2, [pc, #676]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002c3e:	e011      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c44:	3308      	adds	r3, #8
 8002c46:	2102      	movs	r1, #2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 f841 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002c54:	e006      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c5c:	e002      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c6c:	4b9b      	ldr	r3, [pc, #620]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7a:	4a98      	ldr	r2, [pc, #608]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c80:	e003      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ca0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	d051      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cb4:	d035      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cba:	d82e      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002cbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cc0:	d031      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002cc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cc6:	d828      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ccc:	d01a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd2:	d822      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cdc:	d007      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002cde:	e01c      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	4a7d      	ldr	r2, [pc, #500]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cec:	e01c      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 ffea 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d02:	e011      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d08:	3328      	adds	r3, #40	@ 0x28
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 f891 	bl	8003e34 <RCCEx_PLL3_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d18:	e006      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d20:	e002      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d30:	4b6a      	ldr	r3, [pc, #424]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	4a67      	ldr	r2, [pc, #412]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d44:	e003      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	d053      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d78:	d033      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002d7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d7e:	d82c      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d84:	d02f      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002d86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d8a:	d826      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d90:	d02b      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002d92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d96:	d820      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d9c:	d012      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002da2:	d81a      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d022      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dac:	d115      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002db2:	3308      	adds	r3, #8
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 ff8a 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dc2:	e015      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dc8:	3328      	adds	r3, #40	@ 0x28
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 f831 	bl	8003e34 <RCCEx_PLL3_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002de0:	e006      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002de2:	bf00      	nop
 8002de4:	e004      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002de6:	bf00      	nop
 8002de8:	e002      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002dea:	bf00      	nop
 8002dec:	e000      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002df8:	4b38      	ldr	r3, [pc, #224]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dfc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e06:	4a35      	ldr	r2, [pc, #212]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e0c:	e003      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002e2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e30:	460b      	mov	r3, r1
 8002e32:	4313      	orrs	r3, r2
 8002e34:	d058      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e42:	d033      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e48:	d82c      	bhi.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4e:	d02f      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e54:	d826      	bhi.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e5a:	d02b      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002e5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e60:	d820      	bhi.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e66:	d012      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e6c:	d81a      	bhi.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d022      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e76:	d115      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 ff25 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e8c:	e015      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e92:	3328      	adds	r3, #40	@ 0x28
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 ffcc 	bl	8003e34 <RCCEx_PLL3_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ea2:	e00a      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002eaa:	e006      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002eac:	bf00      	nop
 8002eae:	e004      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002eb0:	bf00      	nop
 8002eb2:	e002      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ed2:	4a02      	ldr	r2, [pc, #8]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002eda:	bf00      	nop
 8002edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002efe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	d037      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f12:	d00e      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f18:	d816      	bhi.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d018      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f22:	d111      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f24:	4bc4      	ldr	r3, [pc, #784]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	4ac3      	ldr	r2, [pc, #780]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f30:	e00f      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f36:	3308      	adds	r3, #8
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fec8 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f46:	e004      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f4e:	e000      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f5a:	4bb7      	ldr	r3, [pc, #732]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f68:	4ab3      	ldr	r2, [pc, #716]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f6e:	e003      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002f92:	460b      	mov	r3, r1
 8002f94:	4313      	orrs	r3, r2
 8002f96:	d039      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d81c      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fe5 	.word	0x08002fe5
 8002fac:	08002fb9 	.word	0x08002fb9
 8002fb0:	08002fc7 	.word	0x08002fc7
 8002fb4:	08002fe5 	.word	0x08002fe5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb8:	4b9f      	ldr	r3, [pc, #636]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	4a9e      	ldr	r2, [pc, #632]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fc4:	e00f      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fca:	3308      	adds	r3, #8
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fe7e 	bl	8003cd0 <RCCEx_PLL2_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fda:	e004      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fee:	4b92      	ldr	r3, [pc, #584]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff2:	f023 0103 	bic.w	r1, r3, #3
 8002ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffc:	4a8e      	ldr	r2, [pc, #568]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ffe:	430b      	orrs	r3, r1
 8003000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003002:	e003      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003008:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800300c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003026:	460b      	mov	r3, r1
 8003028:	4313      	orrs	r3, r2
 800302a:	f000 8099 	beq.w	8003160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302e:	4b83      	ldr	r3, [pc, #524]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a82      	ldr	r2, [pc, #520]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800303a:	f7fe f8d7 	bl	80011ec <HAL_GetTick>
 800303e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003042:	e00b      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003044:	f7fe f8d2 	bl	80011ec <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b64      	cmp	r3, #100	@ 0x64
 8003052:	d903      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800305a:	e005      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800305c:	4b77      	ldr	r3, [pc, #476]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ed      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800306c:	2b00      	cmp	r3, #0
 800306e:	d173      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003070:	4b71      	ldr	r3, [pc, #452]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003072:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003078:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800307c:	4053      	eors	r3, r2
 800307e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003082:	2b00      	cmp	r3, #0
 8003084:	d015      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003086:	4b6c      	ldr	r3, [pc, #432]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800308e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003092:	4b69      	ldr	r3, [pc, #420]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	4a68      	ldr	r2, [pc, #416]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800309e:	4b66      	ldr	r3, [pc, #408]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a2:	4a65      	ldr	r2, [pc, #404]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80030aa:	4a63      	ldr	r2, [pc, #396]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80030b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030be:	d118      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe f894 	bl	80011ec <HAL_GetTick>
 80030c4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030c8:	e00d      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe f88f 	bl	80011ec <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030d4:	1ad2      	subs	r2, r2, r3
 80030d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030da:	429a      	cmp	r2, r3
 80030dc:	d903      	bls.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80030e4:	e005      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030e6:	4b54      	ldr	r3, [pc, #336]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0eb      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80030f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d129      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800310a:	d10e      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800310c:	4b4a      	ldr	r3, [pc, #296]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003118:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800311c:	091a      	lsrs	r2, r3, #4
 800311e:	4b48      	ldr	r3, [pc, #288]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003120:	4013      	ands	r3, r2
 8003122:	4a45      	ldr	r2, [pc, #276]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003124:	430b      	orrs	r3, r1
 8003126:	6113      	str	r3, [r2, #16]
 8003128:	e005      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800312a:	4b43      	ldr	r3, [pc, #268]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	4a42      	ldr	r2, [pc, #264]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003130:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003134:	6113      	str	r3, [r2, #16]
 8003136:	4b40      	ldr	r3, [pc, #256]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003138:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800313a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800313e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	4a3c      	ldr	r2, [pc, #240]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003148:	430b      	orrs	r3, r1
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
 800314c:	e008      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800314e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003152:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003156:	e003      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800315c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f002 0301 	and.w	r3, r2, #1
 800316c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003176:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800317a:	460b      	mov	r3, r1
 800317c:	4313      	orrs	r3, r2
 800317e:	f000 808f 	beq.w	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003188:	2b28      	cmp	r3, #40	@ 0x28
 800318a:	d871      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800318c:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	08003279 	.word	0x08003279
 8003198:	08003271 	.word	0x08003271
 800319c:	08003271 	.word	0x08003271
 80031a0:	08003271 	.word	0x08003271
 80031a4:	08003271 	.word	0x08003271
 80031a8:	08003271 	.word	0x08003271
 80031ac:	08003271 	.word	0x08003271
 80031b0:	08003271 	.word	0x08003271
 80031b4:	08003245 	.word	0x08003245
 80031b8:	08003271 	.word	0x08003271
 80031bc:	08003271 	.word	0x08003271
 80031c0:	08003271 	.word	0x08003271
 80031c4:	08003271 	.word	0x08003271
 80031c8:	08003271 	.word	0x08003271
 80031cc:	08003271 	.word	0x08003271
 80031d0:	08003271 	.word	0x08003271
 80031d4:	0800325b 	.word	0x0800325b
 80031d8:	08003271 	.word	0x08003271
 80031dc:	08003271 	.word	0x08003271
 80031e0:	08003271 	.word	0x08003271
 80031e4:	08003271 	.word	0x08003271
 80031e8:	08003271 	.word	0x08003271
 80031ec:	08003271 	.word	0x08003271
 80031f0:	08003271 	.word	0x08003271
 80031f4:	08003279 	.word	0x08003279
 80031f8:	08003271 	.word	0x08003271
 80031fc:	08003271 	.word	0x08003271
 8003200:	08003271 	.word	0x08003271
 8003204:	08003271 	.word	0x08003271
 8003208:	08003271 	.word	0x08003271
 800320c:	08003271 	.word	0x08003271
 8003210:	08003271 	.word	0x08003271
 8003214:	08003279 	.word	0x08003279
 8003218:	08003271 	.word	0x08003271
 800321c:	08003271 	.word	0x08003271
 8003220:	08003271 	.word	0x08003271
 8003224:	08003271 	.word	0x08003271
 8003228:	08003271 	.word	0x08003271
 800322c:	08003271 	.word	0x08003271
 8003230:	08003271 	.word	0x08003271
 8003234:	08003279 	.word	0x08003279
 8003238:	58024400 	.word	0x58024400
 800323c:	58024800 	.word	0x58024800
 8003240:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003248:	3308      	adds	r3, #8
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fd3f 	bl	8003cd0 <RCCEx_PLL2_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003258:	e00f      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800325a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325e:	3328      	adds	r3, #40	@ 0x28
 8003260:	2101      	movs	r1, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fde6 	bl	8003e34 <RCCEx_PLL3_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800326e:	e004      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003282:	4bbf      	ldr	r3, [pc, #764]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800328a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800328e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003290:	4abb      	ldr	r2, [pc, #748]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003292:	430b      	orrs	r3, r1
 8003294:	6553      	str	r3, [r2, #84]	@ 0x54
 8003296:	e003      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800329c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f002 0302 	and.w	r3, r2, #2
 80032ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4313      	orrs	r3, r2
 80032be:	d041      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80032c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d824      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80032ca:	a201      	add	r2, pc, #4	@ (adr r2, 80032d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	0800331d 	.word	0x0800331d
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032ff 	.word	0x080032ff
 80032dc:	0800331d 	.word	0x0800331d
 80032e0:	0800331d 	.word	0x0800331d
 80032e4:	0800331d 	.word	0x0800331d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ec:	3308      	adds	r3, #8
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fced 	bl	8003cd0 <RCCEx_PLL2_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032fc:	e00f      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003302:	3328      	adds	r3, #40	@ 0x28
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fd94 	bl	8003e34 <RCCEx_PLL3_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003312:	e004      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800331c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003326:	4b96      	ldr	r3, [pc, #600]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332a:	f023 0107 	bic.w	r1, r3, #7
 800332e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003334:	4a92      	ldr	r2, [pc, #584]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003336:	430b      	orrs	r3, r1
 8003338:	6553      	str	r3, [r2, #84]	@ 0x54
 800333a:	e003      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f002 0304 	and.w	r3, r2, #4
 8003350:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800335a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	d044      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336c:	2b05      	cmp	r3, #5
 800336e:	d825      	bhi.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003370:	a201      	add	r2, pc, #4	@ (adr r2, 8003378 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	080033c5 	.word	0x080033c5
 800337c:	08003391 	.word	0x08003391
 8003380:	080033a7 	.word	0x080033a7
 8003384:	080033c5 	.word	0x080033c5
 8003388:	080033c5 	.word	0x080033c5
 800338c:	080033c5 	.word	0x080033c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003394:	3308      	adds	r3, #8
 8003396:	2101      	movs	r1, #1
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fc99 	bl	8003cd0 <RCCEx_PLL2_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033a4:	e00f      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033aa:	3328      	adds	r3, #40	@ 0x28
 80033ac:	2101      	movs	r1, #1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fd40 	bl	8003e34 <RCCEx_PLL3_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033ba:	e004      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80033c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	f023 0107 	bic.w	r1, r3, #7
 80033d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	4a68      	ldr	r2, [pc, #416]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f002 0320 	and.w	r3, r2, #32
 80033fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003404:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003408:	460b      	mov	r3, r1
 800340a:	4313      	orrs	r3, r2
 800340c:	d055      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800341a:	d033      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003420:	d82c      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d02f      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342c:	d826      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800342e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003432:	d02b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003434:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003438:	d820      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800343a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800343e:	d012      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003444:	d81a      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d022      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800344a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800344e:	d115      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003454:	3308      	adds	r3, #8
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fc39 	bl	8003cd0 <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003464:	e015      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346a:	3328      	adds	r3, #40	@ 0x28
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fce0 	bl	8003e34 <RCCEx_PLL3_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800347a:	e00a      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003482:	e006      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003484:	bf00      	nop
 8003486:	e004      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003488:	bf00      	nop
 800348a:	e002      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800349a:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800349c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034aa:	4a35      	ldr	r2, [pc, #212]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80034c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80034d4:	460b      	mov	r3, r1
 80034d6:	4313      	orrs	r3, r2
 80034d8:	d058      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80034da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034e6:	d033      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80034e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034ec:	d82c      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f2:	d02f      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f8:	d826      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80034fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034fe:	d02b      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003500:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003504:	d820      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800350a:	d012      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800350c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003510:	d81a      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d022      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351a:	d115      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800351c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003520:	3308      	adds	r3, #8
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fbd3 	bl	8003cd0 <RCCEx_PLL2_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003530:	e015      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003536:	3328      	adds	r3, #40	@ 0x28
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fc7a 	bl	8003e34 <RCCEx_PLL3_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003546:	e00a      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800354e:	e006      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003550:	bf00      	nop
 8003552:	e004      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003554:	bf00      	nop
 8003556:	e002      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800355c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10e      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800356e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003572:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003576:	4a02      	ldr	r2, [pc, #8]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6593      	str	r3, [r2, #88]	@ 0x58
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800357e:	bf00      	nop
 8003580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003588:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800358c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003598:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80035a6:	460b      	mov	r3, r1
 80035a8:	4313      	orrs	r3, r2
 80035aa:	d055      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80035ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035b8:	d033      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80035ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035be:	d82c      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80035c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c4:	d02f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80035c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ca:	d826      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80035cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035d0:	d02b      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80035d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035d6:	d820      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80035d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035dc:	d012      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80035de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035e2:	d81a      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ec:	d115      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f2:	3308      	adds	r3, #8
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fb6a 	bl	8003cd0 <RCCEx_PLL2_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003602:	e015      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003608:	3328      	adds	r3, #40	@ 0x28
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fc11 	bl	8003e34 <RCCEx_PLL3_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003618:	e00a      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003620:	e006      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003622:	bf00      	nop
 8003624:	e004      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003626:	bf00      	nop
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003638:	4ba0      	ldr	r3, [pc, #640]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003644:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003648:	4a9c      	ldr	r2, [pc, #624]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800364a:	430b      	orrs	r3, r1
 800364c:	6593      	str	r3, [r2, #88]	@ 0x58
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003654:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f002 0308 	and.w	r3, r2, #8
 8003664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800366e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	d01e      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368a:	3328      	adds	r3, #40	@ 0x28
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fbd0 	bl	8003e34 <RCCEx_PLL3_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80036a0:	4b86      	ldr	r3, [pc, #536]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036b0:	4a82      	ldr	r2, [pc, #520]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036b2:	430b      	orrs	r3, r1
 80036b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f002 0310 	and.w	r3, r2, #16
 80036c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80036d0:	460b      	mov	r3, r1
 80036d2:	4313      	orrs	r3, r2
 80036d4:	d01e      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80036d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e2:	d10c      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e8:	3328      	adds	r3, #40	@ 0x28
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fba1 	bl	8003e34 <RCCEx_PLL3_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036fe:	4b6f      	ldr	r3, [pc, #444]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370e:	4a6b      	ldr	r2, [pc, #428]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003710:	430b      	orrs	r3, r1
 8003712:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003720:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003722:	2300      	movs	r3, #0
 8003724:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003726:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800372a:	460b      	mov	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	d03e      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800373c:	d022      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800373e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003742:	d81b      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374c:	d00b      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800374e:	e015      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003754:	3308      	adds	r3, #8
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fab9 	bl	8003cd0 <RCCEx_PLL2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003764:	e00f      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800376a:	3328      	adds	r3, #40	@ 0x28
 800376c:	2102      	movs	r1, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fb60 	bl	8003e34 <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800377a:	e004      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003782:	e000      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800378e:	4b4b      	ldr	r3, [pc, #300]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800379a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800379e:	4a47      	ldr	r2, [pc, #284]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80037ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80037bc:	2300      	movs	r3, #0
 80037be:	677b      	str	r3, [r7, #116]	@ 0x74
 80037c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80037c4:	460b      	mov	r3, r1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	d03b      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80037ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037d6:	d01f      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80037d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037dc:	d818      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80037de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037e2:	d003      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80037e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e8:	d007      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80037ea:	e011      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ec:	4b33      	ldr	r3, [pc, #204]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	4a32      	ldr	r2, [pc, #200]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037f8:	e00f      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037fe:	3328      	adds	r3, #40	@ 0x28
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fb16 	bl	8003e34 <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800380e:	e004      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003816:	e000      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800381a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003822:	4b26      	ldr	r3, [pc, #152]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800382a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003832:	4a22      	ldr	r2, [pc, #136]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003834:	430b      	orrs	r3, r1
 8003836:	6553      	str	r3, [r2, #84]	@ 0x54
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800383e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800384e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003850:	2300      	movs	r3, #0
 8003852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003854:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003858:	460b      	mov	r3, r1
 800385a:	4313      	orrs	r3, r2
 800385c:	d034      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800385e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386c:	d007      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800386e:	e011      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003870:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	4a11      	ldr	r2, [pc, #68]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800387c:	e00e      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800387e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003882:	3308      	adds	r3, #8
 8003884:	2102      	movs	r1, #2
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fa22 	bl	8003cd0 <RCCEx_PLL2_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003892:	e003      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800389a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80038a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b2:	4a02      	ldr	r2, [pc, #8]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80038ba:	bf00      	nop
 80038bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80038d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80038d6:	2300      	movs	r3, #0
 80038d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80038da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80038de:	460b      	mov	r3, r1
 80038e0:	4313      	orrs	r3, r2
 80038e2:	d00c      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e8:	3328      	adds	r3, #40	@ 0x28
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 faa1 	bl	8003e34 <RCCEx_PLL3_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800390a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800390c:	2300      	movs	r3, #0
 800390e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003910:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003914:	460b      	mov	r3, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	d036      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003924:	d018      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800392a:	d811      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800392c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003930:	d014      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003936:	d80b      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d011      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800393c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003940:	d106      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003942:	4bb7      	ldr	r3, [pc, #732]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	4ab6      	ldr	r2, [pc, #728]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800394e:	e008      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003956:	e004      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003958:	bf00      	nop
 800395a:	e002      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800396a:	4bad      	ldr	r3, [pc, #692]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003978:	4aa9      	ldr	r2, [pc, #676]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800397a:	430b      	orrs	r3, r1
 800397c:	6553      	str	r3, [r2, #84]	@ 0x54
 800397e:	e003      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003984:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003994:	653b      	str	r3, [r7, #80]	@ 0x50
 8003996:	2300      	movs	r3, #0
 8003998:	657b      	str	r3, [r7, #84]	@ 0x54
 800399a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800399e:	460b      	mov	r3, r1
 80039a0:	4313      	orrs	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039a4:	4b9e      	ldr	r3, [pc, #632]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80039ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	4a9b      	ldr	r2, [pc, #620]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c6:	2300      	movs	r3, #0
 80039c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039ce:	460b      	mov	r3, r1
 80039d0:	4313      	orrs	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039d4:	4b92      	ldr	r3, [pc, #584]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80039dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039e2:	4a8f      	ldr	r2, [pc, #572]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80039f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039f6:	2300      	movs	r3, #0
 80039f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80039fe:	460b      	mov	r3, r1
 8003a00:	4313      	orrs	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a04:	4b86      	ldr	r3, [pc, #536]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	4a85      	ldr	r2, [pc, #532]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a0e:	6113      	str	r3, [r2, #16]
 8003a10:	4b83      	ldr	r3, [pc, #524]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a12:	6919      	ldr	r1, [r3, #16]
 8003a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a1c:	4a80      	ldr	r2, [pc, #512]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a30:	2300      	movs	r3, #0
 8003a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a3e:	4b78      	ldr	r3, [pc, #480]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	4a74      	ldr	r2, [pc, #464]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a60:	2300      	movs	r3, #0
 8003a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a72:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7e:	4a68      	ldr	r2, [pc, #416]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	d011      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f911 	bl	8003cd0 <RCCEx_PLL2_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ac0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	2100      	movs	r1, #0
 8003ace:	6239      	str	r1, [r7, #32]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d011      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f8f1 	bl	8003cd0 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	61b9      	str	r1, [r7, #24]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d011      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b24:	3308      	adds	r3, #8
 8003b26:	2102      	movs	r1, #2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f8d1 	bl	8003cd0 <RCCEx_PLL2_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	6139      	str	r1, [r7, #16]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	d011      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b64:	3328      	adds	r3, #40	@ 0x28
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f963 	bl	8003e34 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d011      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba4:	3328      	adds	r3, #40	@ 0x28
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f943 	bl	8003e34 <RCCEx_PLL3_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	2100      	movs	r1, #0
 8003bce:	6039      	str	r1, [r7, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	d011      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be4:	3328      	adds	r3, #40	@ 0x28
 8003be6:	2102      	movs	r1, #2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f923 	bl	8003e34 <RCCEx_PLL3_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003c04:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1e:	bf00      	nop
 8003c20:	58024400 	.word	0x58024400

08003c24 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8003c2c:	4b26      	ldr	r3, [pc, #152]	@ (8003cc8 <HAL_RCCEx_CRSConfig+0xa4>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c32:	4a25      	ldr	r2, [pc, #148]	@ (8003cc8 <HAL_RCCEx_CRSConfig+0xa4>)
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8003c3c:	4b22      	ldr	r3, [pc, #136]	@ (8003cc8 <HAL_RCCEx_CRSConfig+0xa4>)
 8003c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c42:	4a21      	ldr	r2, [pc, #132]	@ (8003cc8 <HAL_RCCEx_CRSConfig+0xa4>)
 8003c44:	f023 0302 	bic.w	r3, r3, #2
 8003c48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8003c4c:	f7fd fada 	bl	8001204 <HAL_GetREVID>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d80b      	bhi.n	8003c72 <HAL_RCCEx_CRSConfig+0x4e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c62:	d106      	bne.n	8003c72 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e008      	b.n	8003c84 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ccc <HAL_RCCEx_CRSConfig+0xa8>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <HAL_RCCEx_CRSConfig+0xa8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	4907      	ldr	r1, [pc, #28]	@ (8003ccc <HAL_RCCEx_CRSConfig+0xa8>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <HAL_RCCEx_CRSConfig+0xa8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a04      	ldr	r2, [pc, #16]	@ (8003ccc <HAL_RCCEx_CRSConfig+0xa8>)
 8003cba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	40008400 	.word	0x40008400

08003cd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cde:	4b53      	ldr	r3, [pc, #332]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d101      	bne.n	8003cee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e099      	b.n	8003e22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cee:	4b4f      	ldr	r3, [pc, #316]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4e      	ldr	r2, [pc, #312]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fd fa77 	bl	80011ec <HAL_GetTick>
 8003cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d02:	f7fd fa73 	bl	80011ec <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e086      	b.n	8003e22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d14:	4b45      	ldr	r3, [pc, #276]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d20:	4b42      	ldr	r3, [pc, #264]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	031b      	lsls	r3, r3, #12
 8003d2e:	493f      	ldr	r1, [pc, #252]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	025b      	lsls	r3, r3, #9
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	061b      	lsls	r3, r3, #24
 8003d60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d64:	4931      	ldr	r1, [pc, #196]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d6a:	4b30      	ldr	r3, [pc, #192]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	492d      	ldr	r1, [pc, #180]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	f023 0220 	bic.w	r2, r3, #32
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	4928      	ldr	r1, [pc, #160]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d8e:	4b27      	ldr	r3, [pc, #156]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	4a26      	ldr	r2, [pc, #152]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d94:	f023 0310 	bic.w	r3, r3, #16
 8003d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d9a:	4b24      	ldr	r3, [pc, #144]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d9e:	4b24      	ldr	r3, [pc, #144]	@ (8003e30 <RCCEx_PLL2_Config+0x160>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	69d2      	ldr	r2, [r2, #28]
 8003da6:	00d2      	lsls	r2, r2, #3
 8003da8:	4920      	ldr	r1, [pc, #128]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dae:	4b1f      	ldr	r3, [pc, #124]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003db4:	f043 0310 	orr.w	r3, r3, #16
 8003db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	4a19      	ldr	r2, [pc, #100]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003dc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003dcc:	e00f      	b.n	8003dee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003dd4:	4b15      	ldr	r3, [pc, #84]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	4a14      	ldr	r2, [pc, #80]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003de0:	e005      	b.n	8003dee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de6:	4a11      	ldr	r2, [pc, #68]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003de8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003dec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dee:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003df4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfa:	f7fd f9f7 	bl	80011ec <HAL_GetTick>
 8003dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e00:	e008      	b.n	8003e14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e02:	f7fd f9f3 	bl	80011ec <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e006      	b.n	8003e22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <RCCEx_PLL2_Config+0x15c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	ffff0007 	.word	0xffff0007

08003e34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e42:	4b53      	ldr	r3, [pc, #332]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d101      	bne.n	8003e52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e099      	b.n	8003f86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e52:	4b4f      	ldr	r3, [pc, #316]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a4e      	ldr	r2, [pc, #312]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e5e:	f7fd f9c5 	bl	80011ec <HAL_GetTick>
 8003e62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e64:	e008      	b.n	8003e78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e66:	f7fd f9c1 	bl	80011ec <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e086      	b.n	8003f86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e78:	4b45      	ldr	r3, [pc, #276]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e84:	4b42      	ldr	r3, [pc, #264]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	051b      	lsls	r3, r3, #20
 8003e92:	493f      	ldr	r1, [pc, #252]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	025b      	lsls	r3, r3, #9
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ec8:	4931      	ldr	r1, [pc, #196]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ece:	4b30      	ldr	r3, [pc, #192]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	492d      	ldr	r1, [pc, #180]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	4928      	ldr	r1, [pc, #160]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ef2:	4b27      	ldr	r3, [pc, #156]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef6:	4a26      	ldr	r2, [pc, #152]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003efe:	4b24      	ldr	r3, [pc, #144]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <RCCEx_PLL3_Config+0x160>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	69d2      	ldr	r2, [r2, #28]
 8003f0a:	00d2      	lsls	r2, r2, #3
 8003f0c:	4920      	ldr	r1, [pc, #128]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f12:	4b1f      	ldr	r3, [pc, #124]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	4a1e      	ldr	r2, [pc, #120]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f24:	4b1a      	ldr	r3, [pc, #104]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	4a19      	ldr	r2, [pc, #100]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f30:	e00f      	b.n	8003f52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d106      	bne.n	8003f46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f38:	4b15      	ldr	r3, [pc, #84]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	4a14      	ldr	r2, [pc, #80]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f44:	e005      	b.n	8003f52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f46:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	4a11      	ldr	r2, [pc, #68]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f52:	4b0f      	ldr	r3, [pc, #60]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a0e      	ldr	r2, [pc, #56]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5e:	f7fd f945 	bl	80011ec <HAL_GetTick>
 8003f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f64:	e008      	b.n	8003f78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f66:	f7fd f941 	bl	80011ec <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e006      	b.n	8003f86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <RCCEx_PLL3_Config+0x15c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	58024400 	.word	0x58024400
 8003f94:	ffff0007 	.word	0xffff0007

08003f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e049      	b.n	800403e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc ff62 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f000 fae4 	bl	80045a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e05e      	b.n	800411e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2b      	ldr	r2, [pc, #172]	@ (800412c <HAL_TIM_Base_Start_IT+0xe4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408a:	d027      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a27      	ldr	r2, [pc, #156]	@ (8004130 <HAL_TIM_Base_Start_IT+0xe8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a26      	ldr	r2, [pc, #152]	@ (8004134 <HAL_TIM_Base_Start_IT+0xec>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01d      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a24      	ldr	r2, [pc, #144]	@ (8004138 <HAL_TIM_Base_Start_IT+0xf0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_TIM_Base_Start_IT+0xf4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a21      	ldr	r2, [pc, #132]	@ (8004140 <HAL_TIM_Base_Start_IT+0xf8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a20      	ldr	r2, [pc, #128]	@ (8004144 <HAL_TIM_Base_Start_IT+0xfc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004148 <HAL_TIM_Base_Start_IT+0x100>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x94>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1d      	ldr	r2, [pc, #116]	@ (800414c <HAL_TIM_Base_Start_IT+0x104>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d115      	bne.n	8004108 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <HAL_TIM_Base_Start_IT+0x108>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d015      	beq.n	800411a <HAL_TIM_Base_Start_IT+0xd2>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f4:	d011      	beq.n	800411a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	e008      	b.n	800411a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e000      	b.n	800411c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40010400 	.word	0x40010400
 8004140:	40001800 	.word	0x40001800
 8004144:	40014000 	.word	0x40014000
 8004148:	4000e000 	.word	0x4000e000
 800414c:	4000e400 	.word	0x4000e400
 8004150:	00010007 	.word	0x00010007

08004154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d020      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0202 	mvn.w	r2, #2
 8004188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9e2 	bl	8004568 <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9d4 	bl	8004554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f9e5 	bl	800457c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0204 	mvn.w	r2, #4
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9bc 	bl	8004568 <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9ae 	bl	8004554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f9bf 	bl	800457c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d020      	beq.n	8004250 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01b      	beq.n	8004250 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0208 	mvn.w	r2, #8
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2204      	movs	r2, #4
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f996 	bl	8004568 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f988 	bl	8004554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f999 	bl	800457c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	d020      	beq.n	800429c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01b      	beq.n	800429c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0210 	mvn.w	r2, #16
 800426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2208      	movs	r2, #8
 8004272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f970 	bl	8004568 <HAL_TIM_IC_CaptureCallback>
 8004288:	e005      	b.n	8004296 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f962 	bl	8004554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f973 	bl	800457c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc f826 	bl	800030c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00c      	beq.n	80042ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fb51 	bl	8004990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00c      	beq.n	8004312 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800430a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb49 	bl	80049a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00c      	beq.n	8004336 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800432e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f92d 	bl	8004590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00c      	beq.n	800435a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f06f 0220 	mvn.w	r2, #32
 8004352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fb11 	bl	800497c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIM_ConfigClockSource+0x1c>
 800437c:	2302      	movs	r3, #2
 800437e:	e0dc      	b.n	800453a <HAL_TIM_ConfigClockSource+0x1d6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	4b6a      	ldr	r3, [pc, #424]	@ (8004544 <HAL_TIM_ConfigClockSource+0x1e0>)
 800439c:	4013      	ands	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a64      	ldr	r2, [pc, #400]	@ (8004548 <HAL_TIM_ConfigClockSource+0x1e4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	f000 80a9 	beq.w	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 80043bc:	4a62      	ldr	r2, [pc, #392]	@ (8004548 <HAL_TIM_ConfigClockSource+0x1e4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	f200 80ae 	bhi.w	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 80043c4:	4a61      	ldr	r2, [pc, #388]	@ (800454c <HAL_TIM_ConfigClockSource+0x1e8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f000 80a1 	beq.w	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 80043cc:	4a5f      	ldr	r2, [pc, #380]	@ (800454c <HAL_TIM_ConfigClockSource+0x1e8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	f200 80a6 	bhi.w	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 80043d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004550 <HAL_TIM_ConfigClockSource+0x1ec>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f000 8099 	beq.w	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 80043dc:	4a5c      	ldr	r2, [pc, #368]	@ (8004550 <HAL_TIM_ConfigClockSource+0x1ec>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f200 809e 	bhi.w	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 80043e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80043e8:	f000 8091 	beq.w	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 80043ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80043f0:	f200 8096 	bhi.w	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043f8:	f000 8089 	beq.w	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 80043fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004400:	f200 808e 	bhi.w	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004408:	d03e      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x124>
 800440a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800440e:	f200 8087 	bhi.w	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004416:	f000 8086 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1c2>
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441e:	d87f      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004420:	2b70      	cmp	r3, #112	@ 0x70
 8004422:	d01a      	beq.n	800445a <HAL_TIM_ConfigClockSource+0xf6>
 8004424:	2b70      	cmp	r3, #112	@ 0x70
 8004426:	d87b      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004428:	2b60      	cmp	r3, #96	@ 0x60
 800442a:	d050      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x16a>
 800442c:	2b60      	cmp	r3, #96	@ 0x60
 800442e:	d877      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004430:	2b50      	cmp	r3, #80	@ 0x50
 8004432:	d03c      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x14a>
 8004434:	2b50      	cmp	r3, #80	@ 0x50
 8004436:	d873      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004438:	2b40      	cmp	r3, #64	@ 0x40
 800443a:	d058      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x18a>
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d86f      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004440:	2b30      	cmp	r3, #48	@ 0x30
 8004442:	d064      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 8004444:	2b30      	cmp	r3, #48	@ 0x30
 8004446:	d86b      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004448:	2b20      	cmp	r3, #32
 800444a:	d060      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 800444c:	2b20      	cmp	r3, #32
 800444e:	d867      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d05c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 8004454:	2b10      	cmp	r3, #16
 8004456:	d05a      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x1aa>
 8004458:	e062      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	f000 f9cb 	bl	8004804 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800447c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	609a      	str	r2, [r3, #8]
      break;
 8004486:	e04f      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004498:	f000 f9b4 	bl	8004804 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044aa:	609a      	str	r2, [r3, #8]
      break;
 80044ac:	e03c      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ba:	461a      	mov	r2, r3
 80044bc:	f000 f924 	bl	8004708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2150      	movs	r1, #80	@ 0x50
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f97e 	bl	80047c8 <TIM_ITRx_SetConfig>
      break;
 80044cc:	e02c      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044da:	461a      	mov	r2, r3
 80044dc:	f000 f943 	bl	8004766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2160      	movs	r1, #96	@ 0x60
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f96e 	bl	80047c8 <TIM_ITRx_SetConfig>
      break;
 80044ec:	e01c      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fa:	461a      	mov	r2, r3
 80044fc:	f000 f904 	bl	8004708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2140      	movs	r1, #64	@ 0x40
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f95e 	bl	80047c8 <TIM_ITRx_SetConfig>
      break;
 800450c:	e00c      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f000 f955 	bl	80047c8 <TIM_ITRx_SetConfig>
      break;
 800451e:	e003      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      break;
 8004524:	e000      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	ffceff88 	.word	0xffceff88
 8004548:	00100040 	.word	0x00100040
 800454c:	00100030 	.word	0x00100030
 8004550:	00100020 	.word	0x00100020

08004554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a4a      	ldr	r2, [pc, #296]	@ (80046e0 <TIM_Base_SetConfig+0x13c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c2:	d00f      	beq.n	80045e4 <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a47      	ldr	r2, [pc, #284]	@ (80046e4 <TIM_Base_SetConfig+0x140>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00b      	beq.n	80045e4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a46      	ldr	r2, [pc, #280]	@ (80046e8 <TIM_Base_SetConfig+0x144>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d007      	beq.n	80045e4 <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a45      	ldr	r2, [pc, #276]	@ (80046ec <TIM_Base_SetConfig+0x148>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a44      	ldr	r2, [pc, #272]	@ (80046f0 <TIM_Base_SetConfig+0x14c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d108      	bne.n	80045f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a39      	ldr	r2, [pc, #228]	@ (80046e0 <TIM_Base_SetConfig+0x13c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d027      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004604:	d023      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a36      	ldr	r2, [pc, #216]	@ (80046e4 <TIM_Base_SetConfig+0x140>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01f      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a35      	ldr	r2, [pc, #212]	@ (80046e8 <TIM_Base_SetConfig+0x144>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01b      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a34      	ldr	r2, [pc, #208]	@ (80046ec <TIM_Base_SetConfig+0x148>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d017      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a33      	ldr	r2, [pc, #204]	@ (80046f0 <TIM_Base_SetConfig+0x14c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a32      	ldr	r2, [pc, #200]	@ (80046f4 <TIM_Base_SetConfig+0x150>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00f      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a31      	ldr	r2, [pc, #196]	@ (80046f8 <TIM_Base_SetConfig+0x154>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a30      	ldr	r2, [pc, #192]	@ (80046fc <TIM_Base_SetConfig+0x158>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2f      	ldr	r2, [pc, #188]	@ (8004700 <TIM_Base_SetConfig+0x15c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_Base_SetConfig+0xaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2e      	ldr	r2, [pc, #184]	@ (8004704 <TIM_Base_SetConfig+0x160>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d108      	bne.n	8004660 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a16      	ldr	r2, [pc, #88]	@ (80046e0 <TIM_Base_SetConfig+0x13c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00f      	beq.n	80046ac <TIM_Base_SetConfig+0x108>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <TIM_Base_SetConfig+0x14c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00b      	beq.n	80046ac <TIM_Base_SetConfig+0x108>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a17      	ldr	r2, [pc, #92]	@ (80046f4 <TIM_Base_SetConfig+0x150>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <TIM_Base_SetConfig+0x108>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a16      	ldr	r2, [pc, #88]	@ (80046f8 <TIM_Base_SetConfig+0x154>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0x108>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <TIM_Base_SetConfig+0x158>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d103      	bne.n	80046b4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f023 0201 	bic.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	611a      	str	r2, [r3, #16]
  }
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40010400 	.word	0x40010400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800
 8004700:	4000e000 	.word	0x4000e000
 8004704:	4000e400 	.word	0x4000e400

08004708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0201 	bic.w	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f023 030a 	bic.w	r3, r3, #10
 8004744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f023 0210 	bic.w	r2, r3, #16
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	031b      	lsls	r3, r3, #12
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4b09      	ldr	r3, [pc, #36]	@ (8004800 <TIM_ITRx_SetConfig+0x38>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f043 0307 	orr.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	609a      	str	r2, [r3, #8]
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	ffcfff8f 	.word	0xffcfff8f

08004804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800481e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	431a      	orrs	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4313      	orrs	r3, r2
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	609a      	str	r2, [r3, #8]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004858:	2302      	movs	r3, #2
 800485a:	e077      	b.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a35      	ldr	r2, [pc, #212]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a34      	ldr	r2, [pc, #208]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004896:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a25      	ldr	r2, [pc, #148]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02c      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ce:	d027      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a22      	ldr	r2, [pc, #136]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d022      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a21      	ldr	r2, [pc, #132]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d01d      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d018      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1a      	ldr	r2, [pc, #104]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	@ (800496c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1a      	ldr	r2, [pc, #104]	@ (8004970 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a18      	ldr	r2, [pc, #96]	@ (8004974 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a17      	ldr	r2, [pc, #92]	@ (8004978 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10c      	bne.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004926:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	4313      	orrs	r3, r2
 8004930:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40010000 	.word	0x40010000
 800495c:	40010400 	.word	0x40010400
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40001800 	.word	0x40001800
 8004970:	40014000 	.word	0x40014000
 8004974:	4000e000 	.word	0x4000e000
 8004978:	4000e400 	.word	0x4000e400

0800497c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <memset>:
 80049b8:	4402      	add	r2, r0
 80049ba:	4603      	mov	r3, r0
 80049bc:	4293      	cmp	r3, r2
 80049be:	d100      	bne.n	80049c2 <memset+0xa>
 80049c0:	4770      	bx	lr
 80049c2:	f803 1b01 	strb.w	r1, [r3], #1
 80049c6:	e7f9      	b.n	80049bc <memset+0x4>

080049c8 <__libc_init_array>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004a00 <__libc_init_array+0x38>)
 80049cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004a04 <__libc_init_array+0x3c>)
 80049ce:	1b64      	subs	r4, r4, r5
 80049d0:	10a4      	asrs	r4, r4, #2
 80049d2:	2600      	movs	r6, #0
 80049d4:	42a6      	cmp	r6, r4
 80049d6:	d109      	bne.n	80049ec <__libc_init_array+0x24>
 80049d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004a08 <__libc_init_array+0x40>)
 80049da:	4c0c      	ldr	r4, [pc, #48]	@ (8004a0c <__libc_init_array+0x44>)
 80049dc:	f000 f818 	bl	8004a10 <_init>
 80049e0:	1b64      	subs	r4, r4, r5
 80049e2:	10a4      	asrs	r4, r4, #2
 80049e4:	2600      	movs	r6, #0
 80049e6:	42a6      	cmp	r6, r4
 80049e8:	d105      	bne.n	80049f6 <__libc_init_array+0x2e>
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f0:	4798      	blx	r3
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7ee      	b.n	80049d4 <__libc_init_array+0xc>
 80049f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fa:	4798      	blx	r3
 80049fc:	3601      	adds	r6, #1
 80049fe:	e7f2      	b.n	80049e6 <__libc_init_array+0x1e>
 8004a00:	08004a38 	.word	0x08004a38
 8004a04:	08004a38 	.word	0x08004a38
 8004a08:	08004a38 	.word	0x08004a38
 8004a0c:	08004a3c 	.word	0x08004a3c

08004a10 <_init>:
 8004a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a12:	bf00      	nop
 8004a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a16:	bc08      	pop	{r3}
 8004a18:	469e      	mov	lr, r3
 8004a1a:	4770      	bx	lr

08004a1c <_fini>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	bf00      	nop
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr
