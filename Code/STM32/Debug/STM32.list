
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f7c  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800525c  0800525c  0000625c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  08005264  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000021c  24000020  08005284  00007020  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400023c  08005284  0000723c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011dd4  00000000  00000000  0000704e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000021f7  00000000  00000000  00018e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001028  00000000  00000000  0001b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ca2  00000000  00000000  0001c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000272d  00000000  00000000  0001ccea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000140c4  00000000  00000000  0001f417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014522d  00000000  00000000  000334db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00178708  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044e0  00000000  00000000  0017874c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  0017cc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000020 	.word	0x24000020
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005234 	.word	0x08005234

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000024 	.word	0x24000024
 800030c:	08005234 	.word	0x08005234

08000310 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//----------------------Ngat Sensor----------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

	//------------
	if (htim->Instance==htim2.Instance)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b93      	ldr	r3, [pc, #588]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	f040 80d0 	bne.w	80004c6 <HAL_TIM_PeriodElapsedCallback+0x1b6>
	{
		if (HOME == 1){
 8000326:	4b92      	ldr	r3, [pc, #584]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	f040 80cb 	bne.w	80004c6 <HAL_TIM_PeriodElapsedCallback+0x1b6>
			g+=1;
 8000330:	4b90      	ldr	r3, [pc, #576]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000332:	edd3 7a00 	vldr	s15, [r3]
 8000336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800033a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800033e:	4b8d      	ldr	r3, [pc, #564]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000340:	edc3 7a00 	vstr	s15, [r3]
			if ( g >= 20000){
 8000344:	4b8b      	ldr	r3, [pc, #556]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000346:	edd3 7a00 	vldr	s15, [r3]
 800034a:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8000578 <HAL_TIM_PeriodElapsedCallback+0x268>
 800034e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000356:	db02      	blt.n	800035e <HAL_TIM_PeriodElapsedCallback+0x4e>
				g = 9000;
 8000358:	4b86      	ldr	r3, [pc, #536]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800035a:	4a88      	ldr	r2, [pc, #544]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800035c:	601a      	str	r2, [r3, #0]
			}
			if(g > 17000){
 800035e:	4b85      	ldr	r3, [pc, #532]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000360:	edd3 7a00 	vldr	s15, [r3]
 8000364:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8000580 <HAL_TIM_PeriodElapsedCallback+0x270>
 8000368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800036c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000370:	dd0a      	ble.n	8000388 <HAL_TIM_PeriodElapsedCallback+0x78>
				target_angle_1 = 0;
 8000372:	4b84      	ldr	r3, [pc, #528]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000374:	f04f 0200 	mov.w	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
				target_angle_2 = 43.2;
 800037a:	4b83      	ldr	r3, [pc, #524]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800037c:	4a83      	ldr	r2, [pc, #524]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800037e:	601a      	str	r2, [r3, #0]
				target_angle_3 = -118;
 8000380:	4b83      	ldr	r3, [pc, #524]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000382:	4a84      	ldr	r2, [pc, #528]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	e046      	b.n	8000416 <HAL_TIM_PeriodElapsedCallback+0x106>
			}else if (g > 14000){
 8000388:	4b7a      	ldr	r3, [pc, #488]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800038a:	edd3 7a00 	vldr	s15, [r3]
 800038e:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000598 <HAL_TIM_PeriodElapsedCallback+0x288>
 8000392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800039a:	dd09      	ble.n	80003b0 <HAL_TIM_PeriodElapsedCallback+0xa0>
				target_angle_1 = 45;
 800039c:	4b79      	ldr	r3, [pc, #484]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800039e:	4a7f      	ldr	r2, [pc, #508]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80003a0:	601a      	str	r2, [r3, #0]
				target_angle_2 = 42.42;
 80003a2:	4b79      	ldr	r3, [pc, #484]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80003a4:	4a7e      	ldr	r2, [pc, #504]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80003a6:	601a      	str	r2, [r3, #0]
				target_angle_3 = -135.5;
 80003a8:	4b79      	ldr	r3, [pc, #484]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80003aa:	4a7e      	ldr	r2, [pc, #504]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	e032      	b.n	8000416 <HAL_TIM_PeriodElapsedCallback+0x106>

			}else if (g > 11000){
 80003b0:	4b70      	ldr	r3, [pc, #448]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80003b2:	edd3 7a00 	vldr	s15, [r3]
 80003b6:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80005a8 <HAL_TIM_PeriodElapsedCallback+0x298>
 80003ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c2:	dd09      	ble.n	80003d8 <HAL_TIM_PeriodElapsedCallback+0xc8>
				target_angle_1 = 45;
 80003c4:	4b6f      	ldr	r3, [pc, #444]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003c6:	4a75      	ldr	r2, [pc, #468]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80003c8:	601a      	str	r2, [r3, #0]
				target_angle_2 = 31.4;
 80003ca:	4b6f      	ldr	r3, [pc, #444]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80003cc:	4a77      	ldr	r2, [pc, #476]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80003ce:	601a      	str	r2, [r3, #0]
				target_angle_3 = -90.8;
 80003d0:	4b6f      	ldr	r3, [pc, #444]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80003d2:	4a77      	ldr	r2, [pc, #476]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	e01e      	b.n	8000416 <HAL_TIM_PeriodElapsedCallback+0x106>


			}else if (g > 9000){
 80003d8:	4b66      	ldr	r3, [pc, #408]	@ (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80003da:	edd3 7a00 	vldr	s15, [r3]
 80003de:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80005b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 80003e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ea:	dd0a      	ble.n	8000402 <HAL_TIM_PeriodElapsedCallback+0xf2>
				target_angle_1 = 0;
 80003ec:	4b65      	ldr	r3, [pc, #404]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003ee:	f04f 0200 	mov.w	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
				target_angle_2 = 43.2;
 80003f4:	4b64      	ldr	r3, [pc, #400]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80003f6:	4a65      	ldr	r2, [pc, #404]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80003f8:	601a      	str	r2, [r3, #0]
				target_angle_3 = -118;
 80003fa:	4b65      	ldr	r3, [pc, #404]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80003fc:	4a65      	ldr	r2, [pc, #404]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	e009      	b.n	8000416 <HAL_TIM_PeriodElapsedCallback+0x106>

			}else{
				target_angle_1 = 0;
 8000402:	4b60      	ldr	r3, [pc, #384]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000404:	f04f 0200 	mov.w	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
				target_angle_2 = 90;
 800040a:	4b5f      	ldr	r3, [pc, #380]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800040c:	4a6a      	ldr	r2, [pc, #424]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800040e:	601a      	str	r2, [r3, #0]
				target_angle_3 = -135;
 8000410:	4b5f      	ldr	r3, [pc, #380]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000412:	4a6a      	ldr	r2, [pc, #424]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000414:	601a      	str	r2, [r3, #0]
			}

			if ((target_angle_1 != target_angle_1_temp)||(target_angle_2 != target_angle_2_temp)||(target_angle_3 != target_angle_3_temp)){
 8000416:	4b5b      	ldr	r3, [pc, #364]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000418:	ed93 7a00 	vldr	s14, [r3]
 800041c:	4b68      	ldr	r3, [pc, #416]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800041e:	edd3 7a00 	vldr	s15, [r3]
 8000422:	eeb4 7a67 	vcmp.f32	s14, s15
 8000426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800042a:	d115      	bne.n	8000458 <HAL_TIM_PeriodElapsedCallback+0x148>
 800042c:	4b56      	ldr	r3, [pc, #344]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800042e:	ed93 7a00 	vldr	s14, [r3]
 8000432:	4b64      	ldr	r3, [pc, #400]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000434:	edd3 7a00 	vldr	s15, [r3]
 8000438:	eeb4 7a67 	vcmp.f32	s14, s15
 800043c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000440:	d10a      	bne.n	8000458 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000442:	4b53      	ldr	r3, [pc, #332]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000444:	ed93 7a00 	vldr	s14, [r3]
 8000448:	4b5f      	ldr	r3, [pc, #380]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800044a:	edd3 7a00 	vldr	s15, [r3]
 800044e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000456:	d025      	beq.n	80004a4 <HAL_TIM_PeriodElapsedCallback+0x194>

				target_angle_1_temp = target_angle_1;
 8000458:	4b4a      	ldr	r3, [pc, #296]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a58      	ldr	r2, [pc, #352]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800045e:	6013      	str	r3, [r2, #0]
				target_angle_2_temp = target_angle_2;
 8000460:	4b49      	ldr	r3, [pc, #292]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a57      	ldr	r2, [pc, #348]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000466:	6013      	str	r3, [r2, #0]
				target_angle_3_temp = target_angle_3;
 8000468:	4b49      	ldr	r3, [pc, #292]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a56      	ldr	r2, [pc, #344]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800046e:	6013      	str	r3, [r2, #0]
				countPulseL1 = 0;
 8000470:	4b56      	ldr	r3, [pc, #344]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
				countPulseL2 = 0;
 8000476:	4b56      	ldr	r3, [pc, #344]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
				countPulseL3 = 0;
 800047c:	4b55      	ldr	r3, [pc, #340]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]

				angleControl(target_angle_1,target_angle_2,target_angle_3);
 8000482:	4b40      	ldr	r3, [pc, #256]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000484:	edd3 7a00 	vldr	s15, [r3]
 8000488:	4b3f      	ldr	r3, [pc, #252]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800048a:	ed93 7a00 	vldr	s14, [r3]
 800048e:	4b40      	ldr	r3, [pc, #256]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000490:	edd3 6a00 	vldr	s13, [r3]
 8000494:	eeb0 1a66 	vmov.f32	s2, s13
 8000498:	eef0 0a47 	vmov.f32	s1, s14
 800049c:	eeb0 0a67 	vmov.f32	s0, s15
 80004a0:	f000 f9c2 	bl	8000828 <angleControl>

			}
			//angle3 = - angle2+ angle3;
			angleControl(target_angle_1,target_angle_2,target_angle_3);
 80004a4:	4b37      	ldr	r3, [pc, #220]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004a6:	edd3 7a00 	vldr	s15, [r3]
 80004aa:	4b37      	ldr	r3, [pc, #220]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80004ac:	ed93 7a00 	vldr	s14, [r3]
 80004b0:	4b37      	ldr	r3, [pc, #220]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80004b2:	edd3 6a00 	vldr	s13, [r3]
 80004b6:	eeb0 1a66 	vmov.f32	s2, s13
 80004ba:	eef0 0a47 	vmov.f32	s1, s14
 80004be:	eeb0 0a67 	vmov.f32	s0, s15
 80004c2:	f000 f9b1 	bl	8000828 <angleControl>

		}
	}

	if (htim->Instance == TIM4)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a43      	ldr	r2, [pc, #268]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	f040 80c1 	bne.w	8000654 <HAL_TIM_PeriodElapsedCallback+0x344>
	{  // Ensure the correct timer is being checked
		// Handle Motor 1
		if (countPulseL1 > 0) {
 80004d2:	4b3e      	ldr	r3, [pc, #248]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dd1f      	ble.n	800051a <HAL_TIM_PeriodElapsedCallback+0x20a>
			softCounter1++;  // Increment soft counter for motor 1
 80004da:	4b40      	ldr	r3, [pc, #256]	@ (80005dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	4a3e      	ldr	r2, [pc, #248]	@ (80005dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80004e2:	6013      	str	r3, [r2, #0]
			if (softCounter1 >= periodMotor1) {  // If soft counter reaches the desired period
 80004e4:	4b3d      	ldr	r3, [pc, #244]	@ (80005dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b3d      	ldr	r3, [pc, #244]	@ (80005e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	db19      	blt.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x214>
				HAL_GPIO_TogglePin(GPIOB, motorL1_Pin);  // Toggle Motor 1 pin (generate pulse)
 80004f0:	2101      	movs	r1, #1
 80004f2:	483c      	ldr	r0, [pc, #240]	@ (80005e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80004f4:	f001 fd31 	bl	8001f5a <HAL_GPIO_TogglePin>
				softCounter1 = 0;  // Reset the soft counter for motor 1
 80004f8:	4b38      	ldr	r3, [pc, #224]	@ (80005dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
				countPulseL1--;    // Decrement the pulse count
 80004fe:	4b33      	ldr	r3, [pc, #204]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	3b01      	subs	r3, #1
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000506:	6013      	str	r3, [r2, #0]
				//e = 360/(44800*2);
				update_current_angle(1,1.0,dir1);
 8000508:	4b37      	ldr	r3, [pc, #220]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000512:	2001      	movs	r0, #1
 8000514:	f000 f8ac 	bl	8000670 <update_current_angle>
 8000518:	e004      	b.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x214>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL1_Pin, GPIO_PIN_RESET);  // Stop Motor 1
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	4831      	ldr	r0, [pc, #196]	@ (80005e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000520:	f001 fd02 	bl	8001f28 <HAL_GPIO_WritePin>
		}

		// Handle Motor 2
		if (countPulseL2 > 0) {
 8000524:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	dd65      	ble.n	80005f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>
			softCounter2++;  // Increment soft counter for motor 2
 800052c:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	4a2e      	ldr	r2, [pc, #184]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000534:	6013      	str	r3, [r2, #0]
			if (softCounter2 >= periodMotor2) {  // If soft counter reaches the desired period
 8000536:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	4b2d      	ldr	r3, [pc, #180]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	429a      	cmp	r2, r3
 8000540:	db5f      	blt.n	8000602 <HAL_TIM_PeriodElapsedCallback+0x2f2>
				HAL_GPIO_TogglePin(GPIOB, motorL2_Pin);  // Toggle Motor 2 pin (generate pulse)
 8000542:	2102      	movs	r1, #2
 8000544:	4827      	ldr	r0, [pc, #156]	@ (80005e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000546:	f001 fd08 	bl	8001f5a <HAL_GPIO_TogglePin>
				softCounter2 = 0;  // Reset the soft counter for motor 2
 800054a:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
				countPulseL2--;    // Decrement the pulse count
 8000550:	4b1f      	ldr	r3, [pc, #124]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3b01      	subs	r3, #1
 8000556:	4a1e      	ldr	r2, [pc, #120]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000558:	6013      	str	r3, [r2, #0]
				update_current_angle(2,1.0,dir2);
 800055a:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4619      	mov	r1, r3
 8000560:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000564:	2002      	movs	r0, #2
 8000566:	f000 f883 	bl	8000670 <update_current_angle>
 800056a:	e04a      	b.n	8000602 <HAL_TIM_PeriodElapsedCallback+0x2f2>
 800056c:	24000138 	.word	0x24000138
 8000570:	240001e0 	.word	0x240001e0
 8000574:	24000204 	.word	0x24000204
 8000578:	469c4000 	.word	0x469c4000
 800057c:	460ca000 	.word	0x460ca000
 8000580:	4684d000 	.word	0x4684d000
 8000584:	2400022c 	.word	0x2400022c
 8000588:	24000230 	.word	0x24000230
 800058c:	422ccccd 	.word	0x422ccccd
 8000590:	24000234 	.word	0x24000234
 8000594:	c2ec0000 	.word	0xc2ec0000
 8000598:	465ac000 	.word	0x465ac000
 800059c:	42340000 	.word	0x42340000
 80005a0:	4229ae14 	.word	0x4229ae14
 80005a4:	c3078000 	.word	0xc3078000
 80005a8:	462be000 	.word	0x462be000
 80005ac:	41fb3333 	.word	0x41fb3333
 80005b0:	c2b5999a 	.word	0xc2b5999a
 80005b4:	460ca000 	.word	0x460ca000
 80005b8:	42b40000 	.word	0x42b40000
 80005bc:	c3070000 	.word	0xc3070000
 80005c0:	24000004 	.word	0x24000004
 80005c4:	24000008 	.word	0x24000008
 80005c8:	2400000c 	.word	0x2400000c
 80005cc:	240001e4 	.word	0x240001e4
 80005d0:	240001e8 	.word	0x240001e8
 80005d4:	240001ec 	.word	0x240001ec
 80005d8:	40000800 	.word	0x40000800
 80005dc:	24000214 	.word	0x24000214
 80005e0:	24000220 	.word	0x24000220
 80005e4:	58020400 	.word	0x58020400
 80005e8:	2400020c 	.word	0x2400020c
 80005ec:	24000218 	.word	0x24000218
 80005f0:	24000224 	.word	0x24000224
 80005f4:	24000210 	.word	0x24000210

			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL2_Pin, GPIO_PIN_RESET);  // Stop Motor 2
 80005f8:	2200      	movs	r2, #0
 80005fa:	2102      	movs	r1, #2
 80005fc:	4817      	ldr	r0, [pc, #92]	@ (800065c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80005fe:	f001 fc93 	bl	8001f28 <HAL_GPIO_WritePin>
		}

		// Handle Motor 3
		if (countPulseL3 > 0) {
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	dd1f      	ble.n	800064a <HAL_TIM_PeriodElapsedCallback+0x33a>
			softCounter3++;  // Increment soft counter for motor 3
 800060a:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000612:	6013      	str	r3, [r2, #0]
			if (softCounter3 >= periodMotor3) {  // If soft counter reaches the desired period
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	db19      	blt.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x344>
				HAL_GPIO_TogglePin(GPIOB, motorL3_Pin);  // Toggle Motor 3 pin (generate pulse)
 8000620:	2104      	movs	r1, #4
 8000622:	480e      	ldr	r0, [pc, #56]	@ (800065c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000624:	f001 fc99 	bl	8001f5a <HAL_GPIO_TogglePin>
				softCounter3 = 0;  // Reset the soft counter for motor 3
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
				countPulseL3--;    // Decrement the pulse count
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000636:	6013      	str	r3, [r2, #0]
				update_current_angle(3,1.0, dir3);
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000642:	2003      	movs	r0, #3
 8000644:	f000 f814 	bl	8000670 <update_current_angle>
			}
		} else {
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
		}
	}
}
 8000648:	e004      	b.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x344>
			HAL_GPIO_WritePin(GPIOB, motorL3_Pin, GPIO_PIN_RESET);  // Stop Motor 3
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	4803      	ldr	r0, [pc, #12]	@ (800065c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000650:	f001 fc6a 	bl	8001f28 <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58020400 	.word	0x58020400
 8000660:	240001ec 	.word	0x240001ec
 8000664:	2400021c 	.word	0x2400021c
 8000668:	24000228 	.word	0x24000228
 800066c:	24000000 	.word	0x24000000

08000670 <update_current_angle>:
    // Read raw angle from angleL3 sensor
    AS5600_GetRawAngle(angleL3, &angle3);

}

void update_current_angle(int motor_index, float steps, int direction) {
 8000670:	b480      	push	{r7}
 8000672:	b087      	sub	sp, #28
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	ed87 0a02 	vstr	s0, [r7, #8]
 800067c:	6079      	str	r1, [r7, #4]
    float angle_change = steps * 360.0 / (43840.0 * 2.0); // Calculate the change in angle
 800067e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000682:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000686:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8000730 <update_current_angle+0xc0>
 800068a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800068e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8000738 <update_current_angle+0xc8>
 8000692:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000696:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800069a:	edc7 7a05 	vstr	s15, [r7, #20]

    // If direction is negative, reverse the angle change
    if (direction < 0) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da05      	bge.n	80006b0 <update_current_angle+0x40>
        angle_change = -angle_change;
 80006a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80006a8:	eef1 7a67 	vneg.f32	s15, s15
 80006ac:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    switch (motor_index){
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d029      	beq.n	800070a <update_current_angle+0x9a>
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	dc31      	bgt.n	8000720 <update_current_angle+0xb0>
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d003      	beq.n	80006ca <update_current_angle+0x5a>
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d00b      	beq.n	80006e0 <update_current_angle+0x70>
            break;
        case 3:
            angle3 += angle_change; // Update current angle for motor 3
            break;
    }
}
 80006c8:	e02a      	b.n	8000720 <update_current_angle+0xb0>
            angle1 += angle_change; // Update current angle for motor 1
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <update_current_angle+0xd0>)
 80006cc:	ed93 7a00 	vldr	s14, [r3]
 80006d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80006d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <update_current_angle+0xd0>)
 80006da:	edc3 7a00 	vstr	s15, [r3]
            break;
 80006de:	e01f      	b.n	8000720 <update_current_angle+0xb0>
            angle2 += angle_change; // Update current angle for motor 2
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <update_current_angle+0xd4>)
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80006ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <update_current_angle+0xd4>)
 80006f0:	edc3 7a00 	vstr	s15, [r3]
            angle3 -= angle_change;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <update_current_angle+0xd8>)
 80006f6:	ed93 7a00 	vldr	s14, [r3]
 80006fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80006fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <update_current_angle+0xd8>)
 8000704:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000708:	e00a      	b.n	8000720 <update_current_angle+0xb0>
            angle3 += angle_change; // Update current angle for motor 3
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <update_current_angle+0xd8>)
 800070c:	ed93 7a00 	vldr	s14, [r3]
 8000710:	edd7 7a05 	vldr	s15, [r7, #20]
 8000714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <update_current_angle+0xd8>)
 800071a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800071e:	bf00      	nop
}
 8000720:	bf00      	nop
 8000722:	371c      	adds	r7, #28
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	f3af 8000 	nop.w
 8000730:	00000000 	.word	0x00000000
 8000734:	40768000 	.word	0x40768000
 8000738:	00000000 	.word	0x00000000
 800073c:	40f56800 	.word	0x40f56800
 8000740:	240001d0 	.word	0x240001d0
 8000744:	240001d4 	.word	0x240001d4
 8000748:	240001d8 	.word	0x240001d8
 800074c:	00000000 	.word	0x00000000

08000750 <calculate_steps>:

int calculate_steps(float current_angle, float target_angle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	ed87 0a01 	vstr	s0, [r7, #4]
 800075a:	edc7 0a00 	vstr	s1, [r7]
    // Calculate the angular difference

    float angular_difference ;
    int temp;

    temp = target_angle - current_angle;
 800075e:	ed97 7a00 	vldr	s14, [r7]
 8000762:	edd7 7a01 	vldr	s15, [r7, #4]
 8000766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800076e:	ee17 3a90 	vmov	r3, s15
 8000772:	613b      	str	r3, [r7, #16]
	if (abs(temp) == 0){
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d103      	bne.n	8000782 <calculate_steps+0x32>
		angular_difference = 0;
 800077a:	f04f 0300 	mov.w	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e007      	b.n	8000792 <calculate_steps+0x42>
	}else{
		angular_difference = target_angle - current_angle;
 8000782:	ed97 7a00 	vldr	s14, [r7]
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800078e:	edc7 7a05 	vstr	s15, [r7, #20]
	}


    // Convert angular difference to steps
	int steps_needed = (int)round((angular_difference / 360.0) * 43840.0 * 2);
 8000792:	edd7 7a05 	vldr	s15, [r7, #20]
 8000796:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800079a:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 80007d8 <calculate_steps+0x88>
 800079e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007a2:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80007e0 <calculate_steps+0x90>
 80007a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80007ae:	eeb0 0b47 	vmov.f64	d0, d7
 80007b2:	f004 fcfb 	bl	80051ac <round>
 80007b6:	eeb0 7b40 	vmov.f64	d7, d0
 80007ba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007be:	ee17 3a90 	vmov	r3, s15
 80007c2:	60fb      	str	r3, [r7, #12]
	d = (int)round((0.98 / 360.0) * 44800 * 2);
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <calculate_steps+0x98>)
 80007c6:	4a09      	ldr	r2, [pc, #36]	@ (80007ec <calculate_steps+0x9c>)
 80007c8:	601a      	str	r2, [r3, #0]
    // Return the absolute number of steps (stepper motors can't move negative steps)
    return steps_needed;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	f3af 8000 	nop.w
 80007d8:	00000000 	.word	0x00000000
 80007dc:	40768000 	.word	0x40768000
 80007e0:	00000000 	.word	0x00000000
 80007e4:	40e56800 	.word	0x40e56800
 80007e8:	240001fc 	.word	0x240001fc
 80007ec:	43740000 	.word	0x43740000

080007f0 <maxSteps>:

int maxSteps(int steps_motor_1, int steps_motor_2, int steps_motor_3)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
    int max_value = steps_motor_1;  // Assume motor 1 has the maximum steps
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	617b      	str	r3, [r7, #20]

    if (steps_motor_2 > max_value) {
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	429a      	cmp	r2, r3
 8000806:	dd01      	ble.n	800080c <maxSteps+0x1c>
        max_value = steps_motor_2;  // Update if motor 2 has more steps
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	617b      	str	r3, [r7, #20]
    }

    if (steps_motor_3 > max_value) {
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	dd01      	ble.n	8000818 <maxSteps+0x28>
        max_value = steps_motor_3;  // Update if motor 3 has more steps
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	617b      	str	r3, [r7, #20]
    }

    return max_value;  // Return the largest number of steps
 8000818:	697b      	ldr	r3, [r7, #20]
}
 800081a:	4618      	mov	r0, r3
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <angleControl>:


void angleControl(float target_angle_1, float target_angle_2, float target_angle_3) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000832:	edc7 0a02 	vstr	s1, [r7, #8]
 8000836:	ed87 1a01 	vstr	s2, [r7, #4]
	// Read the current angles from the sensors
	//Read_Angles();

	// Calculate the required steps for each motor based on current and target angles
	int steps_motor_1 = calculate_steps(angle1, (target_angle_1));
 800083a:	4b92      	ldr	r3, [pc, #584]	@ (8000a84 <angleControl+0x25c>)
 800083c:	edd3 7a00 	vldr	s15, [r3]
 8000840:	edd7 0a03 	vldr	s1, [r7, #12]
 8000844:	eeb0 0a67 	vmov.f32	s0, s15
 8000848:	f7ff ff82 	bl	8000750 <calculate_steps>
 800084c:	61b8      	str	r0, [r7, #24]
	int steps_motor_2 = calculate_steps(angle2, (target_angle_2));
 800084e:	4b8e      	ldr	r3, [pc, #568]	@ (8000a88 <angleControl+0x260>)
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	edd7 0a02 	vldr	s1, [r7, #8]
 8000858:	eeb0 0a67 	vmov.f32	s0, s15
 800085c:	f7ff ff78 	bl	8000750 <calculate_steps>
 8000860:	6178      	str	r0, [r7, #20]
	//f = steps_motor_2;
	int steps_motor_3 = calculate_steps(angle3, target_angle_3);
 8000862:	4b8a      	ldr	r3, [pc, #552]	@ (8000a8c <angleControl+0x264>)
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	edd7 0a01 	vldr	s1, [r7, #4]
 800086c:	eeb0 0a67 	vmov.f32	s0, s15
 8000870:	f7ff ff6e 	bl	8000750 <calculate_steps>
 8000874:	61f8      	str	r0, [r7, #28]

	// Set the pulse counts for each motor
	countPulseL1 = abs(steps_motor_1);
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	2b00      	cmp	r3, #0
 800087a:	bfb8      	it	lt
 800087c:	425b      	neglt	r3, r3
 800087e:	4a84      	ldr	r2, [pc, #528]	@ (8000a90 <angleControl+0x268>)
 8000880:	6013      	str	r3, [r2, #0]
	countPulseL2 = abs(steps_motor_2) ;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bfb8      	it	lt
 8000888:	425b      	neglt	r3, r3
 800088a:	4a82      	ldr	r2, [pc, #520]	@ (8000a94 <angleControl+0x26c>)
 800088c:	6013      	str	r3, [r2, #0]
	error = angle3 - target_angle_3;
 800088e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a8c <angleControl+0x264>)
 8000890:	ed93 7a00 	vldr	s14, [r3]
 8000894:	edd7 7a01 	vldr	s15, [r7, #4]
 8000898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800089c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a98 <angleControl+0x270>)
 800089e:	edc3 7a00 	vstr	s15, [r3]




	// Determine the direction for each motor and set control pins accordingly
	if (target_angle_1 > angle1) {
 80008a2:	4b78      	ldr	r3, [pc, #480]	@ (8000a84 <angleControl+0x25c>)
 80008a4:	edd3 7a00 	vldr	s15, [r3]
 80008a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80008ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b4:	dd09      	ble.n	80008ca <angleControl+0xa2>
		// Move motor 1 clockwise
		dir1 = 1;
 80008b6:	4b79      	ldr	r3, [pc, #484]	@ (8000a9c <angleControl+0x274>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c2:	4877      	ldr	r0, [pc, #476]	@ (8000aa0 <angleControl+0x278>)
 80008c4:	f001 fb30 	bl	8001f28 <HAL_GPIO_WritePin>
 80008c8:	e009      	b.n	80008de <angleControl+0xb6>

	} else {
		dir1 = -1;
 80008ca:	4b74      	ldr	r3, [pc, #464]	@ (8000a9c <angleControl+0x274>)
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	601a      	str	r2, [r3, #0]
		// Move motor 1 counterclockwise
		HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d8:	4871      	ldr	r0, [pc, #452]	@ (8000aa0 <angleControl+0x278>)
 80008da:	f001 fb25 	bl	8001f28 <HAL_GPIO_WritePin>
	}

	if (target_angle_2 >= angle2) {
 80008de:	4b6a      	ldr	r3, [pc, #424]	@ (8000a88 <angleControl+0x260>)
 80008e0:	edd3 7a00 	vldr	s15, [r3]
 80008e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80008e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f0:	db09      	blt.n	8000906 <angleControl+0xde>
		// Move motor 2 clockwise
		dir2 = 1;
 80008f2:	4b6c      	ldr	r3, [pc, #432]	@ (8000aa4 <angleControl+0x27c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fe:	4868      	ldr	r0, [pc, #416]	@ (8000aa0 <angleControl+0x278>)
 8000900:	f001 fb12 	bl	8001f28 <HAL_GPIO_WritePin>
 8000904:	e009      	b.n	800091a <angleControl+0xf2>
	} else {
		// Move motor 2 counterclockwise
		dir2 = -1;
 8000906:	4b67      	ldr	r3, [pc, #412]	@ (8000aa4 <angleControl+0x27c>)
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000914:	4862      	ldr	r0, [pc, #392]	@ (8000aa0 <angleControl+0x278>)
 8000916:	f001 fb07 	bl	8001f28 <HAL_GPIO_WritePin>
	}

	if (steps_motor_2 == 0){
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d103      	bne.n	8000928 <angleControl+0x100>
		dir2 =1;
 8000920:	4b60      	ldr	r3, [pc, #384]	@ (8000aa4 <angleControl+0x27c>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e006      	b.n	8000936 <angleControl+0x10e>
	}else if (steps_motor_1 == 0){
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d103      	bne.n	8000936 <angleControl+0x10e>
		dir3 = -1;
 800092e:	4b5e      	ldr	r3, [pc, #376]	@ (8000aa8 <angleControl+0x280>)
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	601a      	str	r2, [r3, #0]
	}

	if (target_angle_3 > angle3 && dir2 == 1) {
 8000936:	4b55      	ldr	r3, [pc, #340]	@ (8000a8c <angleControl+0x264>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000948:	dd22      	ble.n	8000990 <angleControl+0x168>
 800094a:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <angleControl+0x27c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d11e      	bne.n	8000990 <angleControl+0x168>
		// Motor 3 moves clockwise when Motor 2 is moving clockwise
		h = 1;
 8000952:	4b56      	ldr	r3, [pc, #344]	@ (8000aac <angleControl+0x284>)
 8000954:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000958:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 800095a:	4b53      	ldr	r3, [pc, #332]	@ (8000aa8 <angleControl+0x280>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	ee07 3a90 	vmov	s15, r3
 8000966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800096a:	4b51      	ldr	r3, [pc, #324]	@ (8000ab0 <angleControl+0x288>)
 800096c:	edc3 7a00 	vstr	s15, [r3]
		countPulseL3 = abs(steps_motor_3);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	2b00      	cmp	r3, #0
 8000974:	bfb8      	it	lt
 8000976:	425b      	neglt	r3, r3
 8000978:	4a4e      	ldr	r2, [pc, #312]	@ (8000ab4 <angleControl+0x28c>)
 800097a:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 800097c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab4 <angleControl+0x28c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000988:	4845      	ldr	r0, [pc, #276]	@ (8000aa0 <angleControl+0x278>)
 800098a:	f001 facd 	bl	8001f28 <HAL_GPIO_WritePin>
 800098e:	e0a9      	b.n	8000ae4 <angleControl+0x2bc>
	}
	else if (target_angle_3 < angle3 && dir2 == 1) {
 8000990:	4b3e      	ldr	r3, [pc, #248]	@ (8000a8c <angleControl+0x264>)
 8000992:	edd3 7a00 	vldr	s15, [r3]
 8000996:	ed97 7a01 	vldr	s14, [r7, #4]
 800099a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a2:	d51b      	bpl.n	80009dc <angleControl+0x1b4>
 80009a4:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <angleControl+0x27c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d117      	bne.n	80009dc <angleControl+0x1b4>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 2;
 80009ac:	4b3f      	ldr	r3, [pc, #252]	@ (8000aac <angleControl+0x284>)
 80009ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b2:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 80009b4:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa8 <angleControl+0x280>)
 80009b6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ba:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	4a3b      	ldr	r2, [pc, #236]	@ (8000ab4 <angleControl+0x28c>)
 80009c6:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 80009c8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab4 <angleControl+0x28c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009d4:	4832      	ldr	r0, [pc, #200]	@ (8000aa0 <angleControl+0x278>)
 80009d6:	f001 faa7 	bl	8001f28 <HAL_GPIO_WritePin>
 80009da:	e083      	b.n	8000ae4 <angleControl+0x2bc>
	} else if (target_angle_3 < angle3 && dir2 == -1) {
 80009dc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <angleControl+0x264>)
 80009de:	edd3 7a00 	vldr	s15, [r3]
 80009e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80009e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ee:	d51b      	bpl.n	8000a28 <angleControl+0x200>
 80009f0:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <angleControl+0x27c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d116      	bne.n	8000a28 <angleControl+0x200>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 3;
 80009fa:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <angleControl+0x284>)
 80009fc:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab8 <angleControl+0x290>)
 80009fe:	601a      	str	r2, [r3, #0]
		dir3 = -1;
 8000a00:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <angleControl+0x280>)
 8000a02:	f04f 32ff 	mov.w	r2, #4294967295
 8000a06:	601a      	str	r2, [r3, #0]
		countPulseL3 =abs(steps_motor_3);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bfb8      	it	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	4a28      	ldr	r2, [pc, #160]	@ (8000ab4 <angleControl+0x28c>)
 8000a12:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8000a14:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <angleControl+0x28c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a20:	481f      	ldr	r0, [pc, #124]	@ (8000aa0 <angleControl+0x278>)
 8000a22:	f001 fa81 	bl	8001f28 <HAL_GPIO_WritePin>
 8000a26:	e05d      	b.n	8000ae4 <angleControl+0x2bc>
	}
	else if (target_angle_3 > angle3 && dir2 == -1) {
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <angleControl+0x264>)
 8000a2a:	edd3 7a00 	vldr	s15, [r3]
 8000a2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3a:	dd3f      	ble.n	8000abc <angleControl+0x294>
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <angleControl+0x27c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d13a      	bne.n	8000abc <angleControl+0x294>
		// Motor 3 moves counterclockwise when Motor 2 is moving counterclockwise
		h = 4;
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <angleControl+0x284>)
 8000a48:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8000a4c:	601a      	str	r2, [r3, #0]
		dir3 = 1;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <angleControl+0x280>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
		f = steps_motor_3;
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <angleControl+0x288>)
 8000a60:	edc3 7a00 	vstr	s15, [r3]
		countPulseL3 = abs( steps_motor_3);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bfb8      	it	lt
 8000a6a:	425b      	neglt	r3, r3
 8000a6c:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <angleControl+0x28c>)
 8000a6e:	6013      	str	r3, [r2, #0]
		steps_motor_3 = countPulseL3;
 8000a70:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <angleControl+0x28c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a7c:	4808      	ldr	r0, [pc, #32]	@ (8000aa0 <angleControl+0x278>)
 8000a7e:	f001 fa53 	bl	8001f28 <HAL_GPIO_WritePin>
 8000a82:	e02f      	b.n	8000ae4 <angleControl+0x2bc>
 8000a84:	240001d0 	.word	0x240001d0
 8000a88:	240001d4 	.word	0x240001d4
 8000a8c:	240001d8 	.word	0x240001d8
 8000a90:	240001e4 	.word	0x240001e4
 8000a94:	240001e8 	.word	0x240001e8
 8000a98:	240001dc 	.word	0x240001dc
 8000a9c:	2400020c 	.word	0x2400020c
 8000aa0:	58021400 	.word	0x58021400
 8000aa4:	24000210 	.word	0x24000210
 8000aa8:	24000000 	.word	0x24000000
 8000aac:	24000208 	.word	0x24000208
 8000ab0:	24000200 	.word	0x24000200
 8000ab4:	240001ec 	.word	0x240001ec
 8000ab8:	40400000 	.word	0x40400000
	} else {
		// Maintain angle3 in sync with angle2’s direction
		h =5;
 8000abc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba8 <angleControl+0x380>)
 8000abe:	4a3b      	ldr	r2, [pc, #236]	@ (8000bac <angleControl+0x384>)
 8000ac0:	601a      	str	r2, [r3, #0]
		dir3 = dir2;
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb0 <angleControl+0x388>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb4 <angleControl+0x38c>)
 8000ac8:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOF, M3dir_Pin, dir3 == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000aca:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb4 <angleControl+0x38c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ade:	4836      	ldr	r0, [pc, #216]	@ (8000bb8 <angleControl+0x390>)
 8000ae0:	f001 fa22 	bl	8001f28 <HAL_GPIO_WritePin>
	}


	// Determine the maximum steps needed to synchronize the motors
	int max_steps = maxSteps(abs(steps_motor_1), abs(steps_motor_2), abs(steps_motor_3));
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8000aea:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000af4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	f7ff fe75 	bl	80007f0 <maxSteps>
 8000b06:	6138      	str	r0, [r7, #16]

	// Calculate the pulse periods for each motor based on the maximum steps
	periodMotor1 = (int)(((float)max_steps / abs(steps_motor_1)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bfb8      	it	lt
 8000b18:	425b      	neglt	r3, r3
 8000b1a:	ee07 3a90 	vmov	s15, r3
 8000b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b26:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b32:	ee17 2a90 	vmov	r2, s15
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <angleControl+0x394>)
 8000b38:	601a      	str	r2, [r3, #0]
	periodMotor2 = (int)(((float)max_steps / abs(steps_motor_2)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b58:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b64:	ee17 2a90 	vmov	r2, s15
 8000b68:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <angleControl+0x398>)
 8000b6a:	601a      	str	r2, [r3, #0]
	periodMotor3 = (int)(((float)max_steps / abs(steps_motor_3)) * (FASTEST_PERIOD_MICROS / BASE_INTERRUPT_PERIOD_MICROS));
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bfb8      	it	lt
 8000b7c:	425b      	neglt	r3, r3
 8000b7e:	ee07 3a90 	vmov	s15, r3
 8000b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b8a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b96:	ee17 2a90 	vmov	r2, s15
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <angleControl+0x39c>)
 8000b9c:	601a      	str	r2, [r3, #0]

	// Start the timer if it is not already running (ensure the timer has been initialized)
	//HAL_TIM_Base_Start_IT(&htim4);
}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	24000208 	.word	0x24000208
 8000bac:	40a00000 	.word	0x40a00000
 8000bb0:	24000210 	.word	0x24000210
 8000bb4:	24000000 	.word	0x24000000
 8000bb8:	58021400 	.word	0x58021400
 8000bbc:	24000220 	.word	0x24000220
 8000bc0:	24000224 	.word	0x24000224
 8000bc4:	24000228 	.word	0x24000228

08000bc8 <autoHomeMotors>:

void autoHomeMotors(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    // Set initial movement direction for homing (assumes motors move towards the limit switches)
    HAL_GPIO_WritePin(GPIOF, M1dir_Pin, GPIO_PIN_RESET); // Move Motor 1 in the homing direction
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd2:	481d      	ldr	r0, [pc, #116]	@ (8000c48 <autoHomeMotors+0x80>)
 8000bd4:	f001 f9a8 	bl	8001f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M2dir_Pin, GPIO_PIN_SET); // Move Motor 2 in the homing direction
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bde:	481a      	ldr	r0, [pc, #104]	@ (8000c48 <autoHomeMotors+0x80>)
 8000be0:	f001 f9a2 	bl	8001f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET); // Move Motor 3 in the homing direction
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bea:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <autoHomeMotors+0x80>)
 8000bec:	f001 f99c 	bl	8001f28 <HAL_GPIO_WritePin>


    // Start moving the motors
    countPulseL1 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <autoHomeMotors+0x84>)
 8000bf2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000bf6:	601a      	str	r2, [r3, #0]
    countPulseL2 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <autoHomeMotors+0x88>)
 8000bfa:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000bfe:	601a      	str	r2, [r3, #0]
    countPulseL3 = HOMING_PULSE_LIMIT;  // Arbitrary large value for homing
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <autoHomeMotors+0x8c>)
 8000c02:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000c06:	601a      	str	r2, [r3, #0]

    periodMotor1 = 4;
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <autoHomeMotors+0x90>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	601a      	str	r2, [r3, #0]
	periodMotor2 = 4;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <autoHomeMotors+0x94>)
 8000c10:	2204      	movs	r2, #4
 8000c12:	601a      	str	r2, [r3, #0]
	periodMotor3 = 4;
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <autoHomeMotors+0x98>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	601a      	str	r2, [r3, #0]

    // Wait until all limit switches are triggered
    while (a == 0 || b == 0 || c == 0) {
 8000c1a:	e001      	b.n	8000c20 <autoHomeMotors+0x58>
        checkLimitSwitches(); // Continuously check the limit switches
 8000c1c:	f000 f846 	bl	8000cac <checkLimitSwitches>
    while (a == 0 || b == 0 || c == 0) {
 8000c20:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <autoHomeMotors+0x9c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f9      	beq.n	8000c1c <autoHomeMotors+0x54>
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <autoHomeMotors+0xa0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f5      	beq.n	8000c1c <autoHomeMotors+0x54>
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <autoHomeMotors+0xa4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f1      	beq.n	8000c1c <autoHomeMotors+0x54>
    }

    // Set the home angle once all limit switches are activated
    HOME = 1;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <autoHomeMotors+0xa8>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
    setHomeAngles();
 8000c3e:	f000 f819 	bl	8000c74 <setHomeAngles>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	58021400 	.word	0x58021400
 8000c4c:	240001e4 	.word	0x240001e4
 8000c50:	240001e8 	.word	0x240001e8
 8000c54:	240001ec 	.word	0x240001ec
 8000c58:	24000220 	.word	0x24000220
 8000c5c:	24000224 	.word	0x24000224
 8000c60:	24000228 	.word	0x24000228
 8000c64:	240001f0 	.word	0x240001f0
 8000c68:	240001f4 	.word	0x240001f4
 8000c6c:	240001f8 	.word	0x240001f8
 8000c70:	240001e0 	.word	0x240001e0

08000c74 <setHomeAngles>:

void setHomeAngles(void) {
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
    // Set the current angle to zero or a specific home angle as needed
    angle1 = 0.0; // Home position for Motor 1
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <setHomeAngles+0x24>)
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
    angle2 = 90.0; // Home position for Motor 2
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <setHomeAngles+0x28>)
 8000c82:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <setHomeAngles+0x2c>)
 8000c84:	601a      	str	r2, [r3, #0]
    angle3 = -160.0; // Home position for Motor 3
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <setHomeAngles+0x30>)
 8000c88:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <setHomeAngles+0x34>)
 8000c8a:	601a      	str	r2, [r3, #0]

}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	240001d0 	.word	0x240001d0
 8000c9c:	240001d4 	.word	0x240001d4
 8000ca0:	42b40000 	.word	0x42b40000
 8000ca4:	240001d8 	.word	0x240001d8
 8000ca8:	c3200000 	.word	0xc3200000

08000cac <checkLimitSwitches>:

void checkLimitSwitches(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    // Check and handle limit switch 1
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	4820      	ldr	r0, [pc, #128]	@ (8000d34 <checkLimitSwitches+0x88>)
 8000cb4:	f001 f920 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d106      	bne.n	8000ccc <checkLimitSwitches+0x20>
        a = 1;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <checkLimitSwitches+0x8c>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
        countPulseL1 = 0;  // Stop Motor 1 if limit switch 1 is triggered
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <checkLimitSwitches+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	e002      	b.n	8000cd2 <checkLimitSwitches+0x26>
    } else {
        a = 0;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <checkLimitSwitches+0x8c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
    }

    // Check and handle limit switch 2, ensuring that it only works if limit switch 3 is not active
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <checkLimitSwitches+0x88>)
 8000cd6:	f001 f90f 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d106      	bne.n	8000cee <checkLimitSwitches+0x42>
        b = 1;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <checkLimitSwitches+0x94>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
        countPulseL2 = 0;  // Stop Motor 2 if limit switch 2 is triggered
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <checkLimitSwitches+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e002      	b.n	8000cf4 <checkLimitSwitches+0x48>
    } else {
        b = 0;
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <checkLimitSwitches+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
    }

    // Check and handle limit switch 3
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8000cf4:	2140      	movs	r1, #64	@ 0x40
 8000cf6:	480f      	ldr	r0, [pc, #60]	@ (8000d34 <checkLimitSwitches+0x88>)
 8000cf8:	f001 f8fe 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d10d      	bne.n	8000d1e <checkLimitSwitches+0x72>
        c = 1;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <checkLimitSwitches+0x9c>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
        countPulseL3 = countPulseL2;  // Stop Motor 3 if limit switch 3 is triggered
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <checkLimitSwitches+0x98>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d4c <checkLimitSwitches+0xa0>)
 8000d0e:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_RESET);  // Stop motor direction for M3
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d16:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <checkLimitSwitches+0xa4>)
 8000d18:	f001 f906 	bl	8001f28 <HAL_GPIO_WritePin>
    } else {
        c = 0;
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
    }
}
 8000d1c:	e008      	b.n	8000d30 <checkLimitSwitches+0x84>
        c = 0;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <checkLimitSwitches+0x9c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOF, M3dir_Pin, GPIO_PIN_SET);  // Set motor direction for M3
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d2a:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <checkLimitSwitches+0xa4>)
 8000d2c:	f001 f8fc 	bl	8001f28 <HAL_GPIO_WritePin>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	58020000 	.word	0x58020000
 8000d38:	240001f0 	.word	0x240001f0
 8000d3c:	240001e4 	.word	0x240001e4
 8000d40:	240001f4 	.word	0x240001f4
 8000d44:	240001e8 	.word	0x240001e8
 8000d48:	240001f8 	.word	0x240001f8
 8000d4c:	240001ec 	.word	0x240001ec
 8000d50:	58021400 	.word	0x58021400

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     HAL_Init();
 8000d58:	f000 fd78 	bl	800184c <HAL_Init>
//	angleL3->i2cHandle= &hi2c3;
//	AS5600_Init(angleL3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f81a 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f000 fa1c 	bl	800119c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d64:	f000 f97e 	bl	8001064 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d68:	f000 f8bc 	bl	8000ee4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d6c:	f000 f8fa 	bl	8000f64 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000d70:	f000 f938 	bl	8000fe4 <MX_I2C3_Init>
  MX_TIM4_Init();
 8000d74:	f000 f9c4 	bl	8001100 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <main+0x38>)
 8000d7a:	f003 fd33 	bl	80047e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d7e:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <main+0x3c>)
 8000d80:	f003 fd30 	bl	80047e4 <HAL_TIM_Base_Start_IT>
  autoHomeMotors();
 8000d84:	f7ff ff20 	bl	8000bc8 <autoHomeMotors>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <main+0x34>
 8000d8c:	24000138 	.word	0x24000138
 8000d90:	24000184 	.word	0x24000184

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0a4      	sub	sp, #144	@ 0x90
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d9e:	224c      	movs	r2, #76	@ 0x4c
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 f9d6 	bl	8005154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dac:	2220      	movs	r2, #32
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 f9cf 	bl	8005154 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
 8000dc6:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f001 fa15 	bl	80021f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b41      	ldr	r3, [pc, #260]	@ (8000ed8 <SystemClock_Config+0x144>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dda:	4a3f      	ldr	r2, [pc, #252]	@ (8000ed8 <SystemClock_Config+0x144>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed8 <SystemClock_Config+0x144>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dee:	bf00      	nop
 8000df0:	4b39      	ldr	r3, [pc, #228]	@ (8000ed8 <SystemClock_Config+0x144>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dfc:	d1f8      	bne.n	8000df0 <SystemClock_Config+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000dfe:	2330      	movs	r3, #48	@ 0x30
 8000e00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e02:	2301      	movs	r3, #1
 8000e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000e06:	2380      	movs	r3, #128	@ 0x80
 8000e08:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000e12:	2301      	movs	r3, #1
 8000e14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e16:	2304      	movs	r3, #4
 8000e18:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e1a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e1e:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fa11 	bl	800226c <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e50:	f000 fa80 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	233f      	movs	r3, #63	@ 0x3f
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000e5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e66:	2340      	movs	r3, #64	@ 0x40
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e6a:	2340      	movs	r3, #64	@ 0x40
 8000e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e74:	2340      	movs	r3, #64	@ 0x40
 8000e76:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fdce 	bl	8002a20 <HAL_RCC_ClockConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000e8a:	f000 fa63 	bl	8001354 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <SystemClock_Config+0x148>)
 8000e90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000e94:	4a11      	ldr	r2, [pc, #68]	@ (8000edc <SystemClock_Config+0x148>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <SystemClock_Config+0x148>)
 8000ea0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB1;
 8000eb0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <SystemClock_Config+0x14c>)
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000ebe:	2322      	movs	r3, #34	@ 0x22
 8000ec0:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fa78 	bl	80043c0 <HAL_RCCEx_CRSConfig>
}
 8000ed0:	bf00      	nop
 8000ed2:	3790      	adds	r7, #144	@ 0x90
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58024800 	.word	0x58024800
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	02dc6bff 	.word	0x02dc6bff

08000ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <MX_I2C1_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f60 <MX_I2C1_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000f20:	f001 f836 	bl	8001f90 <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f000 fa13 	bl	8001354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000f32:	f001 f8c9 	bl	80020c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 fa0a 	bl	8001354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <MX_I2C1_Init+0x74>)
 8000f44:	f001 f90b 	bl	800215e <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 fa01 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2400003c 	.word	0x2400003c
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	00a0a3f7 	.word	0x00a0a3f7

08000f64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fdc <MX_I2C2_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A0A3F7;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f70:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe0 <MX_I2C2_Init+0x7c>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f86:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f9e:	480e      	ldr	r0, [pc, #56]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000fa0:	f000 fff6 	bl	8001f90 <HAL_I2C_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000faa:	f000 f9d3 	bl	8001354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4809      	ldr	r0, [pc, #36]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000fb2:	f001 f889 	bl	80020c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 f9ca 	bl	8001354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_I2C2_Init+0x74>)
 8000fc4:	f001 f8cb 	bl	800215e <HAL_I2CEx_ConfigDigitalFilter>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f9c1 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	24000090 	.word	0x24000090
 8000fdc:	40005800 	.word	0x40005800
 8000fe0:	00a0a3f7 	.word	0x00a0a3f7

08000fe4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <MX_I2C3_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	@ (800105c <MX_I2C3_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00A0A3F7;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <MX_I2C3_Init+0x74>)
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8001060 <MX_I2C3_Init+0x7c>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <MX_I2C3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_I2C3_Init+0x74>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <MX_I2C3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_I2C3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_I2C3_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_I2C3_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_I2C3_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800101e:	480e      	ldr	r0, [pc, #56]	@ (8001058 <MX_I2C3_Init+0x74>)
 8001020:	f000 ffb6 	bl	8001f90 <HAL_I2C_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800102a:	f000 f993 	bl	8001354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4809      	ldr	r0, [pc, #36]	@ (8001058 <MX_I2C3_Init+0x74>)
 8001032:	f001 f849 	bl	80020c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800103c:	f000 f98a 	bl	8001354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_I2C3_Init+0x74>)
 8001044:	f001 f88b 	bl	800215e <HAL_I2CEx_ConfigDigitalFilter>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 f981 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	240000e4 	.word	0x240000e4
 800105c:	40005c00 	.word	0x40005c00
 8001060:	00a0a3f7 	.word	0x00a0a3f7

08001064 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001082:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_TIM2_Init+0x98>)
 8001084:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001088:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <MX_TIM2_Init+0x98>)
 800108c:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_TIM2_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_TIM2_Init+0x98>)
 800109a:	2201      	movs	r2, #1
 800109c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_TIM2_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_TIM2_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010aa:	4814      	ldr	r0, [pc, #80]	@ (80010fc <MX_TIM2_Init+0x98>)
 80010ac:	f003 fb42 	bl	8004734 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010b6:	f000 f94d 	bl	8001354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	480d      	ldr	r0, [pc, #52]	@ (80010fc <MX_TIM2_Init+0x98>)
 80010c8:	f003 fd1a 	bl	8004b00 <HAL_TIM_ConfigClockSource>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010d2:	f000 f93f 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <MX_TIM2_Init+0x98>)
 80010e4:	f003 ff7c 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010ee:	f000 f931 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	24000138 	.word	0x24000138

08001100 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <MX_TIM4_Init+0x94>)
 8001120:	4a1d      	ldr	r2, [pc, #116]	@ (8001198 <MX_TIM4_Init+0x98>)
 8001122:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_TIM4_Init+0x94>)
 8001126:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800112a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <MX_TIM4_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <MX_TIM4_Init+0x94>)
 8001134:	2204      	movs	r2, #4
 8001136:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_TIM4_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <MX_TIM4_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001144:	4813      	ldr	r0, [pc, #76]	@ (8001194 <MX_TIM4_Init+0x94>)
 8001146:	f003 faf5 	bl	8004734 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001150:	f000 f900 	bl	8001354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <MX_TIM4_Init+0x94>)
 8001162:	f003 fccd 	bl	8004b00 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800116c:	f000 f8f2 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_TIM4_Init+0x94>)
 800117e:	f003 ff2f 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001188:	f000 f8e4 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000184 	.word	0x24000184
 8001198:	40000800 	.word	0x40000800

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b2:	4b63      	ldr	r3, [pc, #396]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	4a61      	ldr	r2, [pc, #388]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80011ba:	f043 0320 	orr.w	r3, r3, #32
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e0:	4b57      	ldr	r3, [pc, #348]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f4:	4a52      	ldr	r2, [pc, #328]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fe:	4b50      	ldr	r3, [pc, #320]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800120c:	4b4c      	ldr	r3, [pc, #304]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001212:	4a4b      	ldr	r2, [pc, #300]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 8001214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001218:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121c:	4b48      	ldr	r3, [pc, #288]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b45      	ldr	r3, [pc, #276]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001230:	4a43      	ldr	r2, [pc, #268]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123a:	4b41      	ldr	r3, [pc, #260]	@ (8001340 <MX_GPIO_Init+0x1a4>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Mag_GPIO_Port, Mag_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2180      	movs	r1, #128	@ 0x80
 800124c:	483d      	ldr	r0, [pc, #244]	@ (8001344 <MX_GPIO_Init+0x1a8>)
 800124e:	f000 fe6b 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorL1_Pin|motorL2_Pin|motorL3_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2107      	movs	r1, #7
 8001256:	483c      	ldr	r0, [pc, #240]	@ (8001348 <MX_GPIO_Init+0x1ac>)
 8001258:	f000 fe66 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M1dir_Pin|M2dir_Pin|M3dir_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001262:	483a      	ldr	r0, [pc, #232]	@ (800134c <MX_GPIO_Init+0x1b0>)
 8001264:	f000 fe60 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2180      	movs	r1, #128	@ 0x80
 800126c:	4838      	ldr	r0, [pc, #224]	@ (8001350 <MX_GPIO_Init+0x1b4>)
 800126e:	f000 fe5b 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LimL1_Pin LimL2_Pin LimL3_Pin */
  GPIO_InitStruct.Pin = LimL1_Pin|LimL2_Pin|LimL3_Pin;
 8001272:	2370      	movs	r3, #112	@ 0x70
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800127a:	2302      	movs	r3, #2
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	482f      	ldr	r0, [pc, #188]	@ (8001344 <MX_GPIO_Init+0x1a8>)
 8001286:	f000 fc8f 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mag_Pin */
  GPIO_InitStruct.Pin = Mag_Pin;
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Mag_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4828      	ldr	r0, [pc, #160]	@ (8001344 <MX_GPIO_Init+0x1a8>)
 80012a2:	f000 fc81 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : motorL1_Pin motorL2_Pin */
  GPIO_InitStruct.Pin = motorL1_Pin|motorL2_Pin;
 80012a6:	2303      	movs	r3, #3
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012b2:	2301      	movs	r3, #1
 80012b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4822      	ldr	r0, [pc, #136]	@ (8001348 <MX_GPIO_Init+0x1ac>)
 80012be:	f000 fc73 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : motorL3_Pin */
  GPIO_InitStruct.Pin = motorL3_Pin;
 80012c2:	2304      	movs	r3, #4
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(motorL3_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	481b      	ldr	r0, [pc, #108]	@ (8001348 <MX_GPIO_Init+0x1ac>)
 80012da:	f000 fc65 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1dir_Pin M2dir_Pin M3dir_Pin */
  GPIO_InitStruct.Pin = M1dir_Pin|M2dir_Pin|M3dir_Pin;
 80012de:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4815      	ldr	r0, [pc, #84]	@ (800134c <MX_GPIO_Init+0x1b0>)
 80012f8:	f000 fc56 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480f      	ldr	r0, [pc, #60]	@ (8001350 <MX_GPIO_Init+0x1b4>)
 8001314:	f000 fc48 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001318:	2308      	movs	r3, #8
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_CRS_SYNC;
 8001328:	230a      	movs	r3, #10
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_GPIO_Init+0x1ac>)
 8001334:	f000 fc38 	bl	8001ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	@ 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	58024400 	.word	0x58024400
 8001344:	58020000 	.word	0x58020000
 8001348:	58020400 	.word	0x58020400
 800134c:	58021400 	.word	0x58021400
 8001350:	58021800 	.word	0x58021800

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <Error_Handler+0x8>

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_MspInit+0x30>)
 8001368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800136c:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_MspInit+0x30>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_MspInit+0x30>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	58024400 	.word	0x58024400

08001394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0be      	sub	sp, #248	@ 0xf8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b0:	22b8      	movs	r2, #184	@ 0xb8
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fecd 	bl	8005154 <memset>
  if(hi2c->Instance==I2C1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a85      	ldr	r2, [pc, #532]	@ (80015d4 <HAL_I2C_MspInit+0x240>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d146      	bne.n	8001452 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013c4:	f04f 0208 	mov.w	r2, #8
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fe50 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013e6:	f7ff ffb5 	bl	8001354 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b7b      	ldr	r3, [pc, #492]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f0:	4a79      	ldr	r2, [pc, #484]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fa:	4b77      	ldr	r3, [pc, #476]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001408:	23c0      	movs	r3, #192	@ 0xc0
 800140a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140e:	2312      	movs	r3, #18
 8001410:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001420:	2304      	movs	r3, #4
 8001422:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800142a:	4619      	mov	r1, r3
 800142c:	486b      	ldr	r0, [pc, #428]	@ (80015dc <HAL_I2C_MspInit+0x248>)
 800142e:	f000 fbbb 	bl	8001ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001432:	4b69      	ldr	r3, [pc, #420]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 8001434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001438:	4a67      	ldr	r2, [pc, #412]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800143e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001442:	4b65      	ldr	r3, [pc, #404]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 8001444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001450:	e0bc      	b.n	80015cc <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a62      	ldr	r2, [pc, #392]	@ (80015e0 <HAL_I2C_MspInit+0x24c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d146      	bne.n	80014ea <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800145c:	f04f 0208 	mov.w	r2, #8
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fe04 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800147e:	f7ff ff69 	bl	8001354 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001482:	4b55      	ldr	r3, [pc, #340]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001488:	4a53      	ldr	r2, [pc, #332]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001492:	4b51      	ldr	r3, [pc, #324]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a6:	2312      	movs	r3, #18
 80014a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b8:	2304      	movs	r3, #4
 80014ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014be:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4847      	ldr	r0, [pc, #284]	@ (80015e4 <HAL_I2C_MspInit+0x250>)
 80014c6:	f000 fb6f 	bl	8001ba8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80014cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014d0:	4a41      	ldr	r2, [pc, #260]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80014d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014da:	4b3f      	ldr	r3, [pc, #252]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80014dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	69bb      	ldr	r3, [r7, #24]
}
 80014e8:	e070      	b.n	80015cc <HAL_I2C_MspInit+0x238>
  else if(hi2c->Instance==I2C3)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a3e      	ldr	r2, [pc, #248]	@ (80015e8 <HAL_I2C_MspInit+0x254>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d16b      	bne.n	80015cc <HAL_I2C_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014f4:	f04f 0208 	mov.w	r2, #8
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fdb8 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_MspInit+0x186>
      Error_Handler();
 8001516:	f7ff ff1d 	bl	8001354 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001520:	4a2d      	ldr	r2, [pc, #180]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152a:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	4a26      	ldr	r2, [pc, #152]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001548:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001556:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800155a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001570:	2304      	movs	r3, #4
 8001572:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800157a:	4619      	mov	r1, r3
 800157c:	481b      	ldr	r0, [pc, #108]	@ (80015ec <HAL_I2C_MspInit+0x258>)
 800157e:	f000 fb13 	bl	8001ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158a:	2312      	movs	r3, #18
 800158c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800159c:	2304      	movs	r3, #4
 800159e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4811      	ldr	r0, [pc, #68]	@ (80015f0 <HAL_I2C_MspInit+0x25c>)
 80015aa:	f000 fafd 	bl	8001ba8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80015b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b4:	4a08      	ldr	r2, [pc, #32]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80015b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_I2C_MspInit+0x244>)
 80015c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	bf00      	nop
 80015ce:	37f8      	adds	r7, #248	@ 0xf8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40005400 	.word	0x40005400
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58020400 	.word	0x58020400
 80015e0:	40005800 	.word	0x40005800
 80015e4:	58021400 	.word	0x58021400
 80015e8:	40005c00 	.word	0x40005c00
 80015ec:	58020800 	.word	0x58020800
 80015f0:	58020000 	.word	0x58020000

080015f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001604:	d117      	bne.n	8001636 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <HAL_TIM_Base_MspInit+0x84>)
 8001608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800160c:	4a1a      	ldr	r2, [pc, #104]	@ (8001678 <HAL_TIM_Base_MspInit+0x84>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <HAL_TIM_Base_MspInit+0x84>)
 8001618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	201c      	movs	r0, #28
 800162a:	f000 fa88 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800162e:	201c      	movs	r0, #28
 8001630:	f000 fa9f 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001634:	e01b      	b.n	800166e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a10      	ldr	r2, [pc, #64]	@ (800167c <HAL_TIM_Base_MspInit+0x88>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d116      	bne.n	800166e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001640:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_TIM_Base_MspInit+0x84>)
 8001642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001646:	4a0c      	ldr	r2, [pc, #48]	@ (8001678 <HAL_TIM_Base_MspInit+0x84>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_TIM_Base_MspInit+0x84>)
 8001652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	201e      	movs	r0, #30
 8001664:	f000 fa6b 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001668:	201e      	movs	r0, #30
 800166a:	f000 fa82 	bl	8001b72 <HAL_NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	58024400 	.word	0x58024400
 800167c:	40000800 	.word	0x40000800

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f000 f92b 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <TIM2_IRQHandler+0x10>)
 80016e6:	f003 f903 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	24000138 	.word	0x24000138

080016f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <TIM4_IRQHandler+0x10>)
 80016fa:	f003 f8f9 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	24000184 	.word	0x24000184

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800170c:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <SystemInit+0xd0>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a31      	ldr	r2, [pc, #196]	@ (80017d8 <SystemInit+0xd0>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800171c:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <SystemInit+0xd4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	2b06      	cmp	r3, #6
 8001726:	d807      	bhi.n	8001738 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001728:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <SystemInit+0xd4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 030f 	bic.w	r3, r3, #15
 8001730:	4a2a      	ldr	r2, [pc, #168]	@ (80017dc <SystemInit+0xd4>)
 8001732:	f043 0307 	orr.w	r3, r3, #7
 8001736:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <SystemInit+0xd8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a28      	ldr	r2, [pc, #160]	@ (80017e0 <SystemInit+0xd8>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <SystemInit+0xd8>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800174a:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <SystemInit+0xd8>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4924      	ldr	r1, [pc, #144]	@ (80017e0 <SystemInit+0xd8>)
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <SystemInit+0xdc>)
 8001752:	4013      	ands	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001756:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <SystemInit+0xd4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <SystemInit+0xd4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 030f 	bic.w	r3, r3, #15
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <SystemInit+0xd4>)
 800176c:	f043 0307 	orr.w	r3, r3, #7
 8001770:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <SystemInit+0xd8>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <SystemInit+0xd8>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <SystemInit+0xd8>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <SystemInit+0xd8>)
 8001786:	4a18      	ldr	r2, [pc, #96]	@ (80017e8 <SystemInit+0xe0>)
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <SystemInit+0xd8>)
 800178c:	4a17      	ldr	r2, [pc, #92]	@ (80017ec <SystemInit+0xe4>)
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <SystemInit+0xd8>)
 8001792:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <SystemInit+0xe8>)
 8001794:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <SystemInit+0xd8>)
 8001798:	2200      	movs	r2, #0
 800179a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <SystemInit+0xd8>)
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <SystemInit+0xe8>)
 80017a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <SystemInit+0xd8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <SystemInit+0xd8>)
 80017aa:	4a11      	ldr	r2, [pc, #68]	@ (80017f0 <SystemInit+0xe8>)
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <SystemInit+0xd8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <SystemInit+0xd8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <SystemInit+0xd8>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <SystemInit+0xd8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <SystemInit+0xec>)
 80017c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	52002000 	.word	0x52002000
 80017e0:	58024400 	.word	0x58024400
 80017e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017e8:	02020200 	.word	0x02020200
 80017ec:	01ff0000 	.word	0x01ff0000
 80017f0:	01010280 	.word	0x01010280
 80017f4:	52004000 	.word	0x52004000

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017fc:	f7ff ff84 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001802:	490d      	ldr	r1, [pc, #52]	@ (8001838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001818:	4c0a      	ldr	r4, [pc, #40]	@ (8001844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f003 fc9d 	bl	8005164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff fa93 	bl	8000d54 <main>
  bx  lr
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001834:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001838:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 800183c:	08005264 	.word	0x08005264
  ldr r2, =_sbss
 8001840:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8001844:	2400023c 	.word	0x2400023c

08001848 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC3_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f000 f968 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001858:	f001 fa98 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_Init+0x68>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	4913      	ldr	r1, [pc, #76]	@ (80018b8 <HAL_Init+0x6c>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_Init+0x68>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	4a0e      	ldr	r2, [pc, #56]	@ (80018b8 <HAL_Init+0x6c>)
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	4a0b      	ldr	r2, [pc, #44]	@ (80018bc <HAL_Init+0x70>)
 800188e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001890:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <HAL_Init+0x74>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001896:	200f      	movs	r0, #15
 8001898:	f000 f814 	bl	80018c4 <HAL_InitTick>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e002      	b.n	80018ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018a6:	f7ff fd5b 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400
 80018b8:	0800524c 	.word	0x0800524c
 80018bc:	24000014 	.word	0x24000014
 80018c0:	24000010 	.word	0x24000010

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_InitTick+0x60>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e021      	b.n	800191c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <HAL_InitTick+0x64>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_InitTick+0x60>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f94d 	bl	8001b8e <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 f917 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	@ (800192c <HAL_InitTick+0x68>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2400001c 	.word	0x2400001c
 8001928:	24000010 	.word	0x24000010
 800192c:	24000018 	.word	0x24000018

08001930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_IncTick+0x20>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_IncTick+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_IncTick+0x24>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	2400001c 	.word	0x2400001c
 8001954:	24000238 	.word	0x24000238

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	24000238 	.word	0x24000238

08001970 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetREVID+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0c1b      	lsrs	r3, r3, #16
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	5c001000 	.word	0x5c001000

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	05fa0000 	.word	0x05fa0000

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff40 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff90 	bl	8001a7c <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5f 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff33 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa4 	bl	8001ae4 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	@ 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bb6:	4b86      	ldr	r3, [pc, #536]	@ (8001dd0 <HAL_GPIO_Init+0x228>)
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bba:	e18c      	b.n	8001ed6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 817e 	beq.w	8001ed0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x44>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	69b9      	ldr	r1, [r7, #24]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80d8 	beq.w	8001ed0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <HAL_GPIO_Init+0x22c>)
 8001d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d26:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd4 <HAL_GPIO_Init+0x22c>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d30:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <HAL_GPIO_Init+0x22c>)
 8001d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a26      	ldr	r2, [pc, #152]	@ (8001dd8 <HAL_GPIO_Init+0x230>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1d      	ldr	r2, [pc, #116]	@ (8001ddc <HAL_GPIO_Init+0x234>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d04a      	beq.n	8001e00 <HAL_GPIO_Init+0x258>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001de0 <HAL_GPIO_Init+0x238>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02b      	beq.n	8001dca <HAL_GPIO_Init+0x222>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <HAL_GPIO_Init+0x23c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d025      	beq.n	8001dc6 <HAL_GPIO_Init+0x21e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001de8 <HAL_GPIO_Init+0x240>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01f      	beq.n	8001dc2 <HAL_GPIO_Init+0x21a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <HAL_GPIO_Init+0x244>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x216>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a18      	ldr	r2, [pc, #96]	@ (8001df0 <HAL_GPIO_Init+0x248>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x212>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a17      	ldr	r2, [pc, #92]	@ (8001df4 <HAL_GPIO_Init+0x24c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <HAL_GPIO_Init+0x250>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x20a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a15      	ldr	r2, [pc, #84]	@ (8001dfc <HAL_GPIO_Init+0x254>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x206>
 8001daa:	2309      	movs	r3, #9
 8001dac:	e029      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001dae:	230a      	movs	r3, #10
 8001db0:	e027      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e025      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e023      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	e021      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e01f      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e01d      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e01b      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e019      	b.n	8001e02 <HAL_GPIO_Init+0x25a>
 8001dce:	bf00      	nop
 8001dd0:	58000080 	.word	0x58000080
 8001dd4:	58024400 	.word	0x58024400
 8001dd8:	58000400 	.word	0x58000400
 8001ddc:	58020000 	.word	0x58020000
 8001de0:	58020400 	.word	0x58020400
 8001de4:	58020800 	.word	0x58020800
 8001de8:	58020c00 	.word	0x58020c00
 8001dec:	58021000 	.word	0x58021000
 8001df0:	58021400 	.word	0x58021400
 8001df4:	58021800 	.word	0x58021800
 8001df8:	58021c00 	.word	0x58021c00
 8001dfc:	58022400 	.word	0x58022400
 8001e00:	2300      	movs	r3, #0
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	f002 0203 	and.w	r2, r2, #3
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	4093      	lsls	r3, r2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e12:	4938      	ldr	r1, [pc, #224]	@ (8001ef4 <HAL_GPIO_Init+0x34c>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f ae6b 	bne.w	8001bbc <HAL_GPIO_Init+0x14>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3724      	adds	r7, #36	@ 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	58000400 	.word	0x58000400

08001ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f44:	e003      	b.n	8001f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f6c:	887a      	ldrh	r2, [r7, #2]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	041a      	lsls	r2, r3, #16
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e08b      	b.n	80020ba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff f9ec 	bl	8001394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	@ 0x24
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fe0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ff0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	e006      	b.n	8002018 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002016:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d108      	bne.n	8002032 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	e007      	b.n	8002042 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_I2C_Init+0x134>)
 800204e:	430b      	orrs	r3, r1
 8002050:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002060:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69d9      	ldr	r1, [r3, #28]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	02008000 	.word	0x02008000

080020c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d138      	bne.n	8002150 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e032      	b.n	8002152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2224      	movs	r2, #36	@ 0x24
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800211a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002150:	2302      	movs	r3, #2
  }
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b20      	cmp	r3, #32
 8002172:	d139      	bne.n	80021e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800217e:	2302      	movs	r3, #2
 8002180:	e033      	b.n	80021ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2224      	movs	r2, #36	@ 0x24
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
  }
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_PWREx_ConfigSupply+0x70>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00a      	beq.n	8002222 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800220c:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <HAL_PWREx_ConfigSupply+0x70>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e01f      	b.n	800225e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e01d      	b.n	800225e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_PWREx_ConfigSupply+0x70>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f023 0207 	bic.w	r2, r3, #7
 800222a:	490f      	ldr	r1, [pc, #60]	@ (8002268 <HAL_PWREx_ConfigSupply+0x70>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4313      	orrs	r3, r2
 8002230:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002232:	f7ff fb91 	bl	8001958 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002238:	e009      	b.n	800224e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800223a:	f7ff fb8d 	bl	8001958 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002248:	d901      	bls.n	800224e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e007      	b.n	800225e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_PWREx_ConfigSupply+0x70>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800225a:	d1ee      	bne.n	800223a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	58024800 	.word	0x58024800

0800226c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e3c8      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8087 	beq.w	800239a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228c:	4b88      	ldr	r3, [pc, #544]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002296:	4b86      	ldr	r3, [pc, #536]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d007      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46>
 80022a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a4:	2b18      	cmp	r3, #24
 80022a6:	d110      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
 80022a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d10b      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	4b7f      	ldr	r3, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d06c      	beq.n	8002398 <HAL_RCC_OscConfig+0x12c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d168      	bne.n	8002398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e3a2      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x76>
 80022d4:	4b76      	ldr	r3, [pc, #472]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a75      	ldr	r2, [pc, #468]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e02e      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b71      	ldr	r3, [pc, #452]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a70      	ldr	r2, [pc, #448]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b6e      	ldr	r3, [pc, #440]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6d      	ldr	r2, [pc, #436]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80022fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0xbc>
 800230e:	4b68      	ldr	r3, [pc, #416]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a67      	ldr	r2, [pc, #412]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b65      	ldr	r3, [pc, #404]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a64      	ldr	r2, [pc, #400]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002328:	4b61      	ldr	r3, [pc, #388]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a60      	ldr	r2, [pc, #384]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b5e      	ldr	r3, [pc, #376]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5d      	ldr	r2, [pc, #372]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fb06 	bl	8001958 <HAL_GetTick>
 800234c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fb02 	bl	8001958 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e356      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002362:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xe4>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7ff faf2 	bl	8001958 <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff faee 	bl	8001958 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e342      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800238a:	4b49      	ldr	r3, [pc, #292]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x10c>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 808c 	beq.w	80024c0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a8:	4b41      	ldr	r3, [pc, #260]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023b2:	4b3f      	ldr	r3, [pc, #252]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_RCC_OscConfig+0x162>
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2b18      	cmp	r3, #24
 80023c2:	d137      	bne.n	8002434 <HAL_RCC_OscConfig+0x1c8>
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d132      	bne.n	8002434 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ce:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e314      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023e6:	4b32      	ldr	r3, [pc, #200]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0219 	bic.w	r2, r3, #25
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	492f      	ldr	r1, [pc, #188]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7ff faae 	bl	8001958 <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7ff faaa 	bl	8001958 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e2fe      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002412:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	061b      	lsls	r3, r3, #24
 800242c:	4920      	ldr	r1, [pc, #128]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002432:	e045      	b.n	80024c0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d026      	beq.n	800248a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800243c:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 0219 	bic.w	r2, r3, #25
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4919      	ldr	r1, [pc, #100]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7ff fa83 	bl	8001958 <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7ff fa7f 	bl	8001958 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e2d3      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	490b      	ldr	r1, [pc, #44]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	e01a      	b.n	80024c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a08      	ldr	r2, [pc, #32]	@ (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7ff fa5f 	bl	8001958 <HAL_GetTick>
 800249a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff fa5b 	bl	8001958 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d903      	bls.n	80024b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e2af      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
 80024b0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024b4:	4b96      	ldr	r3, [pc, #600]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d06a      	beq.n	80025a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024cc:	4b90      	ldr	r3, [pc, #576]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d007      	beq.n	80024f2 <HAL_RCC_OscConfig+0x286>
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b18      	cmp	r3, #24
 80024e6:	d11b      	bne.n	8002520 <HAL_RCC_OscConfig+0x2b4>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024f2:	4b87      	ldr	r3, [pc, #540]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x29e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	2b80      	cmp	r3, #128	@ 0x80
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e282      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800250a:	4b81      	ldr	r3, [pc, #516]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	497d      	ldr	r1, [pc, #500]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800251e:	e040      	b.n	80025a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d023      	beq.n	8002570 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002528:	4b79      	ldr	r3, [pc, #484]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a78      	ldr	r2, [pc, #480]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 800252e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff fa10 	bl	8001958 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800253c:	f7ff fa0c 	bl	8001958 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e260      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800254e:	4b70      	ldr	r3, [pc, #448]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800255a:	4b6d      	ldr	r3, [pc, #436]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	4969      	ldr	r1, [pc, #420]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	60cb      	str	r3, [r1, #12]
 800256e:	e018      	b.n	80025a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002570:	4b67      	ldr	r3, [pc, #412]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a66      	ldr	r2, [pc, #408]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800257a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7ff f9ec 	bl	8001958 <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002584:	f7ff f9e8 	bl	8001958 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e23c      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002596:	4b5e      	ldr	r3, [pc, #376]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d036      	beq.n	800261c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d019      	beq.n	80025ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b56      	ldr	r3, [pc, #344]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ba:	4a55      	ldr	r2, [pc, #340]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7ff f9c9 	bl	8001958 <HAL_GetTick>
 80025c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ca:	f7ff f9c5 	bl	8001958 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e219      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80025de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x35e>
 80025e8:	e018      	b.n	800261c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ea:	4b49      	ldr	r3, [pc, #292]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80025ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ee:	4a48      	ldr	r2, [pc, #288]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7ff f9af 	bl	8001958 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fe:	f7ff f9ab 	bl	8001958 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1ff      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002610:	4b3f      	ldr	r3, [pc, #252]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d036      	beq.n	8002696 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d019      	beq.n	8002664 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002630:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a36      	ldr	r2, [pc, #216]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002636:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800263a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800263c:	f7ff f98c 	bl	8001958 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002644:	f7ff f988 	bl	8001958 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1dc      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002656:	4b2e      	ldr	r3, [pc, #184]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x3d8>
 8002662:	e018      	b.n	8002696 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002664:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a29      	ldr	r2, [pc, #164]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 800266a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800266e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002670:	f7ff f972 	bl	8001958 <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002678:	f7ff f96e 	bl	8001958 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1c2      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800268a:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8086 	beq.w	80027b0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_RCC_OscConfig+0x4a8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002714 <HAL_RCC_OscConfig+0x4a8>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026b0:	f7ff f952 	bl	8001958 <HAL_GetTick>
 80026b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b8:	f7ff f94e 	bl	8001958 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1a2      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ca:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_RCC_OscConfig+0x4a8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d106      	bne.n	80026ec <HAL_RCC_OscConfig+0x480>
 80026de:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ea:	e032      	b.n	8002752 <HAL_RCC_OscConfig+0x4e6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <HAL_RCC_OscConfig+0x4ac>
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002704:	4a02      	ldr	r2, [pc, #8]	@ (8002710 <HAL_RCC_OscConfig+0x4a4>)
 8002706:	f023 0304 	bic.w	r3, r3, #4
 800270a:	6713      	str	r3, [r2, #112]	@ 0x70
 800270c:	e021      	b.n	8002752 <HAL_RCC_OscConfig+0x4e6>
 800270e:	bf00      	nop
 8002710:	58024400 	.word	0x58024400
 8002714:	58024800 	.word	0x58024800
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x4ce>
 8002720:	4b83      	ldr	r3, [pc, #524]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	4a82      	ldr	r2, [pc, #520]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6713      	str	r3, [r2, #112]	@ 0x70
 800272c:	4b80      	ldr	r3, [pc, #512]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a7f      	ldr	r2, [pc, #508]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	e00b      	b.n	8002752 <HAL_RCC_OscConfig+0x4e6>
 800273a:	4b7d      	ldr	r3, [pc, #500]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	4a7c      	ldr	r2, [pc, #496]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6713      	str	r3, [r2, #112]	@ 0x70
 8002746:	4b7a      	ldr	r3, [pc, #488]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	4a79      	ldr	r2, [pc, #484]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d015      	beq.n	8002786 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7ff f8fd 	bl	8001958 <HAL_GetTick>
 800275e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff f8f9 	bl	8001958 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e14b      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002778:	4b6d      	ldr	r3, [pc, #436]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ee      	beq.n	8002762 <HAL_RCC_OscConfig+0x4f6>
 8002784:	e014      	b.n	80027b0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7ff f8e7 	bl	8001958 <HAL_GetTick>
 800278a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff f8e3 	bl	8001958 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e135      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027a4:	4b62      	ldr	r3, [pc, #392]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ee      	bne.n	800278e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 812a 	beq.w	8002a0e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027c2:	2b18      	cmp	r3, #24
 80027c4:	f000 80ba 	beq.w	800293c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f040 8095 	bne.w	80028fc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b57      	ldr	r3, [pc, #348]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a56      	ldr	r2, [pc, #344]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80027d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7ff f8bb 	bl	8001958 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7ff f8b7 	bl	8001958 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e10b      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002804:	4b4a      	ldr	r3, [pc, #296]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002806:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002808:	4b4a      	ldr	r3, [pc, #296]	@ (8002934 <HAL_RCC_OscConfig+0x6c8>)
 800280a:	4013      	ands	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	430a      	orrs	r2, r1
 8002818:	4945      	ldr	r1, [pc, #276]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	628b      	str	r3, [r1, #40]	@ 0x28
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	3b01      	subs	r3, #1
 8002824:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282c:	3b01      	subs	r3, #1
 800282e:	025b      	lsls	r3, r3, #9
 8002830:	b29b      	uxth	r3, r3
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002838:	3b01      	subs	r3, #1
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002846:	3b01      	subs	r3, #1
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800284e:	4938      	ldr	r1, [pc, #224]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002854:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	4a35      	ldr	r2, [pc, #212]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002860:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002864:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <HAL_RCC_OscConfig+0x6cc>)
 8002866:	4013      	ands	r3, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800286c:	00d2      	lsls	r2, r2, #3
 800286e:	4930      	ldr	r1, [pc, #192]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002874:	4b2e      	ldr	r3, [pc, #184]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	f023 020c 	bic.w	r2, r3, #12
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	492b      	ldr	r1, [pc, #172]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002886:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	f023 0202 	bic.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	4927      	ldr	r1, [pc, #156]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002898:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	4a24      	ldr	r2, [pc, #144]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a4:	4b22      	ldr	r3, [pc, #136]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7ff f840 	bl	8001958 <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7ff f83c 	bl	8001958 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e090      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x670>
 80028fa:	e088      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0b      	ldr	r2, [pc, #44]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7ff f826 	bl	8001958 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7ff f822 	bl	8001958 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e076      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002922:	4b03      	ldr	r3, [pc, #12]	@ (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x6a4>
 800292e:	e06e      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a2>
 8002930:	58024400 	.word	0x58024400
 8002934:	fffffc0c 	.word	0xfffffc0c
 8002938:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800293c:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002942:	4b35      	ldr	r3, [pc, #212]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	2b01      	cmp	r3, #1
 800294e:	d031      	beq.n	80029b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d12a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d122      	bne.n	80029b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d11a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0a5b      	lsrs	r3, r3, #9
 8002982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d111      	bne.n	80029b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	0e1b      	lsrs	r3, r3, #24
 80029a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e02b      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029b8:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 80029ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d01f      	beq.n	8002a0e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029ce:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	4a11      	ldr	r2, [pc, #68]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029da:	f7fe ffbd 	bl	8001958 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029e0:	bf00      	nop
 80029e2:	f7fe ffb9 	bl	8001958 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d0f9      	beq.n	80029e2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 80029f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <HAL_RCC_OscConfig+0x7b0>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029fa:	00d2      	lsls	r2, r2, #3
 80029fc:	4906      	ldr	r1, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_RCC_OscConfig+0x7ac>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3730      	adds	r7, #48	@ 0x30
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	ffff0007 	.word	0xffff0007

08002a20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e19c      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b8a      	ldr	r3, [pc, #552]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b87      	ldr	r3, [pc, #540]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 020f 	bic.w	r2, r3, #15
 8002a4a:	4985      	ldr	r1, [pc, #532]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b83      	ldr	r3, [pc, #524]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e184      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d010      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	4b7b      	ldr	r3, [pc, #492]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d908      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a80:	4b78      	ldr	r3, [pc, #480]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	4975      	ldr	r1, [pc, #468]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d010      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	4b70      	ldr	r3, [pc, #448]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d908      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002aae:	4b6d      	ldr	r3, [pc, #436]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	496a      	ldr	r1, [pc, #424]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	4b64      	ldr	r3, [pc, #400]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d908      	bls.n	8002aee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002adc:	4b61      	ldr	r3, [pc, #388]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	495e      	ldr	r1, [pc, #376]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69da      	ldr	r2, [r3, #28]
 8002afe:	4b59      	ldr	r3, [pc, #356]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d908      	bls.n	8002b1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b0a:	4b56      	ldr	r3, [pc, #344]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4953      	ldr	r1, [pc, #332]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d908      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b4a      	ldr	r3, [pc, #296]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f023 020f 	bic.w	r2, r3, #15
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4947      	ldr	r1, [pc, #284]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d055      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b56:	4b43      	ldr	r3, [pc, #268]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4940      	ldr	r1, [pc, #256]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b70:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d121      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0f6      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b88:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d115      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0ea      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ba0:	4b30      	ldr	r3, [pc, #192]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0de      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0d6      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bc0:	4b28      	ldr	r3, [pc, #160]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f023 0207 	bic.w	r2, r3, #7
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4925      	ldr	r1, [pc, #148]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fec1 	bl	8001958 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bda:	f7fe febd 	bl	8001958 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0be      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d1eb      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d208      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f023 020f 	bic.w	r2, r3, #15
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	490e      	ldr	r1, [pc, #56]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d214      	bcs.n	8002c68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	4906      	ldr	r1, [pc, #24]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e086      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
 8002c60:	52002000 	.word	0x52002000
 8002c64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	4b3f      	ldr	r3, [pc, #252]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d208      	bcs.n	8002c96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c84:	4b3c      	ldr	r3, [pc, #240]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	4939      	ldr	r1, [pc, #228]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d208      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cb2:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	492e      	ldr	r1, [pc, #184]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	4b28      	ldr	r3, [pc, #160]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d208      	bcs.n	8002cf2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ce0:	4b25      	ldr	r3, [pc, #148]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4922      	ldr	r1, [pc, #136]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d010      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d208      	bcs.n	8002d20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4917      	ldr	r1, [pc, #92]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d20:	f000 f834 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	4912      	ldr	r1, [pc, #72]	@ (8002d7c <HAL_RCC_ClockConfig+0x35c>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <HAL_RCC_ClockConfig+0x35c>)
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <HAL_RCC_ClockConfig+0x360>)
 8002d56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d58:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <HAL_RCC_ClockConfig+0x364>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_RCC_ClockConfig+0x368>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fdae 	bl	80018c4 <HAL_InitTick>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	0800524c 	.word	0x0800524c
 8002d80:	24000014 	.word	0x24000014
 8002d84:	24000010 	.word	0x24000010
 8002d88:	24000018 	.word	0x24000018

08002d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	@ 0x24
 8002d90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d92:	4bb3      	ldr	r3, [pc, #716]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d9a:	2b18      	cmp	r3, #24
 8002d9c:	f200 8155 	bhi.w	800304a <HAL_RCC_GetSysClockFreq+0x2be>
 8002da0:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002e0d 	.word	0x08002e0d
 8002dac:	0800304b 	.word	0x0800304b
 8002db0:	0800304b 	.word	0x0800304b
 8002db4:	0800304b 	.word	0x0800304b
 8002db8:	0800304b 	.word	0x0800304b
 8002dbc:	0800304b 	.word	0x0800304b
 8002dc0:	0800304b 	.word	0x0800304b
 8002dc4:	0800304b 	.word	0x0800304b
 8002dc8:	08002e33 	.word	0x08002e33
 8002dcc:	0800304b 	.word	0x0800304b
 8002dd0:	0800304b 	.word	0x0800304b
 8002dd4:	0800304b 	.word	0x0800304b
 8002dd8:	0800304b 	.word	0x0800304b
 8002ddc:	0800304b 	.word	0x0800304b
 8002de0:	0800304b 	.word	0x0800304b
 8002de4:	0800304b 	.word	0x0800304b
 8002de8:	08002e39 	.word	0x08002e39
 8002dec:	0800304b 	.word	0x0800304b
 8002df0:	0800304b 	.word	0x0800304b
 8002df4:	0800304b 	.word	0x0800304b
 8002df8:	0800304b 	.word	0x0800304b
 8002dfc:	0800304b 	.word	0x0800304b
 8002e00:	0800304b 	.word	0x0800304b
 8002e04:	0800304b 	.word	0x0800304b
 8002e08:	08002e3f 	.word	0x08002e3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e0c:	4b94      	ldr	r3, [pc, #592]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d009      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e18:	4b91      	ldr	r3, [pc, #580]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	4a90      	ldr	r2, [pc, #576]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e2a:	e111      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e2c:	4b8d      	ldr	r3, [pc, #564]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e2e:	61bb      	str	r3, [r7, #24]
      break;
 8002e30:	e10e      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e32:	4b8d      	ldr	r3, [pc, #564]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e34:	61bb      	str	r3, [r7, #24]
      break;
 8002e36:	e10b      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e38:	4b8c      	ldr	r3, [pc, #560]	@ (800306c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e3a:	61bb      	str	r3, [r7, #24]
      break;
 8002e3c:	e108      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e3e:	4b88      	ldr	r3, [pc, #544]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e48:	4b85      	ldr	r3, [pc, #532]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e54:	4b82      	ldr	r3, [pc, #520]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e5e:	4b80      	ldr	r3, [pc, #512]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e62:	08db      	lsrs	r3, r3, #3
 8002e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80e1 	beq.w	8003044 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	f000 8083 	beq.w	8002f90 <HAL_RCC_GetSysClockFreq+0x204>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	f200 80a1 	bhi.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x248>
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x114>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d056      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e9e:	e099      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02d      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002eac:	4b6c      	ldr	r3, [pc, #432]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	4a6b      	ldr	r2, [pc, #428]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ed6:	4b62      	ldr	r3, [pc, #392]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f06:	e087      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003074 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1a:	4b51      	ldr	r3, [pc, #324]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f4a:	e065      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5e:	4b40      	ldr	r3, [pc, #256]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f8e:	e043      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800307c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fd2:	e021      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003016:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	0a5b      	lsrs	r3, r3, #9
 800301e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003022:	3301      	adds	r3, #1
 8003024:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	ee07 3a90 	vmov	s15, r3
 800302c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003030:	edd7 6a07 	vldr	s13, [r7, #28]
 8003034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800303c:	ee17 3a90 	vmov	r3, s15
 8003040:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003042:	e005      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
      break;
 8003048:	e002      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800304a:	4b07      	ldr	r3, [pc, #28]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800304c:	61bb      	str	r3, [r7, #24]
      break;
 800304e:	bf00      	nop
  }

  return sysclockfreq;
 8003050:	69bb      	ldr	r3, [r7, #24]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	58024400 	.word	0x58024400
 8003064:	03d09000 	.word	0x03d09000
 8003068:	003d0900 	.word	0x003d0900
 800306c:	007a1200 	.word	0x007a1200
 8003070:	46000000 	.word	0x46000000
 8003074:	4c742400 	.word	0x4c742400
 8003078:	4a742400 	.word	0x4a742400
 800307c:	4af42400 	.word	0x4af42400

08003080 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003084:	b0c6      	sub	sp, #280	@ 0x118
 8003086:	af00      	add	r7, sp, #0
 8003088:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800308c:	2300      	movs	r3, #0
 800308e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80030a4:	2500      	movs	r5, #0
 80030a6:	ea54 0305 	orrs.w	r3, r4, r5
 80030aa:	d049      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030b6:	d02f      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030bc:	d828      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030c2:	d01a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030c8:	d822      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030d2:	d007      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030d4:	e01c      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d6:	4bab      	ldr	r3, [pc, #684]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	4aaa      	ldr	r2, [pc, #680]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030e2:	e01a      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e8:	3308      	adds	r3, #8
 80030ea:	2102      	movs	r1, #2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 f9bd 	bl	800446c <RCCEx_PLL2_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030f8:	e00f      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030fe:	3328      	adds	r3, #40	@ 0x28
 8003100:	2102      	movs	r1, #2
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fa64 	bl	80045d0 <RCCEx_PLL3_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800310e:	e004      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003122:	4b98      	ldr	r3, [pc, #608]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003126:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800312a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003130:	4a94      	ldr	r2, [pc, #592]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003132:	430b      	orrs	r3, r1
 8003134:	6513      	str	r3, [r2, #80]	@ 0x50
 8003136:	e003      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800313c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800314c:	f04f 0900 	mov.w	r9, #0
 8003150:	ea58 0309 	orrs.w	r3, r8, r9
 8003154:	d047      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	2b04      	cmp	r3, #4
 800315e:	d82a      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800317d 	.word	0x0800317d
 800316c:	0800318b 	.word	0x0800318b
 8003170:	080031a1 	.word	0x080031a1
 8003174:	080031bf 	.word	0x080031bf
 8003178:	080031bf 	.word	0x080031bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800317c:	4b81      	ldr	r3, [pc, #516]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	4a80      	ldr	r2, [pc, #512]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003188:	e01a      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800318a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800318e:	3308      	adds	r3, #8
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f001 f96a 	bl	800446c <RCCEx_PLL2_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800319e:	e00f      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a4:	3328      	adds	r3, #40	@ 0x28
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f001 fa11 	bl	80045d0 <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031b4:	e004      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80031be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031c8:	4b6e      	ldr	r3, [pc, #440]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031cc:	f023 0107 	bic.w	r1, r3, #7
 80031d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031d8:	430b      	orrs	r3, r1
 80031da:	6513      	str	r3, [r2, #80]	@ 0x50
 80031dc:	e003      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80031f2:	f04f 0b00 	mov.w	fp, #0
 80031f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80031fa:	d05b      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80031fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003204:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003208:	d03b      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800320a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800320e:	d834      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003210:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003214:	d037      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003216:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800321a:	d82e      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800321c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003220:	d033      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003222:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003226:	d828      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322c:	d01a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003232:	d822      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003238:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800323c:	d007      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800323e:	e01c      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003240:	4b50      	ldr	r3, [pc, #320]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	4a4f      	ldr	r2, [pc, #316]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800324a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800324c:	e01e      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800324e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003252:	3308      	adds	r3, #8
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f908 	bl	800446c <RCCEx_PLL2_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003262:	e013      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003268:	3328      	adds	r3, #40	@ 0x28
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f9af 	bl	80045d0 <RCCEx_PLL3_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003278:	e008      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003280:	e004      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003282:	bf00      	nop
 8003284:	e002      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003286:	bf00      	nop
 8003288:	e000      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800328a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003294:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800329c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032a4:	4a37      	ldr	r2, [pc, #220]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032aa:	e003      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80032c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80032ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80032ce:	460b      	mov	r3, r1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	d05d      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80032d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032e0:	d03b      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80032e2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032e6:	d834      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032ec:	d037      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80032ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032f2:	d82e      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032f8:	d033      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80032fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032fe:	d828      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003304:	d01a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800330a:	d822      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003314:	d007      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003316:	e01c      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003318:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800331e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003324:	e01e      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800332a:	3308      	adds	r3, #8
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f001 f89c 	bl	800446c <RCCEx_PLL2_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800333a:	e013      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800333c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003340:	3328      	adds	r3, #40	@ 0x28
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f943 	bl	80045d0 <RCCEx_PLL3_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003350:	e008      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003358:	e004      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800335a:	bf00      	nop
 800335c:	e002      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10d      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800336c:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003378:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800337c:	4a01      	ldr	r2, [pc, #4]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800337e:	430b      	orrs	r3, r1
 8003380:	6593      	str	r3, [r2, #88]	@ 0x58
 8003382:	e005      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800338c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800339c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80033a6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4313      	orrs	r3, r2
 80033ae:	d03a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80033b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	2b30      	cmp	r3, #48	@ 0x30
 80033b8:	d01f      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80033ba:	2b30      	cmp	r3, #48	@ 0x30
 80033bc:	d819      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d00c      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d815      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d019      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d111      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ce:	4baa      	ldr	r3, [pc, #680]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d2:	4aa9      	ldr	r2, [pc, #676]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80033da:	e011      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e0:	3308      	adds	r3, #8
 80033e2:	2102      	movs	r1, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 f841 	bl	800446c <RCCEx_PLL2_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033f8:	e002      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80033fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003408:	4b9b      	ldr	r3, [pc, #620]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800340a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	4a98      	ldr	r2, [pc, #608]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003418:	430b      	orrs	r3, r1
 800341a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003422:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003432:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800343c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d051      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003450:	d035      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003456:	d82e      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003458:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800345c:	d031      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800345e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003462:	d828      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003468:	d01a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800346e:	d822      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003478:	d007      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800347a:	e01c      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347c:	4b7e      	ldr	r3, [pc, #504]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	4a7d      	ldr	r2, [pc, #500]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003488:	e01c      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800348a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348e:	3308      	adds	r3, #8
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 ffea 	bl	800446c <RCCEx_PLL2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800349e:	e011      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a4:	3328      	adds	r3, #40	@ 0x28
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 f891 	bl	80045d0 <RCCEx_PLL3_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034b4:	e006      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80034c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034da:	4a67      	ldr	r2, [pc, #412]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034dc:	430b      	orrs	r3, r1
 80034de:	6513      	str	r3, [r2, #80]	@ 0x50
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80034f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003500:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003504:	460b      	mov	r3, r1
 8003506:	4313      	orrs	r3, r2
 8003508:	d053      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800350a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003514:	d033      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003516:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800351a:	d82c      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800351c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003520:	d02f      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003522:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003526:	d826      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003528:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800352c:	d02b      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800352e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003532:	d820      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003538:	d012      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800353a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800353e:	d81a      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d022      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003548:	d115      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800354a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800354e:	3308      	adds	r3, #8
 8003550:	2101      	movs	r1, #1
 8003552:	4618      	mov	r0, r3
 8003554:	f000 ff8a 	bl	800446c <RCCEx_PLL2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800355e:	e015      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003564:	3328      	adds	r3, #40	@ 0x28
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f001 f831 	bl	80045d0 <RCCEx_PLL3_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003574:	e00a      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800357e:	bf00      	nop
 8003580:	e004      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800358a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003594:	4b38      	ldr	r3, [pc, #224]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003598:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a2:	4a35      	ldr	r2, [pc, #212]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80035c8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035cc:	460b      	mov	r3, r1
 80035ce:	4313      	orrs	r3, r2
 80035d0:	d058      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035de:	d033      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80035e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e4:	d82c      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ea:	d02f      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f0:	d826      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035f6:	d02b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80035f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035fc:	d820      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003602:	d012      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003608:	d81a      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d022      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800360e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003612:	d115      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003618:	3308      	adds	r3, #8
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 ff25 	bl	800446c <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003628:	e015      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800362a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362e:	3328      	adds	r3, #40	@ 0x28
 8003630:	2101      	movs	r1, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f000 ffcc 	bl	80045d0 <RCCEx_PLL3_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800363e:	e00a      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003646:	e006      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003648:	bf00      	nop
 800364a:	e004      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800364c:	bf00      	nop
 800364e:	e002      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10e      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800366e:	4a02      	ldr	r2, [pc, #8]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6593      	str	r3, [r2, #88]	@ 0x58
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003676:	bf00      	nop
 8003678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800369a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800369e:	460b      	mov	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	d037      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ae:	d00e      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80036b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036b4:	d816      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d018      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80036ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036be:	d111      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c0:	4bc4      	ldr	r3, [pc, #784]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	4ac3      	ldr	r2, [pc, #780]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036cc:	e00f      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d2:	3308      	adds	r3, #8
 80036d4:	2101      	movs	r1, #1
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fec8 	bl	800446c <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036e2:	e004      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80036ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036f6:	4bb7      	ldr	r3, [pc, #732]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80036fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003704:	4ab3      	ldr	r2, [pc, #716]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003706:	430b      	orrs	r3, r1
 8003708:	6513      	str	r3, [r2, #80]	@ 0x50
 800370a:	e003      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800372a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800372e:	460b      	mov	r3, r1
 8003730:	4313      	orrs	r3, r2
 8003732:	d039      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373a:	2b03      	cmp	r3, #3
 800373c:	d81c      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800373e:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003781 	.word	0x08003781
 8003748:	08003755 	.word	0x08003755
 800374c:	08003763 	.word	0x08003763
 8003750:	08003781 	.word	0x08003781
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003754:	4b9f      	ldr	r3, [pc, #636]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	4a9e      	ldr	r2, [pc, #632]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800375a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003760:	e00f      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003766:	3308      	adds	r3, #8
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fe7e 	bl	800446c <RCCEx_PLL2_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003776:	e004      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800377e:	e000      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800378a:	4b92      	ldr	r3, [pc, #584]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800378c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378e:	f023 0103 	bic.w	r1, r3, #3
 8003792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003798:	4a8e      	ldr	r2, [pc, #568]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800379a:	430b      	orrs	r3, r1
 800379c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800379e:	e003      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80037b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f000 8099 	beq.w	80038fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ca:	4b83      	ldr	r3, [pc, #524]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a82      	ldr	r2, [pc, #520]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037d6:	f7fe f8bf 	bl	8001958 <HAL_GetTick>
 80037da:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037de:	e00b      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7fe f8ba 	bl	8001958 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b64      	cmp	r3, #100	@ 0x64
 80037ee:	d903      	bls.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037f6:	e005      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037f8:	4b77      	ldr	r3, [pc, #476]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ed      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003808:	2b00      	cmp	r3, #0
 800380a:	d173      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800380c:	4b71      	ldr	r3, [pc, #452]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800380e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003818:	4053      	eors	r3, r2
 800381a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d015      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003822:	4b6c      	ldr	r3, [pc, #432]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800382a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800382e:	4b69      	ldr	r3, [pc, #420]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	4a68      	ldr	r2, [pc, #416]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003838:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800383a:	4b66      	ldr	r3, [pc, #408]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383e:	4a65      	ldr	r2, [pc, #404]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003844:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003846:	4a63      	ldr	r2, [pc, #396]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800384c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800384e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800385a:	d118      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f87c 	bl	8001958 <HAL_GetTick>
 8003860:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003864:	e00d      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fe f877 	bl	8001958 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003870:	1ad2      	subs	r2, r2, r3
 8003872:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003876:	429a      	cmp	r2, r3
 8003878:	d903      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003880:	e005      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003882:	4b54      	ldr	r3, [pc, #336]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0eb      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800388e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003892:	2b00      	cmp	r3, #0
 8003894:	d129      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800389a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800389e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a6:	d10e      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80038a8:	4b4a      	ldr	r3, [pc, #296]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80038b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038b8:	091a      	lsrs	r2, r3, #4
 80038ba:	4b48      	ldr	r3, [pc, #288]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80038bc:	4013      	ands	r3, r2
 80038be:	4a45      	ldr	r2, [pc, #276]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6113      	str	r3, [r2, #16]
 80038c4:	e005      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80038c6:	4b43      	ldr	r3, [pc, #268]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	4a42      	ldr	r2, [pc, #264]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038d0:	6113      	str	r3, [r2, #16]
 80038d2:	4b40      	ldr	r3, [pc, #256]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80038d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e2:	4a3c      	ldr	r2, [pc, #240]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e8:	e008      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80038f2:	e003      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80038fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f002 0301 	and.w	r3, r2, #1
 8003908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003912:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	f000 808f 	beq.w	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800391e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003922:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003924:	2b28      	cmp	r3, #40	@ 0x28
 8003926:	d871      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003928:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003a15 	.word	0x08003a15
 8003934:	08003a0d 	.word	0x08003a0d
 8003938:	08003a0d 	.word	0x08003a0d
 800393c:	08003a0d 	.word	0x08003a0d
 8003940:	08003a0d 	.word	0x08003a0d
 8003944:	08003a0d 	.word	0x08003a0d
 8003948:	08003a0d 	.word	0x08003a0d
 800394c:	08003a0d 	.word	0x08003a0d
 8003950:	080039e1 	.word	0x080039e1
 8003954:	08003a0d 	.word	0x08003a0d
 8003958:	08003a0d 	.word	0x08003a0d
 800395c:	08003a0d 	.word	0x08003a0d
 8003960:	08003a0d 	.word	0x08003a0d
 8003964:	08003a0d 	.word	0x08003a0d
 8003968:	08003a0d 	.word	0x08003a0d
 800396c:	08003a0d 	.word	0x08003a0d
 8003970:	080039f7 	.word	0x080039f7
 8003974:	08003a0d 	.word	0x08003a0d
 8003978:	08003a0d 	.word	0x08003a0d
 800397c:	08003a0d 	.word	0x08003a0d
 8003980:	08003a0d 	.word	0x08003a0d
 8003984:	08003a0d 	.word	0x08003a0d
 8003988:	08003a0d 	.word	0x08003a0d
 800398c:	08003a0d 	.word	0x08003a0d
 8003990:	08003a15 	.word	0x08003a15
 8003994:	08003a0d 	.word	0x08003a0d
 8003998:	08003a0d 	.word	0x08003a0d
 800399c:	08003a0d 	.word	0x08003a0d
 80039a0:	08003a0d 	.word	0x08003a0d
 80039a4:	08003a0d 	.word	0x08003a0d
 80039a8:	08003a0d 	.word	0x08003a0d
 80039ac:	08003a0d 	.word	0x08003a0d
 80039b0:	08003a15 	.word	0x08003a15
 80039b4:	08003a0d 	.word	0x08003a0d
 80039b8:	08003a0d 	.word	0x08003a0d
 80039bc:	08003a0d 	.word	0x08003a0d
 80039c0:	08003a0d 	.word	0x08003a0d
 80039c4:	08003a0d 	.word	0x08003a0d
 80039c8:	08003a0d 	.word	0x08003a0d
 80039cc:	08003a0d 	.word	0x08003a0d
 80039d0:	08003a15 	.word	0x08003a15
 80039d4:	58024400 	.word	0x58024400
 80039d8:	58024800 	.word	0x58024800
 80039dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e4:	3308      	adds	r3, #8
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fd3f 	bl	800446c <RCCEx_PLL2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039f4:	e00f      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fa:	3328      	adds	r3, #40	@ 0x28
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fde6 	bl	80045d0 <RCCEx_PLL3_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a0a:	e004      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a12:	e000      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a1e:	4bbf      	ldr	r3, [pc, #764]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a2c:	4abb      	ldr	r2, [pc, #748]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f002 0302 	and.w	r3, r2, #2
 8003a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	d041      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d824      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003a66:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003ab9 	.word	0x08003ab9
 8003a70:	08003a85 	.word	0x08003a85
 8003a74:	08003a9b 	.word	0x08003a9b
 8003a78:	08003ab9 	.word	0x08003ab9
 8003a7c:	08003ab9 	.word	0x08003ab9
 8003a80:	08003ab9 	.word	0x08003ab9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a88:	3308      	adds	r3, #8
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fced 	bl	800446c <RCCEx_PLL2_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a98:	e00f      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9e:	3328      	adds	r3, #40	@ 0x28
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fd94 	bl	80045d0 <RCCEx_PLL3_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ac2:	4b96      	ldr	r3, [pc, #600]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac6:	f023 0107 	bic.w	r1, r3, #7
 8003aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad0:	4a92      	ldr	r2, [pc, #584]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f002 0304 	and.w	r3, r2, #4
 8003aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003af6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d044      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d825      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b61 	.word	0x08003b61
 8003b18:	08003b2d 	.word	0x08003b2d
 8003b1c:	08003b43 	.word	0x08003b43
 8003b20:	08003b61 	.word	0x08003b61
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003b61 	.word	0x08003b61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b30:	3308      	adds	r3, #8
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fc99 	bl	800446c <RCCEx_PLL2_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b40:	e00f      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b46:	3328      	adds	r3, #40	@ 0x28
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fd40 	bl	80045d0 <RCCEx_PLL3_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f023 0107 	bic.w	r1, r3, #7
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7a:	4a68      	ldr	r2, [pc, #416]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f002 0320 	and.w	r3, r2, #32
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ba0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d055      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb6:	d033      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bbc:	d82c      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc2:	d02f      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc8:	d826      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bce:	d02b      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003bd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bd4:	d820      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bda:	d012      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be0:	d81a      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d022      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bea:	d115      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fc39 	bl	800446c <RCCEx_PLL2_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c00:	e015      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c06:	3328      	adds	r3, #40	@ 0x28
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fce0 	bl	80045d0 <RCCEx_PLL3_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c16:	e00a      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c1e:	e006      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c20:	bf00      	nop
 8003c22:	e004      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c24:	bf00      	nop
 8003c26:	e002      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c36:	4b39      	ldr	r3, [pc, #228]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c46:	4a35      	ldr	r2, [pc, #212]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003c62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c6c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d058      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c7e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c82:	d033      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003c84:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c88:	d82c      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8e:	d02f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c94:	d826      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c9a:	d02b      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ca0:	d820      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca6:	d012      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cac:	d81a      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d022      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb6:	d115      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fbd3 	bl	800446c <RCCEx_PLL2_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e015      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd2:	3328      	adds	r3, #40	@ 0x28
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fc7a 	bl	80045d0 <RCCEx_PLL3_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cea:	e006      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cec:	bf00      	nop
 8003cee:	e004      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cf0:	bf00      	nop
 8003cf2:	e002      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10e      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d06:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d12:	4a02      	ldr	r2, [pc, #8]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d18:	e006      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003d1a:	bf00      	nop
 8003d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d055      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d50:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d54:	d033      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003d56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d5a:	d82c      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d60:	d02f      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d66:	d826      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d68:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d6c:	d02b      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003d6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d72:	d820      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d78:	d012      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d7e:	d81a      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d022      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d88:	d115      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d8e:	3308      	adds	r3, #8
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fb6a 	bl	800446c <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d9e:	e015      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da4:	3328      	adds	r3, #40	@ 0x28
 8003da6:	2102      	movs	r1, #2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fc11 	bl	80045d0 <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003db4:	e00a      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dbc:	e006      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e004      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003dc2:	bf00      	nop
 8003dc4:	e002      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10b      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003dd4:	4ba0      	ldr	r3, [pc, #640]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003de4:	4a9c      	ldr	r2, [pc, #624]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dea:	e003      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003df0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 0308 	and.w	r3, r2, #8
 8003e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e0a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d01e      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	3328      	adds	r3, #40	@ 0x28
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fbd0 	bl	80045d0 <RCCEx_PLL3_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003e3c:	4b86      	ldr	r3, [pc, #536]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e4c:	4a82      	ldr	r2, [pc, #520]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f002 0310 	and.w	r3, r2, #16
 8003e5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e68:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	d01e      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7e:	d10c      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e84:	3328      	adds	r3, #40	@ 0x28
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fba1 	bl	80045d0 <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eaa:	4a6b      	ldr	r2, [pc, #428]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ec2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	d03e      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ed8:	d022      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ede:	d81b      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee8:	d00b      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003eea:	e015      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fab9 	bl	800446c <RCCEx_PLL2_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f00:	e00f      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f06:	3328      	adds	r3, #40	@ 0x28
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fb60 	bl	80045d0 <RCCEx_PLL3_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f3a:	4a47      	ldr	r2, [pc, #284]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f56:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f58:	2300      	movs	r3, #0
 8003f5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d03b      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f72:	d01f      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003f74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f78:	d818      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7e:	d003      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003f80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f84:	d007      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003f86:	e011      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f88:	4b33      	ldr	r3, [pc, #204]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	4a32      	ldr	r2, [pc, #200]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f94:	e00f      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f9a:	3328      	adds	r3, #40	@ 0x28
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fb16 	bl	80045d0 <RCCEx_PLL3_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fbe:	4b26      	ldr	r3, [pc, #152]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fce:	4a22      	ldr	r2, [pc, #136]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003fea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fec:	2300      	movs	r3, #0
 8003fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ff0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	d034      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004008:	d007      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800400a:	e011      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800400c:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	4a11      	ldr	r2, [pc, #68]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004018:	e00e      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800401a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401e:	3308      	adds	r3, #8
 8004020:	2102      	movs	r1, #2
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fa22 	bl	800446c <RCCEx_PLL2_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800402e:	e003      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10d      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004040:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004044:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404e:	4a02      	ldr	r2, [pc, #8]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004050:	430b      	orrs	r3, r1
 8004052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004056:	bf00      	nop
 8004058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004070:	663b      	str	r3, [r7, #96]	@ 0x60
 8004072:	2300      	movs	r3, #0
 8004074:	667b      	str	r3, [r7, #100]	@ 0x64
 8004076:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d00c      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004084:	3328      	adds	r3, #40	@ 0x28
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 faa1 	bl	80045d0 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80040a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040a8:	2300      	movs	r3, #0
 80040aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80040b0:	460b      	mov	r3, r1
 80040b2:	4313      	orrs	r3, r2
 80040b4:	d036      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80040b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040c0:	d018      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80040c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040c6:	d811      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80040c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040cc:	d014      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80040ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d2:	d80b      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d011      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040dc:	d106      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040de:	4bb7      	ldr	r3, [pc, #732]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	4ab6      	ldr	r2, [pc, #728]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80040ea:	e008      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040f4:	bf00      	nop
 80040f6:	e002      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004106:	4bad      	ldr	r3, [pc, #692]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800410e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004114:	4aa9      	ldr	r2, [pc, #676]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004116:	430b      	orrs	r3, r1
 8004118:	6553      	str	r3, [r2, #84]	@ 0x54
 800411a:	e003      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004120:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004130:	653b      	str	r3, [r7, #80]	@ 0x50
 8004132:	2300      	movs	r3, #0
 8004134:	657b      	str	r3, [r7, #84]	@ 0x54
 8004136:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800413a:	460b      	mov	r3, r1
 800413c:	4313      	orrs	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004140:	4b9e      	ldr	r3, [pc, #632]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004144:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414e:	4a9b      	ldr	r2, [pc, #620]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004150:	430b      	orrs	r3, r1
 8004152:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004162:	2300      	movs	r3, #0
 8004164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004166:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004170:	4b92      	ldr	r3, [pc, #584]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004174:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800417e:	4a8f      	ldr	r2, [pc, #572]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004190:	643b      	str	r3, [r7, #64]	@ 0x40
 8004192:	2300      	movs	r3, #0
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
 8004196:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800419a:	460b      	mov	r3, r1
 800419c:	4313      	orrs	r3, r2
 800419e:	d00e      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041a0:	4b86      	ldr	r3, [pc, #536]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4a85      	ldr	r2, [pc, #532]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041aa:	6113      	str	r3, [r2, #16]
 80041ac:	4b83      	ldr	r3, [pc, #524]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ae:	6919      	ldr	r1, [r3, #16]
 80041b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041b8:	4a80      	ldr	r2, [pc, #512]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ba:	430b      	orrs	r3, r1
 80041bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80041ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041cc:	2300      	movs	r3, #0
 80041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041da:	4b78      	ldr	r3, [pc, #480]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e8:	4a74      	ldr	r2, [pc, #464]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ea:	430b      	orrs	r3, r1
 80041ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80041fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80041fc:	2300      	movs	r3, #0
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004200:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004204:	460b      	mov	r3, r1
 8004206:	4313      	orrs	r3, r2
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800420a:	4b6c      	ldr	r3, [pc, #432]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421a:	4a68      	ldr	r2, [pc, #416]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800421c:	430b      	orrs	r3, r1
 800421e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	2100      	movs	r1, #0
 800422a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004232:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004236:	460b      	mov	r3, r1
 8004238:	4313      	orrs	r3, r2
 800423a:	d011      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004240:	3308      	adds	r3, #8
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f911 	bl	800446c <RCCEx_PLL2_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800425c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	2100      	movs	r1, #0
 800426a:	6239      	str	r1, [r7, #32]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
 8004272:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	d011      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800427c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004280:	3308      	adds	r3, #8
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f8f1 	bl	800446c <RCCEx_PLL2_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800429c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	2100      	movs	r1, #0
 80042aa:	61b9      	str	r1, [r7, #24]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d011      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c0:	3308      	adds	r3, #8
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f8d1 	bl	800446c <RCCEx_PLL2_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80042e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	2100      	movs	r1, #0
 80042ea:	6139      	str	r1, [r7, #16]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042f6:	460b      	mov	r3, r1
 80042f8:	4313      	orrs	r3, r2
 80042fa:	d011      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004300:	3328      	adds	r3, #40	@ 0x28
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f963 	bl	80045d0 <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800431c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	2100      	movs	r1, #0
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d011      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004340:	3328      	adds	r3, #40	@ 0x28
 8004342:	2101      	movs	r1, #1
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f943 	bl	80045d0 <RCCEx_PLL3_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800435c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	2100      	movs	r1, #0
 800436a:	6039      	str	r1, [r7, #0]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d011      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800437c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004380:	3328      	adds	r3, #40	@ 0x28
 8004382:	2102      	movs	r1, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 f923 	bl	80045d0 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800439c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80043a0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ba:	bf00      	nop
 80043bc:	58024400 	.word	0x58024400

080043c0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80043c8:	4b26      	ldr	r3, [pc, #152]	@ (8004464 <HAL_RCCEx_CRSConfig+0xa4>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ce:	4a25      	ldr	r2, [pc, #148]	@ (8004464 <HAL_RCCEx_CRSConfig+0xa4>)
 80043d0:	f043 0302 	orr.w	r3, r3, #2
 80043d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80043d8:	4b22      	ldr	r3, [pc, #136]	@ (8004464 <HAL_RCCEx_CRSConfig+0xa4>)
 80043da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043de:	4a21      	ldr	r2, [pc, #132]	@ (8004464 <HAL_RCCEx_CRSConfig+0xa4>)
 80043e0:	f023 0302 	bic.w	r3, r3, #2
 80043e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80043e8:	f7fd fac2 	bl	8001970 <HAL_GetREVID>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d80b      	bhi.n	800440e <HAL_RCCEx_CRSConfig+0x4e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043fe:	d106      	bne.n	800440e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e008      	b.n	8004420 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004436:	4a0c      	ldr	r2, [pc, #48]	@ (8004468 <HAL_RCCEx_CRSConfig+0xa8>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800443c:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <HAL_RCCEx_CRSConfig+0xa8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	4907      	ldr	r1, [pc, #28]	@ (8004468 <HAL_RCCEx_CRSConfig+0xa8>)
 800444c:	4313      	orrs	r3, r2
 800444e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <HAL_RCCEx_CRSConfig+0xa8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a04      	ldr	r2, [pc, #16]	@ (8004468 <HAL_RCCEx_CRSConfig+0xa8>)
 8004456:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	58024400 	.word	0x58024400
 8004468:	40008400 	.word	0x40008400

0800446c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800447a:	4b53      	ldr	r3, [pc, #332]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b03      	cmp	r3, #3
 8004484:	d101      	bne.n	800448a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e099      	b.n	80045be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800448a:	4b4f      	ldr	r3, [pc, #316]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4e      	ldr	r2, [pc, #312]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004490:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004496:	f7fd fa5f 	bl	8001958 <HAL_GetTick>
 800449a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800449c:	e008      	b.n	80044b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800449e:	f7fd fa5b 	bl	8001958 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e086      	b.n	80045be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044b0:	4b45      	ldr	r3, [pc, #276]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044bc:	4b42      	ldr	r3, [pc, #264]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	493f      	ldr	r1, [pc, #252]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	3b01      	subs	r3, #1
 80044e0:	025b      	lsls	r3, r3, #9
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004500:	4931      	ldr	r1, [pc, #196]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004506:	4b30      	ldr	r3, [pc, #192]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	492d      	ldr	r1, [pc, #180]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004514:	4313      	orrs	r3, r2
 8004516:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004518:	4b2b      	ldr	r3, [pc, #172]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	f023 0220 	bic.w	r2, r3, #32
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4928      	ldr	r1, [pc, #160]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004526:	4313      	orrs	r3, r2
 8004528:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800452a:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	4a26      	ldr	r2, [pc, #152]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004530:	f023 0310 	bic.w	r3, r3, #16
 8004534:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004536:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004538:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800453a:	4b24      	ldr	r3, [pc, #144]	@ (80045cc <RCCEx_PLL2_Config+0x160>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	69d2      	ldr	r2, [r2, #28]
 8004542:	00d2      	lsls	r2, r2, #3
 8004544:	4920      	ldr	r1, [pc, #128]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004546:	4313      	orrs	r3, r2
 8004548:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800454a:	4b1f      	ldr	r3, [pc, #124]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	4a1e      	ldr	r2, [pc, #120]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004550:	f043 0310 	orr.w	r3, r3, #16
 8004554:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800455c:	4b1a      	ldr	r3, [pc, #104]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	4a19      	ldr	r2, [pc, #100]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004562:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004566:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004568:	e00f      	b.n	800458a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d106      	bne.n	800457e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004570:	4b15      	ldr	r3, [pc, #84]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800457c:	e005      	b.n	800458a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800457e:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	4a11      	ldr	r2, [pc, #68]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004588:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800458a:	4b0f      	ldr	r3, [pc, #60]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a0e      	ldr	r2, [pc, #56]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 8004590:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004596:	f7fd f9df 	bl	8001958 <HAL_GetTick>
 800459a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800459c:	e008      	b.n	80045b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800459e:	f7fd f9db 	bl	8001958 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e006      	b.n	80045be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <RCCEx_PLL2_Config+0x15c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	58024400 	.word	0x58024400
 80045cc:	ffff0007 	.word	0xffff0007

080045d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045de:	4b53      	ldr	r3, [pc, #332]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d101      	bne.n	80045ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e099      	b.n	8004722 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045ee:	4b4f      	ldr	r3, [pc, #316]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a4e      	ldr	r2, [pc, #312]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80045f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fa:	f7fd f9ad 	bl	8001958 <HAL_GetTick>
 80045fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004600:	e008      	b.n	8004614 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004602:	f7fd f9a9 	bl	8001958 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e086      	b.n	8004722 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004614:	4b45      	ldr	r3, [pc, #276]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f0      	bne.n	8004602 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004620:	4b42      	ldr	r3, [pc, #264]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	051b      	lsls	r3, r3, #20
 800462e:	493f      	ldr	r1, [pc, #252]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	628b      	str	r3, [r1, #40]	@ 0x28
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	3b01      	subs	r3, #1
 800463a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	025b      	lsls	r3, r3, #9
 8004646:	b29b      	uxth	r3, r3
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	3b01      	subs	r3, #1
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	3b01      	subs	r3, #1
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004664:	4931      	ldr	r1, [pc, #196]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800466a:	4b30      	ldr	r3, [pc, #192]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	492d      	ldr	r1, [pc, #180]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800467c:	4b2b      	ldr	r3, [pc, #172]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	4928      	ldr	r1, [pc, #160]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800468e:	4b27      	ldr	r3, [pc, #156]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	4a26      	ldr	r2, [pc, #152]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 8004694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004698:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 800469c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800469e:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <RCCEx_PLL3_Config+0x160>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	69d2      	ldr	r2, [r2, #28]
 80046a6:	00d2      	lsls	r2, r2, #3
 80046a8:	4920      	ldr	r1, [pc, #128]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046ae:	4b1f      	ldr	r3, [pc, #124]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	4a1e      	ldr	r2, [pc, #120]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046c0:	4b1a      	ldr	r3, [pc, #104]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	4a19      	ldr	r2, [pc, #100]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046cc:	e00f      	b.n	80046ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046d4:	4b15      	ldr	r3, [pc, #84]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	4a14      	ldr	r2, [pc, #80]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046e0:	e005      	b.n	80046ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046e2:	4b12      	ldr	r3, [pc, #72]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	4a11      	ldr	r2, [pc, #68]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046ee:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fa:	f7fd f92d 	bl	8001958 <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004700:	e008      	b.n	8004714 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004702:	f7fd f929 	bl	8001958 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004714:	4b05      	ldr	r3, [pc, #20]	@ (800472c <RCCEx_PLL3_Config+0x15c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	58024400 	.word	0x58024400
 8004730:	ffff0007 	.word	0xffff0007

08004734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e049      	b.n	80047da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fc ff4a 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4610      	mov	r0, r2
 8004774:	f000 fae4 	bl	8004d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d001      	beq.n	80047fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e05e      	b.n	80048ba <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a2b      	ldr	r2, [pc, #172]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02c      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004826:	d027      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a27      	ldr	r2, [pc, #156]	@ (80048cc <HAL_TIM_Base_Start_IT+0xe8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a26      	ldr	r2, [pc, #152]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xec>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d01d      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a24      	ldr	r2, [pc, #144]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xf0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a23      	ldr	r2, [pc, #140]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xf4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <HAL_TIM_Base_Start_IT+0xf8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a20      	ldr	r2, [pc, #128]	@ (80048e0 <HAL_TIM_Base_Start_IT+0xfc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1e      	ldr	r2, [pc, #120]	@ (80048e4 <HAL_TIM_Base_Start_IT+0x100>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x94>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <HAL_TIM_Base_Start_IT+0x104>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d115      	bne.n	80048a4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	4b1b      	ldr	r3, [pc, #108]	@ (80048ec <HAL_TIM_Base_Start_IT+0x108>)
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d015      	beq.n	80048b6 <HAL_TIM_Base_Start_IT+0xd2>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004890:	d011      	beq.n	80048b6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	e008      	b.n	80048b6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40010400 	.word	0x40010400
 80048dc:	40001800 	.word	0x40001800
 80048e0:	40014000 	.word	0x40014000
 80048e4:	4000e000 	.word	0x4000e000
 80048e8:	4000e400 	.word	0x4000e400
 80048ec:	00010007 	.word	0x00010007

080048f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d020      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0202 	mvn.w	r2, #2
 8004924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9e2 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9d4 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f9e5 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9bc 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9ae 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f9bf 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d020      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0208 	mvn.w	r2, #8
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2204      	movs	r2, #4
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f996 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f988 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f999 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d020      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f970 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f962 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f973 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0201 	mvn.w	r2, #1
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fb fc5a 	bl	8000310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fb51 	bl	800512c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00c      	beq.n	8004aae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fb49 	bl	8005140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00c      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f92d 	bl	8004d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0220 	mvn.w	r2, #32
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fb11 	bl	8005118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_TIM_ConfigClockSource+0x1c>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e0dc      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x1d6>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a64      	ldr	r2, [pc, #400]	@ (8004ce4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	f000 80a9 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004b58:	4a62      	ldr	r2, [pc, #392]	@ (8004ce4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	f200 80ae 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004b60:	4a61      	ldr	r2, [pc, #388]	@ (8004ce8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f000 80a1 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004b68:	4a5f      	ldr	r2, [pc, #380]	@ (8004ce8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	f200 80a6 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004b70:	4a5e      	ldr	r2, [pc, #376]	@ (8004cec <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	f000 8099 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004b78:	4a5c      	ldr	r2, [pc, #368]	@ (8004cec <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f200 809e 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004b80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b84:	f000 8091 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004b88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b8c:	f200 8096 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b94:	f000 8089 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b9c:	f200 808e 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba4:	d03e      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0x124>
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004baa:	f200 8087 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb2:	f000 8086 	beq.w	8004cc2 <HAL_TIM_ConfigClockSource+0x1c2>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bba:	d87f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004bbc:	2b70      	cmp	r3, #112	@ 0x70
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0xf6>
 8004bc0:	2b70      	cmp	r3, #112	@ 0x70
 8004bc2:	d87b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004bc4:	2b60      	cmp	r3, #96	@ 0x60
 8004bc6:	d050      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x16a>
 8004bc8:	2b60      	cmp	r3, #96	@ 0x60
 8004bca:	d877      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004bcc:	2b50      	cmp	r3, #80	@ 0x50
 8004bce:	d03c      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x14a>
 8004bd0:	2b50      	cmp	r3, #80	@ 0x50
 8004bd2:	d873      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004bd4:	2b40      	cmp	r3, #64	@ 0x40
 8004bd6:	d058      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x18a>
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d86f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004bdc:	2b30      	cmp	r3, #48	@ 0x30
 8004bde:	d064      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004be0:	2b30      	cmp	r3, #48	@ 0x30
 8004be2:	d86b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d060      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d867      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05c      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d05a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x1aa>
 8004bf4:	e062      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c06:	f000 f9cb 	bl	8004fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	609a      	str	r2, [r3, #8]
      break;
 8004c22:	e04f      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c34:	f000 f9b4 	bl	8004fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c46:	609a      	str	r2, [r3, #8]
      break;
 8004c48:	e03c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 f924 	bl	8004ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2150      	movs	r1, #80	@ 0x50
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f97e 	bl	8004f64 <TIM_ITRx_SetConfig>
      break;
 8004c68:	e02c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 f943 	bl	8004f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2160      	movs	r1, #96	@ 0x60
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f96e 	bl	8004f64 <TIM_ITRx_SetConfig>
      break;
 8004c88:	e01c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 f904 	bl	8004ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2140      	movs	r1, #64	@ 0x40
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f95e 	bl	8004f64 <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e00c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f000 f955 	bl	8004f64 <TIM_ITRx_SetConfig>
      break;
 8004cba:	e003      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc0:	e000      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	ffceff88 	.word	0xffceff88
 8004ce4:	00100040 	.word	0x00100040
 8004ce8:	00100030 	.word	0x00100030
 8004cec:	00100020 	.word	0x00100020

08004cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a4a      	ldr	r2, [pc, #296]	@ (8004e7c <TIM_Base_SetConfig+0x13c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5e:	d00f      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a47      	ldr	r2, [pc, #284]	@ (8004e80 <TIM_Base_SetConfig+0x140>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a46      	ldr	r2, [pc, #280]	@ (8004e84 <TIM_Base_SetConfig+0x144>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a45      	ldr	r2, [pc, #276]	@ (8004e88 <TIM_Base_SetConfig+0x148>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a44      	ldr	r2, [pc, #272]	@ (8004e8c <TIM_Base_SetConfig+0x14c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a39      	ldr	r2, [pc, #228]	@ (8004e7c <TIM_Base_SetConfig+0x13c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d027      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da0:	d023      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a36      	ldr	r2, [pc, #216]	@ (8004e80 <TIM_Base_SetConfig+0x140>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a35      	ldr	r2, [pc, #212]	@ (8004e84 <TIM_Base_SetConfig+0x144>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01b      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a34      	ldr	r2, [pc, #208]	@ (8004e88 <TIM_Base_SetConfig+0x148>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d017      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a33      	ldr	r2, [pc, #204]	@ (8004e8c <TIM_Base_SetConfig+0x14c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a32      	ldr	r2, [pc, #200]	@ (8004e90 <TIM_Base_SetConfig+0x150>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a31      	ldr	r2, [pc, #196]	@ (8004e94 <TIM_Base_SetConfig+0x154>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a30      	ldr	r2, [pc, #192]	@ (8004e98 <TIM_Base_SetConfig+0x158>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8004e9c <TIM_Base_SetConfig+0x15c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_Base_SetConfig+0xaa>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ea0 <TIM_Base_SetConfig+0x160>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <TIM_Base_SetConfig+0x13c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00f      	beq.n	8004e48 <TIM_Base_SetConfig+0x108>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a18      	ldr	r2, [pc, #96]	@ (8004e8c <TIM_Base_SetConfig+0x14c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00b      	beq.n	8004e48 <TIM_Base_SetConfig+0x108>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <TIM_Base_SetConfig+0x150>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d007      	beq.n	8004e48 <TIM_Base_SetConfig+0x108>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <TIM_Base_SetConfig+0x154>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0x108>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a15      	ldr	r2, [pc, #84]	@ (8004e98 <TIM_Base_SetConfig+0x158>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d103      	bne.n	8004e50 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]
  }
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40010400 	.word	0x40010400
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40014400 	.word	0x40014400
 8004e98:	40014800 	.word	0x40014800
 8004e9c:	4000e000 	.word	0x4000e000
 8004ea0:	4000e400 	.word	0x4000e400

08004ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0201 	bic.w	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 030a 	bic.w	r3, r3, #10
 8004ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b087      	sub	sp, #28
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f023 0210 	bic.w	r2, r3, #16
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	031b      	lsls	r3, r3, #12
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <TIM_ITRx_SetConfig+0x38>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f043 0307 	orr.w	r3, r3, #7
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	609a      	str	r2, [r3, #8]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	ffcfff8f 	.word	0xffcfff8f

08004fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e077      	b.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a35      	ldr	r2, [pc, #212]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a34      	ldr	r2, [pc, #208]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005032:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005044:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a25      	ldr	r2, [pc, #148]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02c      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506a:	d027      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a22      	ldr	r2, [pc, #136]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a21      	ldr	r2, [pc, #132]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d01d      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1a      	ldr	r2, [pc, #104]	@ (800510c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a18      	ldr	r2, [pc, #96]	@ (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a17      	ldr	r2, [pc, #92]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40010400 	.word	0x40010400
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40001800 	.word	0x40001800
 800510c:	40014000 	.word	0x40014000
 8005110:	4000e000 	.word	0x4000e000
 8005114:	4000e400 	.word	0x4000e400

08005118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <memset>:
 8005154:	4402      	add	r2, r0
 8005156:	4603      	mov	r3, r0
 8005158:	4293      	cmp	r3, r2
 800515a:	d100      	bne.n	800515e <memset+0xa>
 800515c:	4770      	bx	lr
 800515e:	f803 1b01 	strb.w	r1, [r3], #1
 8005162:	e7f9      	b.n	8005158 <memset+0x4>

08005164 <__libc_init_array>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4d0d      	ldr	r5, [pc, #52]	@ (800519c <__libc_init_array+0x38>)
 8005168:	4c0d      	ldr	r4, [pc, #52]	@ (80051a0 <__libc_init_array+0x3c>)
 800516a:	1b64      	subs	r4, r4, r5
 800516c:	10a4      	asrs	r4, r4, #2
 800516e:	2600      	movs	r6, #0
 8005170:	42a6      	cmp	r6, r4
 8005172:	d109      	bne.n	8005188 <__libc_init_array+0x24>
 8005174:	4d0b      	ldr	r5, [pc, #44]	@ (80051a4 <__libc_init_array+0x40>)
 8005176:	4c0c      	ldr	r4, [pc, #48]	@ (80051a8 <__libc_init_array+0x44>)
 8005178:	f000 f85c 	bl	8005234 <_init>
 800517c:	1b64      	subs	r4, r4, r5
 800517e:	10a4      	asrs	r4, r4, #2
 8005180:	2600      	movs	r6, #0
 8005182:	42a6      	cmp	r6, r4
 8005184:	d105      	bne.n	8005192 <__libc_init_array+0x2e>
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	f855 3b04 	ldr.w	r3, [r5], #4
 800518c:	4798      	blx	r3
 800518e:	3601      	adds	r6, #1
 8005190:	e7ee      	b.n	8005170 <__libc_init_array+0xc>
 8005192:	f855 3b04 	ldr.w	r3, [r5], #4
 8005196:	4798      	blx	r3
 8005198:	3601      	adds	r6, #1
 800519a:	e7f2      	b.n	8005182 <__libc_init_array+0x1e>
 800519c:	0800525c 	.word	0x0800525c
 80051a0:	0800525c 	.word	0x0800525c
 80051a4:	0800525c 	.word	0x0800525c
 80051a8:	08005260 	.word	0x08005260

080051ac <round>:
 80051ac:	ee10 3a90 	vmov	r3, s1
 80051b0:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80051b4:	f2a1 32ff 	subw	r2, r1, #1023	@ 0x3ff
 80051b8:	2a13      	cmp	r2, #19
 80051ba:	b510      	push	{r4, lr}
 80051bc:	ee10 4a10 	vmov	r4, s0
 80051c0:	dc1d      	bgt.n	80051fe <round+0x52>
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	da0d      	bge.n	80051e2 <round+0x36>
 80051c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ca:	3201      	adds	r2, #1
 80051cc:	bf04      	itt	eq
 80051ce:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80051d2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80051d6:	2200      	movs	r2, #0
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	ec41 0b10 	vmov	d0, r0, r1
 80051e0:	e014      	b.n	800520c <round+0x60>
 80051e2:	4813      	ldr	r0, [pc, #76]	@ (8005230 <round+0x84>)
 80051e4:	4110      	asrs	r0, r2
 80051e6:	ea00 0103 	and.w	r1, r0, r3
 80051ea:	4321      	orrs	r1, r4
 80051ec:	d00e      	beq.n	800520c <round+0x60>
 80051ee:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80051f2:	fa41 f202 	asr.w	r2, r1, r2
 80051f6:	4413      	add	r3, r2
 80051f8:	ea23 0300 	bic.w	r3, r3, r0
 80051fc:	e7eb      	b.n	80051d6 <round+0x2a>
 80051fe:	2a33      	cmp	r2, #51	@ 0x33
 8005200:	dd05      	ble.n	800520e <round+0x62>
 8005202:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005206:	d101      	bne.n	800520c <round+0x60>
 8005208:	ee30 0b00 	vadd.f64	d0, d0, d0
 800520c:	bd10      	pop	{r4, pc}
 800520e:	f2a1 4113 	subw	r1, r1, #1043	@ 0x413
 8005212:	f04f 30ff 	mov.w	r0, #4294967295
 8005216:	40c8      	lsrs	r0, r1
 8005218:	4220      	tst	r0, r4
 800521a:	d0f7      	beq.n	800520c <round+0x60>
 800521c:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8005220:	2201      	movs	r2, #1
 8005222:	408a      	lsls	r2, r1
 8005224:	1912      	adds	r2, r2, r4
 8005226:	bf28      	it	cs
 8005228:	3301      	addcs	r3, #1
 800522a:	ea22 0200 	bic.w	r2, r2, r0
 800522e:	e7d3      	b.n	80051d8 <round+0x2c>
 8005230:	000fffff 	.word	0x000fffff

08005234 <_init>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	bf00      	nop
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr

08005240 <_fini>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr
